

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Apr 20 15:03:11 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18LF27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  0136C2                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _asciiTemp
    88  0136C2  20                 	db	32
    89  0136C3  20                 	db	32
    90  0136C4  20                 	db	32
    91  0136C5  20                 	db	32
    92  0136C6  20                 	db	32
    93                           
    94                           	psect	idataBANK0
    95  0136CC                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _isCommandSent
    99  0136CC  01                 	db	1
   100                           
   101                           	psect	idataBANK1
   102  013686                     __pidataBANK1:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _temp_display_message
   106  013686  50                 	db	80
   107  013687  69                 	db	105
   108  013688  70                 	db	112
   109  013689  65                 	db	101
   110  01368A  20                 	db	32
   111  01368B  74                 	db	116
   112  01368C  65                 	db	101
   113  01368D  6D                 	db	109
   114  01368E  70                 	db	112
   115  01368F  20                 	db	32
   116  013690  3D                 	db	61
   117  013691  20                 	db	32
   118  013692  20                 	db	32
   119  013693  20                 	db	32
   120  013694  20                 	db	32
   121  013695  20                 	db	32
   122  013696  20                 	db	32
   123  013697  0D                 	db	13
   124  013698  0A                 	db	10
   125  013699  00                 	db	0
   126                           
   127                           	psect	mediumconst
   128  00FE08                     __pmediumconst:
   129                           	opt stack 0
   130  00FE08  00                 	db	0
   131  00FE09                     _dpowers:
   132                           	opt stack 0
   133  00FE09  0001               	dw	1
   134  00FE0B  0000               	dw	0
   135  00FE0D  000A               	dw	10
   136  00FE0F  0000               	dw	0
   137  00FE11  0064               	dw	100
   138  00FE13  0000               	dw	0
   139  00FE15  03E8               	dw	1000
   140  00FE17  0000               	dw	0
   141  00FE19  2710               	dw	10000
   142  00FE1B  0000               	dw	0
   143  00FE1D  86A0               	dw	34464
   144  00FE1F  0001               	dw	1
   145  00FE21  4240               	dw	16960
   146  00FE23  000F               	dw	15
   147  00FE25  9680               	dw	38528
   148  00FE27  0098               	dw	152
   149  00FE29  E100               	dw	57600
   150  00FE2B  05F5               	dw	1525
   151  00FE2D  CA00               	dw	51712
   152  00FE2F  3B9A               	dw	15258
   153  00FE31                     __end_of_dpowers:
   154                           	opt stack 0
   155  00FE31                     __npowers_:
   156                           	opt stack 0
   157  00FE31  00                 	db	0
   158  00FE32  80                 	db	128
   159  00FE33  3F                 	db	63
   160  00FE34  CD                 	db	205
   161  00FE35  CC                 	db	204
   162  00FE36  3D                 	db	61
   163  00FE37  D7                 	db	215
   164  00FE38  23                 	db	35
   165  00FE39  3C                 	db	60
   166  00FE3A  12                 	db	18
   167  00FE3B  83                 	db	131
   168  00FE3C  3A                 	db	58
   169  00FE3D  B7                 	db	183
   170  00FE3E  D1                 	db	209
   171  00FE3F  38                 	db	56
   172  00FE40  C6                 	db	198
   173  00FE41  27                 	db	39
   174  00FE42  37                 	db	55
   175  00FE43  38                 	db	56
   176  00FE44  86                 	db	134
   177  00FE45  35                 	db	53
   178  00FE46  C0                 	db	192
   179  00FE47  D6                 	db	214
   180  00FE48  33                 	db	51
   181  00FE49  CC                 	db	204
   182  00FE4A  2B                 	db	43
   183  00FE4B  32                 	db	50
   184  00FE4C  70                 	db	112
   185  00FE4D  89                 	db	137
   186  00FE4E  30                 	db	48
   187  00FE4F  E7                 	db	231
   188  00FE50  DB                 	db	219
   189  00FE51  2E                 	db	46
   190  00FE52  E5                 	db	229
   191  00FE53  3C                 	db	60
   192  00FE54  1E                 	db	30
   193  00FE55  42                 	db	66
   194  00FE56  A2                 	db	162
   195  00FE57  0D                 	db	13
   196  00FE58                     __end_of__npowers_:
   197                           	opt stack 0
   198  00FE58                     __powers_:
   199                           	opt stack 0
   200  00FE58  00                 	db	0
   201  00FE59  80                 	db	128
   202  00FE5A  3F                 	db	63
   203  00FE5B  00                 	db	0
   204  00FE5C  20                 	db	32
   205  00FE5D  41                 	db	65
   206  00FE5E  00                 	db	0
   207  00FE5F  C8                 	db	200
   208  00FE60  42                 	db	66
   209  00FE61  00                 	db	0
   210  00FE62  7A                 	db	122
   211  00FE63  44                 	db	68
   212  00FE64  40                 	db	64
   213  00FE65  1C                 	db	28
   214  00FE66  46                 	db	70
   215  00FE67  50                 	db	80
   216  00FE68  C3                 	db	195
   217  00FE69  47                 	db	71
   218  00FE6A  24                 	db	36
   219  00FE6B  74                 	db	116
   220  00FE6C  49                 	db	73
   221  00FE6D  97                 	db	151
   222  00FE6E  18                 	db	24
   223  00FE6F  4B                 	db	75
   224  00FE70  BC                 	db	188
   225  00FE71  BE                 	db	190
   226  00FE72  4C                 	db	76
   227  00FE73  6B                 	db	107
   228  00FE74  6E                 	db	110
   229  00FE75  4E                 	db	78
   230  00FE76  03                 	db	3
   231  00FE77  15                 	db	21
   232  00FE78  50                 	db	80
   233  00FE79  79                 	db	121
   234  00FE7A  AD                 	db	173
   235  00FE7B  60                 	db	96
   236  00FE7C  F3                 	db	243
   237  00FE7D  49                 	db	73
   238  00FE7E  71                 	db	113
   239  00FE7F                     __end_of__powers_:
   240                           	opt stack 0
   241  00FE7F                     _hexpowers:
   242                           	opt stack 0
   243  00FE7F  0001               	dw	1
   244  00FE81  0000               	dw	0
   245  00FE83  0010               	dw	16
   246  00FE85  0000               	dw	0
   247  00FE87  0100               	dw	256
   248  00FE89  0000               	dw	0
   249  00FE8B  1000               	dw	4096
   250  00FE8D  0000               	dw	0
   251  00FE8F  0000               	dw	0
   252  00FE91  0001               	dw	1
   253  00FE93  0000               	dw	0
   254  00FE95  0010               	dw	16
   255  00FE97  0000               	dw	0
   256  00FE99  0100               	dw	256
   257  00FE9B  0000               	dw	0
   258  00FE9D  1000               	dw	4096
   259  00FE9F                     __end_of_hexpowers:
   260                           	opt stack 0
   261  00FE9F                     _set_data_rate:
   262                           	opt stack 0
   263  00FE9F  6D                 	db	109
   264  00FEA0  61                 	db	97
   265  00FEA1  63                 	db	99
   266  00FEA2  20                 	db	32
   267  00FEA3  73                 	db	115
   268  00FEA4  65                 	db	101
   269  00FEA5  74                 	db	116
   270  00FEA6  20                 	db	32
   271  00FEA7  64                 	db	100
   272  00FEA8  72                 	db	114
   273  00FEA9  20                 	db	32
   274  00FEAA  78                 	db	120
   275  00FEAB  0D                 	db	13
   276  00FEAC  0A                 	db	10
   277  00FEAD  00                 	db	0
   278  00FEAE                     __end_of_set_data_rate:
   279                           	opt stack 0
   280  00FEAE                     _getVerCommand:
   281                           	opt stack 0
   282  00FEAE  73                 	db	115
   283  00FEAF  79                 	db	121
   284  00FEB0  73                 	db	115
   285  00FEB1  20                 	db	32
   286  00FEB2  67                 	db	103
   287  00FEB3  65                 	db	101
   288  00FEB4  74                 	db	116
   289  00FEB5  20                 	db	32
   290  00FEB6  76                 	db	118
   291  00FEB7  65                 	db	101
   292  00FEB8  72                 	db	114
   293  00FEB9  0D                 	db	13
   294  00FEBA  0A                 	db	10
   295  00FEBB  00                 	db	0
   296  00FEBC                     __end_of_getVerCommand:
   297                           	opt stack 0
   298  00FEBC                     _ambient_ascii:
   299                           	opt stack 0
   300  00FEBC  41                 	db	65
   301  00FEBD  6D                 	db	109
   302  00FEBE  62                 	db	98
   303  00FEBF  2E                 	db	46
   304  00FEC0  00                 	db	0
   305  00FEC1                     __end_of_ambient_ascii:
   306                           	opt stack 0
   307  00FEC1                     _pipe_ascii:
   308                           	opt stack 0
   309  00FEC1  50                 	db	80
   310  00FEC2  69                 	db	105
   311  00FEC3  70                 	db	112
   312  00FEC4  65                 	db	101
   313  00FEC5  00                 	db	0
   314  00FEC6                     __end_of_pipe_ascii:
   315                           	opt stack 0
   316  00FEC6                     _delimiter:
   317                           	opt stack 0
   318  00FEC6  FC                 	db	low STR_3
   319  00FEC7                     __end_of_delimiter:
   320                           	opt stack 0
   321  00FEC7                     _send_data_EOL:
   322                           	opt stack 0
   323  00FEC7  C1                 	db	low (STR_6+23)
   324  00FEC8                     __end_of_send_data_EOL:
   325                           	opt stack 0
   326  00FEC8                     _send_data_part_1:
   327                           	opt stack 0
   328  00FEC8  EE                 	db	low STR_1
   329  00FEC9                     __end_of_send_data_part_1:
   330                           	opt stack 0
   331  00FEC9                     _set_app_key:
   332                           	opt stack 0
   333  00FEC9  6D                 	db	109
   334  00FECA  61                 	db	97
   335  00FECB  63                 	db	99
   336  00FECC  20                 	db	32
   337  00FECD  73                 	db	115
   338  00FECE  65                 	db	101
   339  00FECF  74                 	db	116
   340  00FED0  20                 	db	32
   341  00FED1  61                 	db	97
   342  00FED2  70                 	db	112
   343  00FED3  70                 	db	112
   344  00FED4  6B                 	db	107
   345  00FED5  65                 	db	101
   346  00FED6  79                 	db	121
   347  00FED7  20                 	db	32
   348  00FED8  32                 	db	50
   349  00FED9  45                 	db	69
   350  00FEDA  31                 	db	49
   351  00FEDB  35                 	db	53
   352  00FEDC  41                 	db	65
   353  00FEDD  46                 	db	70
   354  00FEDE  43                 	db	67
   355  00FEDF  39                 	db	57
   356  00FEE0  34                 	db	52
   357  00FEE1  41                 	db	65
   358  00FEE2  37                 	db	55
   359  00FEE3  45                 	db	69
   360  00FEE4  46                 	db	70
   361  00FEE5  36                 	db	54
   362  00FEE6  39                 	db	57
   363  00FEE7  41                 	db	65
   364  00FEE8  45                 	db	69
   365  00FEE9  36                 	db	54
   366  00FEEA  31                 	db	49
   367  00FEEB  41                 	db	65
   368  00FEEC  38                 	db	56
   369  00FEED  31                 	db	49
   370  00FEEE  34                 	db	52
   371  00FEEF  37                 	db	55
   372  00FEF0  33                 	db	51
   373  00FEF1  37                 	db	55
   374  00FEF2  43                 	db	67
   375  00FEF3  33                 	db	51
   376  00FEF4  38                 	db	56
   377  00FEF5  36                 	db	54
   378  00FEF6  39                 	db	57
   379  00FEF7  39                 	db	57
   380  00FEF8  0D                 	db	13
   381  00FEF9  0A                 	db	10
   382  00FEFA  00                 	db	0
   383  00FEFB                     __end_of_set_app_key:
   384                           	opt stack 0
   385  00FEFB                     _set_app_eui:
   386                           	opt stack 0
   387  00FEFB  6D                 	db	109
   388  00FEFC  61                 	db	97
   389  00FEFD  63                 	db	99
   390  00FEFE  20                 	db	32
   391  00FEFF  73                 	db	115
   392  00FF00  65                 	db	101
   393  00FF01  74                 	db	116
   394  00FF02  20                 	db	32
   395  00FF03  61                 	db	97
   396  00FF04  70                 	db	112
   397  00FF05  70                 	db	112
   398  00FF06  65                 	db	101
   399  00FF07  75                 	db	117
   400  00FF08  69                 	db	105
   401  00FF09  20                 	db	32
   402  00FF0A  37                 	db	55
   403  00FF0B  34                 	db	52
   404  00FF0C  43                 	db	67
   405  00FF0D  35                 	db	53
   406  00FF0E  34                 	db	52
   407  00FF0F  32                 	db	50
   408  00FF10  34                 	db	52
   409  00FF11  35                 	db	53
   410  00FF12  33                 	db	51
   411  00FF13  38                 	db	56
   412  00FF14  35                 	db	53
   413  00FF15  37                 	db	55
   414  00FF16  39                 	db	57
   415  00FF17  37                 	db	55
   416  00FF18  34                 	db	52
   417  00FF19  41                 	db	65
   418  00FF1A  0D                 	db	13
   419  00FF1B  0A                 	db	10
   420  00FF1C  00                 	db	0
   421  00FF1D                     __end_of_set_app_eui:
   422                           	opt stack 0
   423  00FF1D                     _set_dev_eui:
   424                           	opt stack 0
   425  00FF1D  6D                 	db	109
   426  00FF1E  61                 	db	97
   427  00FF1F  63                 	db	99
   428  00FF20  20                 	db	32
   429  00FF21  73                 	db	115
   430  00FF22  65                 	db	101
   431  00FF23  74                 	db	116
   432  00FF24  20                 	db	32
   433  00FF25  64                 	db	100
   434  00FF26  65                 	db	101
   435  00FF27  76                 	db	118
   436  00FF28  65                 	db	101
   437  00FF29  75                 	db	117
   438  00FF2A  69                 	db	105
   439  00FF2B  20                 	db	32
   440  00FF2C  30                 	db	48
   441  00FF2D  30                 	db	48
   442  00FF2E  30                 	db	48
   443  00FF2F  34                 	db	52
   444  00FF30  41                 	db	65
   445  00FF31  33                 	db	51
   446  00FF32  30                 	db	48
   447  00FF33  42                 	db	66
   448  00FF34  30                 	db	48
   449  00FF35  30                 	db	48
   450  00FF36  31                 	db	49
   451  00FF37  41                 	db	65
   452  00FF38  43                 	db	67
   453  00FF39  46                 	db	70
   454  00FF3A  37                 	db	55
   455  00FF3B  44                 	db	68
   456  00FF3C  0D                 	db	13
   457  00FF3D  0A                 	db	10
   458  00FF3E  00                 	db	0
   459  00FF3F                     __end_of_set_dev_eui:
   460                           	opt stack 0
   461  00FF3F                     exp@coeff:
   462                           	opt stack 0
   463  00FF3F  00                 	db	0
   464  00FF40  80                 	db	128
   465  00FF41  3F                 	db	63
   466  00FF42  72                 	db	114
   467  00FF43  31                 	db	49
   468  00FF44  3F                 	db	63
   469  00FF45  FE                 	db	254
   470  00FF46  75                 	db	117
   471  00FF47  3E                 	db	62
   472  00FF48  58                 	db	88
   473  00FF49  63                 	db	99
   474  00FF4A  3D                 	db	61
   475  00FF4B  95                 	db	149
   476  00FF4C  1D                 	db	29
   477  00FF4D  3C                 	db	60
   478  00FF4E  C5                 	db	197
   479  00FF4F  AE                 	db	174
   480  00FF50  3A                 	db	58
   481  00FF51  79                 	db	121
   482  00FF52  21                 	db	33
   483  00FF53  39                 	db	57
   484  00FF54  94                 	db	148
   485  00FF55  80                 	db	128
   486  00FF56  37                 	db	55
   487  00FF57  93                 	db	147
   488  00FF58  A7                 	db	167
   489  00FF59  35                 	db	53
   490  00FF5A  56                 	db	86
   491  00FF5B  15                 	db	21
   492  00FF5C  34                 	db	52
   493  00FF5D                     __end_ofexp@coeff:
   494                           	opt stack 0
   495  00FF5D                     log@coeff:
   496                           	opt stack 0
   497  00FF5D  00                 	db	0
   498  00FF5E  00                 	db	0
   499  00FF5F  00                 	db	0
   500  00FF60  00                 	db	0
   501  00FF61  80                 	db	128
   502  00FF62  3F                 	db	63
   503  00FF63  F0                 	db	240
   504  00FF64  FF                 	db	255
   505  00FF65  BE                 	db	190
   506  00FF66  E2                 	db	226
   507  00FF67  A9                 	db	169
   508  00FF68  3E                 	db	62
   509  00FF69  83                 	db	131
   510  00FF6A  76                 	db	118
   511  00FF6B  BE                 	db	190
   512  00FF6C  AE                 	db	174
   513  00FF6D  2B                 	db	43
   514  00FF6E  3E                 	db	62
   515  00FF6F  3C                 	db	60
   516  00FF70  C3                 	db	195
   517  00FF71  BD                 	db	189
   518  00FF72  D2                 	db	210
   519  00FF73  13                 	db	19
   520  00FF74  3D                 	db	61
   521  00FF75  78                 	db	120
   522  00FF76  D3                 	db	211
   523  00FF77  BB                 	db	187
   524  00FF78                     __end_oflog@coeff:
   525                           	opt stack 0
   526  00FF78                     _join_network:
   527                           	opt stack 0
   528  00FF78  6D                 	db	109
   529  00FF79  61                 	db	97
   530  00FF7A  63                 	db	99
   531  00FF7B  20                 	db	32
   532  00FF7C  6A                 	db	106
   533  00FF7D  6F                 	db	111
   534  00FF7E  69                 	db	105
   535  00FF7F  6E                 	db	110
   536  00FF80  20                 	db	32
   537  00FF81  6F                 	db	111
   538  00FF82  74                 	db	116
   539  00FF83  61                 	db	97
   540  00FF84  61                 	db	97
   541  00FF85  0D                 	db	13
   542  00FF86  0A                 	db	10
   543  00FF87  00                 	db	0
   544  00FF88                     __end_of_join_network:
   545                           	opt stack 0
   546  00FF88                     STR_5:
   547  00FF88  54                 	db	84	;'T'
   548  00FF89  68                 	db	104	;'h'
   549  00FF8A  65                 	db	101	;'e'
   550  00FF8B  20                 	db	32
   551  00FF8C  63                 	db	99	;'c'
   552  00FF8D  61                 	db	97	;'a'
   553  00FF8E  70                 	db	112	;'p'
   554  00FF8F  61                 	db	97	;'a'
   555  00FF90  63                 	db	99	;'c'
   556  00FF91  69                 	db	105	;'i'
   557  00FF92  74                 	db	116	;'t'
   558  00FF93  69                 	db	105	;'i'
   559  00FF94  76                 	db	118	;'v'
   560  00FF95  65                 	db	101	;'e'
   561  00FF96  20                 	db	32
   562  00FF97  66                 	db	102	;'f'
   563  00FF98  72                 	db	114	;'r'
   564  00FF99  65                 	db	101	;'e'
   565  00FF9A  71                 	db	113	;'q'
   566  00FF9B  75                 	db	117	;'u'
   567  00FF9C  65                 	db	101	;'e'
   568  00FF9D  6E                 	db	110	;'n'
   569  00FF9E  63                 	db	99	;'c'
   570  00FF9F  79                 	db	121	;'y'
   571  00FFA0  20                 	db	32
   572  00FFA1  69                 	db	105	;'i'
   573  00FFA2  73                 	db	115	;'s'
   574  00FFA3  3A                 	db	58	;':'
   575  00FFA4  20                 	db	32
   576  00FFA5  25                 	db	37
   577  00FFA6  66                 	db	102	;'f'
   578  00FFA7  0D                 	db	13
   579  00FFA8  0A                 	db	10
   580  00FFA9  00                 	db	0
   581  00FFAA                     STR_6:
   582  00FFAA  54                 	db	84	;'T'
   583  00FFAB  68                 	db	104	;'h'
   584  00FFAC  65                 	db	101	;'e'
   585  00FFAD  20                 	db	32
   586  00FFAE  64                 	db	100	;'d'
   587  00FFAF  69                 	db	105	;'i'
   588  00FFB0  67                 	db	103	;'g'
   589  00FFB1  69                 	db	105	;'i'
   590  00FFB2  70                 	db	112	;'p'
   591  00FFB3  6F                 	db	111	;'o'
   592  00FFB4  74                 	db	116	;'t'
   593  00FFB5  20                 	db	32
   594  00FFB6  73                 	db	115	;'s'
   595  00FFB7  74                 	db	116	;'t'
   596  00FFB8  65                 	db	101	;'e'
   597  00FFB9  70                 	db	112	;'p'
   598  00FFBA  20                 	db	32
   599  00FFBB  69                 	db	105	;'i'
   600  00FFBC  73                 	db	115	;'s'
   601  00FFBD  3A                 	db	58	;':'
   602  00FFBE  20                 	db	32
   603  00FFBF  25                 	db	37
   604  00FFC0  75                 	db	117	;'u'
   605  00FFC1  20                 	db	32
   606  00FFC2  0D                 	db	13
   607  00FFC3  0A                 	db	10
   608  00FFC4  00                 	db	0
   609  00FFC5                     STR_4:
   610  00FFC5  6D                 	db	109	;'m'
   611  00FFC6  61                 	db	97	;'a'
   612  00FFC7  63                 	db	99	;'c'
   613  00FFC8  20                 	db	32
   614  00FFC9  74                 	db	116	;'t'
   615  00FFCA  78                 	db	120	;'x'
   616  00FFCB  20                 	db	32
   617  00FFCC  63                 	db	99	;'c'
   618  00FFCD  6E                 	db	110	;'n'
   619  00FFCE  66                 	db	102	;'f'
   620  00FFCF  20                 	db	32
   621  00FFD0  31                 	db	49	;'1'
   622  00FFD1  20                 	db	32
   623  00FFD2  25                 	db	37
   624  00FFD3  78                 	db	120	;'x'
   625  00FFD4  25                 	db	37
   626  00FFD5  78                 	db	120	;'x'
   627  00FFD6  25                 	db	37
   628  00FFD7  78                 	db	120	;'x'
   629  00FFD8  25                 	db	37
   630  00FFD9  78                 	db	120	;'x'
   631  00FFDA  0D                 	db	13
   632  00FFDB  0A                 	db	10
   633  00FFDC  00                 	db	0
   634  00FFDD                     STR_7:
   635  00FFDD  30                 	db	48	;'0'
   636  00FFDE  31                 	db	49	;'1'
   637  00FFDF  32                 	db	50	;'2'
   638  00FFE0  33                 	db	51	;'3'
   639  00FFE1  34                 	db	52	;'4'
   640  00FFE2  35                 	db	53	;'5'
   641  00FFE3  36                 	db	54	;'6'
   642  00FFE4  37                 	db	55	;'7'
   643  00FFE5  38                 	db	56	;'8'
   644  00FFE6  39                 	db	57	;'9'
   645  00FFE7  61                 	db	97	;'a'
   646  00FFE8  62                 	db	98	;'b'
   647  00FFE9  63                 	db	99	;'c'
   648  00FFEA  64                 	db	100	;'d'
   649  00FFEB  65                 	db	101	;'e'
   650  00FFEC  66                 	db	102	;'f'
   651  00FFED  00                 	db	0
   652  00FFEE                     STR_1:
   653  00FFEE  6D                 	db	109	;'m'
   654  00FFEF  61                 	db	97	;'a'
   655  00FFF0  63                 	db	99	;'c'
   656  00FFF1  20                 	db	32
   657  00FFF2  74                 	db	116	;'t'
   658  00FFF3  78                 	db	120	;'x'
   659  00FFF4  20                 	db	32
   660  00FFF5  63                 	db	99	;'c'
   661  00FFF6  6E                 	db	110	;'n'
   662  00FFF7  66                 	db	102	;'f'
   663  00FFF8  20                 	db	32
   664  00FFF9  31                 	db	49	;'1'
   665  00FFFA  20                 	db	32
   666  00FFFB  00                 	db	0
   667  00FFFC                     STR_3:
   668  00FFFC  5F                 	db	95	;'_'
   669  00FFFD  00                 	db	0
   670  0000                     
   671                           ; #config settings
   672  00FFFE  00                 	db	0	; dummy byte at the end
   673  0000                     
   674                           	psect	nvCOMRAM
   675  00005C                     __pnvCOMRAM:
   676                           	opt stack 0
   677  00005C                     _last_received_message_index:
   678                           	opt stack 0
   679  00005C                     	ds	2
   680                           
   681                           	psect	nvBANK0
   682  0000E9                     __pnvBANK0:
   683                           	opt stack 0
   684  0000E9                     _nominalfrequency:
   685                           	opt stack 0
   686  0000E9                     	ds	3
   687  0000EC                     _currentMessagePointer:
   688                           	opt stack 0
   689  0000EC                     	ds	2
   690  0000                     _RPINR21	set	3836
   691  0000                     _RPOR2	set	3778
   692  0000                     _RPOR5	set	3781
   693  0000                     _IOLOCK	set	30200
   694  0000                     _ANCON0	set	3912
   695  0000                     _ANCON1	set	3913
   696  0000                     _CCP4CON	set	3858
   697  0000                     _CCPR4H	set	3860
   698  0000                     _CCPR4L	set	3859
   699  0000                     _CCPTMRS1bits	set	3921
   700  0000                     _ADRES	set	4035
   701  0000                     _ADCON0	set	4034
   702  0000                     _ADCON0bits	set	4034
   703  0000                     _ADCON1	set	4033
   704  0000                     _BAUDCON1bits	set	3966
   705  0000                     _EECON2	set	4007
   706  0000                     _INTCON	set	4082
   707  0000                     _OSCCONbits	set	4051
   708  0000                     _PIE1bits	set	3997
   709  0000                     _PIE4bits	set	3982
   710  0000                     _PIR1bits	set	3998
   711  0000                     _PIR4bits	set	3983
   712  0000                     _PORTAbits	set	3968
   713  0000                     _PORTBbits	set	3969
   714  0000                     _RCONbits	set	4048
   715  0000                     _RCREG1	set	4015
   716  0000                     _RCSTA1bits	set	4012
   717  0000                     _SPBRG1	set	4016
   718  0000                     _SPBRGH1	set	3967
   719  0000                     _SSP2CON1	set	3954
   720  0000                     _SSP2STAT	set	3955
   721  0000                     _SSP2STATbits	set	3955
   722  0000                     _SSPBUF	set	4041
   723  0000                     _T1CONbits	set	4045
   724  0000                     _TMR1H	set	4047
   725  0000                     _TMR1L	set	4046
   726  0000                     _TRISAbits	set	3986
   727  0000                     _TRISBbits	set	3987
   728  0000                     _TRISCbits	set	3988
   729  0000                     _TXREG1	set	4014
   730  0000                     _TXSTA1bits	set	4013
   731                           
   732                           	psect	cinit
   733  012DC8                     __pcinit:
   734                           	opt stack 0
   735  012DC8                     start_initialization:
   736                           	opt stack 0
   737  012DC8                     __initialization:
   738                           	opt stack 0
   739                           
   740                           ; Clear objects allocated to BANK4 (200 bytes)
   741  012DC8  EE04  F000         	lfsr	0,__pbssBANK4
   742  012DCC  0EC8               	movlw	200
   743  012DCE                     clear_0:
   744  012DCE  6AEE               	clrf	postinc0,c
   745  012DD0  06E8               	decf	wreg,f,c
   746  012DD2  E1FD               	bnz	clear_0
   747                           
   748                           ; Clear objects allocated to BANK3 (200 bytes)
   749  012DD4  EE03  F000         	lfsr	0,__pbssBANK3
   750  012DD8  0EC8               	movlw	200
   751  012DDA                     clear_1:
   752  012DDA  6AEE               	clrf	postinc0,c
   753  012DDC  06E8               	decf	wreg,f,c
   754  012DDE  E1FD               	bnz	clear_1
   755                           
   756                           ; Clear objects allocated to BANK2 (200 bytes)
   757  012DE0  EE02  F000         	lfsr	0,__pbssBANK2
   758  012DE4  0EC8               	movlw	200
   759  012DE6                     clear_2:
   760  012DE6  6AEE               	clrf	postinc0,c
   761  012DE8  06E8               	decf	wreg,f,c
   762  012DEA  E1FD               	bnz	clear_2
   763                           
   764                           ; Clear objects allocated to BANK1 (130 bytes)
   765  012DEC  EE01  F000         	lfsr	0,__pbssBANK1
   766  012DF0  0E82               	movlw	130
   767  012DF2                     clear_3:
   768  012DF2  6AEE               	clrf	postinc0,c
   769  012DF4  06E8               	decf	wreg,f,c
   770  012DF6  E1FD               	bnz	clear_3
   771                           
   772                           ; Clear objects allocated to BANK0 (16 bytes)
   773  012DF8  EE00  F0D9         	lfsr	0,__pbssBANK0
   774  012DFC  0E10               	movlw	16
   775  012DFE                     clear_4:
   776  012DFE  6AEE               	clrf	postinc0,c
   777  012E00  06E8               	decf	wreg,f,c
   778  012E02  E1FD               	bnz	clear_4
   779                           
   780                           ; Clear objects allocated to COMRAM (38 bytes)
   781  012E04  EE00  F031         	lfsr	0,__pbssCOMRAM
   782  012E08  0E26               	movlw	38
   783  012E0A                     clear_5:
   784  012E0A  6AEE               	clrf	postinc0,c
   785  012E0C  06E8               	decf	wreg,f,c
   786  012E0E  E1FD               	bnz	clear_5
   787                           
   788                           ; Initialize objects allocated to BANK1 (20 bytes)
   789                           ; load TBLPTR registers with __pidataBANK1
   790  012E10  0E86               	movlw	low __pidataBANK1
   791  012E12  6EF6               	movwf	tblptrl,c
   792  012E14  0E36               	movlw	high __pidataBANK1
   793  012E16  6EF7               	movwf	tblptrh,c
   794  012E18  0E01               	movlw	low (__pidataBANK1 shr (0+16))
   795  012E1A  6EF8               	movwf	tblptru,c
   796  012E1C  EE01  F082         	lfsr	0,__pdataBANK1
   797  012E20  EE10 F014          	lfsr	1,20
   798  012E24                     copy_data0:
   799  012E24  0009               	tblrd		*+
   800  012E26  CFF5 FFEE          	movff	tablat,postinc0
   801  012E2A  50E5               	movf	postdec1,w,c
   802  012E2C  50E1               	movf	fsr1l,w,c
   803  012E2E  E1FA               	bnz	copy_data0
   804                           
   805                           ; Initialize objects allocated to BANK0 (1 bytes)
   806                           ; load TBLPTR registers with __pidataBANK0
   807  012E30  0ECC               	movlw	low __pidataBANK0
   808  012E32  6EF6               	movwf	tblptrl,c
   809  012E34  0E36               	movlw	high __pidataBANK0
   810  012E36  6EF7               	movwf	tblptrh,c
   811  012E38  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   812  012E3A  6EF8               	movwf	tblptru,c
   813  012E3C  0009               	tblrd		*+	;fetch initializer
   814  012E3E  CFF5 F0EE          	movff	tablat,__pdataBANK0
   815                           
   816                           ; Initialize objects allocated to COMRAM (5 bytes)
   817                           ; load TBLPTR registers with __pidataCOMRAM
   818  012E42  0EC2               	movlw	low __pidataCOMRAM
   819  012E44  6EF6               	movwf	tblptrl,c
   820  012E46  0E36               	movlw	high __pidataCOMRAM
   821  012E48  6EF7               	movwf	tblptrh,c
   822  012E4A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
   823  012E4C  6EF8               	movwf	tblptru,c
   824  012E4E  EE00  F057         	lfsr	0,__pdataCOMRAM
   825  012E52  EE10 F005          	lfsr	1,5
   826  012E56                     copy_data1:
   827  012E56  0009               	tblrd		*+
   828  012E58  CFF5 FFEE          	movff	tablat,postinc0
   829  012E5C  50E5               	movf	postdec1,w,c
   830  012E5E  50E1               	movf	fsr1l,w,c
   831  012E60  E1FA               	bnz	copy_data1
   832  012E62                     end_of_initialization:
   833                           	opt stack 0
   834  012E62                     __end_of__initialization:
   835                           	opt stack 0
   836  012E62  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   837  012E64  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   838  012E66  0100               	movlb	0
   839  012E68  EFCF  F093         	goto	_main	;jump to C main() function
   840                           tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           postdec1	equ	0xFE5
   847                           fsr1l	equ	0xFE1
   848                           
   849                           	psect	bssCOMRAM
   850  000031                     __pbssCOMRAM:
   851                           	opt stack 0
   852  000031                     _cap_measurement_new:
   853                           	opt stack 0
   854  000031                     	ds	2
   855  000033                     _cap_measurement_old:
   856                           	opt stack 0
   857  000033                     	ds	2
   858  000035                     _currentChannel:
   859                           	opt stack 0
   860  000035                     	ds	2
   861  000037                     _ind_measurement1:
   862                           	opt stack 0
   863  000037                     	ds	2
   864  000039                     _ind_measurement2:
   865                           	opt stack 0
   866  000039                     	ds	2
   867  00003B                     _inductive:
   868                           	opt stack 0
   869  00003B                     	ds	2
   870  00003D                     _interrupt_count:
   871                           	opt stack 0
   872  00003D                     	ds	2
   873  00003F                     _minus_ambient:
   874                           	opt stack 0
   875  00003F                     	ds	2
   876  000041                     _minus_pipe:
   877                           	opt stack 0
   878  000041                     	ds	2
   879  000043                     _plus_ambient:
   880                           	opt stack 0
   881  000043                     	ds	2
   882  000045                     _plus_pipe:
   883                           	opt stack 0
   884  000045                     	ds	2
   885  000047                     _temp_ambient:
   886                           	opt stack 0
   887  000047                     	ds	2
   888  000049                     _temp_pipe:
   889                           	opt stack 0
   890  000049                     	ds	2
   891  00004B                     _timer:
   892                           	opt stack 0
   893  00004B                     	ds	2
   894  00004D                     _value:
   895                           	opt stack 0
   896  00004D                     	ds	2
   897  00004F                     _valueH:
   898                           	opt stack 0
   899  00004F                     	ds	2
   900  000051                     _valueL:
   901                           	opt stack 0
   902  000051                     	ds	2
   903  000053                     _cap_value:
   904                           	opt stack 0
   905  000053                     	ds	4
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           
   915                           	psect	dataCOMRAM
   916  000057                     __pdataCOMRAM:
   917                           	opt stack 0
   918  000057                     _asciiTemp:
   919                           	opt stack 0
   920  000057                     	ds	5
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           postdec1	equ	0xFE5
   928                           fsr1l	equ	0xFE1
   929                           
   930                           	psect	bssBANK0
   931  0000D9                     __pbssBANK0:
   932                           	opt stack 0
   933  0000D9                     _cap_freq:
   934                           	opt stack 0
   935  0000D9                     	ds	3
   936  0000DC                     _frequency:
   937                           	opt stack 0
   938  0000DC                     	ds	3
   939  0000DF                     _percent:
   940                           	opt stack 0
   941  0000DF                     	ds	3
   942  0000E2                     _errno:
   943                           	opt stack 0
   944  0000E2                     	ds	2
   945  0000E4                     _uart_receive_buffer_index:
   946                           	opt stack 0
   947  0000E4                     	ds	2
   948  0000E6                     _bigorsmall:
   949                           	opt stack 0
   950  0000E6                     	ds	1
   951  0000E7                     _state:
   952                           	opt stack 0
   953  0000E7                     	ds	1
   954  0000E8                     _step:
   955                           	opt stack 0
   956  0000E8                     	ds	1
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           postinc0	equ	0xFEE
   962                           wreg	equ	0xFE8
   963                           postdec1	equ	0xFE5
   964                           fsr1l	equ	0xFE1
   965                           
   966                           	psect	dataBANK0
   967  0000EE                     __pdataBANK0:
   968                           	opt stack 0
   969  0000EE                     _isCommandSent:
   970                           	opt stack 0
   971  0000EE                     	ds	1
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           postdec1	equ	0xFE5
   979                           fsr1l	equ	0xFE1
   980                           
   981                           	psect	bssBANK1
   982  000100                     __pbssBANK1:
   983                           	opt stack 0
   984  000100                     _uart_receive_buffer:
   985                           	opt stack 0
   986  000100                     	ds	100
   987  000164                     _last_uart_message:
   988                           	opt stack 0
   989  000164                     	ds	30
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           
   999                           	psect	dataBANK1
  1000  000182                     __pdataBANK1:
  1001                           	opt stack 0
  1002  000182                     _temp_display_message:
  1003                           	opt stack 0
  1004  000182                     	ds	20
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           postdec1	equ	0xFE5
  1012                           fsr1l	equ	0xFE1
  1013                           
  1014                           	psect	bssBANK2
  1015  000200                     __pbssBANK2:
  1016                           	opt stack 0
  1017  000200                     _cap_frequency_message:
  1018                           	opt stack 0
  1019  000200                     	ds	200
  1020                           tblptru	equ	0xFF8
  1021                           tblptrh	equ	0xFF7
  1022                           tblptrl	equ	0xFF6
  1023                           tablat	equ	0xFF5
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           postdec1	equ	0xFE5
  1027                           fsr1l	equ	0xFE1
  1028                           
  1029                           	psect	bssBANK3
  1030  000300                     __pbssBANK3:
  1031                           	opt stack 0
  1032  000300                     _lora_message:
  1033                           	opt stack 0
  1034  000300                     	ds	200
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           postinc0	equ	0xFEE
  1040                           wreg	equ	0xFE8
  1041                           postdec1	equ	0xFE5
  1042                           fsr1l	equ	0xFE1
  1043                           
  1044                           	psect	bssBANK4
  1045  000400                     __pbssBANK4:
  1046                           	opt stack 0
  1047  000400                     _cap_step_message:
  1048                           	opt stack 0
  1049  000400                     	ds	200
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           postdec1	equ	0xFE5
  1057                           fsr1l	equ	0xFE1
  1058                           
  1059                           	psect	cstackBANK0
  1060  000060                     __pcstackBANK0:
  1061                           	opt stack 0
  1062  000060                     ?___awmod:
  1063                           	opt stack 0
  1064  000060                     ?___ftpack:
  1065                           	opt stack 0
  1066  000060                     ?_frexp:
  1067                           	opt stack 0
  1068  000060                     ?___ftneg:
  1069                           	opt stack 0
  1070  000060                     ?__tdiv_to_l_:
  1071                           	opt stack 0
  1072  000060                     ?__div_to_l_:
  1073                           	opt stack 0
  1074  000060                     ?___lldiv:
  1075                           	opt stack 0
  1076  000060                     UARTReceive@on_or_off:
  1077                           	opt stack 0
  1078  000060                     delay_ms@ms:
  1079                           	opt stack 0
  1080  000060                     ___awmod@dividend:
  1081                           	opt stack 0
  1082  000060                     __div_to_l_@f1:
  1083                           	opt stack 0
  1084  000060                     ___ftpack@arg:
  1085                           	opt stack 0
  1086  000060                     __tdiv_to_l_@f1:
  1087                           	opt stack 0
  1088  000060                     ___ftneg@f1:
  1089                           	opt stack 0
  1090  000060                     frexp@value:
  1091                           	opt stack 0
  1092  000060                     ___lldiv@dividend:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x0
  1096  000060                     	ds	2
  1097  000062                     ??_delay_ms:
  1098  000062                     ___awmod@divisor:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x2
  1102  000062                     	ds	1
  1103  000063                     ___ftpack@exp:
  1104                           	opt stack 0
  1105  000063                     delay_ms@i:
  1106                           	opt stack 0
  1107  000063                     frexp@eptr:
  1108                           	opt stack 0
  1109  000063                     __div_to_l_@f2:
  1110                           	opt stack 0
  1111  000063                     __tdiv_to_l_@f2:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x3
  1115  000063                     	ds	1
  1116  000064                     ___awmod@counter:
  1117                           	opt stack 0
  1118  000064                     ___ftpack@sign:
  1119                           	opt stack 0
  1120  000064                     ___lldiv@divisor:
  1121                           	opt stack 0
  1122                           
  1123                           ; 4 bytes @ 0x4
  1124  000064                     	ds	1
  1125  000065                     ??___ftpack:
  1126  000065                     ??_frexp:
  1127  000065                     ___awmod@sign:
  1128                           	opt stack 0
  1129  000065                     sendUARTMessage@newMessagePointer:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x5
  1133  000065                     	ds	1
  1134  000066                     ??__tdiv_to_l_:
  1135  000066                     ?___awdiv:
  1136                           	opt stack 0
  1137  000066                     ___awdiv@dividend:
  1138                           	opt stack 0
  1139  000066                     __div_to_l_@quot:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x6
  1143  000066                     	ds	1
  1144  000067                     
  1145                           ; 0 bytes @ 0x7
  1146  000067                     	ds	1
  1147  000068                     ?___awtoft:
  1148                           	opt stack 0
  1149  000068                     ?___lbtoft:
  1150                           	opt stack 0
  1151  000068                     ?___lltoft:
  1152                           	opt stack 0
  1153  000068                     ___awdiv@divisor:
  1154                           	opt stack 0
  1155  000068                     ___awtoft@c:
  1156                           	opt stack 0
  1157  000068                     ___lldiv@quotient:
  1158                           	opt stack 0
  1159  000068                     ___lltoft@c:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x8
  1163  000068                     	ds	1
  1164  000069                     __tdiv_to_l_@quot:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x9
  1168  000069                     	ds	1
  1169  00006A                     ___awdiv@counter:
  1170                           	opt stack 0
  1171  00006A                     __div_to_l_@cntr:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0xA
  1175  00006A                     	ds	1
  1176  00006B                     ___awdiv@sign:
  1177                           	opt stack 0
  1178  00006B                     ___awtoft@sign:
  1179                           	opt stack 0
  1180  00006B                     __div_to_l_@exp1:
  1181                           	opt stack 0
  1182  00006B                     ___lbtoft@c:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0xB
  1186  00006B                     	ds	1
  1187  00006C                     ??___lltoft:
  1188  00006C                     ___lldiv@counter:
  1189                           	opt stack 0
  1190  00006C                     ___awdiv@quotient:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0xC
  1194  00006C                     	ds	1
  1195  00006D                     ?___llmod:
  1196                           	opt stack 0
  1197  00006D                     __tdiv_to_l_@cntr:
  1198                           	opt stack 0
  1199  00006D                     ___llmod@dividend:
  1200                           	opt stack 0
  1201                           
  1202                           ; 4 bytes @ 0xD
  1203  00006D                     	ds	1
  1204  00006E                     ?___wmul:
  1205                           	opt stack 0
  1206  00006E                     __tdiv_to_l_@exp1:
  1207                           	opt stack 0
  1208  00006E                     ___wmul@multiplier:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0xE
  1212  00006E                     	ds	2
  1213  000070                     ___lltoft@exp:
  1214                           	opt stack 0
  1215  000070                     ___wmul@multiplicand:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x10
  1219  000070                     	ds	1
  1220  000071                     ___llmod@divisor:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x11
  1224  000071                     	ds	1
  1225  000072                     ___wmul@product:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x12
  1229  000072                     	ds	2
  1230  000074                     ?___ftmul:
  1231                           	opt stack 0
  1232  000074                     ___ftmul@f1:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x14
  1236  000074                     	ds	1
  1237  000075                     ___llmod@counter:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x15
  1241  000075                     	ds	2
  1242  000077                     ___ftmul@f2:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x17
  1246  000077                     	ds	3
  1247  00007A                     ??___ftmul:
  1248                           
  1249                           ; 0 bytes @ 0x1A
  1250  00007A                     	ds	3
  1251  00007D                     ___ftmul@exp:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x1D
  1255  00007D                     	ds	1
  1256  00007E                     ___ftmul@f3_as_product:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x1E
  1260  00007E                     	ds	3
  1261  000081                     ___ftmul@cntr:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x21
  1265  000081                     	ds	1
  1266  000082                     ___ftmul@sign:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x22
  1270  000082                     	ds	1
  1271  000083                     ?_fround:
  1272                           	opt stack 0
  1273  000083                     ?_scale:
  1274                           	opt stack 0
  1275  000083                     ___ftge@ff1:
  1276                           	opt stack 0
  1277                           
  1278                           ; 3 bytes @ 0x23
  1279  000083                     	ds	3
  1280  000086                     ___ftge@ff2:
  1281                           	opt stack 0
  1282  000086                     _fround$2534:
  1283                           	opt stack 0
  1284  000086                     _scale$2535:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x26
  1288  000086                     	ds	3
  1289  000089                     ??___ftge:
  1290  000089                     scale@scl:
  1291                           	opt stack 0
  1292  000089                     _fround$2533:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0x29
  1296  000089                     	ds	1
  1297  00008A                     ?___fttol:
  1298                           	opt stack 0
  1299  00008A                     ___fttol@f1:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x2A
  1303  00008A                     	ds	2
  1304  00008C                     fround@prec:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x2C
  1308  00008C                     	ds	1
  1309  00008D                     ?___ftadd:
  1310                           	opt stack 0
  1311  00008D                     ___ftadd@f1:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x2D
  1315  00008D                     	ds	1
  1316  00008E                     ??___fttol:
  1317                           
  1318                           ; 0 bytes @ 0x2E
  1319  00008E                     	ds	2
  1320  000090                     ___ftadd@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x30
  1324  000090                     	ds	3
  1325  000093                     ??___ftadd:
  1326  000093                     ___fttol@sign1:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x33
  1330  000093                     	ds	1
  1331  000094                     ___fttol@lval:
  1332                           	opt stack 0
  1333                           
  1334                           ; 4 bytes @ 0x34
  1335  000094                     	ds	2
  1336  000096                     ___ftadd@sign:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x36
  1340  000096                     	ds	1
  1341  000097                     ___ftadd@exp2:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x37
  1345  000097                     	ds	1
  1346  000098                     ___ftadd@exp1:
  1347                           	opt stack 0
  1348  000098                     ___fttol@exp1:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x38
  1352  000098                     	ds	1
  1353  000099                     ?___ftdiv:
  1354                           	opt stack 0
  1355  000099                     ?___ftsub:
  1356                           	opt stack 0
  1357  000099                     ?_eval_poly:
  1358                           	opt stack 0
  1359  000099                     ?___altoft:
  1360                           	opt stack 0
  1361  000099                     ___ftdiv@f1:
  1362                           	opt stack 0
  1363  000099                     ___ftsub@f1:
  1364                           	opt stack 0
  1365  000099                     eval_poly@x:
  1366                           	opt stack 0
  1367  000099                     ___altoft@c:
  1368                           	opt stack 0
  1369                           
  1370                           ; 4 bytes @ 0x39
  1371  000099                     	ds	3
  1372  00009C                     eval_poly@d:
  1373                           	opt stack 0
  1374  00009C                     ___ftdiv@f2:
  1375                           	opt stack 0
  1376  00009C                     ___ftsub@f2:
  1377                           	opt stack 0
  1378                           
  1379                           ; 3 bytes @ 0x3C
  1380  00009C                     	ds	1
  1381  00009D                     ??___altoft:
  1382                           
  1383                           ; 0 bytes @ 0x3D
  1384  00009D                     	ds	1
  1385  00009E                     eval_poly@n:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x3E
  1389  00009E                     	ds	1
  1390  00009F                     ??___ftdiv:
  1391  00009F                     ?_sprintf:
  1392                           	opt stack 0
  1393  00009F                     sprintf@sp:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x3F
  1397  00009F                     	ds	1
  1398  0000A0                     ??_eval_poly:
  1399                           
  1400                           ; 0 bytes @ 0x40
  1401  0000A0                     	ds	1
  1402  0000A1                     ___altoft@exp:
  1403                           	opt stack 0
  1404  0000A1                     sprintf@f:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x41
  1408  0000A1                     	ds	1
  1409  0000A2                     ___altoft@sign:
  1410                           	opt stack 0
  1411  0000A2                     ___ftdiv@cntr:
  1412                           	opt stack 0
  1413  0000A2                     eval_poly@res:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x42
  1417  0000A2                     	ds	1
  1418  0000A3                     ?_floor:
  1419                           	opt stack 0
  1420  0000A3                     ___ftdiv@f3:
  1421                           	opt stack 0
  1422  0000A3                     floor@x:
  1423                           	opt stack 0
  1424                           
  1425                           ; 3 bytes @ 0x43
  1426  0000A3                     	ds	2
  1427  0000A5                     ?_log:
  1428                           	opt stack 0
  1429  0000A5                     ?_ldexp:
  1430                           	opt stack 0
  1431  0000A5                     ldexp@value:
  1432                           	opt stack 0
  1433  0000A5                     log@x:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x45
  1437  0000A5                     	ds	1
  1438  0000A6                     ___ftdiv@exp:
  1439                           	opt stack 0
  1440  0000A6                     floor@i:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x46
  1444  0000A6                     	ds	1
  1445  0000A7                     ___ftdiv@sign:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x47
  1449  0000A7                     	ds	1
  1450  0000A8                     ldexp@newexp:
  1451                           	opt stack 0
  1452  0000A8                     log@exponent:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x48
  1456  0000A8                     	ds	1
  1457  0000A9                     floor@expon:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x49
  1461  0000A9                     	ds	1
  1462  0000AA                     ??_ldexp:
  1463                           
  1464                           ; 0 bytes @ 0x4A
  1465  0000AA                     	ds	2
  1466  0000AC                     ?_exp:
  1467                           	opt stack 0
  1468  0000AC                     exp@x:
  1469                           	opt stack 0
  1470                           
  1471                           ; 3 bytes @ 0x4C
  1472  0000AC                     	ds	3
  1473  0000AF                     ??_sprintf:
  1474  0000AF                     _exp$2539:
  1475                           	opt stack 0
  1476                           
  1477                           ; 3 bytes @ 0x4F
  1478  0000AF                     	ds	3
  1479  0000B2                     exp@exponent:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x52
  1483  0000B2                     	ds	2
  1484  0000B4                     exp@sign:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x54
  1488  0000B4                     	ds	1
  1489  0000B5                     ?_pow:
  1490                           	opt stack 0
  1491  0000B5                     pow@x:
  1492                           	opt stack 0
  1493  0000B5                     _sprintf$2536:
  1494                           	opt stack 0
  1495                           
  1496                           ; 3 bytes @ 0x55
  1497  0000B5                     	ds	3
  1498  0000B8                     sprintf@idx:
  1499                           	opt stack 0
  1500  0000B8                     pow@y:
  1501                           	opt stack 0
  1502                           
  1503                           ; 3 bytes @ 0x58
  1504  0000B8                     	ds	1
  1505  0000B9                     sprintf@ap:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x59
  1509  0000B9                     	ds	2
  1510  0000BB                     sprintf@flag:
  1511                           	opt stack 0
  1512  0000BB                     _pow$2537:
  1513                           	opt stack 0
  1514                           
  1515                           ; 3 bytes @ 0x5B
  1516  0000BB                     	ds	2
  1517  0000BD                     sprintf@prec:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x5D
  1521  0000BD                     	ds	1
  1522  0000BE                     _pow$2538:
  1523                           	opt stack 0
  1524                           
  1525                           ; 3 bytes @ 0x5E
  1526  0000BE                     	ds	1
  1527  0000BF                     sprintf@val:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x5F
  1531  0000BF                     	ds	2
  1532  0000C1                     pow@sign:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x61
  1536  0000C1                     	ds	1
  1537  0000C2                     pow@yi:
  1538                           	opt stack 0
  1539                           
  1540                           ; 4 bytes @ 0x62
  1541  0000C2                     	ds	1
  1542  0000C3                     sprintf@exp:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x63
  1546  0000C3                     	ds	2
  1547  0000C5                     sprintf@tmpval:
  1548                           	opt stack 0
  1549                           
  1550                           ; 4 bytes @ 0x65
  1551  0000C5                     	ds	1
  1552  0000C6                     _initSPI$2527:
  1553                           	opt stack 0
  1554  0000C6                     _adjustDigipot$2530:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x66
  1558  0000C6                     	ds	3
  1559  0000C9                     sprintf@fval:
  1560                           	opt stack 0
  1561  0000C9                     _initSPI$2528:
  1562                           	opt stack 0
  1563  0000C9                     _adjustDigipot$2531:
  1564                           	opt stack 0
  1565                           
  1566                           ; 3 bytes @ 0x69
  1567  0000C9                     	ds	3
  1568  0000CC                     sprintf@c:
  1569                           	opt stack 0
  1570  0000CC                     _initSPI$2529:
  1571                           	opt stack 0
  1572  0000CC                     _adjustDigipot$2532:
  1573                           	opt stack 0
  1574                           
  1575                           ; 3 bytes @ 0x6C
  1576  0000CC                     	ds	1
  1577  0000CD                     sendSensorData@capacitance:
  1578                           	opt stack 0
  1579                           
  1580                           ; 3 bytes @ 0x6D
  1581  0000CD                     	ds	2
  1582  0000CF                     
  1583                           ; 0 bytes @ 0x6F
  1584  0000CF                     	ds	1
  1585  0000D0                     sendSensorData@ambient_temp:
  1586                           	opt stack 0
  1587                           
  1588                           ; 3 bytes @ 0x70
  1589  0000D0                     	ds	3
  1590  0000D3                     sendSensorData@pipe_temp:
  1591                           	opt stack 0
  1592                           
  1593                           ; 3 bytes @ 0x73
  1594  0000D3                     	ds	3
  1595  0000D6                     sendSensorData@inductance:
  1596                           	opt stack 0
  1597                           
  1598                           ; 3 bytes @ 0x76
  1599  0000D6                     	ds	3
  1600  0000D9                     tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           postinc0	equ	0xFEE
  1605                           wreg	equ	0xFE8
  1606                           postdec1	equ	0xFE5
  1607                           fsr1l	equ	0xFE1
  1608                           
  1609                           ; 0 bytes @ 0x79
  1610                           
  1611                           	psect	cstackCOMRAM
  1612  000001                     __pcstackCOMRAM:
  1613                           	opt stack 0
  1614  000001                     ??_temperature_interrupt:
  1615  000001                     ?i2___ftpack:
  1616                           	opt stack 0
  1617  000001                     ?___lmul:
  1618                           	opt stack 0
  1619  000001                     ?i2___lldiv:
  1620                           	opt stack 0
  1621  000001                     i2___ftpack@arg:
  1622                           	opt stack 0
  1623  000001                     ___lmul@multiplier:
  1624                           	opt stack 0
  1625  000001                     i2___lldiv@dividend:
  1626                           	opt stack 0
  1627                           
  1628                           ; 4 bytes @ 0x0
  1629  000001                     	ds	3
  1630  000004                     i2___ftpack@exp:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x3
  1634  000004                     	ds	1
  1635  000005                     i2___ftpack@sign:
  1636                           	opt stack 0
  1637  000005                     ___lmul@multiplicand:
  1638                           	opt stack 0
  1639  000005                     i2___lldiv@divisor:
  1640                           	opt stack 0
  1641                           
  1642                           ; 4 bytes @ 0x4
  1643  000005                     	ds	1
  1644  000006                     ??i2___ftpack:
  1645                           
  1646                           ; 0 bytes @ 0x5
  1647  000006                     	ds	3
  1648  000009                     ___lmul@product:
  1649                           	opt stack 0
  1650  000009                     i2___lldiv@quotient:
  1651                           	opt stack 0
  1652                           
  1653                           ; 4 bytes @ 0x8
  1654  000009                     	ds	4
  1655  00000D                     ?___aldiv:
  1656                           	opt stack 0
  1657  00000D                     i2___lldiv@counter:
  1658                           	opt stack 0
  1659  00000D                     ___aldiv@dividend:
  1660                           	opt stack 0
  1661                           
  1662                           ; 4 bytes @ 0xC
  1663  00000D                     	ds	1
  1664  00000E                     ?i2___lltoft:
  1665                           	opt stack 0
  1666  00000E                     i2___lltoft@c:
  1667                           	opt stack 0
  1668                           
  1669                           ; 4 bytes @ 0xD
  1670  00000E                     	ds	3
  1671  000011                     ___aldiv@divisor:
  1672                           	opt stack 0
  1673                           
  1674                           ; 4 bytes @ 0x10
  1675  000011                     	ds	1
  1676  000012                     ??i2___lltoft:
  1677                           
  1678                           ; 0 bytes @ 0x11
  1679  000012                     	ds	3
  1680  000015                     ___aldiv@counter:
  1681                           	opt stack 0
  1682                           
  1683                           ; 1 bytes @ 0x14
  1684  000015                     	ds	1
  1685  000016                     ___aldiv@sign:
  1686                           	opt stack 0
  1687  000016                     i2___lltoft@exp:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x15
  1691  000016                     	ds	1
  1692  000017                     ___aldiv@quotient:
  1693                           	opt stack 0
  1694                           
  1695                           ; 4 bytes @ 0x16
  1696  000017                     	ds	4
  1697  00001B                     ??_frequency_interrupt:
  1698                           
  1699                           ; 0 bytes @ 0x1A
  1700  00001B                     	ds	8
  1701  000023                     ??_high_ISR:
  1702                           
  1703                           ; 0 bytes @ 0x22
  1704  000023                     	ds	14
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1l	equ	0xFE1
  1713                           
  1714 ;;
  1715 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1716 ;;
  1717 ;; *************** function _main *****************
  1718 ;; Defined at:
  1719 ;;		line 26 in file "main.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;		None               void
  1726 ;; Registers used:
  1727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels required when called:   11
  1739 ;; This function calls:
  1740 ;;		_UARTReceive
  1741 ;;		_delay_ms
  1742 ;;		_digipot
  1743 ;;		_initADC
  1744 ;;		_initInterrupts
  1745 ;;		_initLoRa
  1746 ;;		_initSPI
  1747 ;;		_initUART1
  1748 ;;		_init_frequency
  1749 ;;		_make_frequency_message
  1750 ;;		_make_step_message
  1751 ;;		_sendSensorData
  1752 ;;		_sendUARTMessage
  1753 ;; This function is called by:
  1754 ;;		Startup code after reset
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text0
  1759  01279E                     __ptext0:
  1760                           	opt stack 0
  1761  01279E                     _main:
  1762                           	opt stack 20
  1763                           
  1764                           ;main.c: 28: OSCCONbits.IRCF0 = 1;
  1765                           
  1766                           ;incstack = 0
  1767  01279E  88D3               	bsf	4051,4,c	;volatile
  1768                           
  1769                           ;main.c: 29: OSCCONbits.SCS0 = 1;
  1770  0127A0  80D3               	bsf	4051,0,c	;volatile
  1771                           
  1772                           ;main.c: 30: OSCCONbits.SCS1 = 1;
  1773  0127A2  82D3               	bsf	4051,1,c	;volatile
  1774                           
  1775                           ;main.c: 32: isCommandSent = 1;
  1776  0127A4  0E01               	movlw	1
  1777  0127A6  0100               	movlb	0	; () banked
  1778  0127A8  6FEE               	movwf	_isCommandSent& (0+255),b
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 33: initUART1();
  1782  0127AA  EC35  F09B         	call	_initUART1	;wreg free
  1783                           
  1784                           ;main.c: 34: initADC();
  1785  0127AE  ECCF  F09A         	call	_initADC	;wreg free
  1786                           
  1787                           ;main.c: 35: initInterrupts();
  1788  0127B2  EC5D  F09B         	call	_initInterrupts	;wreg free
  1789                           
  1790                           ;main.c: 36: initSPI();
  1791  0127B6  ECAF  F090         	call	_initSPI	;wreg free
  1792                           
  1793                           ;main.c: 37: init_frequency();
  1794  0127BA  EC7F  F09A         	call	_init_frequency	;wreg free
  1795                           
  1796                           ;main.c: 38: initLoRa();
  1797  0127BE  ECEE  F098         	call	_initLoRa	;wreg free
  1798  0127C2                     l4313:
  1799                           
  1800                           ;main.c: 41: UARTReceive(1);
  1801  0127C2  0E01               	movlw	1
  1802  0127C4  EC4D  F09B         	call	_UARTReceive
  1803                           
  1804                           ;main.c: 42: sendSensorData(1.1,2.2,3.3,4.4);
  1805  0127C8  0ECD               	movlw	205
  1806  0127CA  0100               	movlb	0	; () banked
  1807  0127CC  6FCD               	movwf	sendSensorData@capacitance& (0+255),b
  1808  0127CE  0E8C               	movlw	140
  1809  0127D0  0100               	movlb	0	; () banked
  1810  0127D2  6FCE               	movwf	(sendSensorData@capacitance+1)& (0+255),b
  1811  0127D4  0E3F               	movlw	63
  1812  0127D6  0100               	movlb	0	; () banked
  1813  0127D8  6FCF               	movwf	(sendSensorData@capacitance+2)& (0+255),b
  1814  0127DA  0ECD               	movlw	205
  1815  0127DC  0100               	movlb	0	; () banked
  1816  0127DE  6FD0               	movwf	sendSensorData@ambient_temp& (0+255),b
  1817  0127E0  0E0C               	movlw	12
  1818  0127E2  0100               	movlb	0	; () banked
  1819  0127E4  6FD1               	movwf	(sendSensorData@ambient_temp+1)& (0+255),b
  1820  0127E6  0E40               	movlw	64
  1821  0127E8  0100               	movlb	0	; () banked
  1822  0127EA  6FD2               	movwf	(sendSensorData@ambient_temp+2)& (0+255),b
  1823  0127EC  0E33               	movlw	51
  1824  0127EE  0100               	movlb	0	; () banked
  1825  0127F0  6FD3               	movwf	sendSensorData@pipe_temp& (0+255),b
  1826  0127F2  0E53               	movlw	83
  1827  0127F4  0100               	movlb	0	; () banked
  1828  0127F6  6FD4               	movwf	(sendSensorData@pipe_temp+1)& (0+255),b
  1829  0127F8  0E40               	movlw	64
  1830  0127FA  0100               	movlb	0	; () banked
  1831  0127FC  6FD5               	movwf	(sendSensorData@pipe_temp+2)& (0+255),b
  1832  0127FE  0ECD               	movlw	205
  1833  012800  0100               	movlb	0	; () banked
  1834  012802  6FD6               	movwf	sendSensorData@inductance& (0+255),b
  1835  012804  0E8C               	movlw	140
  1836  012806  0100               	movlb	0	; () banked
  1837  012808  6FD7               	movwf	(sendSensorData@inductance+1)& (0+255),b
  1838  01280A  0E40               	movlw	64
  1839  01280C  0100               	movlb	0	; () banked
  1840  01280E  6FD8               	movwf	(sendSensorData@inductance+2)& (0+255),b
  1841  012810  EC68  F099         	call	_sendSensorData	;wreg free
  1842                           
  1843                           ;main.c: 43: UARTReceive(0);
  1844  012814  0E00               	movlw	0
  1845  012816  EC4D  F09B         	call	_UARTReceive
  1846                           
  1847                           ;main.c: 45: delay_ms(800);
  1848  01281A  0E03               	movlw	3
  1849  01281C  0100               	movlb	0	; () banked
  1850  01281E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1851  012820  0E20               	movlw	32
  1852  012822  6F60               	movwf	delay_ms@ms& (0+255),b
  1853  012824  EC1D  F09A         	call	_delay_ms	;wreg free
  1854                           
  1855                           ;main.c: 46: make_frequency_message();
  1856  012828  ECFD  F09A         	call	_make_frequency_message	;wreg free
  1857                           
  1858                           ;main.c: 48: make_step_message();
  1859  01282C  EC12  F09B         	call	_make_step_message	;wreg free
  1860                           
  1861                           ;main.c: 51: sendUARTMessage(cap_frequency_message);
  1862  012830  0E00               	movlw	low _cap_frequency_message
  1863  012832  0100               	movlb	0	; () banked
  1864  012834  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  1865  012836  0E02               	movlw	high _cap_frequency_message
  1866  012838  0100               	movlb	0	; () banked
  1867  01283A  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  1868  01283C  EC2B  F099         	call	_sendUARTMessage	;wreg free
  1869                           
  1870                           ;main.c: 52: delay_ms(800);
  1871  012840  0E03               	movlw	3
  1872  012842  0100               	movlb	0	; () banked
  1873  012844  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1874  012846  0E20               	movlw	32
  1875  012848  6F60               	movwf	delay_ms@ms& (0+255),b
  1876  01284A  EC1D  F09A         	call	_delay_ms	;wreg free
  1877                           
  1878                           ;main.c: 53: sendUARTMessage(cap_step_message);
  1879  01284E  0E00               	movlw	low _cap_step_message
  1880  012850  0100               	movlb	0	; () banked
  1881  012852  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  1882  012854  0E04               	movlw	high _cap_step_message
  1883  012856  0100               	movlb	0	; () banked
  1884  012858  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  1885  01285A  EC2B  F099         	call	_sendUARTMessage	;wreg free
  1886                           
  1887                           ;main.c: 54: delay_ms(800);
  1888  01285E  0E03               	movlw	3
  1889  012860  0100               	movlb	0	; () banked
  1890  012862  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1891  012864  0E20               	movlw	32
  1892  012866  6F60               	movwf	delay_ms@ms& (0+255),b
  1893  012868  EC1D  F09A         	call	_delay_ms	;wreg free
  1894                           
  1895                           ;main.c: 58: delay_ms(800);
  1896  01286C  0E03               	movlw	3
  1897  01286E  0100               	movlb	0	; () banked
  1898  012870  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1899  012872  0E20               	movlw	32
  1900  012874  6F60               	movwf	delay_ms@ms& (0+255),b
  1901  012876  EC1D  F09A         	call	_delay_ms	;wreg free
  1902                           
  1903                           ;main.c: 62: delay_ms(800);
  1904  01287A  0E03               	movlw	3
  1905  01287C  0100               	movlb	0	; () banked
  1906  01287E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1907  012880  0E20               	movlw	32
  1908  012882  6F60               	movwf	delay_ms@ms& (0+255),b
  1909  012884  EC1D  F09A         	call	_delay_ms	;wreg free
  1910                           
  1911                           ;main.c: 65: digipot();
  1912  012888  EC47  F094         	call	_digipot	;wreg free
  1913  01288C  D79A               	goto	l4313
  1914  01288E                     __end_of_main:
  1915                           	opt stack 0
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postdec1	equ	0xFE5
  1923                           fsr1l	equ	0xFE1
  1924                           
  1925 ;; *************** function _sendSensorData *****************
  1926 ;; Defined at:
  1927 ;;		line 42 in file "lora.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  capacitance     3  109[BANK0 ] PTR unsigned char 
  1930 ;;  ambient_temp    3  112[BANK0 ] PTR unsigned char 
  1931 ;;  pipe_temp       3  115[BANK0 ] PTR unsigned char 
  1932 ;;  inductance      3  118[BANK0 ] PTR unsigned char 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;		None               void
  1937 ;; Registers used:
  1938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1944 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1947 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1948 ;;Total ram usage:       12 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    8
  1951 ;; This function calls:
  1952 ;;		_delay_ms
  1953 ;;		_sendUARTMessage
  1954 ;;		_sprintf
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text1
  1961  0132D0                     __ptext1:
  1962                           	opt stack 0
  1963  0132D0                     _sendSensorData:
  1964                           	opt stack 22
  1965                           
  1966                           ;lora.c: 43: sprintf(lora_message,"mac tx cnf 1 %x%x%x%x\r\n",
  1967                           ;lora.c: 44: capacitance, ambient_temp, pipe_temp, inductance);
  1968                           
  1969                           ;incstack = 0
  1970  0132D0  0E00               	movlw	low _lora_message
  1971  0132D2  0100               	movlb	0	; () banked
  1972  0132D4  6F9F               	movwf	sprintf@sp& (0+255),b
  1973  0132D6  0E03               	movlw	high _lora_message
  1974  0132D8  0100               	movlb	0	; () banked
  1975  0132DA  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1976  0132DC  0EC5               	movlw	low STR_4
  1977  0132DE  0100               	movlb	0	; () banked
  1978  0132E0  6FA1               	movwf	sprintf@f& (0+255),b
  1979  0132E2  0EFF               	movlw	high STR_4
  1980  0132E4  0100               	movlb	0	; () banked
  1981  0132E6  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1982  0132E8  C0CD  F0A3         	movff	sendSensorData@capacitance,?_sprintf+4
  1983  0132EC  C0CE  F0A4         	movff	sendSensorData@capacitance+1,?_sprintf+5
  1984  0132F0  C0CF  F0A5         	movff	sendSensorData@capacitance+2,?_sprintf+6
  1985  0132F4  C0D0  F0A6         	movff	sendSensorData@ambient_temp,?_sprintf+7
  1986  0132F8  C0D1  F0A7         	movff	sendSensorData@ambient_temp+1,?_sprintf+8
  1987  0132FC  C0D2  F0A8         	movff	sendSensorData@ambient_temp+2,?_sprintf+9
  1988  013300  C0D3  F0A9         	movff	sendSensorData@pipe_temp,?_sprintf+10
  1989  013304  C0D4  F0AA         	movff	sendSensorData@pipe_temp+1,?_sprintf+11
  1990  013308  C0D5  F0AB         	movff	sendSensorData@pipe_temp+2,?_sprintf+12
  1991  01330C  C0D6  F0AC         	movff	sendSensorData@inductance,?_sprintf+13
  1992  013310  C0D7  F0AD         	movff	sendSensorData@inductance+1,?_sprintf+14
  1993  013314  C0D8  F0AE         	movff	sendSensorData@inductance+2,?_sprintf+15
  1994  013318  EC00  F080         	call	_sprintf	;wreg free
  1995                           
  1996                           ;lora.c: 45: sendUARTMessage(lora_message);
  1997  01331C  0E00               	movlw	low _lora_message
  1998  01331E  0100               	movlb	0	; () banked
  1999  013320  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  2000  013322  0E03               	movlw	high _lora_message
  2001  013324  0100               	movlb	0	; () banked
  2002  013326  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  2003  013328  EC2B  F099         	call	_sendUARTMessage	;wreg free
  2004                           
  2005                           ;lora.c: 46: delay_ms(2000);
  2006  01332C  0E07               	movlw	7
  2007  01332E  0100               	movlb	0	; () banked
  2008  013330  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  2009  013332  0ED0               	movlw	208
  2010  013334  6F60               	movwf	delay_ms@ms& (0+255),b
  2011  013336  EC1D  F09A         	call	_delay_ms	;wreg free
  2012  01333A  0012               	return		;funcret
  2013  01333C                     __end_of_sendSensorData:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           postdec1	equ	0xFE5
  2022                           fsr1l	equ	0xFE1
  2023                           
  2024 ;; *************** function _make_step_message *****************
  2025 ;; Defined at:
  2026 ;;		line 49 in file "digipot.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;		None               void
  2033 ;; Registers used:
  2034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    8
  2047 ;; This function calls:
  2048 ;;		_sprintf
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text2
  2055  013624                     __ptext2:
  2056                           	opt stack 0
  2057  013624                     _make_step_message:
  2058                           	opt stack 22
  2059                           
  2060                           ;digipot.c: 51: sprintf(cap_step_message,"The digipot step is: %u \r\n",
  2061                           ;digipot.c: 52: step);
  2062                           
  2063                           ;incstack = 0
  2064  013624  0E00               	movlw	low _cap_step_message
  2065  013626  0100               	movlb	0	; () banked
  2066  013628  6F9F               	movwf	sprintf@sp& (0+255),b
  2067  01362A  0E04               	movlw	high _cap_step_message
  2068  01362C  0100               	movlb	0	; () banked
  2069  01362E  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  2070  013630  0EAA               	movlw	low STR_6
  2071  013632  0100               	movlb	0	; () banked
  2072  013634  6FA1               	movwf	sprintf@f& (0+255),b
  2073  013636  0EFF               	movlw	high STR_6
  2074  013638  0100               	movlb	0	; () banked
  2075  01363A  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  2076  01363C  C0E8  F0A3         	movff	_step,?_sprintf+4
  2077  013640  0100               	movlb	0	; () banked
  2078  013642  6BA4               	clrf	(?_sprintf+5)& (0+255),b
  2079  013644  EC00  F080         	call	_sprintf	;wreg free
  2080  013648  0012               	return		;funcret
  2081  01364A                     __end_of_make_step_message:
  2082                           	opt stack 0
  2083                           tblptru	equ	0xFF8
  2084                           tblptrh	equ	0xFF7
  2085                           tblptrl	equ	0xFF6
  2086                           tablat	equ	0xFF5
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           postdec1	equ	0xFE5
  2090                           fsr1l	equ	0xFE1
  2091                           
  2092 ;; *************** function _make_frequency_message *****************
  2093 ;; Defined at:
  2094 ;;		line 113 in file "frequency.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;		None               void
  2101 ;; Registers used:
  2102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    8
  2115 ;; This function calls:
  2116 ;;		_sprintf
  2117 ;; This function is called by:
  2118 ;;		_main
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text3
  2123  0135FA                     __ptext3:
  2124                           	opt stack 0
  2125  0135FA                     _make_frequency_message:
  2126                           	opt stack 22
  2127                           
  2128                           ;frequency.c: 118: sprintf(cap_frequency_message,"The capacitive frequency is: %f\r\n",
  2129                           ;frequency.c: 119: cap_freq);
  2130                           
  2131                           ;incstack = 0
  2132  0135FA  0E00               	movlw	low _cap_frequency_message
  2133  0135FC  0100               	movlb	0	; () banked
  2134  0135FE  6F9F               	movwf	sprintf@sp& (0+255),b
  2135  013600  0E02               	movlw	high _cap_frequency_message
  2136  013602  0100               	movlb	0	; () banked
  2137  013604  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  2138  013606  0E88               	movlw	low STR_5
  2139  013608  0100               	movlb	0	; () banked
  2140  01360A  6FA1               	movwf	sprintf@f& (0+255),b
  2141  01360C  0EFF               	movlw	high STR_5
  2142  01360E  0100               	movlb	0	; () banked
  2143  013610  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  2144  013612  C0D9  F0A3         	movff	_cap_freq,?_sprintf+4
  2145  013616  C0DA  F0A4         	movff	_cap_freq+1,?_sprintf+5
  2146  01361A  C0DB  F0A5         	movff	_cap_freq+2,?_sprintf+6
  2147  01361E  EC00  F080         	call	_sprintf	;wreg free
  2148  013622  0012               	return		;funcret
  2149  013624                     __end_of_make_frequency_message:
  2150                           	opt stack 0
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           postinc0	equ	0xFEE
  2156                           wreg	equ	0xFE8
  2157                           postdec1	equ	0xFE5
  2158                           fsr1l	equ	0xFE1
  2159                           
  2160 ;; *************** function _sprintf *****************
  2161 ;; Defined at:
  2162 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  2165 ;;		 -> lora_message(200), cap_step_message(200), cap_frequency_message(200), 
  2166 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  2167 ;;		 -> STR_6(27), STR_5(34), STR_4(24), 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  idx             1   88[BANK0 ] unsigned char 
  2170 ;;  tmpval          4  101[BANK0 ] struct .
  2171 ;;  val             4   95[BANK0 ] unsigned long 
  2172 ;;  fval            3  105[BANK0 ] unsigned long 
  2173 ;;  cp              3    0        PTR const unsigned char 
  2174 ;;  exp             2   99[BANK0 ] int 
  2175 ;;  prec            2   93[BANK0 ] int 
  2176 ;;  flag            2   91[BANK0 ] unsigned short 
  2177 ;;  ap              2   89[BANK0 ] PTR void [1]
  2178 ;;		 -> ?_sprintf(2), 
  2179 ;;  len             2    0        unsigned int 
  2180 ;;  width           2    0        int 
  2181 ;;  c               1  108[BANK0 ] char 
  2182 ;;  d               1    0        unsigned char 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  2   63[BANK0 ] int 
  2185 ;; Registers used:
  2186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2192 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2193 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2194 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2195 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2196 ;;Total ram usage:       46 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    7
  2199 ;; This function calls:
  2200 ;;		___awdiv
  2201 ;;		___ftadd
  2202 ;;		___ftge
  2203 ;;		___ftmul
  2204 ;;		___ftneg
  2205 ;;		___ftsub
  2206 ;;		___fttol
  2207 ;;		___lldiv
  2208 ;;		___llmod
  2209 ;;		___lltoft
  2210 ;;		___wmul
  2211 ;;		__div_to_l_
  2212 ;;		__tdiv_to_l_
  2213 ;;		_fround
  2214 ;;		_scale
  2215 ;; This function is called by:
  2216 ;;		_sendSensorData
  2217 ;;		_make_frequency_message
  2218 ;;		_make_step_message
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text4
  2223  010000                     __ptext4:
  2224                           	opt stack 0
  2225  010000                     _sprintf:
  2226                           	opt stack 22
  2227                           
  2228                           ;doprnt.c: 494: va_list ap;
  2229                           ;doprnt.c: 499: signed char c;
  2230                           ;doprnt.c: 501: int width;
  2231                           ;doprnt.c: 504: int prec;
  2232                           ;doprnt.c: 508: unsigned short flag;
  2233                           ;doprnt.c: 515: char d;
  2234                           ;doprnt.c: 516: double fval;
  2235                           ;doprnt.c: 517: int exp;
  2236                           ;doprnt.c: 523: union {
  2237                           ;doprnt.c: 524: unsigned long vd;
  2238                           ;doprnt.c: 525: double integ;
  2239                           ;doprnt.c: 526: } tmpval;
  2240                           ;doprnt.c: 528: unsigned long val;
  2241                           ;doprnt.c: 529: unsigned len;
  2242                           ;doprnt.c: 530: const char * cp;
  2243                           ;doprnt.c: 533: *ap = __va_start();
  2244                           
  2245                           ;incstack = 0
  2246  010000  0EA3               	movlw	low (?_sprintf+4)
  2247  010002  0100               	movlb	0	; () banked
  2248  010004  6FB9               	movwf	sprintf@ap& (0+255),b
  2249  010006  0E00               	movlw	high (?_sprintf+4)
  2250  010008  0100               	movlb	0	; () banked
  2251  01000A  6FBA               	movwf	(sprintf@ap+1)& (0+255),b
  2252                           
  2253                           ;doprnt.c: 536: while(c = *f++) {
  2254  01000C  EFB0  F084         	goto	l3969
  2255  010010                     l3745:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 538: if(c != '%')
  2259  010010  0E25               	movlw	37
  2260  010012  0100               	movlb	0	; () banked
  2261  010014  19CC               	xorwf	sprintf@c& (0+255),w,b
  2262  010016  B4D8               	btfsc	status,2,c
  2263  010018  D00B               	goto	l3751
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;doprnt.c: 540: {
  2267                           ;doprnt.c: 541: ((*sp++ = (c)));
  2268  01001A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2269  01001E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2270  010022  C0CC  FFDF         	movff	sprintf@c,indf2
  2271                           
  2272                           ; BSR set to: 0
  2273  010026  0100               	movlb	0	; () banked
  2274  010028  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2275  01002A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2276                           
  2277                           ;doprnt.c: 542: continue;
  2278  01002C  EFB0  F084         	goto	l3969
  2279  010030                     l3751:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;doprnt.c: 543: }
  2283                           ;doprnt.c: 548: flag = 0;
  2284  010030  0E00               	movlw	0
  2285  010032  0100               	movlb	0	; () banked
  2286  010034  6FBC               	movwf	(sprintf@flag+1)& (0+255),b
  2287  010036  0E00               	movlw	0
  2288  010038  6FBB               	movwf	sprintf@flag& (0+255),b
  2289                           
  2290                           ;doprnt.c: 635: switch(c = *f++) {
  2291  01003A  D00A               	goto	l3761
  2292  01003C                     l3753:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;doprnt.c: 663: flag |= 0x400;
  2296  01003C  0100               	movlb	0	; () banked
  2297  01003E  85BC               	bsf	(sprintf@flag+1)& (0+255),2,b
  2298                           
  2299                           ;doprnt.c: 664: break;
  2300  010040  D024               	goto	l3763
  2301  010042                     l3755:
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;doprnt.c: 721: flag |= 0x80;
  2305  010042  0100               	movlb	0	; () banked
  2306  010044  8FBB               	bsf	sprintf@flag& (0+255),7,b
  2307                           
  2308                           ;doprnt.c: 723: break;
  2309  010046  D021               	goto	l3763
  2310  010048                     l3757:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 818: flag |= 0xC0;
  2314  010048  0EC0               	movlw	192
  2315  01004A  0100               	movlb	0	; () banked
  2316  01004C  13BB               	iorwf	sprintf@flag& (0+255),f,b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 822: }
  2320                           
  2321                           ;doprnt.c: 819: break;
  2322  01004E  D01D               	goto	l3763
  2323  010050                     l3761:
  2324                           
  2325                           ; BSR set to: 0
  2326  010050  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2327  010054  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2328  010058  0100               	movlb	0	; () banked
  2329  01005A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2330  01005C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2331  01005E                     	if	0	;tblptru may be non-zero
  2332  01005E                     	endif
  2333  01005E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2334  01005E  0E00               	movlw	low (__mediumconst shr (0+16))
  2335  010060  6EF8               	movwf	tblptru,c
  2336  010062                     	endif
  2337  010062  0008               	tblrd		*
  2338  010064  CFF5 F0CC          	movff	tablat,sprintf@c
  2339  010068  0100               	movlb	0	; () banked
  2340  01006A  51CC               	movf	sprintf@c& (0+255),w,b
  2341                           
  2342                           ; Switch size 1, requested type "space"
  2343                           ; Number of cases is 4, Range of values is 0 to 120
  2344                           ; switch strategies available:
  2345                           ; Name         Instructions Cycles
  2346                           ; simple_byte           13     7 (average)
  2347                           ;	Chosen strategy is simple_byte
  2348  01006C  0A00               	xorlw	0	; case 0
  2349  01006E  B4D8               	btfsc	status,2,c
  2350  010070  EFC1  F084         	goto	l3971
  2351  010074  0A66               	xorlw	102	; case 102
  2352  010076  B4D8               	btfsc	status,2,c
  2353  010078  D7E1               	goto	l3753
  2354  01007A  0A13               	xorlw	19	; case 117
  2355  01007C  B4D8               	btfsc	status,2,c
  2356  01007E  D7E4               	goto	l3757
  2357  010080  0A0D               	xorlw	13	; case 120
  2358  010082  B4D8               	btfsc	status,2,c
  2359  010084  D7DE               	goto	l3755
  2360  010086  EFB0  F084         	goto	l3969
  2361  01008A                     l3763:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 825: if(flag & (0x700)) {
  2365  01008A  0E07               	movlw	7
  2366  01008C  0100               	movlb	0	; () banked
  2367  01008E  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2368  010090  B4D8               	btfsc	status,2,c
  2369  010092  D332               	goto	l3909
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;doprnt.c: 829: prec = 6;
  2373  010094  0E00               	movlw	0
  2374  010096  0100               	movlb	0	; () banked
  2375  010098  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  2376  01009A  0E06               	movlw	6
  2377  01009C  6FBD               	movwf	sprintf@prec& (0+255),b
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2381  01009E  C0B9  FFD9         	movff	sprintf@ap,fsr2l
  2382  0100A2  C0BA  FFDA         	movff	sprintf@ap+1,fsr2h
  2383  0100A6  CFDE F0C9          	movff	postinc2,sprintf@fval
  2384  0100AA  CFDE F0CA          	movff	postinc2,sprintf@fval+1
  2385  0100AE  CFDD F0CB          	movff	postdec2,sprintf@fval+2
  2386                           
  2387                           ; BSR set to: 0
  2388  0100B2  0E03               	movlw	3
  2389  0100B4  0100               	movlb	0	; () banked
  2390  0100B6  27B9               	addwf	sprintf@ap& (0+255),f,b
  2391  0100B8  0E00               	movlw	0
  2392  0100BA  23BA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;doprnt.c: 831: if(fval < 0.0) {
  2396  0100BC  0100               	movlb	0	; () banked
  2397  0100BE  AFCB               	btfss	(sprintf@fval+2)& (0+255),7,b
  2398  0100C0  D011               	goto	l3777
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;doprnt.c: 832: fval = -fval;
  2402  0100C2  C0C9  F060         	movff	sprintf@fval,___ftneg@f1
  2403  0100C6  C0CA  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  2404  0100CA  C0CB  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  2405  0100CE  ECB7  F09A         	call	___ftneg	;wreg free
  2406  0100D2  C060  F0C9         	movff	?___ftneg,sprintf@fval
  2407  0100D6  C061  F0CA         	movff	?___ftneg+1,sprintf@fval+1
  2408  0100DA  C062  F0CB         	movff	?___ftneg+2,sprintf@fval+2
  2409                           
  2410                           ;doprnt.c: 833: flag |= 0x03;
  2411  0100DE  0E03               	movlw	3
  2412  0100E0  0100               	movlb	0	; () banked
  2413  0100E2  13BB               	iorwf	sprintf@flag& (0+255),f,b
  2414  0100E4                     l3777:
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;doprnt.c: 834: }
  2418                           ;doprnt.c: 835: exp = 0;
  2419  0100E4  0E00               	movlw	0
  2420  0100E6  0100               	movlb	0	; () banked
  2421  0100E8  6FC4               	movwf	(sprintf@exp+1)& (0+255),b
  2422  0100EA  0E00               	movlw	0
  2423  0100EC  6FC3               	movwf	sprintf@exp& (0+255),b
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;doprnt.c: 836: if( fval!=0) {
  2427  0100EE  0100               	movlb	0	; () banked
  2428  0100F0  51C9               	movf	sprintf@fval& (0+255),w,b
  2429  0100F2  0100               	movlb	0	; () banked
  2430  0100F4  11CA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2431  0100F6  0100               	movlb	0	; () banked
  2432  0100F8  11CB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2433  0100FA  B4D8               	btfsc	status,2,c
  2434  0100FC  D09B               	goto	l3805
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2438  0100FE  0E82               	movlw	130
  2439  010100  0100               	movlb	0	; () banked
  2440  010102  6FAF               	movwf	??_sprintf& (0+255),b
  2441  010104  0EFF               	movlw	255
  2442  010106  0100               	movlb	0	; () banked
  2443  010108  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  2444  01010A  C0C9  F0B1         	movff	sprintf@fval,??_sprintf+2
  2445  01010E  C0CA  F0B2         	movff	sprintf@fval+1,??_sprintf+3
  2446  010112  C0CB  F0B3         	movff	sprintf@fval+2,??_sprintf+4
  2447  010116  C0CC  F0B4         	movff	sprintf@fval+3,??_sprintf+5
  2448  01011A  0E10               	movlw	16
  2449  01011C  D006               	goto	u3550
  2450  01011E                     u3555:
  2451  01011E  0100               	movlb	0	; () banked
  2452  010120  90D8               	bcf	status,0,c
  2453  010122  33B4               	rrcf	(??_sprintf+5)& (0+255),f,b
  2454  010124  33B3               	rrcf	(??_sprintf+4)& (0+255),f,b
  2455  010126  33B2               	rrcf	(??_sprintf+3)& (0+255),f,b
  2456  010128  33B1               	rrcf	(??_sprintf+2)& (0+255),f,b
  2457  01012A                     u3550:
  2458  01012A  2EE8               	decfsz	wreg,f,c
  2459  01012C  D7F8               	goto	u3555
  2460  01012E  0100               	movlb	0	; () banked
  2461  010130  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  2462  010132  0100               	movlb	0	; () banked
  2463  010134  25AF               	addwf	??_sprintf& (0+255),w,b
  2464  010136  0100               	movlb	0	; () banked
  2465  010138  6FC3               	movwf	sprintf@exp& (0+255),b
  2466  01013A  0E00               	movlw	0
  2467  01013C  0100               	movlb	0	; () banked
  2468  01013E  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  2469  010140  0100               	movlb	0	; () banked
  2470  010142  6FC4               	movwf	(sprintf@exp+1)& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 838: exp--;
  2474  010144  0100               	movlb	0	; () banked
  2475  010146  07C3               	decf	sprintf@exp& (0+255),f,b
  2476  010148  A0D8               	btfss	status,0,c
  2477  01014A  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;doprnt.c: 839: exp *= 3;
  2481  01014C  C0C3  F06E         	movff	sprintf@exp,___wmul@multiplier
  2482  010150  C0C4  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2483  010154  0E00               	movlw	0
  2484  010156  0100               	movlb	0	; () banked
  2485  010158  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2486  01015A  0E03               	movlw	3
  2487  01015C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2488  01015E  EC9C  F09A         	call	___wmul	;wreg free
  2489  010162  C06E  F0C3         	movff	?___wmul,sprintf@exp
  2490  010166  C06F  F0C4         	movff	?___wmul+1,sprintf@exp+1
  2491                           
  2492                           ;doprnt.c: 840: exp /= 10;
  2493  01016A  C0C3  F066         	movff	sprintf@exp,___awdiv@dividend
  2494  01016E  C0C4  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  2495  010172  0E00               	movlw	0
  2496  010174  0100               	movlb	0	; () banked
  2497  010176  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2498  010178  0E0A               	movlw	10
  2499  01017A  6F68               	movwf	___awdiv@divisor& (0+255),b
  2500  01017C  EC79  F095         	call	___awdiv	;wreg free
  2501  010180  C066  F0C3         	movff	?___awdiv,sprintf@exp
  2502  010184  C067  F0C4         	movff	?___awdiv+1,sprintf@exp+1
  2503                           
  2504                           ;doprnt.c: 841: if(exp < 0)
  2505  010188  0100               	movlb	0	; () banked
  2506  01018A  AFC4               	btfss	(sprintf@exp+1)& (0+255),7,b
  2507  01018C  D004               	goto	l3793
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;doprnt.c: 842: exp--;
  2511  01018E  0100               	movlb	0	; () banked
  2512  010190  07C3               	decf	sprintf@exp& (0+255),f,b
  2513  010192  A0D8               	btfss	status,0,c
  2514  010194  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2515  010196                     l3793:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2519  010196  0100               	movlb	0	; () banked
  2520  010198  51C3               	movf	sprintf@exp& (0+255),w,b
  2521  01019A  0800               	sublw	0
  2522  01019C  ECC8  F084         	call	_scale
  2523  0101A0  C083  F0C5         	movff	?_scale,sprintf@tmpval
  2524  0101A4  C084  F0C6         	movff	?_scale+1,sprintf@tmpval+1
  2525  0101A8  C085  F0C7         	movff	?_scale+2,sprintf@tmpval+2
  2526                           
  2527                           ;doprnt.c: 847: tmpval.integ *= fval;
  2528  0101AC  C0C5  F074         	movff	sprintf@tmpval,___ftmul@f1
  2529  0101B0  C0C6  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2530  0101B4  C0C7  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2531  0101B8  C0C9  F077         	movff	sprintf@fval,___ftmul@f2
  2532  0101BC  C0CA  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2533  0101C0  C0CB  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2534  0101C4  EC69  F08D         	call	___ftmul	;wreg free
  2535  0101C8  C074  F0C5         	movff	?___ftmul,sprintf@tmpval
  2536  0101CC  C075  F0C6         	movff	?___ftmul+1,sprintf@tmpval+1
  2537  0101D0  C076  F0C7         	movff	?___ftmul+2,sprintf@tmpval+2
  2538                           
  2539                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2540  0101D4  C0C5  F083         	movff	sprintf@tmpval,___ftge@ff1
  2541  0101D8  C0C6  F084         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2542  0101DC  C0C7  F085         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2543  0101E0  0E00               	movlw	0
  2544  0101E2  0100               	movlb	0	; () banked
  2545  0101E4  6F86               	movwf	___ftge@ff2& (0+255),b
  2546  0101E6  0E80               	movlw	128
  2547  0101E8  0100               	movlb	0	; () banked
  2548  0101EA  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  2549  0101EC  0E3F               	movlw	63
  2550  0101EE  0100               	movlb	0	; () banked
  2551  0101F0  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  2552  0101F2  EC15  F095         	call	___ftge	;wreg free
  2553  0101F6  0100               	movlb	0	; () banked
  2554  0101F8  B0D8               	btfsc	status,0,c
  2555  0101FA  D005               	goto	l3801
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 849: exp--;
  2559  0101FC  0100               	movlb	0	; () banked
  2560  0101FE  07C3               	decf	sprintf@exp& (0+255),f,b
  2561  010200  A0D8               	btfss	status,0,c
  2562  010202  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2563  010204  D017               	goto	l3805
  2564  010206                     l3801:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2568  010206  C0C5  F083         	movff	sprintf@tmpval,___ftge@ff1
  2569  01020A  C0C6  F084         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2570  01020E  C0C7  F085         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2571  010212  0E00               	movlw	0
  2572  010214  0100               	movlb	0	; () banked
  2573  010216  6F86               	movwf	___ftge@ff2& (0+255),b
  2574  010218  0E20               	movlw	32
  2575  01021A  0100               	movlb	0	; () banked
  2576  01021C  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  2577  01021E  0E41               	movlw	65
  2578  010220  0100               	movlb	0	; () banked
  2579  010222  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  2580  010224  EC15  F095         	call	___ftge	;wreg free
  2581  010228  0100               	movlb	0	; () banked
  2582  01022A  A0D8               	btfss	status,0,c
  2583  01022C  D003               	goto	l3805
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 851: exp++;
  2587  01022E  0100               	movlb	0	; () banked
  2588  010230  4BC3               	infsnz	sprintf@exp& (0+255),f,b
  2589  010232  2BC4               	incf	(sprintf@exp+1)& (0+255),f,b
  2590  010234                     l3805:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 852: }
  2594                           ;doprnt.c: 1112: if(prec <= 12)
  2595  010234  0100               	movlb	0	; () banked
  2596  010236  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2597  010238  D008               	goto	l3807
  2598  01023A  0100               	movlb	0	; () banked
  2599  01023C  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2600  01023E  E11D               	bnz	l3809
  2601  010240  0E0D               	movlw	13
  2602  010242  0100               	movlb	0	; () banked
  2603  010244  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2604  010246  B0D8               	btfsc	status,0,c
  2605  010248  D018               	goto	l3809
  2606  01024A                     l3807:
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1113: fval += fround(prec);
  2610  01024A  C0C9  F08D         	movff	sprintf@fval,___ftadd@f1
  2611  01024E  C0CA  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  2612  010252  C0CB  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  2613  010256  0100               	movlb	0	; () banked
  2614  010258  51BD               	movf	sprintf@prec& (0+255),w,b
  2615  01025A  EC43  F087         	call	_fround
  2616  01025E  C083  F090         	movff	?_fround,___ftadd@f2
  2617  010262  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  2618  010266  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  2619  01026A  ECAB  F088         	call	___ftadd	;wreg free
  2620  01026E  C08D  F0C9         	movff	?___ftadd,sprintf@fval
  2621  010272  C08E  F0CA         	movff	?___ftadd+1,sprintf@fval+1
  2622  010276  C08F  F0CB         	movff	?___ftadd+2,sprintf@fval+2
  2623  01027A                     l3809:
  2624                           
  2625                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2626  01027A  0100               	movlb	0	; () banked
  2627  01027C  BFC4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2628  01027E  D008               	goto	l3811
  2629  010280  0100               	movlb	0	; () banked
  2630  010282  51C4               	movf	(sprintf@exp+1)& (0+255),w,b
  2631  010284  E12A               	bnz	l3817
  2632  010286  0E0A               	movlw	10
  2633  010288  0100               	movlb	0	; () banked
  2634  01028A  5DC3               	subwf	sprintf@exp& (0+255),w,b
  2635  01028C  B0D8               	btfsc	status,0,c
  2636  01028E  D025               	goto	l3817
  2637  010290                     l3811:
  2638                           
  2639                           ; BSR set to: 0
  2640  010290  0100               	movlb	0	; () banked
  2641  010292  51C9               	movf	sprintf@fval& (0+255),w,b
  2642  010294  0100               	movlb	0	; () banked
  2643  010296  11CA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2644  010298  0100               	movlb	0	; () banked
  2645  01029A  11CB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2646  01029C  B4D8               	btfsc	status,2,c
  2647  01029E  D063               	goto	l3831
  2648                           
  2649                           ; BSR set to: 0
  2650  0102A0  C0C9  F08A         	movff	sprintf@fval,___fttol@f1
  2651  0102A4  C0CA  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2652  0102A8  C0CB  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2653  0102AC  EC0D  F090         	call	___fttol	;wreg free
  2654  0102B0  0100               	movlb	0	; () banked
  2655  0102B2  518A               	movf	?___fttol& (0+255),w,b
  2656  0102B4  0100               	movlb	0	; () banked
  2657  0102B6  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  2658  0102B8  0100               	movlb	0	; () banked
  2659  0102BA  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  2660  0102BC  0100               	movlb	0	; () banked
  2661  0102BE  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  2662  0102C0  A4D8               	btfss	status,2,c
  2663  0102C2  D051               	goto	l3831
  2664                           
  2665                           ; BSR set to: 0
  2666  0102C4  0100               	movlb	0	; () banked
  2667  0102C6  BFC4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2668  0102C8  D04E               	goto	l3831
  2669  0102CA  0100               	movlb	0	; () banked
  2670  0102CC  51C4               	movf	(sprintf@exp+1)& (0+255),w,b
  2671  0102CE  E105               	bnz	l3817
  2672  0102D0  0E02               	movlw	2
  2673  0102D2  0100               	movlb	0	; () banked
  2674  0102D4  5DC3               	subwf	sprintf@exp& (0+255),w,b
  2675  0102D6  A0D8               	btfss	status,0,c
  2676  0102D8  D046               	goto	l3831
  2677  0102DA                     l3817:
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2681  0102DA  C0C5  F083         	movff	sprintf@tmpval,___ftge@ff1
  2682  0102DE  C0C6  F084         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2683  0102E2  C0C7  F085         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2684  0102E6  0E70               	movlw	112
  2685  0102E8  0100               	movlb	0	; () banked
  2686  0102EA  6F86               	movwf	___ftge@ff2& (0+255),b
  2687  0102EC  0E89               	movlw	137
  2688  0102EE  0100               	movlb	0	; () banked
  2689  0102F0  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  2690  0102F2  0E40               	movlw	64
  2691  0102F4  0100               	movlb	0	; () banked
  2692  0102F6  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  2693  0102F8  EC15  F095         	call	___ftge	;wreg free
  2694  0102FC  0100               	movlb	0	; () banked
  2695  0102FE  B0D8               	btfsc	status,0,c
  2696  010300  D003               	goto	l3821
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2700  010302  0100               	movlb	0	; () banked
  2701  010304  0EF7               	movlw	247
  2702  010306  D002               	goto	L1
  2703  010308                     l3821:
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2707  010308  0100               	movlb	0	; () banked
  2708  01030A  0EF8               	movlw	248
  2709  01030C                     L1:
  2710  01030C  27C3               	addwf	sprintf@exp& (0+255),f,b
  2711  01030E  0EFF               	movlw	255
  2712  010310  23C4               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;doprnt.c: 1124: }
  2716                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2717                           
  2718                           ; BSR set to: 0
  2719  010312  0100               	movlb	0	; () banked
  2720  010314  51C3               	movf	sprintf@exp& (0+255),w,b
  2721  010316  ECC8  F084         	call	_scale
  2722  01031A  C083  F0C5         	movff	?_scale,sprintf@tmpval
  2723  01031E  C084  F0C6         	movff	?_scale+1,sprintf@tmpval+1
  2724  010322  C085  F0C7         	movff	?_scale+2,sprintf@tmpval+2
  2725                           
  2726                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2727  010326  C0C9  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  2728  01032A  C0CA  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2729  01032E  C0CB  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2730  010332  C0C5  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2731  010336  C0C6  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2732  01033A  C0C7  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2733  01033E  ECD6  F08B         	call	__tdiv_to_l_	;wreg free
  2734  010342  C060  F0BF         	movff	?__tdiv_to_l_,sprintf@val
  2735  010346  C061  F0C0         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2736  01034A  C062  F0C1         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2737  01034E  C063  F0C2         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2738                           
  2739                           ;doprnt.c: 1129: fval = 0.0;
  2740  010352  0E00               	movlw	0
  2741  010354  0100               	movlb	0	; () banked
  2742  010356  6FC9               	movwf	sprintf@fval& (0+255),b
  2743  010358  0E00               	movlw	0
  2744  01035A  0100               	movlb	0	; () banked
  2745  01035C  6FCA               	movwf	(sprintf@fval+1)& (0+255),b
  2746  01035E  0E00               	movlw	0
  2747  010360  0100               	movlb	0	; () banked
  2748  010362  6FCB               	movwf	(sprintf@fval+2)& (0+255),b
  2749                           
  2750                           ;doprnt.c: 1130: } else {
  2751  010364  D033               	goto	l3835
  2752  010366                     l3831:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2756  010366  C0C9  F08A         	movff	sprintf@fval,___fttol@f1
  2757  01036A  C0CA  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2758  01036E  C0CB  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2759  010372  EC0D  F090         	call	___fttol	;wreg free
  2760  010376  C08A  F0BF         	movff	?___fttol,sprintf@val
  2761  01037A  C08B  F0C0         	movff	?___fttol+1,sprintf@val+1
  2762  01037E  C08C  F0C1         	movff	?___fttol+2,sprintf@val+2
  2763  010382  C08D  F0C2         	movff	?___fttol+3,sprintf@val+3
  2764                           
  2765                           ;doprnt.c: 1132: fval -= (double)val;
  2766  010386  C0C9  F099         	movff	sprintf@fval,___ftsub@f1
  2767  01038A  C0CA  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  2768  01038E  C0CB  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  2769  010392  C0BF  F068         	movff	sprintf@val,___lltoft@c
  2770  010396  C0C0  F069         	movff	sprintf@val+1,___lltoft@c+1
  2771  01039A  C0C1  F06A         	movff	sprintf@val+2,___lltoft@c+2
  2772  01039E  C0C2  F06B         	movff	sprintf@val+3,___lltoft@c+3
  2773  0103A2  ECB0  F098         	call	___lltoft	;wreg free
  2774  0103A6  C068  F09C         	movff	?___lltoft,___ftsub@f2
  2775  0103AA  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  2776  0103AE  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  2777  0103B2  ECF7  F099         	call	___ftsub	;wreg free
  2778  0103B6  C099  F0C9         	movff	?___ftsub,sprintf@fval
  2779  0103BA  C09A  F0CA         	movff	?___ftsub+1,sprintf@fval+1
  2780  0103BE  C09B  F0CB         	movff	?___ftsub+2,sprintf@fval+2
  2781                           
  2782                           ;doprnt.c: 1133: exp = 0;
  2783  0103C2  0E00               	movlw	0
  2784  0103C4  0100               	movlb	0	; () banked
  2785  0103C6  6FC4               	movwf	(sprintf@exp+1)& (0+255),b
  2786  0103C8  0E00               	movlw	0
  2787  0103CA  6FC3               	movwf	sprintf@exp& (0+255),b
  2788  0103CC                     l3835:
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;doprnt.c: 1134: }
  2792                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2793  0103CC  0E01               	movlw	1
  2794  0103CE  0100               	movlb	0	; () banked
  2795  0103D0  6FCC               	movwf	sprintf@c& (0+255),b
  2796  0103D2                     l3837:
  2797                           
  2798                           ; BSR set to: 0
  2799  0103D2  0E0A               	movlw	10
  2800  0103D4  0100               	movlb	0	; () banked
  2801  0103D6  19CC               	xorwf	sprintf@c& (0+255),w,b
  2802  0103D8  B4D8               	btfsc	status,2,c
  2803  0103DA  D021               	goto	l3849
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;doprnt.c: 1137: if(val < dpowers[c])
  2807                           
  2808                           ; BSR set to: 0
  2809                           
  2810                           ; BSR set to: 0
  2811  0103DC  0100               	movlb	0	; () banked
  2812  0103DE  51CC               	movf	sprintf@c& (0+255),w,b
  2813  0103E0  0D04               	mullw	4
  2814  0103E2  0E09               	movlw	low _dpowers
  2815  0103E4  24F3               	addwf	prodl,w,c
  2816  0103E6  6EF6               	movwf	tblptrl,c
  2817  0103E8  0EFE               	movlw	high _dpowers
  2818  0103EA  20F4               	addwfc	prodh,w,c
  2819  0103EC  6EF7               	movwf	tblptrh,c
  2820  0103EE                     	if	1	;There are 3 active tblptr bytes
  2821  0103EE  6AF8               	clrf	tblptru,c
  2822  0103F0  0E00               	movlw	low (__mediumconst shr (0+16))
  2823  0103F2  22F8               	addwfc	tblptru,f,c
  2824  0103F4                     	endif
  2825  0103F4  0009               	tblrd		*+
  2826  0103F6  50F5               	movf	tablat,w,c
  2827  0103F8  0100               	movlb	0	; () banked
  2828  0103FA  5DBF               	subwf	sprintf@val& (0+255),w,b
  2829  0103FC  0009               	tblrd		*+
  2830  0103FE  50F5               	movf	tablat,w,c
  2831  010400  0100               	movlb	0	; () banked
  2832  010402  59C0               	subwfb	(sprintf@val+1)& (0+255),w,b
  2833  010404  0009               	tblrd		*+
  2834  010406  50F5               	movf	tablat,w,c
  2835  010408  0100               	movlb	0	; () banked
  2836  01040A  59C1               	subwfb	(sprintf@val+2)& (0+255),w,b
  2837  01040C  0009               	tblrd		*+
  2838  01040E  50F5               	movf	tablat,w,c
  2839  010410  0100               	movlb	0	; () banked
  2840  010412  59C2               	subwfb	(sprintf@val+3)& (0+255),w,b
  2841  010414  A0D8               	btfss	status,0,c
  2842  010416  D003               	goto	l3849
  2843                           
  2844                           ; BSR set to: 0
  2845                           
  2846                           ; BSR set to: 0
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;doprnt.c: 1138: break;
  2850  010418  0100               	movlb	0	; () banked
  2851  01041A  2BCC               	incf	sprintf@c& (0+255),f,b
  2852  01041C  D7DA               	goto	l3837
  2853  01041E                     l3849:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;doprnt.c: 1175: {
  2857                           ;doprnt.c: 1188: if(flag & 0x03)
  2858  01041E  0E03               	movlw	3
  2859  010420  0100               	movlb	0	; () banked
  2860  010422  15BB               	andwf	sprintf@flag& (0+255),w,b
  2861  010424  0100               	movlb	0	; () banked
  2862  010426  6FAF               	movwf	??_sprintf& (0+255),b
  2863  010428  0E00               	movlw	0
  2864  01042A  0100               	movlb	0	; () banked
  2865  01042C  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2866  01042E  0100               	movlb	0	; () banked
  2867  010430  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  2868  010432  0100               	movlb	0	; () banked
  2869  010434  51AF               	movf	??_sprintf& (0+255),w,b
  2870  010436  0100               	movlb	0	; () banked
  2871  010438  11B0               	iorwf	(??_sprintf+1)& (0+255),w,b
  2872  01043A  B4D8               	btfsc	status,2,c
  2873  01043C  D058               	goto	l3863
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2877  01043E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2878  010442  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2879  010446  0E2D               	movlw	45
  2880  010448  D050               	goto	L2
  2881  01044A                     l3853:
  2882                           
  2883                           ; BSR set to: 0
  2884  01044A  0100               	movlb	0	; () banked
  2885  01044C  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2886  01044E  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;doprnt.c: 1195: }
  2890                           ;doprnt.c: 1196: while(c--) {
  2891  010450  D04E               	goto	l3863
  2892  010452                     l3855:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;doprnt.c: 1200: {
  2896                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2897  010452  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  2898  010456  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  2899  01045A  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  2900  01045E  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  2901  010462  0100               	movlb	0	; () banked
  2902  010464  51CC               	movf	sprintf@c& (0+255),w,b
  2903  010466  0D04               	mullw	4
  2904  010468  0E09               	movlw	low _dpowers
  2905  01046A  24F3               	addwf	prodl,w,c
  2906  01046C  6EF6               	movwf	tblptrl,c
  2907  01046E  0EFE               	movlw	high _dpowers
  2908  010470  20F4               	addwfc	prodh,w,c
  2909  010472  6EF7               	movwf	tblptrh,c
  2910  010474                     	if	1	;There are 3 active tblptr bytes
  2911  010474  6AF8               	clrf	tblptru,c
  2912  010476  0E00               	movlw	low (__mediumconst shr (0+16))
  2913  010478  22F8               	addwfc	tblptru,f,c
  2914  01047A                     	endif
  2915  01047A  0009               	tblrd		*+
  2916  01047C  CFF5 F064          	movff	tablat,___lldiv@divisor
  2917  010480  0009               	tblrd		*+
  2918  010482  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  2919  010486  0009               	tblrd		*+
  2920  010488  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  2921  01048C  000A               	tblrd		*-
  2922  01048E  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  2923  010492  ECD8  F095         	call	___lldiv	;wreg free
  2924  010496  C060  F0C5         	movff	?___lldiv,sprintf@tmpval
  2925  01049A  C061  F0C6         	movff	?___lldiv+1,sprintf@tmpval+1
  2926  01049E  C062  F0C7         	movff	?___lldiv+2,sprintf@tmpval+2
  2927  0104A2  C063  F0C8         	movff	?___lldiv+3,sprintf@tmpval+3
  2928                           
  2929                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2930  0104A6  C0C5  F06D         	movff	sprintf@tmpval,___llmod@dividend
  2931  0104AA  C0C6  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2932  0104AE  C0C7  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2933  0104B2  C0C8  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2934  0104B6  0E0A               	movlw	10
  2935  0104B8  0100               	movlb	0	; () banked
  2936  0104BA  6F71               	movwf	___llmod@divisor& (0+255),b
  2937  0104BC  0E00               	movlw	0
  2938  0104BE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  2939  0104C0  0E00               	movlw	0
  2940  0104C2  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  2941  0104C4  0E00               	movlw	0
  2942  0104C6  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  2943  0104C8  ECD6  F097         	call	___llmod	;wreg free
  2944  0104CC  C06D  F0C5         	movff	?___llmod,sprintf@tmpval
  2945  0104D0  C06E  F0C6         	movff	?___llmod+1,sprintf@tmpval+1
  2946  0104D4  C06F  F0C7         	movff	?___llmod+2,sprintf@tmpval+2
  2947  0104D8  C070  F0C8         	movff	?___llmod+3,sprintf@tmpval+3
  2948                           
  2949                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2950  0104DC  0100               	movlb	0	; () banked
  2951  0104DE  51C5               	movf	sprintf@tmpval& (0+255),w,b
  2952  0104E0  0F30               	addlw	48
  2953  0104E2  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2954  0104E6  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2955  0104EA                     L2:
  2956  0104EA  6EDF               	movwf	indf2,c
  2957  0104EC  D7AE               	goto	l3853
  2958  0104EE                     l3863:
  2959                           
  2960                           ; BSR set to: 0
  2961  0104EE  0100               	movlb	0	; () banked
  2962  0104F0  07CC               	decf	sprintf@c& (0+255),f,b
  2963  0104F2  0100               	movlb	0	; () banked
  2964  0104F4  29CC               	incf	sprintf@c& (0+255),w,b
  2965  0104F6  B4D8               	btfsc	status,2,c
  2966  0104F8  D00E               	goto	l3871
  2967  0104FA  D7AB               	goto	l3855
  2968  0104FC                     l3865:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2972  0104FC  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2973  010500  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2974  010504  0E30               	movlw	48
  2975  010506  6EDF               	movwf	indf2,c
  2976                           
  2977                           ; BSR set to: 0
  2978  010508  0100               	movlb	0	; () banked
  2979  01050A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2980  01050C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 1209: exp--;
  2984  01050E  0100               	movlb	0	; () banked
  2985  010510  07C3               	decf	sprintf@exp& (0+255),f,b
  2986  010512  A0D8               	btfss	status,0,c
  2987  010514  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2988  010516                     l3871:
  2989                           
  2990                           ; BSR set to: 0
  2991  010516  0100               	movlb	0	; () banked
  2992  010518  BFC4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2993  01051A  D007               	goto	l3873
  2994  01051C  0100               	movlb	0	; () banked
  2995  01051E  51C4               	movf	(sprintf@exp+1)& (0+255),w,b
  2996  010520  E1ED               	bnz	l3865
  2997  010522  0100               	movlb	0	; () banked
  2998  010524  05C3               	decf	sprintf@exp& (0+255),w,b
  2999  010526  B0D8               	btfsc	status,0,c
  3000  010528  D7E9               	goto	l3865
  3001  01052A                     l3873:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;doprnt.c: 1210: }
  3005                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3006  01052A  0100               	movlb	0	; () banked
  3007  01052C  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3008  01052E  D00C               	goto	l540
  3009  010530  0100               	movlb	0	; () banked
  3010  010532  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  3011  010534  E105               	bnz	u3710
  3012  010536  0E09               	movlw	9
  3013  010538  0100               	movlb	0	; () banked
  3014  01053A  5DBD               	subwf	sprintf@prec& (0+255),w,b
  3015  01053C  A0D8               	btfss	status,0,c
  3016  01053E  D004               	goto	l540
  3017  010540                     u3710:
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3021  010540  0E08               	movlw	8
  3022  010542  0100               	movlb	0	; () banked
  3023  010544  6FCC               	movwf	sprintf@c& (0+255),b
  3024  010546  D002               	goto	l3877
  3025  010548                     l540:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;doprnt.c: 1213: else
  3029                           ;doprnt.c: 1214: c = prec;
  3030  010548  C0BD  F0CC         	movff	sprintf@prec,sprintf@c
  3031  01054C                     l3877:
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;doprnt.c: 1215: prec -= c;
  3035  01054C  0100               	movlb	0	; () banked
  3036  01054E  51CC               	movf	sprintf@c& (0+255),w,b
  3037  010550  0100               	movlb	0	; () banked
  3038  010552  5FBD               	subwf	sprintf@prec& (0+255),f,b
  3039  010554  0E00               	movlw	0
  3040  010556  0100               	movlb	0	; () banked
  3041  010558  BFCC               	btfsc	sprintf@c& (0+255),7,b
  3042  01055A  0EFF               	movlw	255
  3043  01055C  0100               	movlb	0	; () banked
  3044  01055E  5BBE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;doprnt.c: 1219: if(c)
  3048  010560  0100               	movlb	0	; () banked
  3049  010562  51CC               	movf	sprintf@c& (0+255),w,b
  3050  010564  0100               	movlb	0	; () banked
  3051  010566  B4D8               	btfsc	status,2,c
  3052  010568  D009               	goto	l3885
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3056  01056A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3057  01056E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3058  010572  0E2E               	movlw	46
  3059  010574  6EDF               	movwf	indf2,c
  3060                           
  3061                           ; BSR set to: 0
  3062  010576  0100               	movlb	0	; () banked
  3063  010578  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3064  01057A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3065  01057C                     l3885:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3069  01057C  0100               	movlb	0	; () banked
  3070  01057E  51CC               	movf	sprintf@c& (0+255),w,b
  3071  010580  ECC8  F084         	call	_scale
  3072  010584  C083  F0B5         	movff	?_scale,_sprintf$2536
  3073  010588  C084  F0B6         	movff	?_scale+1,_sprintf$2536+1
  3074  01058C  C085  F0B7         	movff	?_scale+2,_sprintf$2536+2
  3075                           
  3076                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3077  010590  C0C9  F077         	movff	sprintf@fval,___ftmul@f2
  3078  010594  C0CA  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3079  010598  C0CB  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3080  01059C  C0B5  F074         	movff	_sprintf$2536,___ftmul@f1
  3081  0105A0  C0B6  F075         	movff	_sprintf$2536+1,___ftmul@f1+1
  3082  0105A4  C0B7  F076         	movff	_sprintf$2536+2,___ftmul@f1+2
  3083  0105A8  EC69  F08D         	call	___ftmul	;wreg free
  3084  0105AC  C074  F08A         	movff	?___ftmul,___fttol@f1
  3085  0105B0  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3086  0105B4  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3087  0105B8  EC0D  F090         	call	___fttol	;wreg free
  3088  0105BC  C08A  F0BF         	movff	?___fttol,sprintf@val
  3089  0105C0  C08B  F0C0         	movff	?___fttol+1,sprintf@val+1
  3090  0105C4  C08C  F0C1         	movff	?___fttol+2,sprintf@val+2
  3091  0105C8  C08D  F0C2         	movff	?___fttol+3,sprintf@val+3
  3092                           
  3093                           ;doprnt.c: 1228: while(c--) {
  3094  0105CC  D07A               	goto	l3899
  3095  0105CE                     l3889:
  3096                           
  3097                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3098  0105CE  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3099  0105D2  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3100  0105D6  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3101  0105DA  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3102  0105DE  0100               	movlb	0	; () banked
  3103  0105E0  51CC               	movf	sprintf@c& (0+255),w,b
  3104  0105E2  0D04               	mullw	4
  3105  0105E4  0E09               	movlw	low _dpowers
  3106  0105E6  24F3               	addwf	prodl,w,c
  3107  0105E8  6EF6               	movwf	tblptrl,c
  3108  0105EA  0EFE               	movlw	high _dpowers
  3109  0105EC  20F4               	addwfc	prodh,w,c
  3110  0105EE  6EF7               	movwf	tblptrh,c
  3111  0105F0                     	if	1	;There are 3 active tblptr bytes
  3112  0105F0  6AF8               	clrf	tblptru,c
  3113  0105F2  0E00               	movlw	low (__mediumconst shr (0+16))
  3114  0105F4  22F8               	addwfc	tblptru,f,c
  3115  0105F6                     	endif
  3116  0105F6  0009               	tblrd		*+
  3117  0105F8  CFF5 F064          	movff	tablat,___lldiv@divisor
  3118  0105FC  0009               	tblrd		*+
  3119  0105FE  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3120  010602  0009               	tblrd		*+
  3121  010604  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3122  010608  000A               	tblrd		*-
  3123  01060A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3124  01060E  ECD8  F095         	call	___lldiv	;wreg free
  3125  010612  C060  F0C5         	movff	?___lldiv,sprintf@tmpval
  3126  010616  C061  F0C6         	movff	?___lldiv+1,sprintf@tmpval+1
  3127  01061A  C062  F0C7         	movff	?___lldiv+2,sprintf@tmpval+2
  3128  01061E  C063  F0C8         	movff	?___lldiv+3,sprintf@tmpval+3
  3129                           
  3130                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3131  010622  C0C5  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3132  010626  C0C6  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3133  01062A  C0C7  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3134  01062E  C0C8  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3135  010632  0E0A               	movlw	10
  3136  010634  0100               	movlb	0	; () banked
  3137  010636  6F71               	movwf	___llmod@divisor& (0+255),b
  3138  010638  0E00               	movlw	0
  3139  01063A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3140  01063C  0E00               	movlw	0
  3141  01063E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3142  010640  0E00               	movlw	0
  3143  010642  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3144  010644  ECD6  F097         	call	___llmod	;wreg free
  3145  010648  C06D  F0C5         	movff	?___llmod,sprintf@tmpval
  3146  01064C  C06E  F0C6         	movff	?___llmod+1,sprintf@tmpval+1
  3147  010650  C06F  F0C7         	movff	?___llmod+2,sprintf@tmpval+2
  3148  010654  C070  F0C8         	movff	?___llmod+3,sprintf@tmpval+3
  3149                           
  3150                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3151  010658  0100               	movlb	0	; () banked
  3152  01065A  51C5               	movf	sprintf@tmpval& (0+255),w,b
  3153  01065C  0F30               	addlw	48
  3154  01065E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3155  010662  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3156  010666  6EDF               	movwf	indf2,c
  3157                           
  3158                           ; BSR set to: 0
  3159  010668  0100               	movlb	0	; () banked
  3160  01066A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3161  01066C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 1232: val %= dpowers[c];
  3165  01066E  C0BF  F06D         	movff	sprintf@val,___llmod@dividend
  3166  010672  C0C0  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  3167  010676  C0C1  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  3168  01067A  C0C2  F070         	movff	sprintf@val+3,___llmod@dividend+3
  3169  01067E  0100               	movlb	0	; () banked
  3170  010680  51CC               	movf	sprintf@c& (0+255),w,b
  3171  010682  0D04               	mullw	4
  3172  010684  0E09               	movlw	low _dpowers
  3173  010686  24F3               	addwf	prodl,w,c
  3174  010688  6EF6               	movwf	tblptrl,c
  3175  01068A  0EFE               	movlw	high _dpowers
  3176  01068C  20F4               	addwfc	prodh,w,c
  3177  01068E  6EF7               	movwf	tblptrh,c
  3178  010690                     	if	1	;There are 3 active tblptr bytes
  3179  010690  6AF8               	clrf	tblptru,c
  3180  010692  0E00               	movlw	low (__mediumconst shr (0+16))
  3181  010694  22F8               	addwfc	tblptru,f,c
  3182  010696                     	endif
  3183  010696  0009               	tblrd		*+
  3184  010698  CFF5 F071          	movff	tablat,___llmod@divisor
  3185  01069C  0009               	tblrd		*+
  3186  01069E  CFF5 F072          	movff	tablat,___llmod@divisor+1
  3187  0106A2  0009               	tblrd		*+
  3188  0106A4  CFF5 F073          	movff	tablat,___llmod@divisor+2
  3189  0106A8  000A               	tblrd		*-
  3190  0106AA  CFF5 F074          	movff	tablat,___llmod@divisor+3
  3191  0106AE  ECD6  F097         	call	___llmod	;wreg free
  3192  0106B2  C06D  F0BF         	movff	?___llmod,sprintf@val
  3193  0106B6  C06E  F0C0         	movff	?___llmod+1,sprintf@val+1
  3194  0106BA  C06F  F0C1         	movff	?___llmod+2,sprintf@val+2
  3195  0106BE  C070  F0C2         	movff	?___llmod+3,sprintf@val+3
  3196  0106C2                     l3899:
  3197  0106C2  0100               	movlb	0	; () banked
  3198  0106C4  07CC               	decf	sprintf@c& (0+255),f,b
  3199  0106C6  0100               	movlb	0	; () banked
  3200  0106C8  29CC               	incf	sprintf@c& (0+255),w,b
  3201  0106CA  B4D8               	btfsc	status,2,c
  3202  0106CC  D00E               	goto	l3907
  3203  0106CE  D77F               	goto	l3889
  3204  0106D0                     l3901:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3208  0106D0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3209  0106D4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3210  0106D8  0E30               	movlw	48
  3211  0106DA  6EDF               	movwf	indf2,c
  3212                           
  3213                           ; BSR set to: 0
  3214  0106DC  0100               	movlb	0	; () banked
  3215  0106DE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3216  0106E0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;doprnt.c: 1237: prec--;
  3220  0106E2  0100               	movlb	0	; () banked
  3221  0106E4  07BD               	decf	sprintf@prec& (0+255),f,b
  3222  0106E6  A0D8               	btfss	status,0,c
  3223  0106E8  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  3224  0106EA                     l3907:
  3225                           
  3226                           ; BSR set to: 0
  3227  0106EA  0100               	movlb	0	; () banked
  3228  0106EC  51BD               	movf	sprintf@prec& (0+255),w,b
  3229  0106EE  0100               	movlb	0	; () banked
  3230  0106F0  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3231  0106F2  B4D8               	btfsc	status,2,c
  3232  0106F4  D135               	goto	l3969
  3233  0106F6  D7EC               	goto	l3901
  3234  0106F8                     l3909:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;doprnt.c: 1246: }
  3238                           ;doprnt.c: 1273: {
  3239                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3240  0106F8  C0B9  FFD9         	movff	sprintf@ap,fsr2l
  3241  0106FC  C0BA  FFDA         	movff	sprintf@ap+1,fsr2h
  3242  010700  CFDE F0AF          	movff	postinc2,??_sprintf
  3243  010704  CFDD F0B0          	movff	postdec2,??_sprintf+1
  3244  010708  C0AF  F0BF         	movff	??_sprintf,sprintf@val
  3245  01070C  C0B0  F0C0         	movff	??_sprintf+1,sprintf@val+1
  3246  010710  0100               	movlb	0	; () banked
  3247  010712  6BC1               	clrf	(sprintf@val+2)& (0+255),b
  3248  010714  6BC2               	clrf	(sprintf@val+3)& (0+255),b
  3249                           
  3250                           ; BSR set to: 0
  3251  010716  0E02               	movlw	2
  3252  010718  0100               	movlb	0	; () banked
  3253  01071A  27B9               	addwf	sprintf@ap& (0+255),f,b
  3254  01071C  0E00               	movlw	0
  3255  01071E  23BA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3256                           
  3257                           ;doprnt.c: 1287: }
  3258                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3259  010720  D052               	goto	l3943
  3260  010722                     l3913:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3264  010722  0E01               	movlw	1
  3265  010724  0100               	movlb	0	; () banked
  3266  010726  6FCC               	movwf	sprintf@c& (0+255),b
  3267  010728                     l3915:
  3268                           
  3269                           ; BSR set to: 0
  3270  010728  0E0A               	movlw	10
  3271  01072A  0100               	movlb	0	; () banked
  3272  01072C  19CC               	xorwf	sprintf@c& (0+255),w,b
  3273  01072E  B4D8               	btfsc	status,2,c
  3274  010730  D053               	goto	l3945
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 1306: if(val < dpowers[c])
  3278                           
  3279                           ; BSR set to: 0
  3280                           
  3281                           ; BSR set to: 0
  3282  010732  0100               	movlb	0	; () banked
  3283  010734  51CC               	movf	sprintf@c& (0+255),w,b
  3284  010736  0D04               	mullw	4
  3285  010738  0E09               	movlw	low _dpowers
  3286  01073A  24F3               	addwf	prodl,w,c
  3287  01073C  6EF6               	movwf	tblptrl,c
  3288  01073E  0EFE               	movlw	high _dpowers
  3289  010740  20F4               	addwfc	prodh,w,c
  3290  010742  6EF7               	movwf	tblptrh,c
  3291  010744                     	if	1	;There are 3 active tblptr bytes
  3292  010744  6AF8               	clrf	tblptru,c
  3293  010746  0E00               	movlw	low (__mediumconst shr (0+16))
  3294  010748  22F8               	addwfc	tblptru,f,c
  3295  01074A                     	endif
  3296  01074A  0009               	tblrd		*+
  3297  01074C  50F5               	movf	tablat,w,c
  3298  01074E  0100               	movlb	0	; () banked
  3299  010750  5DBF               	subwf	sprintf@val& (0+255),w,b
  3300  010752  0009               	tblrd		*+
  3301  010754  50F5               	movf	tablat,w,c
  3302  010756  0100               	movlb	0	; () banked
  3303  010758  59C0               	subwfb	(sprintf@val+1)& (0+255),w,b
  3304  01075A  0009               	tblrd		*+
  3305  01075C  50F5               	movf	tablat,w,c
  3306  01075E  0100               	movlb	0	; () banked
  3307  010760  59C1               	subwfb	(sprintf@val+2)& (0+255),w,b
  3308  010762  0009               	tblrd		*+
  3309  010764  50F5               	movf	tablat,w,c
  3310  010766  0100               	movlb	0	; () banked
  3311  010768  59C2               	subwfb	(sprintf@val+3)& (0+255),w,b
  3312  01076A  A0D8               	btfss	status,0,c
  3313  01076C  D035               	goto	l3945
  3314                           
  3315                           ; BSR set to: 0
  3316                           
  3317                           ; BSR set to: 0
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;doprnt.c: 1307: break;
  3321  01076E  0100               	movlb	0	; () banked
  3322  010770  2BCC               	incf	sprintf@c& (0+255),f,b
  3323  010772  D7DA               	goto	l3915
  3324  010774                     l3927:
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3328  010774  0E01               	movlw	1
  3329  010776  0100               	movlb	0	; () banked
  3330  010778  6FCC               	movwf	sprintf@c& (0+255),b
  3331  01077A                     l3929:
  3332                           
  3333                           ; BSR set to: 0
  3334  01077A  0E08               	movlw	8
  3335  01077C  0100               	movlb	0	; () banked
  3336  01077E  19CC               	xorwf	sprintf@c& (0+255),w,b
  3337  010780  B4D8               	btfsc	status,2,c
  3338  010782  D02A               	goto	l3945
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3342                           
  3343                           ; BSR set to: 0
  3344                           
  3345                           ; BSR set to: 0
  3346  010784  0100               	movlb	0	; () banked
  3347  010786  51CC               	movf	sprintf@c& (0+255),w,b
  3348  010788  0D04               	mullw	4
  3349  01078A  0E7F               	movlw	low _hexpowers
  3350  01078C  24F3               	addwf	prodl,w,c
  3351  01078E  6EF6               	movwf	tblptrl,c
  3352  010790  0EFE               	movlw	high _hexpowers
  3353  010792  20F4               	addwfc	prodh,w,c
  3354  010794  6EF7               	movwf	tblptrh,c
  3355  010796                     	if	1	;There are 3 active tblptr bytes
  3356  010796  6AF8               	clrf	tblptru,c
  3357  010798  0E00               	movlw	low (__mediumconst shr (0+16))
  3358  01079A  22F8               	addwfc	tblptru,f,c
  3359  01079C                     	endif
  3360  01079C  0009               	tblrd		*+
  3361  01079E  50F5               	movf	tablat,w,c
  3362  0107A0  0100               	movlb	0	; () banked
  3363  0107A2  5DBF               	subwf	sprintf@val& (0+255),w,b
  3364  0107A4  0009               	tblrd		*+
  3365  0107A6  50F5               	movf	tablat,w,c
  3366  0107A8  0100               	movlb	0	; () banked
  3367  0107AA  59C0               	subwfb	(sprintf@val+1)& (0+255),w,b
  3368  0107AC  0009               	tblrd		*+
  3369  0107AE  50F5               	movf	tablat,w,c
  3370  0107B0  0100               	movlb	0	; () banked
  3371  0107B2  59C1               	subwfb	(sprintf@val+2)& (0+255),w,b
  3372  0107B4  0009               	tblrd		*+
  3373  0107B6  50F5               	movf	tablat,w,c
  3374  0107B8  0100               	movlb	0	; () banked
  3375  0107BA  59C2               	subwfb	(sprintf@val+3)& (0+255),w,b
  3376  0107BC  A0D8               	btfss	status,0,c
  3377  0107BE  D00C               	goto	l3945
  3378                           
  3379                           ; BSR set to: 0
  3380                           
  3381                           ; BSR set to: 0
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;doprnt.c: 1318: break;
  3385  0107C0  0100               	movlb	0	; () banked
  3386  0107C2  2BCC               	incf	sprintf@c& (0+255),f,b
  3387  0107C4  D7DA               	goto	l3929
  3388  0107C6                     l3943:
  3389                           
  3390                           ; BSR set to: 0
  3391  0107C6  0100               	movlb	0	; () banked
  3392  0107C8  51BB               	movf	sprintf@flag& (0+255),w,b
  3393  0107CA  0BC0               	andlw	192
  3394                           
  3395                           ; Switch size 1, requested type "space"
  3396                           ; Number of cases is 2, Range of values is 128 to 192
  3397                           ; switch strategies available:
  3398                           ; Name         Instructions Cycles
  3399                           ; simple_byte            7     4 (average)
  3400                           ;	Chosen strategy is simple_byte
  3401  0107CC  0A80               	xorlw	128	; case 128
  3402  0107CE  B4D8               	btfsc	status,2,c
  3403  0107D0  D7D1               	goto	l3927
  3404  0107D2  0A40               	xorlw	64	; case 192
  3405  0107D4  B4D8               	btfsc	status,2,c
  3406  0107D6  D7A5               	goto	l3913
  3407  0107D8                     l3945:
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;doprnt.c: 1422: {
  3411                           ;doprnt.c: 1438: if(flag & 0x03)
  3412  0107D8  0E03               	movlw	3
  3413  0107DA  0100               	movlb	0	; () banked
  3414  0107DC  15BB               	andwf	sprintf@flag& (0+255),w,b
  3415  0107DE  0100               	movlb	0	; () banked
  3416  0107E0  6FAF               	movwf	??_sprintf& (0+255),b
  3417  0107E2  0E00               	movlw	0
  3418  0107E4  0100               	movlb	0	; () banked
  3419  0107E6  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3420  0107E8  0100               	movlb	0	; () banked
  3421  0107EA  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  3422  0107EC  0100               	movlb	0	; () banked
  3423  0107EE  51AF               	movf	??_sprintf& (0+255),w,b
  3424  0107F0  0100               	movlb	0	; () banked
  3425  0107F2  11B0               	iorwf	(??_sprintf+1)& (0+255),w,b
  3426  0107F4  B4D8               	btfsc	status,2,c
  3427  0107F6  D009               	goto	l3951
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3431  0107F8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3432  0107FC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3433  010800  0E2D               	movlw	45
  3434  010802  6EDF               	movwf	indf2,c
  3435                           
  3436                           ; BSR set to: 0
  3437  010804  0100               	movlb	0	; () banked
  3438  010806  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3439  010808  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3440  01080A                     l3951:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;doprnt.c: 1469: }
  3444                           ;doprnt.c: 1472: prec = c;
  3445  01080A  0100               	movlb	0	; () banked
  3446  01080C  51CC               	movf	sprintf@c& (0+255),w,b
  3447  01080E  0100               	movlb	0	; () banked
  3448  010810  6FBD               	movwf	sprintf@prec& (0+255),b
  3449  010812  6BBE               	clrf	(sprintf@prec+1)& (0+255),b
  3450  010814  BFBD               	btfsc	sprintf@prec& (0+255),7,b
  3451  010816  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  3452                           
  3453                           ;doprnt.c: 1474: while(prec--) {
  3454  010818  D098               	goto	l3967
  3455  01081A                     l3953:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3459  01081A  C0BD  F0AF         	movff	sprintf@prec,??_sprintf
  3460  01081E  C0BE  F0B0         	movff	sprintf@prec+1,??_sprintf+1
  3461  010822  0100               	movlb	0	; () banked
  3462  010824  90D8               	bcf	status,0,c
  3463  010826  37AF               	rlcf	??_sprintf& (0+255),f,b
  3464  010828  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3465  01082A  0100               	movlb	0	; () banked
  3466  01082C  90D8               	bcf	status,0,c
  3467  01082E  37AF               	rlcf	??_sprintf& (0+255),f,b
  3468  010830  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3469  010832  0E09               	movlw	low _dpowers
  3470  010834  0100               	movlb	0	; () banked
  3471  010836  25AF               	addwf	??_sprintf& (0+255),w,b
  3472  010838  6EF6               	movwf	tblptrl,c
  3473  01083A  0EFE               	movlw	high _dpowers
  3474  01083C  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  3475  01083E  6EF7               	movwf	tblptrh,c
  3476  010840                     	if	1	;There are 3 active tblptr bytes
  3477  010840  6AF8               	clrf	tblptru,c
  3478  010842  0E00               	movlw	low (__mediumconst shr (0+16))
  3479  010844  22F8               	addwfc	tblptru,f,c
  3480  010846                     	endif
  3481  010846  0009               	tblrd		*+
  3482  010848  CFF5 F064          	movff	tablat,___lldiv@divisor
  3483  01084C  0009               	tblrd		*+
  3484  01084E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3485  010852  0009               	tblrd		*+
  3486  010854  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3487  010858  000A               	tblrd		*-
  3488  01085A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3489  01085E  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3490  010862  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3491  010866  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3492  01086A  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3493  01086E  ECD8  F095         	call	___lldiv	;wreg free
  3494  010872  C060  F06D         	movff	?___lldiv,___llmod@dividend
  3495  010876  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  3496  01087A  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  3497  01087E  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  3498  010882  0E0A               	movlw	10
  3499  010884  0100               	movlb	0	; () banked
  3500  010886  6F71               	movwf	___llmod@divisor& (0+255),b
  3501  010888  0E00               	movlw	0
  3502  01088A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3503  01088C  0E00               	movlw	0
  3504  01088E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3505  010890  0E00               	movlw	0
  3506  010892  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3507  010894  ECD6  F097         	call	___llmod	;wreg free
  3508  010898  0100               	movlb	0	; () banked
  3509  01089A  516D               	movf	?___llmod& (0+255),w,b
  3510  01089C  0F30               	addlw	48
  3511  01089E  0100               	movlb	0	; () banked
  3512  0108A0  6FCC               	movwf	sprintf@c& (0+255),b
  3513                           
  3514                           ;doprnt.c: 1491: break;
  3515  0108A2  D04A               	goto	l3963
  3516  0108A4                     l3955:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1499: {
  3520                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3521  0108A4  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3522  0108A8  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3523  0108AC  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3524  0108B0  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3525  0108B4  C0BD  F0AF         	movff	sprintf@prec,??_sprintf
  3526  0108B8  C0BE  F0B0         	movff	sprintf@prec+1,??_sprintf+1
  3527  0108BC  0100               	movlb	0	; () banked
  3528  0108BE  90D8               	bcf	status,0,c
  3529  0108C0  37AF               	rlcf	??_sprintf& (0+255),f,b
  3530  0108C2  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3531  0108C4  0100               	movlb	0	; () banked
  3532  0108C6  90D8               	bcf	status,0,c
  3533  0108C8  37AF               	rlcf	??_sprintf& (0+255),f,b
  3534  0108CA  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3535  0108CC  0E7F               	movlw	low _hexpowers
  3536  0108CE  0100               	movlb	0	; () banked
  3537  0108D0  25AF               	addwf	??_sprintf& (0+255),w,b
  3538  0108D2  6EF6               	movwf	tblptrl,c
  3539  0108D4  0EFE               	movlw	high _hexpowers
  3540  0108D6  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  3541  0108D8  6EF7               	movwf	tblptrh,c
  3542  0108DA                     	if	1	;There are 3 active tblptr bytes
  3543  0108DA  6AF8               	clrf	tblptru,c
  3544  0108DC  0E00               	movlw	low (__mediumconst shr (0+16))
  3545  0108DE  22F8               	addwfc	tblptru,f,c
  3546  0108E0                     	endif
  3547  0108E0  0009               	tblrd		*+
  3548  0108E2  CFF5 F064          	movff	tablat,___lldiv@divisor
  3549  0108E6  0009               	tblrd		*+
  3550  0108E8  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3551  0108EC  0009               	tblrd		*+
  3552  0108EE  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3553  0108F2  000A               	tblrd		*-
  3554  0108F4  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3555  0108F8  ECD8  F095         	call	___lldiv	;wreg free
  3556  0108FC  0100               	movlb	0	; () banked
  3557  0108FE  5160               	movf	?___lldiv& (0+255),w,b
  3558  010900  0B0F               	andlw	15
  3559  010902  0100               	movlb	0	; () banked
  3560  010904  6FB8               	movwf	sprintf@idx& (0+255),b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3564  010906  0100               	movlb	0	; () banked
  3565  010908  51B8               	movf	sprintf@idx& (0+255),w,b
  3566  01090A  0D01               	mullw	1
  3567  01090C  0EDD               	movlw	low STR_7
  3568  01090E  24F3               	addwf	prodl,w,c
  3569  010910  6EF6               	movwf	tblptrl,c
  3570  010912  0EFF               	movlw	high STR_7
  3571  010914  20F4               	addwfc	prodh,w,c
  3572  010916  6EF7               	movwf	tblptrh,c
  3573  010918                     	if	1	;There are 3 active tblptr bytes
  3574  010918  6AF8               	clrf	tblptru,c
  3575  01091A  0E00               	movlw	low (__mediumconst shr (0+16))
  3576  01091C  22F8               	addwfc	tblptru,f,c
  3577  01091E                     	endif
  3578  01091E  0008               	tblrd		*
  3579  010920  CFF5 F0CC          	movff	tablat,sprintf@c
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;doprnt.c: 1523: }
  3583                           
  3584                           ;doprnt.c: 1508: }
  3585                           ;doprnt.c: 1510: break;
  3586  010924  D009               	goto	l3963
  3587  010926                     l3961:
  3588                           
  3589                           ; BSR set to: 0
  3590  010926  0100               	movlb	0	; () banked
  3591  010928  51BB               	movf	sprintf@flag& (0+255),w,b
  3592  01092A  0BC0               	andlw	192
  3593                           
  3594                           ; Switch size 1, requested type "space"
  3595                           ; Number of cases is 2, Range of values is 128 to 192
  3596                           ; switch strategies available:
  3597                           ; Name         Instructions Cycles
  3598                           ; simple_byte            7     4 (average)
  3599                           ;	Chosen strategy is simple_byte
  3600  01092C  0A80               	xorlw	128	; case 128
  3601  01092E  B4D8               	btfsc	status,2,c
  3602  010930  D7B9               	goto	l3955
  3603  010932  0A40               	xorlw	64	; case 192
  3604  010934  B4D8               	btfsc	status,2,c
  3605  010936  D771               	goto	l3953
  3606  010938                     l3963:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3610  010938  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3611  01093C  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3612  010940  C0CC  FFDF         	movff	sprintf@c,indf2
  3613                           
  3614                           ; BSR set to: 0
  3615  010944  0100               	movlb	0	; () banked
  3616  010946  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3617  010948  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3618  01094A                     l3967:
  3619                           
  3620                           ; BSR set to: 0
  3621  01094A  0100               	movlb	0	; () banked
  3622  01094C  07BD               	decf	sprintf@prec& (0+255),f,b
  3623  01094E  A0D8               	btfss	status,0,c
  3624  010950  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  3625  010952  0100               	movlb	0	; () banked
  3626  010954  29BD               	incf	sprintf@prec& (0+255),w,b
  3627  010956  E1E7               	bnz	l3961
  3628  010958  0100               	movlb	0	; () banked
  3629  01095A  29BE               	incf	(sprintf@prec+1)& (0+255),w,b
  3630  01095C  A4D8               	btfss	status,2,c
  3631  01095E  D7E3               	goto	l3961
  3632  010960                     l3969:
  3633                           
  3634                           ; BSR set to: 0
  3635  010960  C0A1  FFF6         	movff	sprintf@f,tblptrl
  3636  010964  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  3637  010968  0100               	movlb	0	; () banked
  3638  01096A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  3639  01096C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  3640  01096E                     	if	0	;tblptru may be non-zero
  3641  01096E                     	endif
  3642  01096E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3643  01096E  0E00               	movlw	low (__mediumconst shr (0+16))
  3644  010970  6EF8               	movwf	tblptru,c
  3645  010972                     	endif
  3646  010972  0008               	tblrd		*
  3647  010974  CFF5 F0CC          	movff	tablat,sprintf@c
  3648  010978  0100               	movlb	0	; () banked
  3649  01097A  51CC               	movf	sprintf@c& (0+255),w,b
  3650  01097C  A4D8               	btfss	status,2,c
  3651  01097E  EF08  F080         	goto	l3745
  3652  010982                     l3971:
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;doprnt.c: 1538: *sp = 0;
  3656  010982  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3657  010986  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3658  01098A  0E00               	movlw	0
  3659  01098C  6EDF               	movwf	indf2,c
  3660  01098E  0012               	return	
  3661  010990                     __end_of_sprintf:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           postinc0	equ	0xFEE
  3670                           wreg	equ	0xFE8
  3671                           postdec1	equ	0xFE5
  3672                           fsr1l	equ	0xFE1
  3673                           indf2	equ	0xFDF
  3674                           postinc2	equ	0xFDE
  3675                           postdec2	equ	0xFDD
  3676                           fsr2h	equ	0xFDA
  3677                           fsr2l	equ	0xFD9
  3678                           status	equ	0xFD8
  3679                           
  3680 ;; *************** function _scale *****************
  3681 ;; Defined at:
  3682 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  scl             1    wreg     char 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  scl             1   41[BANK0 ] char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  3   35[BANK0 ] char 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3697 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3699 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3700 ;;Total ram usage:        7 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    6
  3703 ;; This function calls:
  3704 ;;		___awdiv
  3705 ;;		___awmod
  3706 ;;		___ftmul
  3707 ;;		___wmul
  3708 ;; This function is called by:
  3709 ;;		_sprintf
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           	psect	text5
  3714  010990                     __ptext5:
  3715                           	opt stack 0
  3716  010990                     _scale:
  3717                           	opt stack 22
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;incstack = 0
  3721                           ;scale@scl stored from wreg
  3722  010990  0100               	movlb	0	; () banked
  3723  010992  6F89               	movwf	scale@scl& (0+255),b
  3724                           
  3725                           ;doprnt.c: 428: if(scl < 0) {
  3726  010994  0100               	movlb	0	; () banked
  3727  010996  AF89               	btfss	scale@scl& (0+255),7,b
  3728  010998  D13C               	goto	l3517
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;doprnt.c: 429: scl = -scl;
  3732  01099A  0100               	movlb	0	; () banked
  3733  01099C  6D89               	negf	scale@scl& (0+255),b
  3734                           
  3735                           ;doprnt.c: 430: if(scl>=110)
  3736  01099E  0100               	movlb	0	; () banked
  3737  0109A0  5189               	movf	scale@scl& (0+255),w,b
  3738  0109A2  0A80               	xorlw	128
  3739  0109A4  0F12               	addlw	-238
  3740  0109A6  A0D8               	btfss	status,0,c
  3741  0109A8  D0B5               	goto	l3507
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3745  0109AA  0E00               	movlw	0
  3746  0109AC  0100               	movlb	0	; () banked
  3747  0109AE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3748  0109B0  0E03               	movlw	3
  3749  0109B2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3750  0109B4  0E00               	movlw	0
  3751  0109B6  0100               	movlb	0	; () banked
  3752  0109B8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3753  0109BA  0E0A               	movlw	10
  3754  0109BC  6F68               	movwf	___awdiv@divisor& (0+255),b
  3755  0109BE  0E00               	movlw	0
  3756  0109C0  0100               	movlb	0	; () banked
  3757  0109C2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3758  0109C4  0E64               	movlw	100
  3759  0109C6  6F62               	movwf	___awmod@divisor& (0+255),b
  3760  0109C8  0100               	movlb	0	; () banked
  3761  0109CA  5189               	movf	scale@scl& (0+255),w,b
  3762  0109CC  0100               	movlb	0	; () banked
  3763  0109CE  6F60               	movwf	___awmod@dividend& (0+255),b
  3764  0109D0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3765  0109D2  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3766  0109D4  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3767  0109D6  EC36  F097         	call	___awmod	;wreg free
  3768  0109DA  C060  F066         	movff	?___awmod,___awdiv@dividend
  3769  0109DE  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3770  0109E2  EC79  F095         	call	___awdiv	;wreg free
  3771  0109E6  0E09               	movlw	9
  3772  0109E8  0100               	movlb	0	; () banked
  3773  0109EA  2566               	addwf	?___awdiv& (0+255),w,b
  3774  0109EC  0100               	movlb	0	; () banked
  3775  0109EE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3776  0109F0  0E00               	movlw	0
  3777  0109F2  0100               	movlb	0	; () banked
  3778  0109F4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3779  0109F6  0100               	movlb	0	; () banked
  3780  0109F8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3781  0109FA  EC9C  F09A         	call	___wmul	;wreg free
  3782  0109FE  0E31               	movlw	low __npowers_
  3783  010A00  0100               	movlb	0	; () banked
  3784  010A02  256E               	addwf	?___wmul& (0+255),w,b
  3785  010A04  6EF6               	movwf	tblptrl,c
  3786  010A06  0EFE               	movlw	high __npowers_
  3787  010A08  0100               	movlb	0	; () banked
  3788  010A0A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3789  010A0C  6EF7               	movwf	tblptrh,c
  3790  010A0E                     	if	1	;There are 3 active tblptr bytes
  3791  010A0E  6AF8               	clrf	tblptru,c
  3792  010A10  0E00               	movlw	low (__mediumconst shr (0+16))
  3793  010A12  22F8               	addwfc	tblptru,f,c
  3794  010A14                     	endif
  3795  010A14  0009               	tblrd		*+
  3796  010A16  CFF5 F077          	movff	tablat,___ftmul@f2
  3797  010A1A  0009               	tblrd		*+
  3798  010A1C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3799  010A20  000A               	tblrd		*-
  3800  010A22  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3801  010A26  0E00               	movlw	0
  3802  010A28  0100               	movlb	0	; () banked
  3803  010A2A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3804  010A2C  0E64               	movlw	100
  3805  010A2E  6F68               	movwf	___awdiv@divisor& (0+255),b
  3806  010A30  0100               	movlb	0	; () banked
  3807  010A32  5189               	movf	scale@scl& (0+255),w,b
  3808  010A34  0100               	movlb	0	; () banked
  3809  010A36  6F66               	movwf	___awdiv@dividend& (0+255),b
  3810  010A38  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3811  010A3A  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3812  010A3C  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3813  010A3E  EC79  F095         	call	___awdiv	;wreg free
  3814  010A42  0E12               	movlw	18
  3815  010A44  0100               	movlb	0	; () banked
  3816  010A46  2566               	addwf	?___awdiv& (0+255),w,b
  3817  010A48  0100               	movlb	0	; () banked
  3818  010A4A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3819  010A4C  0E00               	movlw	0
  3820  010A4E  0100               	movlb	0	; () banked
  3821  010A50  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3822  010A52  0100               	movlb	0	; () banked
  3823  010A54  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3824  010A56  0E00               	movlw	0
  3825  010A58  0100               	movlb	0	; () banked
  3826  010A5A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3827  010A5C  0E03               	movlw	3
  3828  010A5E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3829  010A60  EC9C  F09A         	call	___wmul	;wreg free
  3830  010A64  0E31               	movlw	low __npowers_
  3831  010A66  0100               	movlb	0	; () banked
  3832  010A68  256E               	addwf	?___wmul& (0+255),w,b
  3833  010A6A  6EF6               	movwf	tblptrl,c
  3834  010A6C  0EFE               	movlw	high __npowers_
  3835  010A6E  0100               	movlb	0	; () banked
  3836  010A70  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3837  010A72  6EF7               	movwf	tblptrh,c
  3838  010A74                     	if	1	;There are 3 active tblptr bytes
  3839  010A74  6AF8               	clrf	tblptru,c
  3840  010A76  0E00               	movlw	low (__mediumconst shr (0+16))
  3841  010A78  22F8               	addwfc	tblptru,f,c
  3842  010A7A                     	endif
  3843  010A7A  0009               	tblrd		*+
  3844  010A7C  CFF5 F074          	movff	tablat,___ftmul@f1
  3845  010A80  0009               	tblrd		*+
  3846  010A82  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3847  010A86  000A               	tblrd		*-
  3848  010A88  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3849  010A8C  EC69  F08D         	call	___ftmul	;wreg free
  3850  010A90  C074  F086         	movff	?___ftmul,_scale$2535
  3851  010A94  C075  F087         	movff	?___ftmul+1,_scale$2535+1
  3852  010A98  C076  F088         	movff	?___ftmul+2,_scale$2535+2
  3853                           
  3854                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3855  010A9C  C086  F074         	movff	_scale$2535,___ftmul@f1
  3856  010AA0  C087  F075         	movff	_scale$2535+1,___ftmul@f1+1
  3857  010AA4  C088  F076         	movff	_scale$2535+2,___ftmul@f1+2
  3858  010AA8  0E00               	movlw	0
  3859  010AAA  0100               	movlb	0	; () banked
  3860  010AAC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3861  010AAE  0E03               	movlw	3
  3862  010AB0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3863  010AB2  0E00               	movlw	0
  3864  010AB4  0100               	movlb	0	; () banked
  3865  010AB6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3866  010AB8  0E0A               	movlw	10
  3867  010ABA  6F62               	movwf	___awmod@divisor& (0+255),b
  3868  010ABC  0100               	movlb	0	; () banked
  3869  010ABE  5189               	movf	scale@scl& (0+255),w,b
  3870  010AC0  0100               	movlb	0	; () banked
  3871  010AC2  6F60               	movwf	___awmod@dividend& (0+255),b
  3872  010AC4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3873  010AC6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3874  010AC8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3875  010ACA  EC36  F097         	call	___awmod	;wreg free
  3876  010ACE  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3877  010AD2  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3878  010AD6  EC9C  F09A         	call	___wmul	;wreg free
  3879  010ADA  0E31               	movlw	low __npowers_
  3880  010ADC  0100               	movlb	0	; () banked
  3881  010ADE  256E               	addwf	?___wmul& (0+255),w,b
  3882  010AE0  6EF6               	movwf	tblptrl,c
  3883  010AE2  0EFE               	movlw	high __npowers_
  3884  010AE4  0100               	movlb	0	; () banked
  3885  010AE6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3886  010AE8  6EF7               	movwf	tblptrh,c
  3887  010AEA                     	if	1	;There are 3 active tblptr bytes
  3888  010AEA  6AF8               	clrf	tblptru,c
  3889  010AEC  0E00               	movlw	low (__mediumconst shr (0+16))
  3890  010AEE  22F8               	addwfc	tblptru,f,c
  3891  010AF0                     	endif
  3892  010AF0  0009               	tblrd		*+
  3893  010AF2  CFF5 F077          	movff	tablat,___ftmul@f2
  3894  010AF6  0009               	tblrd		*+
  3895  010AF8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3896  010AFC  000A               	tblrd		*-
  3897  010AFE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3898  010B02  EC69  F08D         	call	___ftmul	;wreg free
  3899  010B06  C074  F083         	movff	?___ftmul,?_scale
  3900  010B0A  C075  F084         	movff	?___ftmul+1,?_scale+1
  3901  010B0E  C076  F085         	movff	?___ftmul+2,?_scale+2
  3902  010B12  0012               	return	
  3903  010B14                     l3507:
  3904                           
  3905                           ;doprnt.c: 432: else if(scl > 10)
  3906  010B14  0100               	movlb	0	; () banked
  3907  010B16  5189               	movf	scale@scl& (0+255),w,b
  3908  010B18  0A80               	xorlw	128
  3909  010B1A  0F75               	addlw	-139
  3910  010B1C  A0D8               	btfss	status,0,c
  3911  010B1E  D063               	goto	l3513
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3915  010B20  0E00               	movlw	0
  3916  010B22  0100               	movlb	0	; () banked
  3917  010B24  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3918  010B26  0E0A               	movlw	10
  3919  010B28  6F68               	movwf	___awdiv@divisor& (0+255),b
  3920  010B2A  0100               	movlb	0	; () banked
  3921  010B2C  5189               	movf	scale@scl& (0+255),w,b
  3922  010B2E  0100               	movlb	0	; () banked
  3923  010B30  6F66               	movwf	___awdiv@dividend& (0+255),b
  3924  010B32  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3925  010B34  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3926  010B36  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3927  010B38  EC79  F095         	call	___awdiv	;wreg free
  3928  010B3C  0E09               	movlw	9
  3929  010B3E  0100               	movlb	0	; () banked
  3930  010B40  2566               	addwf	?___awdiv& (0+255),w,b
  3931  010B42  0100               	movlb	0	; () banked
  3932  010B44  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3933  010B46  0E00               	movlw	0
  3934  010B48  0100               	movlb	0	; () banked
  3935  010B4A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3936  010B4C  0100               	movlb	0	; () banked
  3937  010B4E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3938  010B50  0E00               	movlw	0
  3939  010B52  0100               	movlb	0	; () banked
  3940  010B54  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3941  010B56  0E03               	movlw	3
  3942  010B58  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3943  010B5A  EC9C  F09A         	call	___wmul	;wreg free
  3944  010B5E  0E31               	movlw	low __npowers_
  3945  010B60  0100               	movlb	0	; () banked
  3946  010B62  256E               	addwf	?___wmul& (0+255),w,b
  3947  010B64  6EF6               	movwf	tblptrl,c
  3948  010B66  0EFE               	movlw	high __npowers_
  3949  010B68  0100               	movlb	0	; () banked
  3950  010B6A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3951  010B6C  6EF7               	movwf	tblptrh,c
  3952  010B6E                     	if	1	;There are 3 active tblptr bytes
  3953  010B6E  6AF8               	clrf	tblptru,c
  3954  010B70  0E00               	movlw	low (__mediumconst shr (0+16))
  3955  010B72  22F8               	addwfc	tblptru,f,c
  3956  010B74                     	endif
  3957  010B74  0009               	tblrd		*+
  3958  010B76  CFF5 F074          	movff	tablat,___ftmul@f1
  3959  010B7A  0009               	tblrd		*+
  3960  010B7C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3961  010B80  000A               	tblrd		*-
  3962  010B82  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3963  010B86  0E00               	movlw	0
  3964  010B88  0100               	movlb	0	; () banked
  3965  010B8A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3966  010B8C  0E03               	movlw	3
  3967  010B8E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3968  010B90  0E00               	movlw	0
  3969  010B92  0100               	movlb	0	; () banked
  3970  010B94  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3971  010B96  0E0A               	movlw	10
  3972  010B98  6F62               	movwf	___awmod@divisor& (0+255),b
  3973  010B9A  0100               	movlb	0	; () banked
  3974  010B9C  5189               	movf	scale@scl& (0+255),w,b
  3975  010B9E  0100               	movlb	0	; () banked
  3976  010BA0  6F60               	movwf	___awmod@dividend& (0+255),b
  3977  010BA2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3978  010BA4  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3979  010BA6  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3980  010BA8  EC36  F097         	call	___awmod	;wreg free
  3981  010BAC  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3982  010BB0  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3983  010BB4  EC9C  F09A         	call	___wmul	;wreg free
  3984  010BB8  0E31               	movlw	low __npowers_
  3985  010BBA  0100               	movlb	0	; () banked
  3986  010BBC  256E               	addwf	?___wmul& (0+255),w,b
  3987  010BBE  6EF6               	movwf	tblptrl,c
  3988  010BC0  0EFE               	movlw	high __npowers_
  3989  010BC2  0100               	movlb	0	; () banked
  3990  010BC4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3991  010BC6  6EF7               	movwf	tblptrh,c
  3992  010BC8                     	if	1	;There are 3 active tblptr bytes
  3993  010BC8  6AF8               	clrf	tblptru,c
  3994  010BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  3995  010BCC  22F8               	addwfc	tblptru,f,c
  3996  010BCE                     	endif
  3997  010BCE  0009               	tblrd		*+
  3998  010BD0  CFF5 F077          	movff	tablat,___ftmul@f2
  3999  010BD4  0009               	tblrd		*+
  4000  010BD6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4001  010BDA  000A               	tblrd		*-
  4002  010BDC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4003  010BE0  EC69  F08D         	call	___ftmul	;wreg free
  4004  010BE4  D790               	goto	L3
  4005  010BE6                     l3513:
  4006                           
  4007                           ;doprnt.c: 434: return _npowers_[scl];
  4008  010BE6  0100               	movlb	0	; () banked
  4009  010BE8  5189               	movf	scale@scl& (0+255),w,b
  4010  010BEA  0D03               	mullw	3
  4011  010BEC  0E31               	movlw	low __npowers_
  4012  010BEE  24F3               	addwf	prodl,w,c
  4013  010BF0  6EF6               	movwf	tblptrl,c
  4014  010BF2  0EFE               	movlw	high __npowers_
  4015  010BF4  20F4               	addwfc	prodh,w,c
  4016  010BF6  6EF7               	movwf	tblptrh,c
  4017  010BF8                     	if	1	;There are 3 active tblptr bytes
  4018  010BF8  6AF8               	clrf	tblptru,c
  4019  010BFA  0E00               	movlw	low (__mediumconst shr (0+16))
  4020  010BFC  22F8               	addwfc	tblptru,f,c
  4021  010BFE                     	endif
  4022  010BFE  0009               	tblrd		*+
  4023  010C00  CFF5 F083          	movff	tablat,?_scale
  4024  010C04  0009               	tblrd		*+
  4025  010C06  CFF5 F084          	movff	tablat,?_scale+1
  4026  010C0A  000A               	tblrd		*-
  4027  010C0C  CFF5 F085          	movff	tablat,?_scale+2
  4028                           
  4029                           ; BSR set to: 0
  4030  010C10  0012               	return	
  4031  010C12                     l3517:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;doprnt.c: 435: }
  4035                           ;doprnt.c: 436: if(scl>=110)
  4036  010C12  0100               	movlb	0	; () banked
  4037  010C14  5189               	movf	scale@scl& (0+255),w,b
  4038  010C16  0A80               	xorlw	128
  4039  010C18  0F12               	addlw	-238
  4040  010C1A  A0D8               	btfss	status,0,c
  4041  010C1C  D0B5               	goto	l3525
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4045  010C1E  0E00               	movlw	0
  4046  010C20  0100               	movlb	0	; () banked
  4047  010C22  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4048  010C24  0E03               	movlw	3
  4049  010C26  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4050  010C28  0E00               	movlw	0
  4051  010C2A  0100               	movlb	0	; () banked
  4052  010C2C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4053  010C2E  0E0A               	movlw	10
  4054  010C30  6F68               	movwf	___awdiv@divisor& (0+255),b
  4055  010C32  0E00               	movlw	0
  4056  010C34  0100               	movlb	0	; () banked
  4057  010C36  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4058  010C38  0E64               	movlw	100
  4059  010C3A  6F62               	movwf	___awmod@divisor& (0+255),b
  4060  010C3C  0100               	movlb	0	; () banked
  4061  010C3E  5189               	movf	scale@scl& (0+255),w,b
  4062  010C40  0100               	movlb	0	; () banked
  4063  010C42  6F60               	movwf	___awmod@dividend& (0+255),b
  4064  010C44  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4065  010C46  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4066  010C48  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4067  010C4A  EC36  F097         	call	___awmod	;wreg free
  4068  010C4E  C060  F066         	movff	?___awmod,___awdiv@dividend
  4069  010C52  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4070  010C56  EC79  F095         	call	___awdiv	;wreg free
  4071  010C5A  0E09               	movlw	9
  4072  010C5C  0100               	movlb	0	; () banked
  4073  010C5E  2566               	addwf	?___awdiv& (0+255),w,b
  4074  010C60  0100               	movlb	0	; () banked
  4075  010C62  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4076  010C64  0E00               	movlw	0
  4077  010C66  0100               	movlb	0	; () banked
  4078  010C68  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4079  010C6A  0100               	movlb	0	; () banked
  4080  010C6C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4081  010C6E  EC9C  F09A         	call	___wmul	;wreg free
  4082  010C72  0E58               	movlw	low __powers_
  4083  010C74  0100               	movlb	0	; () banked
  4084  010C76  256E               	addwf	?___wmul& (0+255),w,b
  4085  010C78  6EF6               	movwf	tblptrl,c
  4086  010C7A  0EFE               	movlw	high __powers_
  4087  010C7C  0100               	movlb	0	; () banked
  4088  010C7E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4089  010C80  6EF7               	movwf	tblptrh,c
  4090  010C82                     	if	1	;There are 3 active tblptr bytes
  4091  010C82  6AF8               	clrf	tblptru,c
  4092  010C84  0E00               	movlw	low (__mediumconst shr (0+16))
  4093  010C86  22F8               	addwfc	tblptru,f,c
  4094  010C88                     	endif
  4095  010C88  0009               	tblrd		*+
  4096  010C8A  CFF5 F077          	movff	tablat,___ftmul@f2
  4097  010C8E  0009               	tblrd		*+
  4098  010C90  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4099  010C94  000A               	tblrd		*-
  4100  010C96  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4101  010C9A  0E00               	movlw	0
  4102  010C9C  0100               	movlb	0	; () banked
  4103  010C9E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4104  010CA0  0E64               	movlw	100
  4105  010CA2  6F68               	movwf	___awdiv@divisor& (0+255),b
  4106  010CA4  0100               	movlb	0	; () banked
  4107  010CA6  5189               	movf	scale@scl& (0+255),w,b
  4108  010CA8  0100               	movlb	0	; () banked
  4109  010CAA  6F66               	movwf	___awdiv@dividend& (0+255),b
  4110  010CAC  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4111  010CAE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4112  010CB0  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4113  010CB2  EC79  F095         	call	___awdiv	;wreg free
  4114  010CB6  0E12               	movlw	18
  4115  010CB8  0100               	movlb	0	; () banked
  4116  010CBA  2566               	addwf	?___awdiv& (0+255),w,b
  4117  010CBC  0100               	movlb	0	; () banked
  4118  010CBE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4119  010CC0  0E00               	movlw	0
  4120  010CC2  0100               	movlb	0	; () banked
  4121  010CC4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4122  010CC6  0100               	movlb	0	; () banked
  4123  010CC8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4124  010CCA  0E00               	movlw	0
  4125  010CCC  0100               	movlb	0	; () banked
  4126  010CCE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4127  010CD0  0E03               	movlw	3
  4128  010CD2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4129  010CD4  EC9C  F09A         	call	___wmul	;wreg free
  4130  010CD8  0E58               	movlw	low __powers_
  4131  010CDA  0100               	movlb	0	; () banked
  4132  010CDC  256E               	addwf	?___wmul& (0+255),w,b
  4133  010CDE  6EF6               	movwf	tblptrl,c
  4134  010CE0  0EFE               	movlw	high __powers_
  4135  010CE2  0100               	movlb	0	; () banked
  4136  010CE4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4137  010CE6  6EF7               	movwf	tblptrh,c
  4138  010CE8                     	if	1	;There are 3 active tblptr bytes
  4139  010CE8  6AF8               	clrf	tblptru,c
  4140  010CEA  0E00               	movlw	low (__mediumconst shr (0+16))
  4141  010CEC  22F8               	addwfc	tblptru,f,c
  4142  010CEE                     	endif
  4143  010CEE  0009               	tblrd		*+
  4144  010CF0  CFF5 F074          	movff	tablat,___ftmul@f1
  4145  010CF4  0009               	tblrd		*+
  4146  010CF6  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4147  010CFA  000A               	tblrd		*-
  4148  010CFC  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4149  010D00  EC69  F08D         	call	___ftmul	;wreg free
  4150  010D04  C074  F086         	movff	?___ftmul,_scale$2535
  4151  010D08  C075  F087         	movff	?___ftmul+1,_scale$2535+1
  4152  010D0C  C076  F088         	movff	?___ftmul+2,_scale$2535+2
  4153                           
  4154                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4155  010D10  C086  F074         	movff	_scale$2535,___ftmul@f1
  4156  010D14  C087  F075         	movff	_scale$2535+1,___ftmul@f1+1
  4157  010D18  C088  F076         	movff	_scale$2535+2,___ftmul@f1+2
  4158  010D1C  0E00               	movlw	0
  4159  010D1E  0100               	movlb	0	; () banked
  4160  010D20  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4161  010D22  0E03               	movlw	3
  4162  010D24  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4163  010D26  0E00               	movlw	0
  4164  010D28  0100               	movlb	0	; () banked
  4165  010D2A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4166  010D2C  0E0A               	movlw	10
  4167  010D2E  6F62               	movwf	___awmod@divisor& (0+255),b
  4168  010D30  0100               	movlb	0	; () banked
  4169  010D32  5189               	movf	scale@scl& (0+255),w,b
  4170  010D34  0100               	movlb	0	; () banked
  4171  010D36  6F60               	movwf	___awmod@dividend& (0+255),b
  4172  010D38  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4173  010D3A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4174  010D3C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4175  010D3E  EC36  F097         	call	___awmod	;wreg free
  4176  010D42  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4177  010D46  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4178  010D4A  EC9C  F09A         	call	___wmul	;wreg free
  4179  010D4E  0E58               	movlw	low __powers_
  4180  010D50  0100               	movlb	0	; () banked
  4181  010D52  256E               	addwf	?___wmul& (0+255),w,b
  4182  010D54  6EF6               	movwf	tblptrl,c
  4183  010D56  0EFE               	movlw	high __powers_
  4184  010D58  0100               	movlb	0	; () banked
  4185  010D5A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4186  010D5C  6EF7               	movwf	tblptrh,c
  4187  010D5E                     	if	1	;There are 3 active tblptr bytes
  4188  010D5E  6AF8               	clrf	tblptru,c
  4189  010D60  0E00               	movlw	low (__mediumconst shr (0+16))
  4190  010D62  22F8               	addwfc	tblptru,f,c
  4191  010D64                     	endif
  4192  010D64  0009               	tblrd		*+
  4193  010D66  CFF5 F077          	movff	tablat,___ftmul@f2
  4194  010D6A  0009               	tblrd		*+
  4195  010D6C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4196  010D70  000A               	tblrd		*-
  4197  010D72  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4198  010D76  EC69  F08D         	call	___ftmul	;wreg free
  4199  010D7A  C074  F083         	movff	?___ftmul,?_scale
  4200  010D7E  C075  F084         	movff	?___ftmul+1,?_scale+1
  4201  010D82  C076  F085         	movff	?___ftmul+2,?_scale+2
  4202  010D86  0012               	return	
  4203  010D88                     l3525:
  4204                           
  4205                           ;doprnt.c: 438: else if(scl > 10)
  4206  010D88  0100               	movlb	0	; () banked
  4207  010D8A  5189               	movf	scale@scl& (0+255),w,b
  4208  010D8C  0A80               	xorlw	128
  4209  010D8E  0F75               	addlw	-139
  4210  010D90  A0D8               	btfss	status,0,c
  4211  010D92  D063               	goto	l3531
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4215  010D94  0E00               	movlw	0
  4216  010D96  0100               	movlb	0	; () banked
  4217  010D98  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4218  010D9A  0E0A               	movlw	10
  4219  010D9C  6F68               	movwf	___awdiv@divisor& (0+255),b
  4220  010D9E  0100               	movlb	0	; () banked
  4221  010DA0  5189               	movf	scale@scl& (0+255),w,b
  4222  010DA2  0100               	movlb	0	; () banked
  4223  010DA4  6F66               	movwf	___awdiv@dividend& (0+255),b
  4224  010DA6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4225  010DA8  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4226  010DAA  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4227  010DAC  EC79  F095         	call	___awdiv	;wreg free
  4228  010DB0  0E09               	movlw	9
  4229  010DB2  0100               	movlb	0	; () banked
  4230  010DB4  2566               	addwf	?___awdiv& (0+255),w,b
  4231  010DB6  0100               	movlb	0	; () banked
  4232  010DB8  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4233  010DBA  0E00               	movlw	0
  4234  010DBC  0100               	movlb	0	; () banked
  4235  010DBE  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4236  010DC0  0100               	movlb	0	; () banked
  4237  010DC2  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4238  010DC4  0E00               	movlw	0
  4239  010DC6  0100               	movlb	0	; () banked
  4240  010DC8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4241  010DCA  0E03               	movlw	3
  4242  010DCC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4243  010DCE  EC9C  F09A         	call	___wmul	;wreg free
  4244  010DD2  0E58               	movlw	low __powers_
  4245  010DD4  0100               	movlb	0	; () banked
  4246  010DD6  256E               	addwf	?___wmul& (0+255),w,b
  4247  010DD8  6EF6               	movwf	tblptrl,c
  4248  010DDA  0EFE               	movlw	high __powers_
  4249  010DDC  0100               	movlb	0	; () banked
  4250  010DDE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4251  010DE0  6EF7               	movwf	tblptrh,c
  4252  010DE2                     	if	1	;There are 3 active tblptr bytes
  4253  010DE2  6AF8               	clrf	tblptru,c
  4254  010DE4  0E00               	movlw	low (__mediumconst shr (0+16))
  4255  010DE6  22F8               	addwfc	tblptru,f,c
  4256  010DE8                     	endif
  4257  010DE8  0009               	tblrd		*+
  4258  010DEA  CFF5 F074          	movff	tablat,___ftmul@f1
  4259  010DEE  0009               	tblrd		*+
  4260  010DF0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4261  010DF4  000A               	tblrd		*-
  4262  010DF6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4263  010DFA  0E00               	movlw	0
  4264  010DFC  0100               	movlb	0	; () banked
  4265  010DFE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4266  010E00  0E03               	movlw	3
  4267  010E02  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4268  010E04  0E00               	movlw	0
  4269  010E06  0100               	movlb	0	; () banked
  4270  010E08  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4271  010E0A  0E0A               	movlw	10
  4272  010E0C  6F62               	movwf	___awmod@divisor& (0+255),b
  4273  010E0E  0100               	movlb	0	; () banked
  4274  010E10  5189               	movf	scale@scl& (0+255),w,b
  4275  010E12  0100               	movlb	0	; () banked
  4276  010E14  6F60               	movwf	___awmod@dividend& (0+255),b
  4277  010E16  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4278  010E18  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4279  010E1A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4280  010E1C  EC36  F097         	call	___awmod	;wreg free
  4281  010E20  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4282  010E24  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4283  010E28  EC9C  F09A         	call	___wmul	;wreg free
  4284  010E2C  0E58               	movlw	low __powers_
  4285  010E2E  0100               	movlb	0	; () banked
  4286  010E30  256E               	addwf	?___wmul& (0+255),w,b
  4287  010E32  6EF6               	movwf	tblptrl,c
  4288  010E34  0EFE               	movlw	high __powers_
  4289  010E36  0100               	movlb	0	; () banked
  4290  010E38  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4291  010E3A  6EF7               	movwf	tblptrh,c
  4292  010E3C                     	if	1	;There are 3 active tblptr bytes
  4293  010E3C  6AF8               	clrf	tblptru,c
  4294  010E3E  0E00               	movlw	low (__mediumconst shr (0+16))
  4295  010E40  22F8               	addwfc	tblptru,f,c
  4296  010E42                     	endif
  4297  010E42  0009               	tblrd		*+
  4298  010E44  CFF5 F077          	movff	tablat,___ftmul@f2
  4299  010E48  0009               	tblrd		*+
  4300  010E4A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4301  010E4E  000A               	tblrd		*-
  4302  010E50  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4303  010E54  EC69  F08D         	call	___ftmul	;wreg free
  4304  010E58  D790               	goto	L4
  4305  010E5A                     l3531:
  4306                           
  4307                           ;doprnt.c: 440: return _powers_[scl];
  4308  010E5A  0100               	movlb	0	; () banked
  4309  010E5C  5189               	movf	scale@scl& (0+255),w,b
  4310  010E5E  0D03               	mullw	3
  4311  010E60  0E58               	movlw	low __powers_
  4312  010E62  24F3               	addwf	prodl,w,c
  4313  010E64  6EF6               	movwf	tblptrl,c
  4314  010E66  0EFE               	movlw	high __powers_
  4315  010E68  20F4               	addwfc	prodh,w,c
  4316  010E6A  6EF7               	movwf	tblptrh,c
  4317  010E6C                     	if	1	;There are 3 active tblptr bytes
  4318  010E6C  6AF8               	clrf	tblptru,c
  4319  010E6E  0E00               	movlw	low (__mediumconst shr (0+16))
  4320  010E70  22F8               	addwfc	tblptru,f,c
  4321  010E72                     	endif
  4322  010E72  0009               	tblrd		*+
  4323  010E74  CFF5 F083          	movff	tablat,?_scale
  4324  010E78  0009               	tblrd		*+
  4325  010E7A  CFF5 F084          	movff	tablat,?_scale+1
  4326  010E7E  000A               	tblrd		*-
  4327  010E80  CFF5 F085          	movff	tablat,?_scale+2
  4328  010E84  0012               	return	
  4329  010E86                     __end_of_scale:
  4330                           	opt stack 0
  4331                           tblptru	equ	0xFF8
  4332                           tblptrh	equ	0xFF7
  4333                           tblptrl	equ	0xFF6
  4334                           tablat	equ	0xFF5
  4335                           prodh	equ	0xFF4
  4336                           prodl	equ	0xFF3
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           postdec1	equ	0xFE5
  4340                           fsr1l	equ	0xFE1
  4341                           indf2	equ	0xFDF
  4342                           postinc2	equ	0xFDE
  4343                           postdec2	equ	0xFDD
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function _fround *****************
  4349 ;; Defined at:
  4350 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  prec            1    wreg     unsigned char 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  prec            1   44[BANK0 ] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  3   35[BANK0 ] unsigned char 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4364 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4365 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4367 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4368 ;;Total ram usage:       10 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    6
  4371 ;; This function calls:
  4372 ;;		___awdiv
  4373 ;;		___awmod
  4374 ;;		___ftmul
  4375 ;;		___wmul
  4376 ;; This function is called by:
  4377 ;;		_sprintf
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text6
  4382  010E86                     __ptext6:
  4383                           	opt stack 0
  4384  010E86                     _fround:
  4385                           	opt stack 22
  4386                           
  4387                           ;incstack = 0
  4388                           ;fround@prec stored from wreg
  4389  010E86  0100               	movlb	0	; () banked
  4390  010E88  6F8C               	movwf	fround@prec& (0+255),b
  4391                           
  4392                           ;doprnt.c: 413: if(prec>=110)
  4393  010E8A  0E6D               	movlw	109
  4394  010E8C  0100               	movlb	0	; () banked
  4395  010E8E  658C               	cpfsgt	fround@prec& (0+255),b
  4396  010E90  D0C3               	goto	l3485
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4400  010E92  0E00               	movlw	0
  4401  010E94  0100               	movlb	0	; () banked
  4402  010E96  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4403  010E98  0E03               	movlw	3
  4404  010E9A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4405  010E9C  0E00               	movlw	0
  4406  010E9E  0100               	movlb	0	; () banked
  4407  010EA0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4408  010EA2  0E0A               	movlw	10
  4409  010EA4  6F68               	movwf	___awdiv@divisor& (0+255),b
  4410  010EA6  0E00               	movlw	0
  4411  010EA8  0100               	movlb	0	; () banked
  4412  010EAA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4413  010EAC  0E64               	movlw	100
  4414  010EAE  6F62               	movwf	___awmod@divisor& (0+255),b
  4415  010EB0  C08C  F060         	movff	fround@prec,___awmod@dividend
  4416  010EB4  0100               	movlb	0	; () banked
  4417  010EB6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4418  010EB8  EC36  F097         	call	___awmod	;wreg free
  4419  010EBC  C060  F066         	movff	?___awmod,___awdiv@dividend
  4420  010EC0  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4421  010EC4  EC79  F095         	call	___awdiv	;wreg free
  4422  010EC8  0E09               	movlw	9
  4423  010ECA  0100               	movlb	0	; () banked
  4424  010ECC  2566               	addwf	?___awdiv& (0+255),w,b
  4425  010ECE  0100               	movlb	0	; () banked
  4426  010ED0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4427  010ED2  0E00               	movlw	0
  4428  010ED4  0100               	movlb	0	; () banked
  4429  010ED6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4430  010ED8  0100               	movlb	0	; () banked
  4431  010EDA  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4432  010EDC  EC9C  F09A         	call	___wmul	;wreg free
  4433  010EE0  0E31               	movlw	low __npowers_
  4434  010EE2  0100               	movlb	0	; () banked
  4435  010EE4  256E               	addwf	?___wmul& (0+255),w,b
  4436  010EE6  6EF6               	movwf	tblptrl,c
  4437  010EE8  0EFE               	movlw	high __npowers_
  4438  010EEA  0100               	movlb	0	; () banked
  4439  010EEC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4440  010EEE  6EF7               	movwf	tblptrh,c
  4441  010EF0                     	if	1	;There are 3 active tblptr bytes
  4442  010EF0  6AF8               	clrf	tblptru,c
  4443  010EF2  0E00               	movlw	low (__mediumconst shr (0+16))
  4444  010EF4  22F8               	addwfc	tblptru,f,c
  4445  010EF6                     	endif
  4446  010EF6  0009               	tblrd		*+
  4447  010EF8  CFF5 F077          	movff	tablat,___ftmul@f2
  4448  010EFC  0009               	tblrd		*+
  4449  010EFE  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4450  010F02  000A               	tblrd		*-
  4451  010F04  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4452  010F08  0E00               	movlw	0
  4453  010F0A  0100               	movlb	0	; () banked
  4454  010F0C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4455  010F0E  0E64               	movlw	100
  4456  010F10  6F68               	movwf	___awdiv@divisor& (0+255),b
  4457  010F12  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4458  010F16  0100               	movlb	0	; () banked
  4459  010F18  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4460  010F1A  EC79  F095         	call	___awdiv	;wreg free
  4461  010F1E  0E12               	movlw	18
  4462  010F20  0100               	movlb	0	; () banked
  4463  010F22  2566               	addwf	?___awdiv& (0+255),w,b
  4464  010F24  0100               	movlb	0	; () banked
  4465  010F26  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4466  010F28  0E00               	movlw	0
  4467  010F2A  0100               	movlb	0	; () banked
  4468  010F2C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4469  010F2E  0100               	movlb	0	; () banked
  4470  010F30  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4471  010F32  0E00               	movlw	0
  4472  010F34  0100               	movlb	0	; () banked
  4473  010F36  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4474  010F38  0E03               	movlw	3
  4475  010F3A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4476  010F3C  EC9C  F09A         	call	___wmul	;wreg free
  4477  010F40  0E31               	movlw	low __npowers_
  4478  010F42  0100               	movlb	0	; () banked
  4479  010F44  256E               	addwf	?___wmul& (0+255),w,b
  4480  010F46  6EF6               	movwf	tblptrl,c
  4481  010F48  0EFE               	movlw	high __npowers_
  4482  010F4A  0100               	movlb	0	; () banked
  4483  010F4C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4484  010F4E  6EF7               	movwf	tblptrh,c
  4485  010F50                     	if	1	;There are 3 active tblptr bytes
  4486  010F50  6AF8               	clrf	tblptru,c
  4487  010F52  0E00               	movlw	low (__mediumconst shr (0+16))
  4488  010F54  22F8               	addwfc	tblptru,f,c
  4489  010F56                     	endif
  4490  010F56  0009               	tblrd		*+
  4491  010F58  CFF5 F074          	movff	tablat,___ftmul@f1
  4492  010F5C  0009               	tblrd		*+
  4493  010F5E  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4494  010F62  000A               	tblrd		*-
  4495  010F64  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4496  010F68  EC69  F08D         	call	___ftmul	;wreg free
  4497  010F6C  C074  F089         	movff	?___ftmul,_fround$2533
  4498  010F70  C075  F08A         	movff	?___ftmul+1,_fround$2533+1
  4499  010F74  C076  F08B         	movff	?___ftmul+2,_fround$2533+2
  4500                           
  4501                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4502  010F78  0E00               	movlw	0
  4503  010F7A  0100               	movlb	0	; () banked
  4504  010F7C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4505  010F7E  0E03               	movlw	3
  4506  010F80  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4507  010F82  0E00               	movlw	0
  4508  010F84  0100               	movlb	0	; () banked
  4509  010F86  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4510  010F88  0E0A               	movlw	10
  4511  010F8A  6F62               	movwf	___awmod@divisor& (0+255),b
  4512  010F8C  C08C  F060         	movff	fround@prec,___awmod@dividend
  4513  010F90  0100               	movlb	0	; () banked
  4514  010F92  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4515  010F94  EC36  F097         	call	___awmod	;wreg free
  4516  010F98  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4517  010F9C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4518  010FA0  EC9C  F09A         	call	___wmul	;wreg free
  4519  010FA4  0E31               	movlw	low __npowers_
  4520  010FA6  0100               	movlb	0	; () banked
  4521  010FA8  256E               	addwf	?___wmul& (0+255),w,b
  4522  010FAA  6EF6               	movwf	tblptrl,c
  4523  010FAC  0EFE               	movlw	high __npowers_
  4524  010FAE  0100               	movlb	0	; () banked
  4525  010FB0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4526  010FB2  6EF7               	movwf	tblptrh,c
  4527  010FB4                     	if	1	;There are 3 active tblptr bytes
  4528  010FB4  6AF8               	clrf	tblptru,c
  4529  010FB6  0E00               	movlw	low (__mediumconst shr (0+16))
  4530  010FB8  22F8               	addwfc	tblptru,f,c
  4531  010FBA                     	endif
  4532  010FBA  0009               	tblrd		*+
  4533  010FBC  CFF5 F077          	movff	tablat,___ftmul@f2
  4534  010FC0  0009               	tblrd		*+
  4535  010FC2  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4536  010FC6  000A               	tblrd		*-
  4537  010FC8  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4538  010FCC  C089  F074         	movff	_fround$2533,___ftmul@f1
  4539  010FD0  C08A  F075         	movff	_fround$2533+1,___ftmul@f1+1
  4540  010FD4  C08B  F076         	movff	_fround$2533+2,___ftmul@f1+2
  4541  010FD8  EC69  F08D         	call	___ftmul	;wreg free
  4542  010FDC  C074  F086         	movff	?___ftmul,_fround$2534
  4543  010FE0  C075  F087         	movff	?___ftmul+1,_fround$2534+1
  4544  010FE4  C076  F088         	movff	?___ftmul+2,_fround$2534+2
  4545                           
  4546                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4547  010FE8  C086  F074         	movff	_fround$2534,___ftmul@f1
  4548  010FEC  C087  F075         	movff	_fround$2534+1,___ftmul@f1+1
  4549  010FF0  C088  F076         	movff	_fround$2534+2,___ftmul@f1+2
  4550  010FF4  0E00               	movlw	0
  4551  010FF6  0100               	movlb	0	; () banked
  4552  010FF8  6F77               	movwf	___ftmul@f2& (0+255),b
  4553  010FFA  0E00               	movlw	0
  4554  010FFC  0100               	movlb	0	; () banked
  4555  010FFE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4556  011000  0E3F               	movlw	63
  4557  011002  0100               	movlb	0	; () banked
  4558  011004  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4559  011006  EC69  F08D         	call	___ftmul	;wreg free
  4560  01100A  C074  F083         	movff	?___ftmul,?_fround
  4561  01100E  C075  F084         	movff	?___ftmul+1,?_fround+1
  4562  011012  C076  F085         	movff	?___ftmul+2,?_fround+2
  4563  011016  0012               	return	
  4564  011018                     l3485:
  4565                           
  4566                           ;doprnt.c: 415: else if(prec > 10)
  4567  011018  0E0A               	movlw	10
  4568  01101A  0100               	movlb	0	; () banked
  4569  01101C  658C               	cpfsgt	fround@prec& (0+255),b
  4570  01101E  D074               	goto	l3493
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4574  011020  0E00               	movlw	0
  4575  011022  0100               	movlb	0	; () banked
  4576  011024  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4577  011026  0E03               	movlw	3
  4578  011028  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4579  01102A  0E00               	movlw	0
  4580  01102C  0100               	movlb	0	; () banked
  4581  01102E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4582  011030  0E0A               	movlw	10
  4583  011032  6F62               	movwf	___awmod@divisor& (0+255),b
  4584  011034  C08C  F060         	movff	fround@prec,___awmod@dividend
  4585  011038  0100               	movlb	0	; () banked
  4586  01103A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4587  01103C  EC36  F097         	call	___awmod	;wreg free
  4588  011040  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4589  011044  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4590  011048  EC9C  F09A         	call	___wmul	;wreg free
  4591  01104C  0E31               	movlw	low __npowers_
  4592  01104E  0100               	movlb	0	; () banked
  4593  011050  256E               	addwf	?___wmul& (0+255),w,b
  4594  011052  6EF6               	movwf	tblptrl,c
  4595  011054  0EFE               	movlw	high __npowers_
  4596  011056  0100               	movlb	0	; () banked
  4597  011058  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4598  01105A  6EF7               	movwf	tblptrh,c
  4599  01105C                     	if	1	;There are 3 active tblptr bytes
  4600  01105C  6AF8               	clrf	tblptru,c
  4601  01105E  0E00               	movlw	low (__mediumconst shr (0+16))
  4602  011060  22F8               	addwfc	tblptru,f,c
  4603  011062                     	endif
  4604  011062  0009               	tblrd		*+
  4605  011064  CFF5 F077          	movff	tablat,___ftmul@f2
  4606  011068  0009               	tblrd		*+
  4607  01106A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4608  01106E  000A               	tblrd		*-
  4609  011070  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4610  011074  0E00               	movlw	0
  4611  011076  0100               	movlb	0	; () banked
  4612  011078  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4613  01107A  0E0A               	movlw	10
  4614  01107C  6F68               	movwf	___awdiv@divisor& (0+255),b
  4615  01107E  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4616  011082  0100               	movlb	0	; () banked
  4617  011084  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4618  011086  EC79  F095         	call	___awdiv	;wreg free
  4619  01108A  0E09               	movlw	9
  4620  01108C  0100               	movlb	0	; () banked
  4621  01108E  2566               	addwf	?___awdiv& (0+255),w,b
  4622  011090  0100               	movlb	0	; () banked
  4623  011092  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4624  011094  0E00               	movlw	0
  4625  011096  0100               	movlb	0	; () banked
  4626  011098  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4627  01109A  0100               	movlb	0	; () banked
  4628  01109C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4629  01109E  0E00               	movlw	0
  4630  0110A0  0100               	movlb	0	; () banked
  4631  0110A2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4632  0110A4  0E03               	movlw	3
  4633  0110A6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4634  0110A8  EC9C  F09A         	call	___wmul	;wreg free
  4635  0110AC  0E31               	movlw	low __npowers_
  4636  0110AE  0100               	movlb	0	; () banked
  4637  0110B0  256E               	addwf	?___wmul& (0+255),w,b
  4638  0110B2  6EF6               	movwf	tblptrl,c
  4639  0110B4  0EFE               	movlw	high __npowers_
  4640  0110B6  0100               	movlb	0	; () banked
  4641  0110B8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4642  0110BA  6EF7               	movwf	tblptrh,c
  4643  0110BC                     	if	1	;There are 3 active tblptr bytes
  4644  0110BC  6AF8               	clrf	tblptru,c
  4645  0110BE  0E00               	movlw	low (__mediumconst shr (0+16))
  4646  0110C0  22F8               	addwfc	tblptru,f,c
  4647  0110C2                     	endif
  4648  0110C2  0009               	tblrd		*+
  4649  0110C4  CFF5 F074          	movff	tablat,___ftmul@f1
  4650  0110C8  0009               	tblrd		*+
  4651  0110CA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4652  0110CE  000A               	tblrd		*-
  4653  0110D0  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4654  0110D4  EC69  F08D         	call	___ftmul	;wreg free
  4655  0110D8  C074  F089         	movff	?___ftmul,_fround$2533
  4656  0110DC  C075  F08A         	movff	?___ftmul+1,_fround$2533+1
  4657  0110E0  C076  F08B         	movff	?___ftmul+2,_fround$2533+2
  4658                           
  4659                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4660  0110E4  C089  F074         	movff	_fround$2533,___ftmul@f1
  4661  0110E8  C08A  F075         	movff	_fround$2533+1,___ftmul@f1+1
  4662  0110EC  C08B  F076         	movff	_fround$2533+2,___ftmul@f1+2
  4663  0110F0  0E00               	movlw	0
  4664  0110F2  0100               	movlb	0	; () banked
  4665  0110F4  6F77               	movwf	___ftmul@f2& (0+255),b
  4666  0110F6  0E00               	movlw	0
  4667  0110F8  0100               	movlb	0	; () banked
  4668  0110FA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4669  0110FC  0E3F               	movlw	63
  4670  0110FE  0100               	movlb	0	; () banked
  4671  011100  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4672  011102  EC69  F08D         	call	___ftmul	;wreg free
  4673  011106  D781               	goto	L5
  4674  011108                     l3493:
  4675                           
  4676                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4677  011108  0100               	movlb	0	; () banked
  4678  01110A  518C               	movf	fround@prec& (0+255),w,b
  4679  01110C  0D03               	mullw	3
  4680  01110E  0E31               	movlw	low __npowers_
  4681  011110  24F3               	addwf	prodl,w,c
  4682  011112  6EF6               	movwf	tblptrl,c
  4683  011114  0EFE               	movlw	high __npowers_
  4684  011116  20F4               	addwfc	prodh,w,c
  4685  011118  6EF7               	movwf	tblptrh,c
  4686  01111A                     	if	1	;There are 3 active tblptr bytes
  4687  01111A  6AF8               	clrf	tblptru,c
  4688  01111C  0E00               	movlw	low (__mediumconst shr (0+16))
  4689  01111E  22F8               	addwfc	tblptru,f,c
  4690  011120                     	endif
  4691  011120  0009               	tblrd		*+
  4692  011122  CFF5 F074          	movff	tablat,___ftmul@f1
  4693  011126  0009               	tblrd		*+
  4694  011128  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4695  01112C  000A               	tblrd		*-
  4696  01112E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4697  011132  0E00               	movlw	0
  4698  011134  0100               	movlb	0	; () banked
  4699  011136  6F77               	movwf	___ftmul@f2& (0+255),b
  4700  011138  0E00               	movlw	0
  4701  01113A  0100               	movlb	0	; () banked
  4702  01113C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4703  01113E  0E3F               	movlw	63
  4704  011140  0100               	movlb	0	; () banked
  4705  011142  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4706  011144  EC69  F08D         	call	___ftmul	;wreg free
  4707  011148  C074  F083         	movff	?___ftmul,?_fround
  4708  01114C  C075  F084         	movff	?___ftmul+1,?_fround+1
  4709  011150  C076  F085         	movff	?___ftmul+2,?_fround+2
  4710  011154  0012               	return	
  4711  011156                     __end_of_fround:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           fsr1l	equ	0xFE1
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8
  4729                           
  4730 ;; *************** function ___awmod *****************
  4731 ;; Defined at:
  4732 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;  dividend        2    0[BANK0 ] int 
  4735 ;;  divisor         2    2[BANK0 ] int 
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  sign            1    5[BANK0 ] unsigned char 
  4738 ;;  counter         1    4[BANK0 ] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  2    0[BANK0 ] int 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4751 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4752 ;;Total ram usage:        6 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    4
  4755 ;; This function calls:
  4756 ;;		Nothing
  4757 ;; This function is called by:
  4758 ;;		_fround
  4759 ;;		_scale
  4760 ;;		_fillInTemp
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text7
  4765  012E6C                     __ptext7:
  4766                           	opt stack 0
  4767  012E6C                     ___awmod:
  4768                           	opt stack 23
  4769                           
  4770                           ;incstack = 0
  4771  012E6C  0E00               	movlw	0
  4772  012E6E  0100               	movlb	0	; () banked
  4773  012E70  6F65               	movwf	___awmod@sign& (0+255),b
  4774                           
  4775                           ; BSR set to: 0
  4776  012E72  0100               	movlb	0	; () banked
  4777  012E74  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4778  012E76  D008               	goto	l3325
  4779                           
  4780                           ; BSR set to: 0
  4781  012E78  0100               	movlb	0	; () banked
  4782  012E7A  6D60               	negf	___awmod@dividend& (0+255),b
  4783  012E7C  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4784  012E7E  B0D8               	btfsc	status,0,c
  4785  012E80  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4786                           
  4787                           ; BSR set to: 0
  4788  012E82  0E01               	movlw	1
  4789  012E84  0100               	movlb	0	; () banked
  4790  012E86  6F65               	movwf	___awmod@sign& (0+255),b
  4791  012E88                     l3325:
  4792                           
  4793                           ; BSR set to: 0
  4794  012E88  0100               	movlb	0	; () banked
  4795  012E8A  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4796  012E8C  D005               	goto	l3329
  4797                           
  4798                           ; BSR set to: 0
  4799  012E8E  0100               	movlb	0	; () banked
  4800  012E90  6D62               	negf	___awmod@divisor& (0+255),b
  4801  012E92  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  4802  012E94  B0D8               	btfsc	status,0,c
  4803  012E96  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  4804  012E98                     l3329:
  4805                           
  4806                           ; BSR set to: 0
  4807  012E98  0100               	movlb	0	; () banked
  4808  012E9A  5162               	movf	___awmod@divisor& (0+255),w,b
  4809  012E9C  0100               	movlb	0	; () banked
  4810  012E9E  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4811  012EA0  B4D8               	btfsc	status,2,c
  4812  012EA2  D026               	goto	l3345
  4813                           
  4814                           ; BSR set to: 0
  4815  012EA4  0E01               	movlw	1
  4816  012EA6  0100               	movlb	0	; () banked
  4817  012EA8  6F64               	movwf	___awmod@counter& (0+255),b
  4818  012EAA  D006               	goto	l3335
  4819  012EAC                     l3333:
  4820                           
  4821                           ; BSR set to: 0
  4822  012EAC  0100               	movlb	0	; () banked
  4823  012EAE  90D8               	bcf	status,0,c
  4824  012EB0  3762               	rlcf	___awmod@divisor& (0+255),f,b
  4825  012EB2  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4826  012EB4  0100               	movlb	0	; () banked
  4827  012EB6  2B64               	incf	___awmod@counter& (0+255),f,b
  4828  012EB8                     l3335:
  4829                           
  4830                           ; BSR set to: 0
  4831  012EB8  0100               	movlb	0	; () banked
  4832  012EBA  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4833  012EBC  D7F7               	goto	l3333
  4834  012EBE                     l3337:
  4835                           
  4836                           ; BSR set to: 0
  4837  012EBE  0100               	movlb	0	; () banked
  4838  012EC0  5162               	movf	___awmod@divisor& (0+255),w,b
  4839  012EC2  0100               	movlb	0	; () banked
  4840  012EC4  5D60               	subwf	___awmod@dividend& (0+255),w,b
  4841  012EC6  0100               	movlb	0	; () banked
  4842  012EC8  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4843  012ECA  0100               	movlb	0	; () banked
  4844  012ECC  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4845  012ECE  A0D8               	btfss	status,0,c
  4846  012ED0  D008               	goto	l3341
  4847                           
  4848                           ; BSR set to: 0
  4849  012ED2  0100               	movlb	0	; () banked
  4850  012ED4  5162               	movf	___awmod@divisor& (0+255),w,b
  4851  012ED6  0100               	movlb	0	; () banked
  4852  012ED8  5F60               	subwf	___awmod@dividend& (0+255),f,b
  4853  012EDA  0100               	movlb	0	; () banked
  4854  012EDC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4855  012EDE  0100               	movlb	0	; () banked
  4856  012EE0  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4857  012EE2                     l3341:
  4858                           
  4859                           ; BSR set to: 0
  4860  012EE2  0100               	movlb	0	; () banked
  4861  012EE4  90D8               	bcf	status,0,c
  4862  012EE6  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4863  012EE8  3362               	rrcf	___awmod@divisor& (0+255),f,b
  4864                           
  4865                           ; BSR set to: 0
  4866  012EEA  0100               	movlb	0	; () banked
  4867  012EEC  2F64               	decfsz	___awmod@counter& (0+255),f,b
  4868  012EEE  D7E7               	goto	l3337
  4869  012EF0                     l3345:
  4870                           
  4871                           ; BSR set to: 0
  4872  012EF0  0100               	movlb	0	; () banked
  4873  012EF2  5165               	movf	___awmod@sign& (0+255),w,b
  4874  012EF4  0100               	movlb	0	; () banked
  4875  012EF6  B4D8               	btfsc	status,2,c
  4876  012EF8  D005               	goto	l3349
  4877                           
  4878                           ; BSR set to: 0
  4879  012EFA  0100               	movlb	0	; () banked
  4880  012EFC  6D60               	negf	___awmod@dividend& (0+255),b
  4881  012EFE  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4882  012F00  B0D8               	btfsc	status,0,c
  4883  012F02  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4884  012F04                     l3349:
  4885                           
  4886                           ; BSR set to: 0
  4887  012F04  C060  F060         	movff	___awmod@dividend,?___awmod
  4888  012F08  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  4889  012F0C  0012               	return	
  4890  012F0E                     __end_of___awmod:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           prodh	equ	0xFF4
  4897                           prodl	equ	0xFF3
  4898                           postinc0	equ	0xFEE
  4899                           wreg	equ	0xFE8
  4900                           postdec1	equ	0xFE5
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           postinc2	equ	0xFDE
  4904                           postdec2	equ	0xFDD
  4905                           fsr2h	equ	0xFDA
  4906                           fsr2l	equ	0xFD9
  4907                           status	equ	0xFD8
  4908                           
  4909 ;; *************** function ___awdiv *****************
  4910 ;; Defined at:
  4911 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  dividend        2    6[BANK0 ] int 
  4914 ;;  divisor         2    8[BANK0 ] int 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  quotient        2   12[BANK0 ] int 
  4917 ;;  sign            1   11[BANK0 ] unsigned char 
  4918 ;;  counter         1   10[BANK0 ] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  2    6[BANK0 ] int 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4928 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4929 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4931 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4932 ;;Total ram usage:        8 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    4
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_fround
  4939 ;;		_scale
  4940 ;;		_sprintf
  4941 ;;		_fillInTemp
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text8
  4946  012AF2                     __ptext8:
  4947                           	opt stack 0
  4948  012AF2                     ___awdiv:
  4949                           	opt stack 23
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;incstack = 0
  4953  012AF2  0E00               	movlw	0
  4954  012AF4  0100               	movlb	0	; () banked
  4955  012AF6  6F6B               	movwf	___awdiv@sign& (0+255),b
  4956                           
  4957                           ; BSR set to: 0
  4958  012AF8  0100               	movlb	0	; () banked
  4959  012AFA  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4960  012AFC  D008               	goto	l3281
  4961                           
  4962                           ; BSR set to: 0
  4963  012AFE  0100               	movlb	0	; () banked
  4964  012B00  6D68               	negf	___awdiv@divisor& (0+255),b
  4965  012B02  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4966  012B04  B0D8               	btfsc	status,0,c
  4967  012B06  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4968                           
  4969                           ; BSR set to: 0
  4970  012B08  0E01               	movlw	1
  4971  012B0A  0100               	movlb	0	; () banked
  4972  012B0C  6F6B               	movwf	___awdiv@sign& (0+255),b
  4973  012B0E                     l3281:
  4974                           
  4975                           ; BSR set to: 0
  4976  012B0E  0100               	movlb	0	; () banked
  4977  012B10  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4978  012B12  D008               	goto	l3287
  4979                           
  4980                           ; BSR set to: 0
  4981  012B14  0100               	movlb	0	; () banked
  4982  012B16  6D66               	negf	___awdiv@dividend& (0+255),b
  4983  012B18  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4984  012B1A  B0D8               	btfsc	status,0,c
  4985  012B1C  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4986                           
  4987                           ; BSR set to: 0
  4988  012B1E  0E01               	movlw	1
  4989  012B20  0100               	movlb	0	; () banked
  4990  012B22  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  4991  012B24                     l3287:
  4992                           
  4993                           ; BSR set to: 0
  4994  012B24  0E00               	movlw	0
  4995  012B26  0100               	movlb	0	; () banked
  4996  012B28  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4997  012B2A  0E00               	movlw	0
  4998  012B2C  6F6C               	movwf	___awdiv@quotient& (0+255),b
  4999                           
  5000                           ; BSR set to: 0
  5001  012B2E  0100               	movlb	0	; () banked
  5002  012B30  5168               	movf	___awdiv@divisor& (0+255),w,b
  5003  012B32  0100               	movlb	0	; () banked
  5004  012B34  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5005  012B36  B4D8               	btfsc	status,2,c
  5006  012B38  D02C               	goto	l3309
  5007                           
  5008                           ; BSR set to: 0
  5009  012B3A  0E01               	movlw	1
  5010  012B3C  0100               	movlb	0	; () banked
  5011  012B3E  6F6A               	movwf	___awdiv@counter& (0+255),b
  5012  012B40  D006               	goto	l3295
  5013  012B42                     l3293:
  5014                           
  5015                           ; BSR set to: 0
  5016  012B42  0100               	movlb	0	; () banked
  5017  012B44  90D8               	bcf	status,0,c
  5018  012B46  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5019  012B48  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5020  012B4A  0100               	movlb	0	; () banked
  5021  012B4C  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5022  012B4E                     l3295:
  5023                           
  5024                           ; BSR set to: 0
  5025  012B4E  0100               	movlb	0	; () banked
  5026  012B50  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5027  012B52  D7F7               	goto	l3293
  5028  012B54                     l3297:
  5029                           
  5030                           ; BSR set to: 0
  5031  012B54  0100               	movlb	0	; () banked
  5032  012B56  90D8               	bcf	status,0,c
  5033  012B58  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5034  012B5A  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5035                           
  5036                           ; BSR set to: 0
  5037  012B5C  0100               	movlb	0	; () banked
  5038  012B5E  5168               	movf	___awdiv@divisor& (0+255),w,b
  5039  012B60  0100               	movlb	0	; () banked
  5040  012B62  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5041  012B64  0100               	movlb	0	; () banked
  5042  012B66  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5043  012B68  0100               	movlb	0	; () banked
  5044  012B6A  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5045  012B6C  A0D8               	btfss	status,0,c
  5046  012B6E  D00A               	goto	l3305
  5047                           
  5048                           ; BSR set to: 0
  5049  012B70  0100               	movlb	0	; () banked
  5050  012B72  5168               	movf	___awdiv@divisor& (0+255),w,b
  5051  012B74  0100               	movlb	0	; () banked
  5052  012B76  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5053  012B78  0100               	movlb	0	; () banked
  5054  012B7A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5055  012B7C  0100               	movlb	0	; () banked
  5056  012B7E  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5057                           
  5058                           ; BSR set to: 0
  5059  012B80  0100               	movlb	0	; () banked
  5060  012B82  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5061  012B84                     l3305:
  5062                           
  5063                           ; BSR set to: 0
  5064  012B84  0100               	movlb	0	; () banked
  5065  012B86  90D8               	bcf	status,0,c
  5066  012B88  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5067  012B8A  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5068                           
  5069                           ; BSR set to: 0
  5070  012B8C  0100               	movlb	0	; () banked
  5071  012B8E  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5072  012B90  D7E1               	goto	l3297
  5073  012B92                     l3309:
  5074                           
  5075                           ; BSR set to: 0
  5076  012B92  0100               	movlb	0	; () banked
  5077  012B94  516B               	movf	___awdiv@sign& (0+255),w,b
  5078  012B96  0100               	movlb	0	; () banked
  5079  012B98  B4D8               	btfsc	status,2,c
  5080  012B9A  D005               	goto	l3313
  5081                           
  5082                           ; BSR set to: 0
  5083  012B9C  0100               	movlb	0	; () banked
  5084  012B9E  6D6C               	negf	___awdiv@quotient& (0+255),b
  5085  012BA0  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5086  012BA2  B0D8               	btfsc	status,0,c
  5087  012BA4  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5088  012BA6                     l3313:
  5089                           
  5090                           ; BSR set to: 0
  5091  012BA6  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5092  012BAA  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5093  012BAE  0012               	return	
  5094  012BB0                     __end_of___awdiv:
  5095                           	opt stack 0
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           postdec1	equ	0xFE5
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function __tdiv_to_l_ *****************
  5114 ;; Defined at:
  5115 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  f1              3    0[BANK0 ] float 
  5118 ;;  f2              3    3[BANK0 ] float 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  quot            4    9[BANK0 ] unsigned long 
  5121 ;;  exp1            1   14[BANK0 ] unsigned char 
  5122 ;;  cntr            1   13[BANK0 ] unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  4    0[BANK0 ] unsigned long 
  5125 ;; Registers used:
  5126 ;;		wreg, status,2, status,0
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5132 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5133 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5134 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5135 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5136 ;;Total ram usage:       15 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    4
  5139 ;; This function calls:
  5140 ;;		Nothing
  5141 ;; This function is called by:
  5142 ;;		_sprintf
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text9
  5147  0117AC                     __ptext9:
  5148                           	opt stack 0
  5149  0117AC                     __tdiv_to_l_:
  5150                           	opt stack 24
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;incstack = 0
  5154  0117AC  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5155  0117B0  0100               	movlb	0	; () banked
  5156  0117B2  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5157  0117B4  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5158  0117B6  0100               	movlb	0	; () banked
  5159  0117B8  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5160  0117BA  0100               	movlb	0	; () banked
  5161  0117BC  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5162  0117BE  E301               	bnc	u3171
  5163  0117C0  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5164  0117C2                     u3171:
  5165  0117C2  0100               	movlb	0	; () banked
  5166  0117C4  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5167  0117C6  0100               	movlb	0	; () banked
  5168  0117C8  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5169  0117CA  0100               	movlb	0	; () banked
  5170  0117CC  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5171  0117CE  A4D8               	btfss	status,2,c
  5172  0117D0  D00A               	goto	l3541
  5173                           
  5174                           ; BSR set to: 0
  5175  0117D2  0E00               	movlw	0
  5176  0117D4  0100               	movlb	0	; () banked
  5177  0117D6  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5178  0117D8  0E00               	movlw	0
  5179  0117DA  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5180  0117DC  0E00               	movlw	0
  5181  0117DE  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5182  0117E0  0E00               	movlw	0
  5183  0117E2  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5184                           
  5185                           ; BSR set to: 0
  5186  0117E4  0012               	return	
  5187  0117E6                     l3541:
  5188                           
  5189                           ; BSR set to: 0
  5190  0117E6  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5191  0117EA  0100               	movlb	0	; () banked
  5192  0117EC  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5193  0117EE  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5194  0117F0  0100               	movlb	0	; () banked
  5195  0117F2  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5196  0117F4  0100               	movlb	0	; () banked
  5197  0117F6  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5198  0117F8  E301               	bnc	u3191
  5199  0117FA  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5200  0117FC                     u3191:
  5201  0117FC  0100               	movlb	0	; () banked
  5202  0117FE  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5203  011800  0100               	movlb	0	; () banked
  5204  011802  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5205  011804  0100               	movlb	0	; () banked
  5206  011806  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5207  011808  A4D8               	btfss	status,2,c
  5208  01180A  D00A               	goto	l3547
  5209                           
  5210                           ; BSR set to: 0
  5211  01180C  0E00               	movlw	0
  5212  01180E  0100               	movlb	0	; () banked
  5213  011810  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5214  011812  0E00               	movlw	0
  5215  011814  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5216  011816  0E00               	movlw	0
  5217  011818  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5218  01181A  0E00               	movlw	0
  5219  01181C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5220                           
  5221                           ; BSR set to: 0
  5222  01181E  0012               	return	
  5223  011820                     l3547:
  5224                           
  5225                           ; BSR set to: 0
  5226  011820  0100               	movlb	0	; () banked
  5227  011822  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5228                           
  5229                           ; BSR set to: 0
  5230  011824  0EFF               	movlw	255
  5231  011826  0100               	movlb	0	; () banked
  5232  011828  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5233  01182A  0EFF               	movlw	255
  5234  01182C  0100               	movlb	0	; () banked
  5235  01182E  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5236  011830  0E00               	movlw	0
  5237  011832  0100               	movlb	0	; () banked
  5238  011834  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5239  011836  0100               	movlb	0	; () banked
  5240  011838  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5241                           
  5242                           ; BSR set to: 0
  5243  01183A  0EFF               	movlw	255
  5244  01183C  0100               	movlb	0	; () banked
  5245  01183E  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5246  011840  0EFF               	movlw	255
  5247  011842  0100               	movlb	0	; () banked
  5248  011844  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5249  011846  0E00               	movlw	0
  5250  011848  0100               	movlb	0	; () banked
  5251  01184A  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5252                           
  5253                           ; BSR set to: 0
  5254  01184C  0E00               	movlw	0
  5255  01184E  0100               	movlb	0	; () banked
  5256  011850  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  5257  011852  0E00               	movlw	0
  5258  011854  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5259  011856  0E00               	movlw	0
  5260  011858  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5261  01185A  0E00               	movlw	0
  5262  01185C  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5263                           
  5264                           ; BSR set to: 0
  5265  01185E  0E7F               	movlw	127
  5266  011860  0100               	movlb	0	; () banked
  5267  011862  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5268                           
  5269                           ; BSR set to: 0
  5270  011864  0100               	movlb	0	; () banked
  5271  011866  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5272  011868  0F98               	addlw	152
  5273  01186A  0100               	movlb	0	; () banked
  5274  01186C  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5275                           
  5276                           ; BSR set to: 0
  5277  01186E  0E18               	movlw	24
  5278  011870  0100               	movlb	0	; () banked
  5279  011872  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5280  011874                     l875:
  5281                           
  5282                           ; BSR set to: 0
  5283  011874  0100               	movlb	0	; () banked
  5284  011876  90D8               	bcf	status,0,c
  5285  011878  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5286  01187A  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5287  01187C  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5288  01187E  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5289                           
  5290                           ; BSR set to: 0
  5291  011880  0100               	movlb	0	; () banked
  5292  011882  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5293  011884  0100               	movlb	0	; () banked
  5294  011886  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5295  011888  0100               	movlb	0	; () banked
  5296  01188A  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5297  01188C  0100               	movlb	0	; () banked
  5298  01188E  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5299  011890  0100               	movlb	0	; () banked
  5300  011892  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5301  011894  0100               	movlb	0	; () banked
  5302  011896  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5303  011898  A0D8               	btfss	status,0,c
  5304  01189A  D00E               	goto	l876
  5305                           
  5306                           ; BSR set to: 0
  5307  01189C  0100               	movlb	0	; () banked
  5308  01189E  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5309  0118A0  0100               	movlb	0	; () banked
  5310  0118A2  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5311  0118A4  0100               	movlb	0	; () banked
  5312  0118A6  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5313  0118A8  0100               	movlb	0	; () banked
  5314  0118AA  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5315  0118AC  0100               	movlb	0	; () banked
  5316  0118AE  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5317  0118B0  0100               	movlb	0	; () banked
  5318  0118B2  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321  0118B4  0100               	movlb	0	; () banked
  5322  0118B6  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5323  0118B8                     l876:
  5324                           
  5325                           ; BSR set to: 0
  5326  0118B8  0100               	movlb	0	; () banked
  5327  0118BA  90D8               	bcf	status,0,c
  5328  0118BC  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5329  0118BE  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5330  0118C0  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5331                           
  5332                           ; BSR set to: 0
  5333  0118C2  0100               	movlb	0	; () banked
  5334  0118C4  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5335  0118C6  D7D6               	goto	l875
  5336                           
  5337                           ; BSR set to: 0
  5338                           
  5339                           ; BSR set to: 0
  5340  0118C8  0100               	movlb	0	; () banked
  5341  0118CA  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5342  0118CC  D01A               	goto	l3581
  5343                           
  5344                           ; BSR set to: 0
  5345  0118CE  0100               	movlb	0	; () banked
  5346  0118D0  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5347  0118D2  0A80               	xorlw	128
  5348  0118D4  0F97               	addlw	151
  5349  0118D6  B0D8               	btfsc	status,0,c
  5350  0118D8  D00A               	goto	l3577
  5351                           
  5352                           ; BSR set to: 0
  5353  0118DA  0E00               	movlw	0
  5354  0118DC  0100               	movlb	0	; () banked
  5355  0118DE  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5356  0118E0  0E00               	movlw	0
  5357  0118E2  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5358  0118E4  0E00               	movlw	0
  5359  0118E6  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5360  0118E8  0E00               	movlw	0
  5361  0118EA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5362                           
  5363                           ; BSR set to: 0
  5364  0118EC  0012               	return	
  5365  0118EE                     l3577:
  5366                           
  5367                           ; BSR set to: 0
  5368  0118EE  0100               	movlb	0	; () banked
  5369  0118F0  90D8               	bcf	status,0,c
  5370  0118F2  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5371  0118F4  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5372  0118F6  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5373  0118F8  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5374                           
  5375                           ; BSR set to: 0
  5376  0118FA  0100               	movlb	0	; () banked
  5377  0118FC  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5378  0118FE  D7F7               	goto	l3577
  5379                           
  5380                           ; BSR set to: 0
  5381  011900  D01B               	goto	l882
  5382  011902                     l3581:
  5383                           
  5384                           ; BSR set to: 0
  5385  011902  0E17               	movlw	23
  5386  011904  0100               	movlb	0	; () banked
  5387  011906  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5388  011908  D012               	goto	l3589
  5389                           
  5390                           ; BSR set to: 0
  5391  01190A  0E00               	movlw	0
  5392  01190C  0100               	movlb	0	; () banked
  5393  01190E  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5394  011910  0E00               	movlw	0
  5395  011912  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5396  011914  0E00               	movlw	0
  5397  011916  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5398  011918  0E00               	movlw	0
  5399  01191A  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5400                           
  5401                           ; BSR set to: 0
  5402  01191C  0012               	return	
  5403  01191E                     l3587:
  5404                           
  5405                           ; BSR set to: 0
  5406  01191E  0100               	movlb	0	; () banked
  5407  011920  90D8               	bcf	status,0,c
  5408  011922  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5409  011924  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5410  011926  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5411  011928  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5412  01192A  0100               	movlb	0	; () banked
  5413  01192C  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5414  01192E                     l3589:
  5415                           
  5416                           ; BSR set to: 0
  5417  01192E  0100               	movlb	0	; () banked
  5418  011930  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5419  011932  0100               	movlb	0	; () banked
  5420  011934  A4D8               	btfss	status,2,c
  5421  011936  D7F3               	goto	l3587
  5422  011938                     l882:
  5423                           
  5424                           ; BSR set to: 0
  5425  011938  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5426  01193C  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5427  011940  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5428  011944  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5429                           
  5430                           ; BSR set to: 0
  5431  011948  0012               	return		;funcret
  5432  01194A                     __end_of__tdiv_to_l_:
  5433                           	opt stack 0
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           prodh	equ	0xFF4
  5439                           prodl	equ	0xFF3
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1l	equ	0xFE1
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function __div_to_l_ *****************
  5452 ;; Defined at:
  5453 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  f1              3    0[BANK0 ] unsigned long 
  5456 ;;  f2              3    3[BANK0 ] unsigned long 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  quot            4    6[BANK0 ] unsigned long 
  5459 ;;  exp1            1   11[BANK0 ] unsigned char 
  5460 ;;  cntr            1   10[BANK0 ] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  4    0[BANK0 ] unsigned long 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5470 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5471 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5473 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5474 ;;Total ram usage:       12 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    4
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_sprintf
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text10
  5485  01194A                     __ptext10:
  5486                           	opt stack 0
  5487  01194A                     __div_to_l_:
  5488                           	opt stack 24
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;incstack = 0
  5492  01194A  0100               	movlb	0	; () banked
  5493  01194C  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5494  01194E  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5495  011950  0100               	movlb	0	; () banked
  5496  011952  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  5497  011954  0100               	movlb	0	; () banked
  5498  011956  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5499  011958  A4D8               	btfss	status,2,c
  5500  01195A  D00A               	goto	l3597
  5501                           
  5502                           ; BSR set to: 0
  5503  01195C  0E00               	movlw	0
  5504  01195E  0100               	movlb	0	; () banked
  5505  011960  6F60               	movwf	?__div_to_l_& (0+255),b
  5506  011962  0E00               	movlw	0
  5507  011964  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5508  011966  0E00               	movlw	0
  5509  011968  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5510  01196A  0E00               	movlw	0
  5511  01196C  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514  01196E  0012               	return	
  5515  011970                     l3597:
  5516                           
  5517                           ; BSR set to: 0
  5518  011970  0100               	movlb	0	; () banked
  5519  011972  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  5520  011974  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  5521  011976  0100               	movlb	0	; () banked
  5522  011978  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5523  01197A  0100               	movlb	0	; () banked
  5524  01197C  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5525  01197E  A4D8               	btfss	status,2,c
  5526  011980  D00A               	goto	l3603
  5527                           
  5528                           ; BSR set to: 0
  5529  011982  0E00               	movlw	0
  5530  011984  0100               	movlb	0	; () banked
  5531  011986  6F60               	movwf	?__div_to_l_& (0+255),b
  5532  011988  0E00               	movlw	0
  5533  01198A  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5534  01198C  0E00               	movlw	0
  5535  01198E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5536  011990  0E00               	movlw	0
  5537  011992  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540  011994  0012               	return	
  5541  011996                     l3603:
  5542                           
  5543                           ; BSR set to: 0
  5544  011996  0100               	movlb	0	; () banked
  5545  011998  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  5546                           
  5547                           ; BSR set to: 0
  5548  01199A  0EFF               	movlw	255
  5549  01199C  0100               	movlb	0	; () banked
  5550  01199E  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  5551  0119A0  0EFF               	movlw	255
  5552  0119A2  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  5553  0119A4  0EFF               	movlw	255
  5554  0119A6  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  5555  0119A8  0E00               	movlw	0
  5556  0119AA  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  5557                           
  5558                           ; BSR set to: 0
  5559  0119AC  0100               	movlb	0	; () banked
  5560  0119AE  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  5561  0119B0  0EFF               	movlw	255
  5562  0119B2  0100               	movlb	0	; () banked
  5563  0119B4  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  5564  0119B6  0EFF               	movlw	255
  5565  0119B8  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  5566  0119BA  0EFF               	movlw	255
  5567  0119BC  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  5568  0119BE  0E00               	movlw	0
  5569  0119C0  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  5570                           
  5571                           ; BSR set to: 0
  5572  0119C2  0E00               	movlw	0
  5573  0119C4  0100               	movlb	0	; () banked
  5574  0119C6  6F66               	movwf	__div_to_l_@quot& (0+255),b
  5575  0119C8  0E00               	movlw	0
  5576  0119CA  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5577  0119CC  0E00               	movlw	0
  5578  0119CE  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5579  0119D0  0E00               	movlw	0
  5580  0119D2  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5581                           
  5582                           ; BSR set to: 0
  5583  0119D4  0E7F               	movlw	127
  5584  0119D6  0100               	movlb	0	; () banked
  5585  0119D8  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5586                           
  5587                           ; BSR set to: 0
  5588  0119DA  0100               	movlb	0	; () banked
  5589  0119DC  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5590  0119DE  0FA0               	addlw	160
  5591  0119E0  0100               	movlb	0	; () banked
  5592  0119E2  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5593                           
  5594                           ; BSR set to: 0
  5595  0119E4  0E20               	movlw	32
  5596  0119E6  0100               	movlb	0	; () banked
  5597  0119E8  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5598  0119EA                     l3617:
  5599                           
  5600                           ; BSR set to: 0
  5601  0119EA  0100               	movlb	0	; () banked
  5602  0119EC  90D8               	bcf	status,0,c
  5603  0119EE  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5604  0119F0  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5605  0119F2  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5606  0119F4  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5607                           
  5608                           ; BSR set to: 0
  5609  0119F6  0100               	movlb	0	; () banked
  5610  0119F8  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5611  0119FA  0100               	movlb	0	; () banked
  5612  0119FC  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  5613  0119FE  0100               	movlb	0	; () banked
  5614  011A00  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5615  011A02  0100               	movlb	0	; () banked
  5616  011A04  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  5617  011A06  0100               	movlb	0	; () banked
  5618  011A08  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5619  011A0A  0100               	movlb	0	; () banked
  5620  011A0C  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  5621  011A0E  0100               	movlb	0	; () banked
  5622  011A10  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5623  011A12  0100               	movlb	0	; () banked
  5624  011A14  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5625  011A16  A0D8               	btfss	status,0,c
  5626  011A18  D012               	goto	l3625
  5627                           
  5628                           ; BSR set to: 0
  5629  011A1A  0100               	movlb	0	; () banked
  5630  011A1C  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5631  011A1E  0100               	movlb	0	; () banked
  5632  011A20  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  5633  011A22  0100               	movlb	0	; () banked
  5634  011A24  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5635  011A26  0100               	movlb	0	; () banked
  5636  011A28  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5637  011A2A  0100               	movlb	0	; () banked
  5638  011A2C  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5639  011A2E  0100               	movlb	0	; () banked
  5640  011A30  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5641  011A32  0100               	movlb	0	; () banked
  5642  011A34  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5643  011A36  0100               	movlb	0	; () banked
  5644  011A38  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5645                           
  5646                           ; BSR set to: 0
  5647  011A3A  0100               	movlb	0	; () banked
  5648  011A3C  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  5649  011A3E                     l3625:
  5650                           
  5651                           ; BSR set to: 0
  5652  011A3E  0100               	movlb	0	; () banked
  5653  011A40  90D8               	bcf	status,0,c
  5654  011A42  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  5655  011A44  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5656  011A46  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5657  011A48  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5658                           
  5659                           ; BSR set to: 0
  5660  011A4A  0100               	movlb	0	; () banked
  5661  011A4C  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5662  011A4E  D7CD               	goto	l3617
  5663                           
  5664                           ; BSR set to: 0
  5665                           
  5666                           ; BSR set to: 0
  5667  011A50  0100               	movlb	0	; () banked
  5668  011A52  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  5669  011A54  D01A               	goto	l3641
  5670                           
  5671                           ; BSR set to: 0
  5672  011A56  0100               	movlb	0	; () banked
  5673  011A58  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5674  011A5A  0A80               	xorlw	128
  5675  011A5C  0F9F               	addlw	159
  5676  011A5E  B0D8               	btfsc	status,0,c
  5677  011A60  D00A               	goto	l3637
  5678                           
  5679                           ; BSR set to: 0
  5680  011A62  0E00               	movlw	0
  5681  011A64  0100               	movlb	0	; () banked
  5682  011A66  6F60               	movwf	?__div_to_l_& (0+255),b
  5683  011A68  0E00               	movlw	0
  5684  011A6A  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5685  011A6C  0E00               	movlw	0
  5686  011A6E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5687  011A70  0E00               	movlw	0
  5688  011A72  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5689                           
  5690                           ; BSR set to: 0
  5691  011A74  0012               	return	
  5692  011A76                     l3637:
  5693                           
  5694                           ; BSR set to: 0
  5695  011A76  0100               	movlb	0	; () banked
  5696  011A78  90D8               	bcf	status,0,c
  5697  011A7A  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5698  011A7C  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5699  011A7E  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5700  011A80  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  5701                           
  5702                           ; BSR set to: 0
  5703  011A82  0100               	movlb	0	; () banked
  5704  011A84  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5705  011A86  D7F7               	goto	l3637
  5706                           
  5707                           ; BSR set to: 0
  5708  011A88  D01B               	goto	l778
  5709  011A8A                     l3641:
  5710                           
  5711                           ; BSR set to: 0
  5712  011A8A  0E1F               	movlw	31
  5713  011A8C  0100               	movlb	0	; () banked
  5714  011A8E  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5715  011A90  D012               	goto	l3649
  5716                           
  5717                           ; BSR set to: 0
  5718  011A92  0E00               	movlw	0
  5719  011A94  0100               	movlb	0	; () banked
  5720  011A96  6F60               	movwf	?__div_to_l_& (0+255),b
  5721  011A98  0E00               	movlw	0
  5722  011A9A  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5723  011A9C  0E00               	movlw	0
  5724  011A9E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5725  011AA0  0E00               	movlw	0
  5726  011AA2  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5727                           
  5728                           ; BSR set to: 0
  5729  011AA4  0012               	return	
  5730  011AA6                     l3647:
  5731                           
  5732                           ; BSR set to: 0
  5733  011AA6  0100               	movlb	0	; () banked
  5734  011AA8  90D8               	bcf	status,0,c
  5735  011AAA  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5736  011AAC  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5737  011AAE  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5738  011AB0  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5739  011AB2  0100               	movlb	0	; () banked
  5740  011AB4  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  5741  011AB6                     l3649:
  5742                           
  5743                           ; BSR set to: 0
  5744  011AB6  0100               	movlb	0	; () banked
  5745  011AB8  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5746  011ABA  0100               	movlb	0	; () banked
  5747  011ABC  A4D8               	btfss	status,2,c
  5748  011ABE  D7F3               	goto	l3647
  5749  011AC0                     l778:
  5750                           
  5751                           ; BSR set to: 0
  5752  011AC0  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  5753  011AC4  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5754  011AC8  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5755  011ACC  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5756                           
  5757                           ; BSR set to: 0
  5758  011AD0  0012               	return		;funcret
  5759  011AD2                     __end_of__div_to_l_:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           postinc0	equ	0xFEE
  5768                           wreg	equ	0xFE8
  5769                           postdec1	equ	0xFE5
  5770                           fsr1l	equ	0xFE1
  5771                           indf2	equ	0xFDF
  5772                           postinc2	equ	0xFDE
  5773                           postdec2	equ	0xFDD
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function ___llmod *****************
  5779 ;; Defined at:
  5780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  dividend        4   13[BANK0 ] unsigned long 
  5783 ;;  divisor         4   17[BANK0 ] unsigned long 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  counter         1   21[BANK0 ] unsigned char 
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  4   13[BANK0 ] unsigned long 
  5788 ;; Registers used:
  5789 ;;		wreg, status,2, status,0
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5795 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5796 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5798 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5799 ;;Total ram usage:        9 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    4
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_sprintf
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text11
  5810  012FAC                     __ptext11:
  5811                           	opt stack 0
  5812  012FAC                     ___llmod:
  5813                           	opt stack 24
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;incstack = 0
  5817  012FAC  0100               	movlb	0	; () banked
  5818  012FAE  5171               	movf	___llmod@divisor& (0+255),w,b
  5819  012FB0  0100               	movlb	0	; () banked
  5820  012FB2  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5821  012FB4  0100               	movlb	0	; () banked
  5822  012FB6  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5823  012FB8  0100               	movlb	0	; () banked
  5824  012FBA  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5825  012FBC  B4D8               	btfsc	status,2,c
  5826  012FBE  D03A               	goto	l962
  5827                           
  5828                           ; BSR set to: 0
  5829  012FC0  0E01               	movlw	1
  5830  012FC2  0100               	movlb	0	; () banked
  5831  012FC4  6F75               	movwf	___llmod@counter& (0+255),b
  5832  012FC6  D008               	goto	l3683
  5833  012FC8                     l3681:
  5834                           
  5835                           ; BSR set to: 0
  5836  012FC8  0100               	movlb	0	; () banked
  5837  012FCA  90D8               	bcf	status,0,c
  5838  012FCC  3771               	rlcf	___llmod@divisor& (0+255),f,b
  5839  012FCE  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5840  012FD0  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5841  012FD2  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5842  012FD4  0100               	movlb	0	; () banked
  5843  012FD6  2B75               	incf	___llmod@counter& (0+255),f,b
  5844  012FD8                     l3683:
  5845                           
  5846                           ; BSR set to: 0
  5847  012FD8  0100               	movlb	0	; () banked
  5848  012FDA  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5849  012FDC  D7F5               	goto	l3681
  5850  012FDE                     l3685:
  5851                           
  5852                           ; BSR set to: 0
  5853  012FDE  0100               	movlb	0	; () banked
  5854  012FE0  5171               	movf	___llmod@divisor& (0+255),w,b
  5855  012FE2  0100               	movlb	0	; () banked
  5856  012FE4  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  5857  012FE6  0100               	movlb	0	; () banked
  5858  012FE8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  5859  012FEA  0100               	movlb	0	; () banked
  5860  012FEC  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5861  012FEE  0100               	movlb	0	; () banked
  5862  012FF0  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  5863  012FF2  0100               	movlb	0	; () banked
  5864  012FF4  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5865  012FF6  0100               	movlb	0	; () banked
  5866  012FF8  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  5867  012FFA  0100               	movlb	0	; () banked
  5868  012FFC  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5869  012FFE  A0D8               	btfss	status,0,c
  5870  013000  D010               	goto	l3689
  5871                           
  5872                           ; BSR set to: 0
  5873  013002  0100               	movlb	0	; () banked
  5874  013004  5171               	movf	___llmod@divisor& (0+255),w,b
  5875  013006  0100               	movlb	0	; () banked
  5876  013008  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  5877  01300A  0100               	movlb	0	; () banked
  5878  01300C  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  5879  01300E  0100               	movlb	0	; () banked
  5880  013010  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5881  013012  0100               	movlb	0	; () banked
  5882  013014  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  5883  013016  0100               	movlb	0	; () banked
  5884  013018  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5885  01301A  0100               	movlb	0	; () banked
  5886  01301C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  5887  01301E  0100               	movlb	0	; () banked
  5888  013020  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5889  013022                     l3689:
  5890                           
  5891                           ; BSR set to: 0
  5892  013022  0100               	movlb	0	; () banked
  5893  013024  90D8               	bcf	status,0,c
  5894  013026  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5895  013028  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5896  01302A  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5897  01302C  3371               	rrcf	___llmod@divisor& (0+255),f,b
  5898                           
  5899                           ; BSR set to: 0
  5900  01302E  0100               	movlb	0	; () banked
  5901  013030  2F75               	decfsz	___llmod@counter& (0+255),f,b
  5902  013032  D7D5               	goto	l3685
  5903  013034                     l962:
  5904                           
  5905                           ; BSR set to: 0
  5906  013034  C06D  F06D         	movff	___llmod@dividend,?___llmod
  5907  013038  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  5908  01303C  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  5909  013040  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  5910                           
  5911                           ; BSR set to: 0
  5912  013044  0012               	return		;funcret
  5913  013046                     __end_of___llmod:
  5914                           	opt stack 0
  5915                           tblptru	equ	0xFF8
  5916                           tblptrh	equ	0xFF7
  5917                           tblptrl	equ	0xFF6
  5918                           tablat	equ	0xFF5
  5919                           prodh	equ	0xFF4
  5920                           prodl	equ	0xFF3
  5921                           postinc0	equ	0xFEE
  5922                           wreg	equ	0xFE8
  5923                           postdec1	equ	0xFE5
  5924                           fsr1l	equ	0xFE1
  5925                           indf2	equ	0xFDF
  5926                           postinc2	equ	0xFDE
  5927                           postdec2	equ	0xFDD
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function ___lldiv *****************
  5933 ;; Defined at:
  5934 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  dividend        4    0[BANK0 ] unsigned long 
  5937 ;;  divisor         4    4[BANK0 ] unsigned long 
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;  quotient        4    8[BANK0 ] unsigned long 
  5940 ;;  counter         1   12[BANK0 ] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  4    0[BANK0 ] unsigned long 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5950 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5951 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5953 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5954 ;;Total ram usage:       13 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    4
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_sprintf
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text12
  5965  012BB0                     __ptext12:
  5966                           	opt stack 0
  5967  012BB0                     ___lldiv:
  5968                           	opt stack 24
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;incstack = 0
  5972  012BB0  0E00               	movlw	0
  5973  012BB2  0100               	movlb	0	; () banked
  5974  012BB4  6F68               	movwf	___lldiv@quotient& (0+255),b
  5975  012BB6  0E00               	movlw	0
  5976  012BB8  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  5977  012BBA  0E00               	movlw	0
  5978  012BBC  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5979  012BBE  0E00               	movlw	0
  5980  012BC0  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5981                           
  5982                           ; BSR set to: 0
  5983  012BC2  0100               	movlb	0	; () banked
  5984  012BC4  5164               	movf	___lldiv@divisor& (0+255),w,b
  5985  012BC6  0100               	movlb	0	; () banked
  5986  012BC8  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5987  012BCA  0100               	movlb	0	; () banked
  5988  012BCC  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5989  012BCE  0100               	movlb	0	; () banked
  5990  012BD0  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5991  012BD2  B4D8               	btfsc	status,2,c
  5992  012BD4  D042               	goto	l952
  5993                           
  5994                           ; BSR set to: 0
  5995  012BD6  0E01               	movlw	1
  5996  012BD8  0100               	movlb	0	; () banked
  5997  012BDA  6F6C               	movwf	___lldiv@counter& (0+255),b
  5998  012BDC  D008               	goto	l3663
  5999  012BDE                     l3661:
  6000                           
  6001                           ; BSR set to: 0
  6002  012BDE  0100               	movlb	0	; () banked
  6003  012BE0  90D8               	bcf	status,0,c
  6004  012BE2  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  6005  012BE4  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6006  012BE6  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6007  012BE8  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6008  012BEA  0100               	movlb	0	; () banked
  6009  012BEC  2B6C               	incf	___lldiv@counter& (0+255),f,b
  6010  012BEE                     l3663:
  6011                           
  6012                           ; BSR set to: 0
  6013  012BEE  0100               	movlb	0	; () banked
  6014  012BF0  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6015  012BF2  D7F5               	goto	l3661
  6016  012BF4                     l3665:
  6017                           
  6018                           ; BSR set to: 0
  6019  012BF4  0100               	movlb	0	; () banked
  6020  012BF6  90D8               	bcf	status,0,c
  6021  012BF8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  6022  012BFA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6023  012BFC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6024  012BFE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6025                           
  6026                           ; BSR set to: 0
  6027  012C00  0100               	movlb	0	; () banked
  6028  012C02  5164               	movf	___lldiv@divisor& (0+255),w,b
  6029  012C04  0100               	movlb	0	; () banked
  6030  012C06  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  6031  012C08  0100               	movlb	0	; () banked
  6032  012C0A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6033  012C0C  0100               	movlb	0	; () banked
  6034  012C0E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6035  012C10  0100               	movlb	0	; () banked
  6036  012C12  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6037  012C14  0100               	movlb	0	; () banked
  6038  012C16  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6039  012C18  0100               	movlb	0	; () banked
  6040  012C1A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6041  012C1C  0100               	movlb	0	; () banked
  6042  012C1E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6043  012C20  A0D8               	btfss	status,0,c
  6044  012C22  D012               	goto	l3673
  6045                           
  6046                           ; BSR set to: 0
  6047  012C24  0100               	movlb	0	; () banked
  6048  012C26  5164               	movf	___lldiv@divisor& (0+255),w,b
  6049  012C28  0100               	movlb	0	; () banked
  6050  012C2A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  6051  012C2C  0100               	movlb	0	; () banked
  6052  012C2E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6053  012C30  0100               	movlb	0	; () banked
  6054  012C32  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6055  012C34  0100               	movlb	0	; () banked
  6056  012C36  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6057  012C38  0100               	movlb	0	; () banked
  6058  012C3A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6059  012C3C  0100               	movlb	0	; () banked
  6060  012C3E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6061  012C40  0100               	movlb	0	; () banked
  6062  012C42  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6063                           
  6064                           ; BSR set to: 0
  6065  012C44  0100               	movlb	0	; () banked
  6066  012C46  8168               	bsf	___lldiv@quotient& (0+255),0,b
  6067  012C48                     l3673:
  6068                           
  6069                           ; BSR set to: 0
  6070  012C48  0100               	movlb	0	; () banked
  6071  012C4A  90D8               	bcf	status,0,c
  6072  012C4C  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6073  012C4E  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6074  012C50  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6075  012C52  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  6076                           
  6077                           ; BSR set to: 0
  6078  012C54  0100               	movlb	0	; () banked
  6079  012C56  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  6080  012C58  D7CD               	goto	l3665
  6081  012C5A                     l952:
  6082                           
  6083                           ; BSR set to: 0
  6084  012C5A  C068  F060         	movff	___lldiv@quotient,?___lldiv
  6085  012C5E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  6086  012C62  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  6087  012C66  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  6088                           
  6089                           ; BSR set to: 0
  6090  012C6A  0012               	return		;funcret
  6091  012C6C                     __end_of___lldiv:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           postinc0	equ	0xFEE
  6100                           wreg	equ	0xFE8
  6101                           postdec1	equ	0xFE5
  6102                           fsr1l	equ	0xFE1
  6103                           indf2	equ	0xFDF
  6104                           postinc2	equ	0xFDE
  6105                           postdec2	equ	0xFDD
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function _init_frequency *****************
  6111 ;; Defined at:
  6112 ;;		line 125 in file "frequency.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;		None
  6117 ;; Return value:  Size  Location     Type
  6118 ;;		None               void
  6119 ;; Registers used:
  6120 ;;		wreg, status,2
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6130 ;;Total ram usage:        0 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    4
  6133 ;; This function calls:
  6134 ;;		Nothing
  6135 ;; This function is called by:
  6136 ;;		_main
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           	psect	text13
  6141  0134FE                     __ptext13:
  6142                           	opt stack 0
  6143  0134FE                     _init_frequency:
  6144                           	opt stack 26
  6145                           
  6146                           ;frequency.c: 155: TRISBbits.TRISB4 = 1;
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;incstack = 0
  6150  0134FE  8893               	bsf	3987,4,c	;volatile
  6151                           
  6152                           ;frequency.c: 157: CCPTMRS1bits.C4TSEL0=0;
  6153  013500  010F               	movlb	15	; () banked
  6154  013502  9151               	bcf	81,0,b	;volatile
  6155                           
  6156                           ;frequency.c: 158: CCPTMRS1bits.C4TSEL1=0;
  6157  013504  010F               	movlb	15	; () banked
  6158  013506  9351               	bcf	81,1,b	;volatile
  6159                           
  6160                           ;frequency.c: 159: PIE4bits.CCP4IE=1;
  6161  013508  828E               	bsf	3982,1,c	;volatile
  6162                           
  6163                           ;frequency.c: 160: PIR4bits.CCP4IF=0;
  6164  01350A  928F               	bcf	3983,1,c	;volatile
  6165                           
  6166                           ; BSR set to: 15
  6167                           ;frequency.c: 161: CCP4CON=0x07;
  6168  01350C  0E07               	movlw	7
  6169  01350E  010F               	movlb	15	; () banked
  6170  013510  6F12               	movwf	18,b	;volatile
  6171                           
  6172                           ; BSR set to: 15
  6173                           ;frequency.c: 162: PIE1bits.TMR1IE = 1;
  6174  013512  809D               	bsf	3997,0,c	;volatile
  6175                           
  6176                           ; BSR set to: 15
  6177                           ;frequency.c: 164: T1CONbits.RD16=1;
  6178  013514  82CD               	bsf	4045,1,c	;volatile
  6179                           
  6180                           ; BSR set to: 15
  6181                           ;frequency.c: 165: T1CONbits.TMR1ON=1;
  6182  013516  80CD               	bsf	4045,0,c	;volatile
  6183                           
  6184                           ; BSR set to: 15
  6185                           ;frequency.c: 166: T1CONbits.TMR1CS0=0;
  6186  013518  9CCD               	bcf	4045,6,c	;volatile
  6187                           
  6188                           ; BSR set to: 15
  6189                           ;frequency.c: 167: T1CONbits.TMR1CS1=0;
  6190  01351A  9ECD               	bcf	4045,7,c	;volatile
  6191                           
  6192                           ; BSR set to: 15
  6193                           ;frequency.c: 168: T1CONbits.T1CKPS1=0;
  6194  01351C  9ACD               	bcf	4045,5,c	;volatile
  6195                           
  6196                           ; BSR set to: 15
  6197                           ;frequency.c: 169: T1CONbits.T1CKPS0=0;
  6198  01351E  98CD               	bcf	4045,4,c	;volatile
  6199                           
  6200                           ; BSR set to: 15
  6201                           ;frequency.c: 170: T1CONbits.T1OSCEN=0;
  6202  013520  96CD               	bcf	4045,3,c	;volatile
  6203                           
  6204                           ;frequency.c: 171: TMR1L=0X00;
  6205  013522  0E00               	movlw	0
  6206  013524  6ECE               	movwf	4046,c	;volatile
  6207                           
  6208                           ;frequency.c: 172: TMR1H=0X00;
  6209  013526  0E00               	movlw	0
  6210  013528  6ECF               	movwf	4047,c	;volatile
  6211                           
  6212                           ;frequency.c: 174: CCPR4H=0x00;
  6213  01352A  0E00               	movlw	0
  6214  01352C  010F               	movlb	15	; () banked
  6215  01352E  6F14               	movwf	20,b	;volatile
  6216                           
  6217                           ;frequency.c: 175: CCPR4L=0x00;
  6218  013530  0E00               	movlw	0
  6219  013532  010F               	movlb	15	; () banked
  6220  013534  6F13               	movwf	19,b	;volatile
  6221                           
  6222                           ; BSR set to: 15
  6223  013536  0012               	return		;funcret
  6224  013538                     __end_of_init_frequency:
  6225                           	opt stack 0
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           postinc0	equ	0xFEE
  6233                           wreg	equ	0xFE8
  6234                           postdec1	equ	0xFE5
  6235                           fsr1l	equ	0xFE1
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function _initUART1 *****************
  6244 ;; Defined at:
  6245 ;;		line 21 in file "uart.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;		None               void
  6252 ;; Registers used:
  6253 ;;		wreg, status,2
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    4
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_main
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text14
  6274  01366A                     __ptext14:
  6275                           	opt stack 0
  6276  01366A                     _initUART1:
  6277                           	opt stack 26
  6278                           
  6279                           ;uart.c: 24: TRISCbits.TRISC7 = 1;
  6280                           
  6281                           ; BSR set to: 15
  6282                           ;incstack = 0
  6283  01366A  8E94               	bsf	3988,7,c	;volatile
  6284                           
  6285                           ;uart.c: 25: TRISCbits.TRISC6 = 0;
  6286  01366C  9C94               	bcf	3988,6,c	;volatile
  6287                           
  6288                           ;uart.c: 27: TXSTA1bits.BRGH = 1;
  6289  01366E  84AD               	bsf	4013,2,c	;volatile
  6290                           
  6291                           ;uart.c: 28: BAUDCON1bits.BRG16 = 1;
  6292  013670  867E               	bsf	3966,3,c	;volatile
  6293                           
  6294                           ;uart.c: 36: SPBRGH1 = 0;
  6295  013672  0E00               	movlw	0
  6296  013674  6E7F               	movwf	3967,c	;volatile
  6297                           
  6298                           ;uart.c: 37: SPBRG1 = 34;
  6299  013676  0E22               	movlw	34
  6300  013678  6EB0               	movwf	4016,c	;volatile
  6301                           
  6302                           ;uart.c: 41: TXSTA1bits.SYNC = 0;
  6303  01367A  98AD               	bcf	4013,4,c	;volatile
  6304                           
  6305                           ;uart.c: 42: RCSTA1bits.SPEN = 1;
  6306  01367C  8EAC               	bsf	4012,7,c	;volatile
  6307                           
  6308                           ;uart.c: 46: PIE1bits.TXIE = 0;
  6309  01367E  989D               	bcf	3997,4,c	;volatile
  6310                           
  6311                           ;uart.c: 47: PIE1bits.RC1IE = 1;
  6312  013680  8A9D               	bsf	3997,5,c	;volatile
  6313                           
  6314                           ;uart.c: 52: RCSTA1bits.CREN = 1;
  6315  013682  88AC               	bsf	4012,4,c	;volatile
  6316  013684  0012               	return		;funcret
  6317  013686                     __end_of_initUART1:
  6318                           	opt stack 0
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           postinc0	equ	0xFEE
  6326                           wreg	equ	0xFE8
  6327                           postdec1	equ	0xFE5
  6328                           fsr1l	equ	0xFE1
  6329                           indf2	equ	0xFDF
  6330                           postinc2	equ	0xFDE
  6331                           postdec2	equ	0xFDD
  6332                           fsr2h	equ	0xFDA
  6333                           fsr2l	equ	0xFD9
  6334                           status	equ	0xFD8
  6335                           
  6336 ;; *************** function _initSPI *****************
  6337 ;; Defined at:
  6338 ;;		line 28 in file "digipot.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;		None
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;		None
  6343 ;; Return value:  Size  Location     Type
  6344 ;;		None               void
  6345 ;; Registers used:
  6346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6353 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6355 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6356 ;;Total ram usage:        9 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    9
  6359 ;; This function calls:
  6360 ;;		___awtoft
  6361 ;;		___ftadd
  6362 ;;		___ftdiv
  6363 ;;		___ftmul
  6364 ;;		___lbtoft
  6365 ;;		_pow
  6366 ;;		_remappings
  6367 ;; This function is called by:
  6368 ;;		_main
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text15
  6373  01215E                     __ptext15:
  6374                           	opt stack 0
  6375  01215E                     _initSPI:
  6376                           	opt stack 21
  6377                           
  6378                           ;digipot.c: 29: SSP2STAT = 0b00000000;
  6379                           
  6380                           ;incstack = 0
  6381  01215E  0E00               	movlw	0
  6382  012160  6E73               	movwf	3955,c	;volatile
  6383                           
  6384                           ;digipot.c: 30: SSP2CON1 = 0b00110010;
  6385  012162  0E32               	movlw	50
  6386  012164  6E72               	movwf	3954,c	;volatile
  6387                           
  6388                           ;digipot.c: 31: TRISBbits.TRISB2 = 0;
  6389  012166  9493               	bcf	3987,2,c	;volatile
  6390                           
  6391                           ;digipot.c: 32: TRISAbits.TRISA5 = 0;
  6392  012168  9A92               	bcf	3986,5,c	;volatile
  6393                           
  6394                           ;digipot.c: 33: TRISBbits.TRISB5 = 1;
  6395  01216A  8A93               	bsf	3987,5,c	;volatile
  6396                           
  6397                           ;digipot.c: 34: TRISAbits.TRISA2 = 0;
  6398  01216C  9492               	bcf	3986,2,c	;volatile
  6399                           
  6400                           ;digipot.c: 35: remappings();
  6401  01216E  EC25  F09B         	call	_remappings	;wreg free
  6402                           
  6403                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6404  012172  0100               	movlb	0	; () banked
  6405  012174  51E8               	movf	_step& (0+255),w,b
  6406  012176  ECE6  F09A         	call	___lbtoft
  6407  01217A  C068  F0B8         	movff	?___lbtoft,pow@y
  6408  01217E  C069  F0B9         	movff	?___lbtoft+1,pow@y+1
  6409  012182  C06A  F0BA         	movff	?___lbtoft+2,pow@y+2
  6410  012186  0E3B               	movlw	59
  6411  012188  0100               	movlb	0	; () banked
  6412  01218A  6FB5               	movwf	pow@x& (0+255),b
  6413  01218C  0E70               	movlw	112
  6414  01218E  0100               	movlb	0	; () banked
  6415  012190  6FB6               	movwf	(pow@x+1)& (0+255),b
  6416  012192  0E3F               	movlw	63
  6417  012194  0100               	movlb	0	; () banked
  6418  012196  6FB7               	movwf	(pow@x+2)& (0+255),b
  6419  012198  ECFC  F08A         	call	_pow	;wreg free
  6420  01219C  C0B5  F0C6         	movff	?_pow,_initSPI$2527
  6421  0121A0  C0B6  F0C7         	movff	?_pow+1,_initSPI$2527+1
  6422  0121A4  C0B7  F0C8         	movff	?_pow+2,_initSPI$2527+2
  6423                           
  6424                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6425  0121A8  0E00               	movlw	0
  6426  0121AA  0100               	movlb	0	; () banked
  6427  0121AC  6F90               	movwf	___ftadd@f2& (0+255),b
  6428  0121AE  0E7A               	movlw	122
  6429  0121B0  0100               	movlb	0	; () banked
  6430  0121B2  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6431  0121B4  0E44               	movlw	68
  6432  0121B6  0100               	movlb	0	; () banked
  6433  0121B8  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6434  0121BA  0E51               	movlw	81
  6435  0121BC  0100               	movlb	0	; () banked
  6436  0121BE  6F77               	movwf	___ftmul@f2& (0+255),b
  6437  0121C0  0EC3               	movlw	195
  6438  0121C2  0100               	movlb	0	; () banked
  6439  0121C4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6440  0121C6  0E43               	movlw	67
  6441  0121C8  0100               	movlb	0	; () banked
  6442  0121CA  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6443  0121CC  0100               	movlb	0	; () banked
  6444  0121CE  51E8               	movf	_step& (0+255),w,b
  6445  0121D0  0D02               	mullw	2
  6446  0121D2  CFF3 F068          	movff	prodl,___awtoft@c
  6447  0121D6  CFF4 F069          	movff	prodh,___awtoft@c+1
  6448  0121DA  EC3F  F09A         	call	___awtoft	;wreg free
  6449  0121DE  C068  F074         	movff	?___awtoft,___ftmul@f1
  6450  0121E2  C069  F075         	movff	?___awtoft+1,___ftmul@f1+1
  6451  0121E6  C06A  F076         	movff	?___awtoft+2,___ftmul@f1+2
  6452  0121EA  EC69  F08D         	call	___ftmul	;wreg free
  6453  0121EE  C074  F08D         	movff	?___ftmul,___ftadd@f1
  6454  0121F2  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  6455  0121F6  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  6456  0121FA  ECAB  F088         	call	___ftadd	;wreg free
  6457  0121FE  C08D  F0C9         	movff	?___ftadd,_initSPI$2528
  6458  012202  C08E  F0CA         	movff	?___ftadd+1,_initSPI$2528+1
  6459  012206  C08F  F0CB         	movff	?___ftadd+2,_initSPI$2528+2
  6460                           
  6461                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6462  01220A  C0C6  F077         	movff	_initSPI$2527,___ftmul@f2
  6463  01220E  C0C7  F078         	movff	_initSPI$2527+1,___ftmul@f2+1
  6464  012212  C0C8  F079         	movff	_initSPI$2527+2,___ftmul@f2+2
  6465  012216  C0C9  F074         	movff	_initSPI$2528,___ftmul@f1
  6466  01221A  C0CA  F075         	movff	_initSPI$2528+1,___ftmul@f1+1
  6467  01221E  C0CB  F076         	movff	_initSPI$2528+2,___ftmul@f1+2
  6468  012222  EC69  F08D         	call	___ftmul	;wreg free
  6469  012226  C074  F0CC         	movff	?___ftmul,_initSPI$2529
  6470  01222A  C075  F0CD         	movff	?___ftmul+1,_initSPI$2529+1
  6471  01222E  C076  F0CE         	movff	?___ftmul+2,_initSPI$2529+2
  6472                           
  6473                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6474  012232  0E52               	movlw	82
  6475  012234  0100               	movlb	0	; () banked
  6476  012236  6F99               	movwf	___ftdiv@f1& (0+255),b
  6477  012238  0EB8               	movlw	184
  6478  01223A  0100               	movlb	0	; () banked
  6479  01223C  6F9A               	movwf	(___ftdiv@f1+1)& (0+255),b
  6480  01223E  0E3F               	movlw	63
  6481  012240  0100               	movlb	0	; () banked
  6482  012242  6F9B               	movwf	(___ftdiv@f1+2)& (0+255),b
  6483  012244  0EFF               	movlw	255
  6484  012246  0100               	movlb	0	; () banked
  6485  012248  6F77               	movwf	___ftmul@f2& (0+255),b
  6486  01224A  0E96               	movlw	150
  6487  01224C  0100               	movlb	0	; () banked
  6488  01224E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6489  012250  0E39               	movlw	57
  6490  012252  0100               	movlb	0	; () banked
  6491  012254  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6492  012256  C0CC  F074         	movff	_initSPI$2529,___ftmul@f1
  6493  01225A  C0CD  F075         	movff	_initSPI$2529+1,___ftmul@f1+1
  6494  01225E  C0CE  F076         	movff	_initSPI$2529+2,___ftmul@f1+2
  6495  012262  EC69  F08D         	call	___ftmul	;wreg free
  6496  012266  C074  F09C         	movff	?___ftmul,___ftdiv@f2
  6497  01226A  C075  F09D         	movff	?___ftmul+1,___ftdiv@f2+1
  6498  01226E  C076  F09E         	movff	?___ftmul+2,___ftdiv@f2+2
  6499  012272  EC67  F08F         	call	___ftdiv	;wreg free
  6500  012276  C099  F0E9         	movff	?___ftdiv,_nominalfrequency
  6501  01227A  C09A  F0EA         	movff	?___ftdiv+1,_nominalfrequency+1
  6502  01227E  C09B  F0EB         	movff	?___ftdiv+2,_nominalfrequency+2
  6503  012282  0012               	return		;funcret
  6504  012284                     __end_of_initSPI:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _remappings *****************
  6524 ;; Defined at:
  6525 ;;		line 39 in file "digipot.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;		None               void
  6532 ;; Registers used:
  6533 ;;		wreg, status,2
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    4
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_initSPI
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text16
  6554  01364A                     __ptext16:
  6555                           	opt stack 0
  6556  01364A                     _remappings:
  6557                           	opt stack 25
  6558                           
  6559                           ;digipot.c: 40: EECON2 = 0x55;
  6560                           
  6561                           ;incstack = 0
  6562  01364A  0E55               	movlw	85
  6563  01364C  6EA7               	movwf	4007,c	;volatile
  6564                           
  6565                           ;digipot.c: 41: EECON2 = 0xaa;
  6566  01364E  0EAA               	movlw	170
  6567  013650  6EA7               	movwf	4007,c	;volatile
  6568                           
  6569                           ;digipot.c: 42: IOLOCK = 0;
  6570  013652  010E               	movlb	14	; () banked
  6571  013654  91BF               	bcf	191,0,b	;volatile
  6572                           
  6573                           ;digipot.c: 43: RPINR21 = 0x08;
  6574  013656  0E08               	movlw	8
  6575  013658  010E               	movlb	14	; () banked
  6576  01365A  6FFC               	movwf	252,b	;volatile
  6577                           
  6578                           ;digipot.c: 44: RPOR2 = 0x0b;
  6579  01365C  0E0B               	movlw	11
  6580  01365E  010E               	movlb	14	; () banked
  6581  013660  6FC2               	movwf	194,b	;volatile
  6582                           
  6583                           ;digipot.c: 45: RPOR5 = 0x0a;
  6584  013662  0E0A               	movlw	10
  6585  013664  010E               	movlb	14	; () banked
  6586  013666  6FC5               	movwf	197,b	;volatile
  6587                           
  6588                           ; BSR set to: 14
  6589  013668  0012               	return		;funcret
  6590  01366A                     __end_of_remappings:
  6591                           	opt stack 0
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           postdec1	equ	0xFE5
  6601                           fsr1l	equ	0xFE1
  6602                           indf2	equ	0xFDF
  6603                           postinc2	equ	0xFDE
  6604                           postdec2	equ	0xFDD
  6605                           fsr2h	equ	0xFDA
  6606                           fsr2l	equ	0xFD9
  6607                           status	equ	0xFD8
  6608                           
  6609 ;; *************** function _initLoRa *****************
  6610 ;; Defined at:
  6611 ;;		line 28 in file "lora.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;		None
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;		None
  6616 ;; Return value:  Size  Location     Type
  6617 ;;		None               void
  6618 ;; Registers used:
  6619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6629 ;;Total ram usage:        0 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    6
  6632 ;; This function calls:
  6633 ;;		_delay_ms
  6634 ;;		_sendUARTMessage
  6635 ;; This function is called by:
  6636 ;;		_main
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text17
  6641  0131DC                     __ptext17:
  6642                           	opt stack 0
  6643  0131DC                     _initLoRa:
  6644                           	opt stack 24
  6645                           
  6646                           ;lora.c: 30: sendUARTMessage(set_dev_eui);
  6647                           
  6648                           ; BSR set to: 14
  6649                           ;incstack = 0
  6650  0131DC  0E1D               	movlw	low _set_dev_eui
  6651  0131DE  0100               	movlb	0	; () banked
  6652  0131E0  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6653  0131E2  0EFF               	movlw	high _set_dev_eui
  6654  0131E4  0100               	movlb	0	; () banked
  6655  0131E6  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6656  0131E8  EC2B  F099         	call	_sendUARTMessage	;wreg free
  6657                           
  6658                           ;lora.c: 31: delay_ms(800);
  6659  0131EC  0E03               	movlw	3
  6660  0131EE  0100               	movlb	0	; () banked
  6661  0131F0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6662  0131F2  0E20               	movlw	32
  6663  0131F4  6F60               	movwf	delay_ms@ms& (0+255),b
  6664  0131F6  EC1D  F09A         	call	_delay_ms	;wreg free
  6665                           
  6666                           ;lora.c: 33: sendUARTMessage(set_app_eui);
  6667  0131FA  0EFB               	movlw	low _set_app_eui
  6668  0131FC  0100               	movlb	0	; () banked
  6669  0131FE  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6670  013200  0EFE               	movlw	high _set_app_eui
  6671  013202  0100               	movlb	0	; () banked
  6672  013204  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6673  013206  EC2B  F099         	call	_sendUARTMessage	;wreg free
  6674                           
  6675                           ;lora.c: 34: delay_ms(800);
  6676  01320A  0E03               	movlw	3
  6677  01320C  0100               	movlb	0	; () banked
  6678  01320E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6679  013210  0E20               	movlw	32
  6680  013212  6F60               	movwf	delay_ms@ms& (0+255),b
  6681  013214  EC1D  F09A         	call	_delay_ms	;wreg free
  6682                           
  6683                           ;lora.c: 36: sendUARTMessage(set_app_key);
  6684  013218  0EC9               	movlw	low _set_app_key
  6685  01321A  0100               	movlb	0	; () banked
  6686  01321C  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6687  01321E  0EFE               	movlw	high _set_app_key
  6688  013220  0100               	movlb	0	; () banked
  6689  013222  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6690  013224  EC2B  F099         	call	_sendUARTMessage	;wreg free
  6691                           
  6692                           ;lora.c: 37: delay_ms(3000);
  6693  013228  0E0B               	movlw	11
  6694  01322A  0100               	movlb	0	; () banked
  6695  01322C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6696  01322E  0EB8               	movlw	184
  6697  013230  6F60               	movwf	delay_ms@ms& (0+255),b
  6698  013232  EC1D  F09A         	call	_delay_ms	;wreg free
  6699                           
  6700                           ;lora.c: 39: sendUARTMessage(join_network);
  6701  013236  0E78               	movlw	low _join_network
  6702  013238  0100               	movlb	0	; () banked
  6703  01323A  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6704  01323C  0EFF               	movlw	high _join_network
  6705  01323E  0100               	movlb	0	; () banked
  6706  013240  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6707  013242  EC2B  F099         	call	_sendUARTMessage	;wreg free
  6708                           
  6709                           ;lora.c: 40: delay_ms(3000);
  6710  013246  0E0B               	movlw	11
  6711  013248  0100               	movlb	0	; () banked
  6712  01324A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6713  01324C  0EB8               	movlw	184
  6714  01324E  6F60               	movwf	delay_ms@ms& (0+255),b
  6715  013250  EC1D  F09A         	call	_delay_ms	;wreg free
  6716  013254  0012               	return		;funcret
  6717  013256                     __end_of_initLoRa:
  6718                           	opt stack 0
  6719                           tblptru	equ	0xFF8
  6720                           tblptrh	equ	0xFF7
  6721                           tblptrl	equ	0xFF6
  6722                           tablat	equ	0xFF5
  6723                           prodh	equ	0xFF4
  6724                           prodl	equ	0xFF3
  6725                           postinc0	equ	0xFEE
  6726                           wreg	equ	0xFE8
  6727                           postdec1	equ	0xFE5
  6728                           fsr1l	equ	0xFE1
  6729                           indf2	equ	0xFDF
  6730                           postinc2	equ	0xFDE
  6731                           postdec2	equ	0xFDD
  6732                           fsr2h	equ	0xFDA
  6733                           fsr2l	equ	0xFD9
  6734                           status	equ	0xFD8
  6735                           
  6736 ;; *************** function _sendUARTMessage *****************
  6737 ;; Defined at:
  6738 ;;		line 62 in file "uart.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;  newMessagePo    2    5[BANK0 ] PTR unsigned char 
  6741 ;;		 -> lora_message(200), join_network(16), set_app_key(50), set_app_eui(34), 
  6742 ;;		 -> set_dev_eui(34), cap_step_message(200), cap_frequency_message(200), 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;		None
  6745 ;; Return value:  Size  Location     Type
  6746 ;;		None               void
  6747 ;; Registers used:
  6748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6758 ;;Total ram usage:        2 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    5
  6761 ;; This function calls:
  6762 ;;		_delay_ms
  6763 ;; This function is called by:
  6764 ;;		_main
  6765 ;;		_initLoRa
  6766 ;;		_sendSensorData
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text18
  6771  013256                     __ptext18:
  6772                           	opt stack 0
  6773  013256                     _sendUARTMessage:
  6774                           	opt stack 25
  6775                           
  6776                           ;uart.c: 65: currentMessagePointer = newMessagePointer;
  6777                           
  6778                           ;incstack = 0
  6779  013256  C065  F0EC         	movff	sendUARTMessage@newMessagePointer,_currentMessagePointer
  6780  01325A  C066  F0ED         	movff	sendUARTMessage@newMessagePointer+1,_currentMessagePointer+1
  6781                           
  6782                           ;uart.c: 70: last_received_message_index = uart_receive_buffer_index;
  6783  01325E  C0E4  F05C         	movff	_uart_receive_buffer_index,_last_received_message_index
  6784  013262  C0E5  F05D         	movff	_uart_receive_buffer_index+1,_last_received_message_index+1
  6785                           
  6786                           ;uart.c: 71: TXSTA1bits.TXEN = 1;
  6787  013266  8AAD               	bsf	4013,5,c	;volatile
  6788                           
  6789                           ;uart.c: 73: while(*currentMessagePointer != '\0'){
  6790  013268  D01E               	goto	l3741
  6791  01326A                     l166:
  6792                           
  6793                           ;uart.c: 74: if(PIR1bits.TXIF == 1){
  6794  01326A  A89E               	btfss	3998,4,c	;volatile
  6795  01326C  D01C               	goto	l3741
  6796                           
  6797                           ;uart.c: 76: TXREG1 = *currentMessagePointer;
  6798  01326E  C0EC  FFF6         	movff	_currentMessagePointer,tblptrl
  6799  013272  C0ED  FFF7         	movff	_currentMessagePointer+1,tblptrh
  6800  013276  0E00               	movlw	low (__mediumconst shr (0+16))
  6801  013278  6EF8               	movwf	tblptru,c
  6802  01327A  0E0E               	movlw	(high __ramtop+-1)
  6803  01327C  64F7               	cpfsgt	tblptrh,c
  6804  01327E  D003               	bra	u3487
  6805  013280  0008               	tblrd		*
  6806  013282  50F5               	movf	tablat,w,c
  6807  013284  D005               	bra	u3480
  6808  013286                     u3487:
  6809  013286  CFF6 FFE1          	movff	tblptrl,fsr1l
  6810  01328A  CFF7 FFE2          	movff	tblptrh,fsr1h
  6811  01328E  50E7               	movf	indf1,w,c
  6812  013290                     u3480:
  6813  013290  6EAE               	movwf	4014,c	;volatile
  6814                           
  6815                           ;uart.c: 78: currentMessagePointer += 1;
  6816  013292  0100               	movlb	0	; () banked
  6817  013294  4BEC               	infsnz	_currentMessagePointer& (0+255),f,b
  6818  013296  2BED               	incf	(_currentMessagePointer+1)& (0+255),f,b
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;uart.c: 79: delay_ms(1);
  6822  013298  0E00               	movlw	0
  6823  01329A  0100               	movlb	0	; () banked
  6824  01329C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6825  01329E  0E01               	movlw	1
  6826  0132A0  6F60               	movwf	delay_ms@ms& (0+255),b
  6827  0132A2  EC1D  F09A         	call	_delay_ms	;wreg free
  6828  0132A6                     l3741:
  6829  0132A6  C0EC  FFF6         	movff	_currentMessagePointer,tblptrl
  6830  0132AA  C0ED  FFF7         	movff	_currentMessagePointer+1,tblptrh
  6831  0132AE  0E00               	movlw	low (__mediumconst shr (0+16))
  6832  0132B0  6EF8               	movwf	tblptru,c
  6833  0132B2  0E0E               	movlw	(high __ramtop+-1)
  6834  0132B4  64F7               	cpfsgt	tblptrh,c
  6835  0132B6  D003               	bra	u3497
  6836  0132B8  0008               	tblrd		*
  6837  0132BA  50F5               	movf	tablat,w,c
  6838  0132BC  D005               	bra	u3490
  6839  0132BE                     u3497:
  6840  0132BE  CFF6 FFE1          	movff	tblptrl,fsr1l
  6841  0132C2  CFF7 FFE2          	movff	tblptrh,fsr1h
  6842  0132C6  50E7               	movf	indf1,w,c
  6843  0132C8                     u3490:
  6844  0132C8  0900               	iorlw	0
  6845  0132CA  B4D8               	btfsc	status,2,c
  6846  0132CC  0012               	return	
  6847  0132CE  D7CD               	goto	l166
  6848  0132D0                     __end_of_sendUARTMessage:
  6849                           	opt stack 0
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           postinc0	equ	0xFEE
  6857                           wreg	equ	0xFE8
  6858                           indf1	equ	0xFE7
  6859                           postdec1	equ	0xFE5
  6860                           fsr1h	equ	0xFE2
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function _delay_ms *****************
  6870 ;; Defined at:
  6871 ;;		line 11 in file "delay.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  ms              2    0[BANK0 ] int 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  i               2    3[BANK0 ] int 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;		None               void
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6885 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6886 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6888 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6889 ;;Total ram usage:        5 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    4
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_main
  6896 ;;		_sendUARTMessage
  6897 ;;		_initLoRa
  6898 ;;		_sendSensorData
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text19
  6903  01343A                     __ptext19:
  6904                           	opt stack 0
  6905  01343A                     _delay_ms:
  6906                           	opt stack 25
  6907                           
  6908                           ;delay.c: 12: for(int i = 0; i<ms; i++){
  6909                           
  6910                           ;incstack = 0
  6911  01343A  0E00               	movlw	0
  6912  01343C  0100               	movlb	0	; () banked
  6913  01343E  6F64               	movwf	(delay_ms@i+1)& (0+255),b
  6914  013440  0E00               	movlw	0
  6915  013442  6F63               	movwf	delay_ms@i& (0+255),b
  6916  013444  D00B               	goto	l309
  6917  013446                     l3431:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;delay.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  6921  013446  0E03               	movlw	3
  6922  013448  0100               	movlb	0	; () banked
  6923  01344A  6F62               	movwf	??_delay_ms& (0+255),b
  6924  01344C  0E98               	movlw	152
  6925  01344E                     u4217:
  6926  01344E  2EE8               	decfsz	wreg,f,c
  6927  013450  D7FE               	goto	u4217
  6928  013452  2F62               	decfsz	??_delay_ms& (0+255),f,b
  6929  013454  D7FC               	goto	u4217
  6930  013456  0100               	movlb	0	; () banked
  6931  013458  4B63               	infsnz	delay_ms@i& (0+255),f,b
  6932  01345A  2B64               	incf	(delay_ms@i+1)& (0+255),f,b
  6933  01345C                     l309:
  6934                           
  6935                           ; BSR set to: 0
  6936  01345C  0100               	movlb	0	; () banked
  6937  01345E  5160               	movf	delay_ms@ms& (0+255),w,b
  6938  013460  0100               	movlb	0	; () banked
  6939  013462  5D63               	subwf	delay_ms@i& (0+255),w,b
  6940  013464  0100               	movlb	0	; () banked
  6941  013466  5164               	movf	(delay_ms@i+1)& (0+255),w,b
  6942  013468  0A80               	xorlw	128
  6943  01346A  0100               	movlb	0	; () banked
  6944  01346C  6F62               	movwf	??_delay_ms& (0+255),b
  6945  01346E  0100               	movlb	0	; () banked
  6946  013470  5161               	movf	(delay_ms@ms+1)& (0+255),w,b
  6947  013472  0A80               	xorlw	128
  6948  013474  0100               	movlb	0	; () banked
  6949  013476  5962               	subwfb	??_delay_ms& (0+255),w,b
  6950  013478  B0D8               	btfsc	status,0,c
  6951  01347A  0012               	return	
  6952  01347C  D7E4               	goto	l3431
  6953  01347E                     __end_of_delay_ms:
  6954                           	opt stack 0
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           prodh	equ	0xFF4
  6960                           prodl	equ	0xFF3
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           indf1	equ	0xFE7
  6964                           postdec1	equ	0xFE5
  6965                           fsr1h	equ	0xFE2
  6966                           fsr1l	equ	0xFE1
  6967                           indf2	equ	0xFDF
  6968                           postinc2	equ	0xFDE
  6969                           postdec2	equ	0xFDD
  6970                           fsr2h	equ	0xFDA
  6971                           fsr2l	equ	0xFD9
  6972                           status	equ	0xFD8
  6973                           
  6974 ;; *************** function _initInterrupts *****************
  6975 ;; Defined at:
  6976 ;;		line 21 in file "main.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;		None
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;		None
  6981 ;; Return value:  Size  Location     Type
  6982 ;;		None               void
  6983 ;; Registers used:
  6984 ;;		wreg, status,2
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6994 ;;Total ram usage:        0 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    4
  6997 ;; This function calls:
  6998 ;;		Nothing
  6999 ;; This function is called by:
  7000 ;;		_main
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text20
  7005  0136BA                     __ptext20:
  7006                           	opt stack 0
  7007  0136BA                     _initInterrupts:
  7008                           	opt stack 26
  7009                           
  7010                           ;main.c: 22: INTCON = 0b11000000;
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;incstack = 0
  7014  0136BA  0EC0               	movlw	192
  7015  0136BC  6EF2               	movwf	intcon,c	;volatile
  7016                           
  7017                           ;main.c: 23: RCONbits.IPEN = 0;
  7018  0136BE  9ED0               	bcf	4048,7,c	;volatile
  7019  0136C0  0012               	return		;funcret
  7020  0136C2                     __end_of_initInterrupts:
  7021                           	opt stack 0
  7022                           tblptru	equ	0xFF8
  7023                           tblptrh	equ	0xFF7
  7024                           tblptrl	equ	0xFF6
  7025                           tablat	equ	0xFF5
  7026                           prodh	equ	0xFF4
  7027                           prodl	equ	0xFF3
  7028                           intcon	equ	0xFF2
  7029                           postinc0	equ	0xFEE
  7030                           wreg	equ	0xFE8
  7031                           indf1	equ	0xFE7
  7032                           postdec1	equ	0xFE5
  7033                           fsr1h	equ	0xFE2
  7034                           fsr1l	equ	0xFE1
  7035                           indf2	equ	0xFDF
  7036                           postinc2	equ	0xFDE
  7037                           postdec2	equ	0xFDD
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042 ;; *************** function _initADC *****************
  7043 ;; Defined at:
  7044 ;;		line 24 in file "temperature.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;		None
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;		None               void
  7051 ;; Registers used:
  7052 ;;		wreg, status,2
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7062 ;;Total ram usage:        0 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    4
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_main
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text21
  7073  01359E                     __ptext21:
  7074                           	opt stack 0
  7075  01359E                     _initADC:
  7076                           	opt stack 26
  7077                           
  7078                           ;temperature.c: 25: TRISAbits.TRISA0 = 1;
  7079                           
  7080                           ;incstack = 0
  7081  01359E  8092               	bsf	3986,0,c	;volatile
  7082                           
  7083                           ;temperature.c: 26: TRISAbits.TRISA1 = 1;
  7084  0135A0  8292               	bsf	3986,1,c	;volatile
  7085                           
  7086                           ;temperature.c: 27: PORTAbits.RA0 = 0;
  7087  0135A2  9080               	bcf	3968,0,c	;volatile
  7088                           
  7089                           ;temperature.c: 28: PORTAbits.RA1 = 0;
  7090  0135A4  9280               	bcf	3968,1,c	;volatile
  7091                           
  7092                           ;temperature.c: 30: PORTBbits.RB0 = 0;
  7093  0135A6  9081               	bcf	3969,0,c	;volatile
  7094                           
  7095                           ;temperature.c: 31: TRISBbits.TRISB0 = 1;
  7096  0135A8  8093               	bsf	3987,0,c	;volatile
  7097                           
  7098                           ;temperature.c: 32: PORTBbits.RB1 = 0;
  7099  0135AA  9281               	bcf	3969,1,c	;volatile
  7100                           
  7101                           ;temperature.c: 33: TRISBbits.TRISB1 = 1;
  7102  0135AC  8293               	bsf	3987,1,c	;volatile
  7103                           
  7104                           ;temperature.c: 36: ANCON0 = 0xFC;
  7105  0135AE  0EFC               	movlw	252
  7106  0135B0  010F               	movlb	15	; () banked
  7107  0135B2  6F48               	movwf	72,b	;volatile
  7108                           
  7109                           ;temperature.c: 37: ANCON1 = 0x1F;
  7110  0135B4  0E1F               	movlw	31
  7111  0135B6  010F               	movlb	15	; () banked
  7112  0135B8  6F49               	movwf	73,b	;volatile
  7113                           
  7114                           ;temperature.c: 38: ADCON0 = 0x00;
  7115  0135BA  0E00               	movlw	0
  7116  0135BC  6EC2               	movwf	4034,c	;volatile
  7117                           
  7118                           ;temperature.c: 39: ADCON1 = 0b10111110;
  7119  0135BE  0EBE               	movlw	190
  7120  0135C0  6EC1               	movwf	4033,c	;volatile
  7121                           
  7122                           ; BSR set to: 15
  7123                           ;temperature.c: 40: ADCON0bits.ADON = 0x01;
  7124  0135C2  80C2               	bsf	4034,0,c	;volatile
  7125                           
  7126                           ; BSR set to: 15
  7127                           ;temperature.c: 42: PIR1bits.ADIF = 0;
  7128  0135C4  9C9E               	bcf	3998,6,c	;volatile
  7129                           
  7130                           ; BSR set to: 15
  7131                           ;temperature.c: 43: PIE1bits.ADIE = 0;
  7132  0135C6  9C9D               	bcf	3997,6,c	;volatile
  7133                           
  7134                           ; BSR set to: 15
  7135                           ;temperature.c: 46: ADCON0bits.GO_DONE = 1;
  7136  0135C8  82C2               	bsf	4034,1,c	;volatile
  7137                           
  7138                           ; BSR set to: 15
  7139  0135CA  0012               	return		;funcret
  7140  0135CC                     __end_of_initADC:
  7141                           	opt stack 0
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           intcon	equ	0xFF2
  7149                           postinc0	equ	0xFEE
  7150                           wreg	equ	0xFE8
  7151                           indf1	equ	0xFE7
  7152                           postdec1	equ	0xFE5
  7153                           fsr1h	equ	0xFE2
  7154                           fsr1l	equ	0xFE1
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _digipot *****************
  7163 ;; Defined at:
  7164 ;;		line 55 in file "digipot.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;		None
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  2   32[None  ] int 
  7171 ;; Registers used:
  7172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7182 ;;Total ram usage:        0 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:   10
  7185 ;; This function calls:
  7186 ;;		___ftge
  7187 ;;		___ftmul
  7188 ;;		___lltoft
  7189 ;;		_adjustDigipot
  7190 ;;		_unselect
  7191 ;; This function is called by:
  7192 ;;		_main
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text22
  7197  01288E                     __ptext22:
  7198                           	opt stack 0
  7199  01288E                     _digipot:
  7200                           	opt stack 20
  7201                           
  7202                           ;digipot.c: 56: frequency = (float) cap_value;
  7203                           
  7204                           ; BSR set to: 15
  7205                           ;incstack = 0
  7206  01288E  C053  F068         	movff	_cap_value,___lltoft@c
  7207  012892  C054  F069         	movff	_cap_value+1,___lltoft@c+1
  7208  012896  C055  F06A         	movff	_cap_value+2,___lltoft@c+2
  7209  01289A  C056  F06B         	movff	_cap_value+3,___lltoft@c+3
  7210  01289E  ECB0  F098         	call	___lltoft	;wreg free
  7211  0128A2  C068  F0DC         	movff	?___lltoft,_frequency
  7212  0128A6  C069  F0DD         	movff	?___lltoft+1,_frequency+1
  7213  0128AA  C06A  F0DE         	movff	?___lltoft+2,_frequency+2
  7214                           
  7215                           ;digipot.c: 58: if (frequency > 1.033*nominalfrequency ){
  7216  0128AE  0E39               	movlw	57
  7217  0128B0  0100               	movlb	0	; () banked
  7218  0128B2  6F77               	movwf	___ftmul@f2& (0+255),b
  7219  0128B4  0E84               	movlw	132
  7220  0128B6  0100               	movlb	0	; () banked
  7221  0128B8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7222  0128BA  0E3F               	movlw	63
  7223  0128BC  0100               	movlb	0	; () banked
  7224  0128BE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7225  0128C0  C0E9  F074         	movff	_nominalfrequency,___ftmul@f1
  7226  0128C4  C0EA  F075         	movff	_nominalfrequency+1,___ftmul@f1+1
  7227  0128C8  C0EB  F076         	movff	_nominalfrequency+2,___ftmul@f1+2
  7228  0128CC  EC69  F08D         	call	___ftmul	;wreg free
  7229  0128D0  C074  F083         	movff	?___ftmul,___ftge@ff1
  7230  0128D4  C075  F084         	movff	?___ftmul+1,___ftge@ff1+1
  7231  0128D8  C076  F085         	movff	?___ftmul+2,___ftge@ff1+2
  7232  0128DC  C0DC  F086         	movff	_frequency,___ftge@ff2
  7233  0128E0  C0DD  F087         	movff	_frequency+1,___ftge@ff2+1
  7234  0128E4  C0DE  F088         	movff	_frequency+2,___ftge@ff2+2
  7235  0128E8  EC15  F095         	call	___ftge	;wreg free
  7236  0128EC  0100               	movlb	0	; () banked
  7237  0128EE  B0D8               	btfsc	status,0,c
  7238  0128F0  D005               	goto	l4199
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;digipot.c: 59: bigorsmall = 0x01;
  7242  0128F2  0E01               	movlw	1
  7243  0128F4  0100               	movlb	0	; () banked
  7244  0128F6  6FE6               	movwf	_bigorsmall& (0+255),b
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;digipot.c: 60: adjustDigipot();
  7248  0128F8  ECC0  F08E         	call	_adjustDigipot	;wreg free
  7249  0128FC                     l4199:
  7250                           
  7251                           ;digipot.c: 61: }
  7252                           ;digipot.c: 62: if (frequency< 0.9692*nominalfrequency&&step>0){
  7253  0128FC  C0DC  F083         	movff	_frequency,___ftge@ff1
  7254  012900  C0DD  F084         	movff	_frequency+1,___ftge@ff1+1
  7255  012904  C0DE  F085         	movff	_frequency+2,___ftge@ff1+2
  7256  012908  0E1D               	movlw	29
  7257  01290A  0100               	movlb	0	; () banked
  7258  01290C  6F77               	movwf	___ftmul@f2& (0+255),b
  7259  01290E  0E78               	movlw	120
  7260  012910  0100               	movlb	0	; () banked
  7261  012912  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7262  012914  0E3F               	movlw	63
  7263  012916  0100               	movlb	0	; () banked
  7264  012918  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7265  01291A  C0E9  F074         	movff	_nominalfrequency,___ftmul@f1
  7266  01291E  C0EA  F075         	movff	_nominalfrequency+1,___ftmul@f1+1
  7267  012922  C0EB  F076         	movff	_nominalfrequency+2,___ftmul@f1+2
  7268  012926  EC69  F08D         	call	___ftmul	;wreg free
  7269  01292A  C074  F086         	movff	?___ftmul,___ftge@ff2
  7270  01292E  C075  F087         	movff	?___ftmul+1,___ftge@ff2+1
  7271  012932  C076  F088         	movff	?___ftmul+2,___ftge@ff2+2
  7272  012936  EC15  F095         	call	___ftge	;wreg free
  7273  01293A  0100               	movlb	0	; () banked
  7274  01293C  B0D8               	btfsc	status,0,c
  7275  01293E  D00A               	goto	l453
  7276                           
  7277                           ; BSR set to: 0
  7278  012940  0100               	movlb	0	; () banked
  7279  012942  51E8               	movf	_step& (0+255),w,b
  7280  012944  B4D8               	btfsc	status,2,c
  7281  012946  D006               	goto	l453
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;digipot.c: 63: bigorsmall =0x02;
  7285  012948  0E02               	movlw	2
  7286  01294A  0100               	movlb	0	; () banked
  7287  01294C  6FE6               	movwf	_bigorsmall& (0+255),b
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;digipot.c: 64: adjustDigipot();
  7291  01294E  ECC0  F08E         	call	_adjustDigipot	;wreg free
  7292                           
  7293                           ;digipot.c: 65: }
  7294  012952  0012               	return	
  7295  012954                     l453:
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;digipot.c: 66: else{
  7299                           ;digipot.c: 67: if(PORTAbits.RA2==0){
  7300  012954  B480               	btfsc	3968,2,c	;volatile
  7301  012956  0012               	return	
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;digipot.c: 68: unselect();
  7305  012958  EC64  F09B         	call	_unselect	;wreg free
  7306  01295C  0012               	return	
  7307  01295E                     __end_of_digipot:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           intcon	equ	0xFF2
  7316                           postinc0	equ	0xFEE
  7317                           wreg	equ	0xFE8
  7318                           indf1	equ	0xFE7
  7319                           postdec1	equ	0xFE5
  7320                           fsr1h	equ	0xFE2
  7321                           fsr1l	equ	0xFE1
  7322                           indf2	equ	0xFDF
  7323                           postinc2	equ	0xFDE
  7324                           postdec2	equ	0xFDD
  7325                           fsr2h	equ	0xFDA
  7326                           fsr2l	equ	0xFD9
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _unselect *****************
  7330 ;; Defined at:
  7331 ;;		line 93 in file "digipot.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;		None               void
  7338 ;; Registers used:
  7339 ;;		None
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7349 ;;Total ram usage:        0 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    4
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_digipot
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text23
  7360  0136C8                     __ptext23:
  7361                           	opt stack 0
  7362  0136C8                     _unselect:
  7363                           	opt stack 25
  7364                           
  7365                           ;digipot.c: 94: PORTAbits.RA2=1;
  7366                           
  7367                           ;incstack = 0
  7368  0136C8  8480               	bsf	3968,2,c	;volatile
  7369  0136CA  0012               	return		;funcret
  7370  0136CC                     __end_of_unselect:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodh	equ	0xFF4
  7377                           prodl	equ	0xFF3
  7378                           intcon	equ	0xFF2
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           indf1	equ	0xFE7
  7382                           postdec1	equ	0xFE5
  7383                           fsr1h	equ	0xFE2
  7384                           fsr1l	equ	0xFE1
  7385                           indf2	equ	0xFDF
  7386                           postinc2	equ	0xFDE
  7387                           postdec2	equ	0xFDD
  7388                           fsr2h	equ	0xFDA
  7389                           fsr2l	equ	0xFD9
  7390                           status	equ	0xFD8
  7391                           
  7392 ;; *************** function _adjustDigipot *****************
  7393 ;; Defined at:
  7394 ;;		line 73 in file "digipot.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;		None
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;		None
  7399 ;; Return value:  Size  Location     Type
  7400 ;;		None               void
  7401 ;; Registers used:
  7402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7409 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7411 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7412 ;;Total ram usage:        9 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    9
  7415 ;; This function calls:
  7416 ;;		___awtoft
  7417 ;;		___ftadd
  7418 ;;		___ftdiv
  7419 ;;		___ftmul
  7420 ;;		___lbtoft
  7421 ;;		_pow
  7422 ;; This function is called by:
  7423 ;;		_digipot
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text24
  7428  011D80                     __ptext24:
  7429                           	opt stack 0
  7430  011D80                     _adjustDigipot:
  7431                           	opt stack 20
  7432                           
  7433                           ;digipot.c: 75: PORTAbits.RA2=0;
  7434                           
  7435                           ;incstack = 0
  7436  011D80  9480               	bcf	3968,2,c	;volatile
  7437                           
  7438                           ;digipot.c: 76: if(state==0x00){
  7439  011D82  0100               	movlb	0	; () banked
  7440  011D84  51E7               	movf	_state& (0+255),w,b
  7441  011D86  0100               	movlb	0	; () banked
  7442  011D88  A4D8               	btfss	status,2,c
  7443  011D8A  D004               	goto	l3987
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;digipot.c: 77: SSPBUF = 0x00;
  7447  011D8C  0E00               	movlw	0
  7448  011D8E  6EC9               	movwf	4041,c	;volatile
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;digipot.c: 78: state++;
  7452  011D90  0100               	movlb	0	; () banked
  7453  011D92  2BE7               	incf	_state& (0+255),f,b
  7454  011D94                     l3987:
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;digipot.c: 79: }
  7458                           ;digipot.c: 80: if(SSP2STATbits.BF==1){
  7459  011D94  A073               	btfss	3955,0,c	;volatile
  7460  011D96  0012               	return	
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;digipot.c: 81: if(bigorsmall==0x01){
  7464  011D98  0100               	movlb	0	; () banked
  7465  011D9A  05E6               	decf	_bigorsmall& (0+255),w,b
  7466  011D9C  A4D8               	btfss	status,2,c
  7467  011D9E  D002               	goto	l3993
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;digipot.c: 82: step++;
  7471  011DA0  0100               	movlb	0	; () banked
  7472  011DA2  2BE8               	incf	_step& (0+255),f,b
  7473  011DA4                     l3993:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;digipot.c: 83: }
  7477                           ;digipot.c: 84: if(bigorsmall==0x02){
  7478  011DA4  0E02               	movlw	2
  7479  011DA6  0100               	movlb	0	; () banked
  7480  011DA8  19E6               	xorwf	_bigorsmall& (0+255),w,b
  7481  011DAA  A4D8               	btfss	status,2,c
  7482  011DAC  D002               	goto	l3997
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;digipot.c: 85: step--;
  7486  011DAE  0100               	movlb	0	; () banked
  7487  011DB0  07E8               	decf	_step& (0+255),f,b
  7488  011DB2                     l3997:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;digipot.c: 86: }
  7492                           ;digipot.c: 87: SSPBUF = step;
  7493  011DB2  C0E8  FFC9         	movff	_step,4041	;volatile
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;digipot.c: 88: state=0x00;
  7497  011DB6  0E00               	movlw	0
  7498  011DB8  0100               	movlb	0	; () banked
  7499  011DBA  6FE7               	movwf	_state& (0+255),b
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7503  011DBC  0100               	movlb	0	; () banked
  7504  011DBE  51E8               	movf	_step& (0+255),w,b
  7505  011DC0  ECE6  F09A         	call	___lbtoft
  7506  011DC4  C068  F0B8         	movff	?___lbtoft,pow@y
  7507  011DC8  C069  F0B9         	movff	?___lbtoft+1,pow@y+1
  7508  011DCC  C06A  F0BA         	movff	?___lbtoft+2,pow@y+2
  7509  011DD0  0E3B               	movlw	59
  7510  011DD2  0100               	movlb	0	; () banked
  7511  011DD4  6FB5               	movwf	pow@x& (0+255),b
  7512  011DD6  0E70               	movlw	112
  7513  011DD8  0100               	movlb	0	; () banked
  7514  011DDA  6FB6               	movwf	(pow@x+1)& (0+255),b
  7515  011DDC  0E3F               	movlw	63
  7516  011DDE  0100               	movlb	0	; () banked
  7517  011DE0  6FB7               	movwf	(pow@x+2)& (0+255),b
  7518  011DE2  ECFC  F08A         	call	_pow	;wreg free
  7519  011DE6  C0B5  F0C6         	movff	?_pow,_adjustDigipot$2530
  7520  011DEA  C0B6  F0C7         	movff	?_pow+1,_adjustDigipot$2530+1
  7521  011DEE  C0B7  F0C8         	movff	?_pow+2,_adjustDigipot$2530+2
  7522                           
  7523                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7524  011DF2  0E00               	movlw	0
  7525  011DF4  0100               	movlb	0	; () banked
  7526  011DF6  6F90               	movwf	___ftadd@f2& (0+255),b
  7527  011DF8  0E7A               	movlw	122
  7528  011DFA  0100               	movlb	0	; () banked
  7529  011DFC  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7530  011DFE  0E44               	movlw	68
  7531  011E00  0100               	movlb	0	; () banked
  7532  011E02  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7533  011E04  0E51               	movlw	81
  7534  011E06  0100               	movlb	0	; () banked
  7535  011E08  6F77               	movwf	___ftmul@f2& (0+255),b
  7536  011E0A  0EC3               	movlw	195
  7537  011E0C  0100               	movlb	0	; () banked
  7538  011E0E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7539  011E10  0E43               	movlw	67
  7540  011E12  0100               	movlb	0	; () banked
  7541  011E14  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7542  011E16  0100               	movlb	0	; () banked
  7543  011E18  51E8               	movf	_step& (0+255),w,b
  7544  011E1A  0D02               	mullw	2
  7545  011E1C  CFF3 F068          	movff	prodl,___awtoft@c
  7546  011E20  CFF4 F069          	movff	prodh,___awtoft@c+1
  7547  011E24  EC3F  F09A         	call	___awtoft	;wreg free
  7548  011E28  C068  F074         	movff	?___awtoft,___ftmul@f1
  7549  011E2C  C069  F075         	movff	?___awtoft+1,___ftmul@f1+1
  7550  011E30  C06A  F076         	movff	?___awtoft+2,___ftmul@f1+2
  7551  011E34  EC69  F08D         	call	___ftmul	;wreg free
  7552  011E38  C074  F08D         	movff	?___ftmul,___ftadd@f1
  7553  011E3C  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  7554  011E40  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  7555  011E44  ECAB  F088         	call	___ftadd	;wreg free
  7556  011E48  C08D  F0C9         	movff	?___ftadd,_adjustDigipot$2531
  7557  011E4C  C08E  F0CA         	movff	?___ftadd+1,_adjustDigipot$2531+1
  7558  011E50  C08F  F0CB         	movff	?___ftadd+2,_adjustDigipot$2531+2
  7559                           
  7560                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7561  011E54  C0C6  F077         	movff	_adjustDigipot$2530,___ftmul@f2
  7562  011E58  C0C7  F078         	movff	_adjustDigipot$2530+1,___ftmul@f2+1
  7563  011E5C  C0C8  F079         	movff	_adjustDigipot$2530+2,___ftmul@f2+2
  7564  011E60  C0C9  F074         	movff	_adjustDigipot$2531,___ftmul@f1
  7565  011E64  C0CA  F075         	movff	_adjustDigipot$2531+1,___ftmul@f1+1
  7566  011E68  C0CB  F076         	movff	_adjustDigipot$2531+2,___ftmul@f1+2
  7567  011E6C  EC69  F08D         	call	___ftmul	;wreg free
  7568  011E70  C074  F0CC         	movff	?___ftmul,_adjustDigipot$2532
  7569  011E74  C075  F0CD         	movff	?___ftmul+1,_adjustDigipot$2532+1
  7570  011E78  C076  F0CE         	movff	?___ftmul+2,_adjustDigipot$2532+2
  7571                           
  7572                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7573  011E7C  0E52               	movlw	82
  7574  011E7E  0100               	movlb	0	; () banked
  7575  011E80  6F99               	movwf	___ftdiv@f1& (0+255),b
  7576  011E82  0EB8               	movlw	184
  7577  011E84  0100               	movlb	0	; () banked
  7578  011E86  6F9A               	movwf	(___ftdiv@f1+1)& (0+255),b
  7579  011E88  0E3F               	movlw	63
  7580  011E8A  0100               	movlb	0	; () banked
  7581  011E8C  6F9B               	movwf	(___ftdiv@f1+2)& (0+255),b
  7582  011E8E  0EFF               	movlw	255
  7583  011E90  0100               	movlb	0	; () banked
  7584  011E92  6F77               	movwf	___ftmul@f2& (0+255),b
  7585  011E94  0E96               	movlw	150
  7586  011E96  0100               	movlb	0	; () banked
  7587  011E98  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7588  011E9A  0E39               	movlw	57
  7589  011E9C  0100               	movlb	0	; () banked
  7590  011E9E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7591  011EA0  C0CC  F074         	movff	_adjustDigipot$2532,___ftmul@f1
  7592  011EA4  C0CD  F075         	movff	_adjustDigipot$2532+1,___ftmul@f1+1
  7593  011EA8  C0CE  F076         	movff	_adjustDigipot$2532+2,___ftmul@f1+2
  7594  011EAC  EC69  F08D         	call	___ftmul	;wreg free
  7595  011EB0  C074  F09C         	movff	?___ftmul,___ftdiv@f2
  7596  011EB4  C075  F09D         	movff	?___ftmul+1,___ftdiv@f2+1
  7597  011EB8  C076  F09E         	movff	?___ftmul+2,___ftdiv@f2+2
  7598  011EBC  EC67  F08F         	call	___ftdiv	;wreg free
  7599  011EC0  C099  F0E9         	movff	?___ftdiv,_nominalfrequency
  7600  011EC4  C09A  F0EA         	movff	?___ftdiv+1,_nominalfrequency+1
  7601  011EC8  C09B  F0EB         	movff	?___ftdiv+2,_nominalfrequency+2
  7602  011ECC  0012               	return	
  7603  011ECE                     __end_of_adjustDigipot:
  7604                           	opt stack 0
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodh	equ	0xFF4
  7610                           prodl	equ	0xFF3
  7611                           intcon	equ	0xFF2
  7612                           postinc0	equ	0xFEE
  7613                           wreg	equ	0xFE8
  7614                           indf1	equ	0xFE7
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _pow *****************
  7626 ;; Defined at:
  7627 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\pow.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  x               3   85[BANK0 ] int 
  7630 ;;  y               3   88[BANK0 ] int 
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;  yi              4   98[BANK0 ] unsigned long 
  7633 ;;  sign            1   97[BANK0 ] unsigned char 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  3   85[BANK0 ] unsigned char 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7643 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7644 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7646 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7647 ;;Total ram usage:       17 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    8
  7650 ;; This function calls:
  7651 ;;		___ftge
  7652 ;;		___ftmul
  7653 ;;		___ftneg
  7654 ;;		___fttol
  7655 ;;		___lltoft
  7656 ;;		_exp
  7657 ;;		_log
  7658 ;; This function is called by:
  7659 ;;		_initSPI
  7660 ;;		_adjustDigipot
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text25
  7665  0115F8                     __ptext25:
  7666                           	opt stack 0
  7667  0115F8                     _pow:
  7668                           	opt stack 21
  7669                           
  7670                           ;incstack = 0
  7671  0115F8  0E00               	movlw	0
  7672  0115FA  0100               	movlb	0	; () banked
  7673  0115FC  6FC1               	movwf	pow@sign& (0+255),b
  7674                           
  7675                           ; BSR set to: 0
  7676  0115FE  0100               	movlb	0	; () banked
  7677  011600  51B5               	movf	pow@x& (0+255),w,b
  7678  011602  0100               	movlb	0	; () banked
  7679  011604  11B6               	iorwf	(pow@x+1)& (0+255),w,b
  7680  011606  0100               	movlb	0	; () banked
  7681  011608  11B7               	iorwf	(pow@x+2)& (0+255),w,b
  7682  01160A  A4D8               	btfss	status,2,c
  7683  01160C  D023               	goto	l3445
  7684                           
  7685                           ; BSR set to: 0
  7686  01160E  0E00               	movlw	0
  7687  011610  0100               	movlb	0	; () banked
  7688  011612  6F83               	movwf	___ftge@ff1& (0+255),b
  7689  011614  0E00               	movlw	0
  7690  011616  0100               	movlb	0	; () banked
  7691  011618  6F84               	movwf	(___ftge@ff1+1)& (0+255),b
  7692  01161A  0E00               	movlw	0
  7693  01161C  0100               	movlb	0	; () banked
  7694  01161E  6F85               	movwf	(___ftge@ff1+2)& (0+255),b
  7695  011620  C0B8  F086         	movff	pow@y,___ftge@ff2
  7696  011624  C0B9  F087         	movff	pow@y+1,___ftge@ff2+1
  7697  011628  C0BA  F088         	movff	pow@y+2,___ftge@ff2+2
  7698  01162C  EC15  F095         	call	___ftge	;wreg free
  7699  011630  0100               	movlb	0	; () banked
  7700  011632  A0D8               	btfss	status,0,c
  7701  011634  D005               	goto	l1037
  7702                           
  7703                           ; BSR set to: 0
  7704  011636  0E00               	movlw	0
  7705  011638  0100               	movlb	0	; () banked
  7706  01163A  6FE3               	movwf	(_errno+1)& (0+255),b
  7707  01163C  0E21               	movlw	33
  7708  01163E  6FE2               	movwf	_errno& (0+255),b
  7709  011640                     l1037:
  7710                           
  7711                           ; BSR set to: 0
  7712  011640  0E00               	movlw	0
  7713  011642  0100               	movlb	0	; () banked
  7714  011644  6FB5               	movwf	?_pow& (0+255),b
  7715  011646  0E00               	movlw	0
  7716  011648  0100               	movlb	0	; () banked
  7717  01164A  6FB6               	movwf	(?_pow+1)& (0+255),b
  7718  01164C  0E00               	movlw	0
  7719  01164E  0100               	movlb	0	; () banked
  7720  011650  6FB7               	movwf	(?_pow+2)& (0+255),b
  7721                           
  7722                           ; BSR set to: 0
  7723  011652  0012               	return	
  7724  011654                     l3445:
  7725                           
  7726                           ; BSR set to: 0
  7727  011654  0100               	movlb	0	; () banked
  7728  011656  51B8               	movf	pow@y& (0+255),w,b
  7729  011658  0100               	movlb	0	; () banked
  7730  01165A  11B9               	iorwf	(pow@y+1)& (0+255),w,b
  7731  01165C  0100               	movlb	0	; () banked
  7732  01165E  11BA               	iorwf	(pow@y+2)& (0+255),w,b
  7733  011660  A4D8               	btfss	status,2,c
  7734  011662  D00A               	goto	l3451
  7735                           
  7736                           ; BSR set to: 0
  7737  011664  0E00               	movlw	0
  7738  011666  0100               	movlb	0	; () banked
  7739  011668  6FB5               	movwf	?_pow& (0+255),b
  7740  01166A  0E80               	movlw	128
  7741  01166C  0100               	movlb	0	; () banked
  7742  01166E  6FB6               	movwf	(?_pow+1)& (0+255),b
  7743  011670  0E3F               	movlw	63
  7744  011672  0100               	movlb	0	; () banked
  7745  011674  6FB7               	movwf	(?_pow+2)& (0+255),b
  7746                           
  7747                           ; BSR set to: 0
  7748  011676  0012               	return	
  7749  011678                     l3451:
  7750                           
  7751                           ; BSR set to: 0
  7752  011678  0100               	movlb	0	; () banked
  7753  01167A  AFB7               	btfss	(pow@x+2)& (0+255),7,b
  7754  01167C  D04C               	goto	l3463
  7755                           
  7756                           ; BSR set to: 0
  7757  01167E  C0B8  F08A         	movff	pow@y,___fttol@f1
  7758  011682  C0B9  F08B         	movff	pow@y+1,___fttol@f1+1
  7759  011686  C0BA  F08C         	movff	pow@y+2,___fttol@f1+2
  7760  01168A  EC0D  F090         	call	___fttol	;wreg free
  7761  01168E  C08A  F0C2         	movff	?___fttol,pow@yi
  7762  011692  C08B  F0C3         	movff	?___fttol+1,pow@yi+1
  7763  011696  C08C  F0C4         	movff	?___fttol+2,pow@yi+2
  7764  01169A  C08D  F0C5         	movff	?___fttol+3,pow@yi+3
  7765  01169E  C0C2  F068         	movff	pow@yi,___lltoft@c
  7766  0116A2  C0C3  F069         	movff	pow@yi+1,___lltoft@c+1
  7767  0116A6  C0C4  F06A         	movff	pow@yi+2,___lltoft@c+2
  7768  0116AA  C0C5  F06B         	movff	pow@yi+3,___lltoft@c+3
  7769  0116AE  ECB0  F098         	call	___lltoft	;wreg free
  7770  0116B2  0100               	movlb	0	; () banked
  7771  0116B4  51B8               	movf	pow@y& (0+255),w,b
  7772  0116B6  0100               	movlb	0	; () banked
  7773  0116B8  1968               	xorwf	?___lltoft& (0+255),w,b
  7774  0116BA  E10B               	bnz	u3080
  7775  0116BC  0100               	movlb	0	; () banked
  7776  0116BE  51B9               	movf	(pow@y+1)& (0+255),w,b
  7777  0116C0  0100               	movlb	0	; () banked
  7778  0116C2  1969               	xorwf	(?___lltoft+1)& (0+255),w,b
  7779  0116C4  E106               	bnz	u3080
  7780  0116C6  0100               	movlb	0	; () banked
  7781  0116C8  51BA               	movf	(pow@y+2)& (0+255),w,b
  7782  0116CA  0100               	movlb	0	; () banked
  7783  0116CC  196A               	xorwf	(?___lltoft+2)& (0+255),w,b
  7784  0116CE  B4D8               	btfsc	status,2,c
  7785  0116D0  D00F               	goto	l3459
  7786  0116D2                     u3080:
  7787                           
  7788                           ; BSR set to: 0
  7789  0116D2  0E00               	movlw	0
  7790  0116D4  0100               	movlb	0	; () banked
  7791  0116D6  6FE3               	movwf	(_errno+1)& (0+255),b
  7792  0116D8  0E21               	movlw	33
  7793  0116DA  6FE2               	movwf	_errno& (0+255),b
  7794  0116DC  0E00               	movlw	0
  7795  0116DE  0100               	movlb	0	; () banked
  7796  0116E0  6FB5               	movwf	?_pow& (0+255),b
  7797  0116E2  0E00               	movlw	0
  7798  0116E4  0100               	movlb	0	; () banked
  7799  0116E6  6FB6               	movwf	(?_pow+1)& (0+255),b
  7800  0116E8  0E00               	movlw	0
  7801  0116EA  0100               	movlb	0	; () banked
  7802  0116EC  6FB7               	movwf	(?_pow+2)& (0+255),b
  7803                           
  7804                           ; BSR set to: 0
  7805  0116EE  0012               	return	
  7806  0116F0                     l3459:
  7807                           
  7808                           ; BSR set to: 0
  7809  0116F0  0100               	movlb	0	; () banked
  7810  0116F2  51C2               	movf	pow@yi& (0+255),w,b
  7811  0116F4  0B01               	andlw	1
  7812  0116F6  0100               	movlb	0	; () banked
  7813  0116F8  6FC1               	movwf	pow@sign& (0+255),b
  7814                           
  7815                           ; BSR set to: 0
  7816  0116FA  C0B5  F060         	movff	pow@x,___ftneg@f1
  7817  0116FE  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  7818  011702  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  7819  011706  ECB7  F09A         	call	___ftneg	;wreg free
  7820  01170A  C060  F0B5         	movff	?___ftneg,pow@x
  7821  01170E  C061  F0B6         	movff	?___ftneg+1,pow@x+1
  7822  011712  C062  F0B7         	movff	?___ftneg+2,pow@x+2
  7823  011716                     l3463:
  7824  011716  C0B5  F0A5         	movff	pow@x,log@x
  7825  01171A  C0B6  F0A6         	movff	pow@x+1,log@x+1
  7826  01171E  C0B7  F0A7         	movff	pow@x+2,log@x+2
  7827  011722  EC18  F08E         	call	_log	;wreg free
  7828  011726  C0A5  F0BB         	movff	?_log,_pow$2537
  7829  01172A  C0A6  F0BC         	movff	?_log+1,_pow$2537+1
  7830  01172E  C0A7  F0BD         	movff	?_log+2,_pow$2537+2
  7831  011732  C0BB  F074         	movff	_pow$2537,___ftmul@f1
  7832  011736  C0BC  F075         	movff	_pow$2537+1,___ftmul@f1+1
  7833  01173A  C0BD  F076         	movff	_pow$2537+2,___ftmul@f1+2
  7834  01173E  C0B8  F077         	movff	pow@y,___ftmul@f2
  7835  011742  C0B9  F078         	movff	pow@y+1,___ftmul@f2+1
  7836  011746  C0BA  F079         	movff	pow@y+2,___ftmul@f2+2
  7837  01174A  EC69  F08D         	call	___ftmul	;wreg free
  7838  01174E  C074  F0BE         	movff	?___ftmul,_pow$2538
  7839  011752  C075  F0BF         	movff	?___ftmul+1,_pow$2538+1
  7840  011756  C076  F0C0         	movff	?___ftmul+2,_pow$2538+2
  7841  01175A  C0BE  F0AC         	movff	_pow$2538,exp@x
  7842  01175E  C0BF  F0AD         	movff	_pow$2538+1,exp@x+1
  7843  011762  C0C0  F0AE         	movff	_pow$2538+2,exp@x+2
  7844  011766  ECDF  F089         	call	_exp	;wreg free
  7845  01176A  C0AC  F0B5         	movff	?_exp,pow@x
  7846  01176E  C0AD  F0B6         	movff	?_exp+1,pow@x+1
  7847  011772  C0AE  F0B7         	movff	?_exp+2,pow@x+2
  7848  011776  0100               	movlb	0	; () banked
  7849  011778  51C1               	movf	pow@sign& (0+255),w,b
  7850  01177A  0100               	movlb	0	; () banked
  7851  01177C  B4D8               	btfsc	status,2,c
  7852  01177E  D00F               	goto	l1042
  7853                           
  7854                           ; BSR set to: 0
  7855  011780  C0B5  F060         	movff	pow@x,___ftneg@f1
  7856  011784  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  7857  011788  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  7858  01178C  ECB7  F09A         	call	___ftneg	;wreg free
  7859  011790  C060  F0B5         	movff	?___ftneg,?_pow
  7860  011794  C061  F0B6         	movff	?___ftneg+1,?_pow+1
  7861  011798  C062  F0B7         	movff	?___ftneg+2,?_pow+2
  7862  01179C  0012               	return	
  7863  01179E                     l1042:
  7864                           
  7865                           ; BSR set to: 0
  7866  01179E  C0B5  F0B5         	movff	pow@x,?_pow
  7867  0117A2  C0B6  F0B6         	movff	pow@x+1,?_pow+1
  7868  0117A6  C0B7  F0B7         	movff	pow@x+2,?_pow+2
  7869  0117AA  0012               	return		;funcret
  7870  0117AC                     __end_of_pow:
  7871                           	opt stack 0
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           postinc0	equ	0xFEE
  7880                           wreg	equ	0xFE8
  7881                           indf1	equ	0xFE7
  7882                           postdec1	equ	0xFE5
  7883                           fsr1h	equ	0xFE2
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function _log *****************
  7893 ;; Defined at:
  7894 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\log.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  x               3   69[BANK0 ] unsigned char 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  exponent        2   72[BANK0 ] int 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  3   69[BANK0 ] int 
  7901 ;; Registers used:
  7902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7908 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7911 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7912 ;;Total ram usage:        5 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    7
  7915 ;; This function calls:
  7916 ;;		___awtoft
  7917 ;;		___ftadd
  7918 ;;		___ftmul
  7919 ;;		_eval_poly
  7920 ;;		_frexp
  7921 ;; This function is called by:
  7922 ;;		_pow
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text26
  7927  011C30                     __ptext26:
  7928                           	opt stack 0
  7929  011C30                     _log:
  7930                           	opt stack 21
  7931                           
  7932                           ;incstack = 0
  7933  011C30  0100               	movlb	0	; () banked
  7934  011C32  AFA7               	btfss	(log@x+2)& (0+255),7,b
  7935  011C34  D00F               	goto	l3369
  7936                           
  7937                           ; BSR set to: 0
  7938  011C36  0E00               	movlw	0
  7939  011C38  0100               	movlb	0	; () banked
  7940  011C3A  6FE3               	movwf	(_errno+1)& (0+255),b
  7941  011C3C  0E21               	movlw	33
  7942  011C3E  6FE2               	movwf	_errno& (0+255),b
  7943  011C40  0E00               	movlw	0
  7944  011C42  0100               	movlb	0	; () banked
  7945  011C44  6FA5               	movwf	?_log& (0+255),b
  7946  011C46  0E00               	movlw	0
  7947  011C48  0100               	movlb	0	; () banked
  7948  011C4A  6FA6               	movwf	(?_log+1)& (0+255),b
  7949  011C4C  0E00               	movlw	0
  7950  011C4E  0100               	movlb	0	; () banked
  7951  011C50  6FA7               	movwf	(?_log+2)& (0+255),b
  7952                           
  7953                           ; BSR set to: 0
  7954  011C52  0012               	return	
  7955  011C54                     l3369:
  7956                           
  7957                           ; BSR set to: 0
  7958  011C54  0100               	movlb	0	; () banked
  7959  011C56  51A5               	movf	log@x& (0+255),w,b
  7960  011C58  0100               	movlb	0	; () banked
  7961  011C5A  11A6               	iorwf	(log@x+1)& (0+255),w,b
  7962  011C5C  0100               	movlb	0	; () banked
  7963  011C5E  11A7               	iorwf	(log@x+2)& (0+255),w,b
  7964  011C60  A4D8               	btfss	status,2,c
  7965  011C62  D00F               	goto	l3375
  7966                           
  7967                           ; BSR set to: 0
  7968  011C64  0E00               	movlw	0
  7969  011C66  0100               	movlb	0	; () banked
  7970  011C68  6FE3               	movwf	(_errno+1)& (0+255),b
  7971  011C6A  0E22               	movlw	34
  7972  011C6C  6FE2               	movwf	_errno& (0+255),b
  7973  011C6E  0E00               	movlw	0
  7974  011C70  0100               	movlb	0	; () banked
  7975  011C72  6FA5               	movwf	?_log& (0+255),b
  7976  011C74  0E00               	movlw	0
  7977  011C76  0100               	movlb	0	; () banked
  7978  011C78  6FA6               	movwf	(?_log+1)& (0+255),b
  7979  011C7A  0E00               	movlw	0
  7980  011C7C  0100               	movlb	0	; () banked
  7981  011C7E  6FA7               	movwf	(?_log+2)& (0+255),b
  7982                           
  7983                           ; BSR set to: 0
  7984  011C80  0012               	return	
  7985  011C82                     l3375:
  7986                           
  7987                           ; BSR set to: 0
  7988  011C82  0E00               	movlw	0
  7989  011C84  0100               	movlb	0	; () banked
  7990  011C86  6F77               	movwf	___ftmul@f2& (0+255),b
  7991  011C88  0E00               	movlw	0
  7992  011C8A  0100               	movlb	0	; () banked
  7993  011C8C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7994  011C8E  0E40               	movlw	64
  7995  011C90  0100               	movlb	0	; () banked
  7996  011C92  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7997  011C94  0EA8               	movlw	low log@exponent
  7998  011C96  0100               	movlb	0	; () banked
  7999  011C98  6F63               	movwf	frexp@eptr& (0+255),b
  8000  011C9A  0E00               	movlw	high log@exponent
  8001  011C9C  0100               	movlb	0	; () banked
  8002  011C9E  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  8003  011CA0  C0A5  F060         	movff	log@x,frexp@value
  8004  011CA4  C0A6  F061         	movff	log@x+1,frexp@value+1
  8005  011CA8  C0A7  F062         	movff	log@x+2,frexp@value+2
  8006  011CAC  EC36  F096         	call	_frexp	;wreg free
  8007  011CB0  C060  F074         	movff	?_frexp,___ftmul@f1
  8008  011CB4  C061  F075         	movff	?_frexp+1,___ftmul@f1+1
  8009  011CB8  C062  F076         	movff	?_frexp+2,___ftmul@f1+2
  8010  011CBC  EC69  F08D         	call	___ftmul	;wreg free
  8011  011CC0  C074  F08D         	movff	?___ftmul,___ftadd@f1
  8012  011CC4  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  8013  011CC8  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  8014  011CCC  0E00               	movlw	0
  8015  011CCE  0100               	movlb	0	; () banked
  8016  011CD0  6F90               	movwf	___ftadd@f2& (0+255),b
  8017  011CD2  0E80               	movlw	128
  8018  011CD4  0100               	movlb	0	; () banked
  8019  011CD6  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8020  011CD8  0EBF               	movlw	191
  8021  011CDA  0100               	movlb	0	; () banked
  8022  011CDC  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8023  011CDE  ECAB  F088         	call	___ftadd	;wreg free
  8024  011CE2  C08D  F0A5         	movff	?___ftadd,log@x
  8025  011CE6  C08E  F0A6         	movff	?___ftadd+1,log@x+1
  8026  011CEA  C08F  F0A7         	movff	?___ftadd+2,log@x+2
  8027  011CEE  0100               	movlb	0	; () banked
  8028  011CF0  07A8               	decf	log@exponent& (0+255),f,b
  8029  011CF2  A0D8               	btfss	status,0,c
  8030  011CF4  07A9               	decf	(log@exponent+1)& (0+255),f,b
  8031                           
  8032                           ; BSR set to: 0
  8033  011CF6  C0A5  F099         	movff	log@x,eval_poly@x
  8034  011CFA  C0A6  F09A         	movff	log@x+1,eval_poly@x+1
  8035  011CFE  C0A7  F09B         	movff	log@x+2,eval_poly@x+2
  8036  011D02  0E5D               	movlw	low log@coeff
  8037  011D04  0100               	movlb	0	; () banked
  8038  011D06  6F9C               	movwf	eval_poly@d& (0+255),b
  8039  011D08  0EFF               	movlw	high log@coeff
  8040  011D0A  0100               	movlb	0	; () banked
  8041  011D0C  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  8042  011D0E  0E00               	movlw	0
  8043  011D10  0100               	movlb	0	; () banked
  8044  011D12  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  8045  011D14  0E08               	movlw	8
  8046  011D16  6F9E               	movwf	eval_poly@n& (0+255),b
  8047  011D18  EC55  F093         	call	_eval_poly	;wreg free
  8048  011D1C  C099  F0A5         	movff	?_eval_poly,log@x
  8049  011D20  C09A  F0A6         	movff	?_eval_poly+1,log@x+1
  8050  011D24  C09B  F0A7         	movff	?_eval_poly+2,log@x+2
  8051  011D28  0E72               	movlw	114
  8052  011D2A  0100               	movlb	0	; () banked
  8053  011D2C  6F77               	movwf	___ftmul@f2& (0+255),b
  8054  011D2E  0E31               	movlw	49
  8055  011D30  0100               	movlb	0	; () banked
  8056  011D32  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8057  011D34  0E3F               	movlw	63
  8058  011D36  0100               	movlb	0	; () banked
  8059  011D38  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8060  011D3A  C0A8  F068         	movff	log@exponent,___awtoft@c
  8061  011D3E  C0A9  F069         	movff	log@exponent+1,___awtoft@c+1
  8062  011D42  EC3F  F09A         	call	___awtoft	;wreg free
  8063  011D46  C068  F074         	movff	?___awtoft,___ftmul@f1
  8064  011D4A  C069  F075         	movff	?___awtoft+1,___ftmul@f1+1
  8065  011D4E  C06A  F076         	movff	?___awtoft+2,___ftmul@f1+2
  8066  011D52  EC69  F08D         	call	___ftmul	;wreg free
  8067  011D56  C074  F08D         	movff	?___ftmul,___ftadd@f1
  8068  011D5A  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  8069  011D5E  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  8070  011D62  C0A5  F090         	movff	log@x,___ftadd@f2
  8071  011D66  C0A6  F091         	movff	log@x+1,___ftadd@f2+1
  8072  011D6A  C0A7  F092         	movff	log@x+2,___ftadd@f2+2
  8073  011D6E  ECAB  F088         	call	___ftadd	;wreg free
  8074  011D72  C08D  F0A5         	movff	?___ftadd,?_log
  8075  011D76  C08E  F0A6         	movff	?___ftadd+1,?_log+1
  8076  011D7A  C08F  F0A7         	movff	?___ftadd+2,?_log+2
  8077  011D7E  0012               	return	
  8078  011D80                     __end_of_log:
  8079                           	opt stack 0
  8080                           tblptru	equ	0xFF8
  8081                           tblptrh	equ	0xFF7
  8082                           tblptrl	equ	0xFF6
  8083                           tablat	equ	0xFF5
  8084                           prodh	equ	0xFF4
  8085                           prodl	equ	0xFF3
  8086                           intcon	equ	0xFF2
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           indf1	equ	0xFE7
  8090                           postdec1	equ	0xFE5
  8091                           fsr1h	equ	0xFE2
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _exp *****************
  8101 ;; Defined at:
  8102 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\exp.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  x               3   76[BANK0 ] int 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  exponent        2   82[BANK0 ] int 
  8107 ;;  sign            1   84[BANK0 ] unsigned char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  3   76[BANK0 ] unsigned char 
  8110 ;; Registers used:
  8111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8117 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8118 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8120 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8121 ;;Total ram usage:        9 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    7
  8124 ;; This function calls:
  8125 ;;		___awtoft
  8126 ;;		___ftdiv
  8127 ;;		___ftge
  8128 ;;		___ftmul
  8129 ;;		___ftneg
  8130 ;;		___ftsub
  8131 ;;		___fttol
  8132 ;;		_eval_poly
  8133 ;;		_floor
  8134 ;;		_ldexp
  8135 ;; This function is called by:
  8136 ;;		_pow
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text27
  8141  0113BE                     __ptext27:
  8142                           	opt stack 0
  8143  0113BE                     _exp:
  8144                           	opt stack 21
  8145                           
  8146                           ;incstack = 0
  8147  0113BE  0100               	movlb	0	; () banked
  8148  0113C0  51AC               	movf	exp@x& (0+255),w,b
  8149  0113C2  0100               	movlb	0	; () banked
  8150  0113C4  11AD               	iorwf	(exp@x+1)& (0+255),w,b
  8151  0113C6  0100               	movlb	0	; () banked
  8152  0113C8  11AE               	iorwf	(exp@x+2)& (0+255),w,b
  8153  0113CA  A4D8               	btfss	status,2,c
  8154  0113CC  D00A               	goto	l3391
  8155                           
  8156                           ; BSR set to: 0
  8157  0113CE  0E00               	movlw	0
  8158  0113D0  0100               	movlb	0	; () banked
  8159  0113D2  6FAC               	movwf	?_exp& (0+255),b
  8160  0113D4  0E80               	movlw	128
  8161  0113D6  0100               	movlb	0	; () banked
  8162  0113D8  6FAD               	movwf	(?_exp+1)& (0+255),b
  8163  0113DA  0E3F               	movlw	63
  8164  0113DC  0100               	movlb	0	; () banked
  8165  0113DE  6FAE               	movwf	(?_exp+2)& (0+255),b
  8166                           
  8167                           ; BSR set to: 0
  8168  0113E0  0012               	return	
  8169  0113E2                     l3391:
  8170                           
  8171                           ; BSR set to: 0
  8172  0113E2  0E72               	movlw	114
  8173  0113E4  0100               	movlb	0	; () banked
  8174  0113E6  6F83               	movwf	___ftge@ff1& (0+255),b
  8175  0113E8  0E31               	movlw	49
  8176  0113EA  0100               	movlb	0	; () banked
  8177  0113EC  6F84               	movwf	(___ftge@ff1+1)& (0+255),b
  8178  0113EE  0E44               	movlw	68
  8179  0113F0  0100               	movlb	0	; () banked
  8180  0113F2  6F85               	movwf	(___ftge@ff1+2)& (0+255),b
  8181  0113F4  C0AC  F086         	movff	exp@x,___ftge@ff2
  8182  0113F8  C0AD  F087         	movff	exp@x+1,___ftge@ff2+1
  8183  0113FC  C0AE  F088         	movff	exp@x+2,___ftge@ff2+2
  8184  011400  EC15  F095         	call	___ftge	;wreg free
  8185  011404  0100               	movlb	0	; () banked
  8186  011406  B0D8               	btfsc	status,0,c
  8187  011408  D00F               	goto	l3397
  8188                           
  8189                           ; BSR set to: 0
  8190  01140A  0E00               	movlw	0
  8191  01140C  0100               	movlb	0	; () banked
  8192  01140E  6FE3               	movwf	(_errno+1)& (0+255),b
  8193  011410  0E22               	movlw	34
  8194  011412  6FE2               	movwf	_errno& (0+255),b
  8195  011414  0EFF               	movlw	255
  8196  011416  0100               	movlb	0	; () banked
  8197  011418  6FAC               	movwf	?_exp& (0+255),b
  8198  01141A  0E7F               	movlw	127
  8199  01141C  0100               	movlb	0	; () banked
  8200  01141E  6FAD               	movwf	(?_exp+1)& (0+255),b
  8201  011420  0E7F               	movlw	127
  8202  011422  0100               	movlb	0	; () banked
  8203  011424  6FAE               	movwf	(?_exp+2)& (0+255),b
  8204                           
  8205                           ; BSR set to: 0
  8206  011426  0012               	return	
  8207  011428                     l3397:
  8208                           
  8209                           ; BSR set to: 0
  8210  011428  C0AC  F083         	movff	exp@x,___ftge@ff1
  8211  01142C  C0AD  F084         	movff	exp@x+1,___ftge@ff1+1
  8212  011430  C0AE  F085         	movff	exp@x+2,___ftge@ff1+2
  8213  011434  0E49               	movlw	73
  8214  011436  0100               	movlb	0	; () banked
  8215  011438  6F86               	movwf	___ftge@ff2& (0+255),b
  8216  01143A  0E3A               	movlw	58
  8217  01143C  0100               	movlb	0	; () banked
  8218  01143E  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  8219  011440  0EC4               	movlw	196
  8220  011442  0100               	movlb	0	; () banked
  8221  011444  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  8222  011446  EC15  F095         	call	___ftge	;wreg free
  8223  01144A  0100               	movlb	0	; () banked
  8224  01144C  B0D8               	btfsc	status,0,c
  8225  01144E  D00F               	goto	l3403
  8226                           
  8227                           ; BSR set to: 0
  8228  011450  0E00               	movlw	0
  8229  011452  0100               	movlb	0	; () banked
  8230  011454  6FE3               	movwf	(_errno+1)& (0+255),b
  8231  011456  0E22               	movlw	34
  8232  011458  6FE2               	movwf	_errno& (0+255),b
  8233  01145A  0E00               	movlw	0
  8234  01145C  0100               	movlb	0	; () banked
  8235  01145E  6FAC               	movwf	?_exp& (0+255),b
  8236  011460  0E00               	movlw	0
  8237  011462  0100               	movlb	0	; () banked
  8238  011464  6FAD               	movwf	(?_exp+1)& (0+255),b
  8239  011466  0E00               	movlw	0
  8240  011468  0100               	movlb	0	; () banked
  8241  01146A  6FAE               	movwf	(?_exp+2)& (0+255),b
  8242                           
  8243                           ; BSR set to: 0
  8244  01146C  0012               	return	
  8245  01146E                     l3403:
  8246                           
  8247                           ; BSR set to: 0
  8248  01146E  0100               	movlb	0	; () banked
  8249  011470  AFAE               	btfss	(exp@x+2)& (0+255),7,b
  8250  011472  D002               	goto	u2980
  8251  011474  0E01               	movlw	1
  8252  011476  D001               	goto	u2990
  8253  011478                     u2980:
  8254  011478  0E00               	movlw	0
  8255  01147A                     u2990:
  8256  01147A  0100               	movlb	0	; () banked
  8257  01147C  6FB4               	movwf	exp@sign& (0+255),b
  8258                           
  8259                           ; BSR set to: 0
  8260  01147E  0100               	movlb	0	; () banked
  8261  011480  51B4               	movf	exp@sign& (0+255),w,b
  8262  011482  0100               	movlb	0	; () banked
  8263  011484  B4D8               	btfsc	status,2,c
  8264  011486  D00E               	goto	l1204
  8265                           
  8266                           ; BSR set to: 0
  8267  011488  C0AC  F060         	movff	exp@x,___ftneg@f1
  8268  01148C  C0AD  F061         	movff	exp@x+1,___ftneg@f1+1
  8269  011490  C0AE  F062         	movff	exp@x+2,___ftneg@f1+2
  8270  011494  ECB7  F09A         	call	___ftneg	;wreg free
  8271  011498  C060  F0AC         	movff	?___ftneg,exp@x
  8272  01149C  C061  F0AD         	movff	?___ftneg+1,exp@x+1
  8273  0114A0  C062  F0AE         	movff	?___ftneg+2,exp@x+2
  8274  0114A4                     l1204:
  8275  0114A4  C0AC  F074         	movff	exp@x,___ftmul@f1
  8276  0114A8  C0AD  F075         	movff	exp@x+1,___ftmul@f1+1
  8277  0114AC  C0AE  F076         	movff	exp@x+2,___ftmul@f1+2
  8278  0114B0  0EAA               	movlw	170
  8279  0114B2  0100               	movlb	0	; () banked
  8280  0114B4  6F77               	movwf	___ftmul@f2& (0+255),b
  8281  0114B6  0EB8               	movlw	184
  8282  0114B8  0100               	movlb	0	; () banked
  8283  0114BA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8284  0114BC  0E3F               	movlw	63
  8285  0114BE  0100               	movlb	0	; () banked
  8286  0114C0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8287  0114C2  EC69  F08D         	call	___ftmul	;wreg free
  8288  0114C6  C074  F0AC         	movff	?___ftmul,exp@x
  8289  0114CA  C075  F0AD         	movff	?___ftmul+1,exp@x+1
  8290  0114CE  C076  F0AE         	movff	?___ftmul+2,exp@x+2
  8291  0114D2  C0AC  F0A3         	movff	exp@x,floor@x
  8292  0114D6  C0AD  F0A4         	movff	exp@x+1,floor@x+1
  8293  0114DA  C0AE  F0A5         	movff	exp@x+2,floor@x+2
  8294  0114DE  ECD6  F092         	call	_floor	;wreg free
  8295  0114E2  C0A3  F0AF         	movff	?_floor,_exp$2539
  8296  0114E6  C0A4  F0B0         	movff	?_floor+1,_exp$2539+1
  8297  0114EA  C0A5  F0B1         	movff	?_floor+2,_exp$2539+2
  8298  0114EE  C0AF  F08A         	movff	_exp$2539,___fttol@f1
  8299  0114F2  C0B0  F08B         	movff	_exp$2539+1,___fttol@f1+1
  8300  0114F6  C0B1  F08C         	movff	_exp$2539+2,___fttol@f1+2
  8301  0114FA  EC0D  F090         	call	___fttol	;wreg free
  8302  0114FE  C08A  F0B2         	movff	?___fttol,exp@exponent
  8303  011502  C08B  F0B3         	movff	?___fttol+1,exp@exponent+1
  8304  011506  C0AC  F099         	movff	exp@x,___ftsub@f1
  8305  01150A  C0AD  F09A         	movff	exp@x+1,___ftsub@f1+1
  8306  01150E  C0AE  F09B         	movff	exp@x+2,___ftsub@f1+2
  8307  011512  C0B2  F068         	movff	exp@exponent,___awtoft@c
  8308  011516  C0B3  F069         	movff	exp@exponent+1,___awtoft@c+1
  8309  01151A  EC3F  F09A         	call	___awtoft	;wreg free
  8310  01151E  C068  F09C         	movff	?___awtoft,___ftsub@f2
  8311  011522  C069  F09D         	movff	?___awtoft+1,___ftsub@f2+1
  8312  011526  C06A  F09E         	movff	?___awtoft+2,___ftsub@f2+2
  8313  01152A  ECF7  F099         	call	___ftsub	;wreg free
  8314  01152E  C099  F0AC         	movff	?___ftsub,exp@x
  8315  011532  C09A  F0AD         	movff	?___ftsub+1,exp@x+1
  8316  011536  C09B  F0AE         	movff	?___ftsub+2,exp@x+2
  8317  01153A  C0AC  F099         	movff	exp@x,eval_poly@x
  8318  01153E  C0AD  F09A         	movff	exp@x+1,eval_poly@x+1
  8319  011542  C0AE  F09B         	movff	exp@x+2,eval_poly@x+2
  8320  011546  0E3F               	movlw	low exp@coeff
  8321  011548  0100               	movlb	0	; () banked
  8322  01154A  6F9C               	movwf	eval_poly@d& (0+255),b
  8323  01154C  0EFF               	movlw	high exp@coeff
  8324  01154E  0100               	movlb	0	; () banked
  8325  011550  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  8326  011552  0E00               	movlw	0
  8327  011554  0100               	movlb	0	; () banked
  8328  011556  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  8329  011558  0E09               	movlw	9
  8330  01155A  6F9E               	movwf	eval_poly@n& (0+255),b
  8331  01155C  EC55  F093         	call	_eval_poly	;wreg free
  8332  011560  C099  F0A5         	movff	?_eval_poly,ldexp@value
  8333  011564  C09A  F0A6         	movff	?_eval_poly+1,ldexp@value+1
  8334  011568  C09B  F0A7         	movff	?_eval_poly+2,ldexp@value+2
  8335  01156C  C0B2  F0A8         	movff	exp@exponent,ldexp@newexp
  8336  011570  C0B3  F0A9         	movff	exp@exponent+1,ldexp@newexp+1
  8337  011574  EC42  F091         	call	_ldexp	;wreg free
  8338  011578  C0A5  F0AC         	movff	?_ldexp,exp@x
  8339  01157C  C0A6  F0AD         	movff	?_ldexp+1,exp@x+1
  8340  011580  C0A7  F0AE         	movff	?_ldexp+2,exp@x+2
  8341  011584  0100               	movlb	0	; () banked
  8342  011586  51B4               	movf	exp@sign& (0+255),w,b
  8343  011588  0100               	movlb	0	; () banked
  8344  01158A  B4D8               	btfsc	status,2,c
  8345  01158C  D02E               	goto	l1205
  8346                           
  8347                           ; BSR set to: 0
  8348  01158E  0100               	movlb	0	; () banked
  8349  011590  29AC               	incf	exp@x& (0+255),w,b
  8350  011592  E113               	bnz	l3425
  8351  011594  0E7F               	movlw	127
  8352  011596  0100               	movlb	0	; () banked
  8353  011598  19AD               	xorwf	(exp@x+1)& (0+255),w,b
  8354  01159A  E10F               	bnz	l3425
  8355  01159C  0E7F               	movlw	127
  8356  01159E  0100               	movlb	0	; () banked
  8357  0115A0  19AE               	xorwf	(exp@x+2)& (0+255),w,b
  8358  0115A2  A4D8               	btfss	status,2,c
  8359  0115A4  D00A               	goto	l3425
  8360                           
  8361                           ; BSR set to: 0
  8362  0115A6  0E00               	movlw	0
  8363  0115A8  0100               	movlb	0	; () banked
  8364  0115AA  6FAC               	movwf	?_exp& (0+255),b
  8365  0115AC  0E00               	movlw	0
  8366  0115AE  0100               	movlb	0	; () banked
  8367  0115B0  6FAD               	movwf	(?_exp+1)& (0+255),b
  8368  0115B2  0E00               	movlw	0
  8369  0115B4  0100               	movlb	0	; () banked
  8370  0115B6  6FAE               	movwf	(?_exp+2)& (0+255),b
  8371                           
  8372                           ; BSR set to: 0
  8373  0115B8  0012               	return	
  8374  0115BA                     l3425:
  8375                           
  8376                           ; BSR set to: 0
  8377  0115BA  0E00               	movlw	0
  8378  0115BC  0100               	movlb	0	; () banked
  8379  0115BE  6F99               	movwf	___ftdiv@f1& (0+255),b
  8380  0115C0  0E80               	movlw	128
  8381  0115C2  0100               	movlb	0	; () banked
  8382  0115C4  6F9A               	movwf	(___ftdiv@f1+1)& (0+255),b
  8383  0115C6  0E3F               	movlw	63
  8384  0115C8  0100               	movlb	0	; () banked
  8385  0115CA  6F9B               	movwf	(___ftdiv@f1+2)& (0+255),b
  8386  0115CC  C0AC  F09C         	movff	exp@x,___ftdiv@f2
  8387  0115D0  C0AD  F09D         	movff	exp@x+1,___ftdiv@f2+1
  8388  0115D4  C0AE  F09E         	movff	exp@x+2,___ftdiv@f2+2
  8389  0115D8  EC67  F08F         	call	___ftdiv	;wreg free
  8390  0115DC  C099  F0AC         	movff	?___ftdiv,?_exp
  8391  0115E0  C09A  F0AD         	movff	?___ftdiv+1,?_exp+1
  8392  0115E4  C09B  F0AE         	movff	?___ftdiv+2,?_exp+2
  8393  0115E8  0012               	return	
  8394  0115EA                     l1205:
  8395                           
  8396                           ; BSR set to: 0
  8397  0115EA  C0AC  F0AC         	movff	exp@x,?_exp
  8398  0115EE  C0AD  F0AD         	movff	exp@x+1,?_exp+1
  8399  0115F2  C0AE  F0AE         	movff	exp@x+2,?_exp+2
  8400  0115F6  0012               	return		;funcret
  8401  0115F8                     __end_of_exp:
  8402                           	opt stack 0
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           postinc0	equ	0xFEE
  8411                           wreg	equ	0xFE8
  8412                           indf1	equ	0xFE7
  8413                           postdec1	equ	0xFE5
  8414                           fsr1h	equ	0xFE2
  8415                           fsr1l	equ	0xFE1
  8416                           indf2	equ	0xFDF
  8417                           postinc2	equ	0xFDE
  8418                           postdec2	equ	0xFDD
  8419                           fsr2h	equ	0xFDA
  8420                           fsr2l	equ	0xFD9
  8421                           status	equ	0xFD8
  8422                           
  8423 ;; *************** function _ldexp *****************
  8424 ;; Defined at:
  8425 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  8426 ;; Parameters:    Size  Location     Type
  8427 ;;  value           3   69[BANK0 ] unsigned char 
  8428 ;;  newexp          2   72[BANK0 ] int 
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;		None
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  3   69[BANK0 ] int 
  8433 ;; Registers used:
  8434 ;;		wreg, status,2, status,0
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8440 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8444 ;;Total ram usage:        7 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    4
  8447 ;; This function calls:
  8448 ;;		Nothing
  8449 ;; This function is called by:
  8450 ;;		_exp
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text28
  8455  012284                     __ptext28:
  8456                           	opt stack 0
  8457  012284                     _ldexp:
  8458                           	opt stack 23
  8459                           
  8460                           ;incstack = 0
  8461  012284  0100               	movlb	0	; () banked
  8462  012286  51A5               	movf	ldexp@value& (0+255),w,b
  8463  012288  0100               	movlb	0	; () banked
  8464  01228A  11A6               	iorwf	(ldexp@value+1)& (0+255),w,b
  8465  01228C  0100               	movlb	0	; () banked
  8466  01228E  11A7               	iorwf	(ldexp@value+2)& (0+255),w,b
  8467  012290  A4D8               	btfss	status,2,c
  8468  012292  D00A               	goto	l3243
  8469                           
  8470                           ; BSR set to: 0
  8471  012294  0E00               	movlw	0
  8472  012296  0100               	movlb	0	; () banked
  8473  012298  6FA5               	movwf	?_ldexp& (0+255),b
  8474  01229A  0E00               	movlw	0
  8475  01229C  0100               	movlb	0	; () banked
  8476  01229E  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8477  0122A0  0E00               	movlw	0
  8478  0122A2  0100               	movlb	0	; () banked
  8479  0122A4  6FA7               	movwf	(?_ldexp+2)& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482  0122A6  0012               	return	
  8483  0122A8                     l3243:
  8484                           
  8485                           ; BSR set to: 0
  8486  0122A8  0100               	movlb	0	; () banked
  8487  0122AA  51A7               	movf	(ldexp@value+2)& (0+255),w,b
  8488  0122AC  0B7F               	andlw	127
  8489  0122AE  0100               	movlb	0	; () banked
  8490  0122B0  6FAA               	movwf	??_ldexp& (0+255),b
  8491  0122B2  6BAB               	clrf	(??_ldexp+1)& (0+255),b
  8492  0122B4  90D8               	bcf	status,0,c
  8493  0122B6  0100               	movlb	0	; () banked
  8494  0122B8  37AA               	rlcf	??_ldexp& (0+255),f,b
  8495  0122BA  37AB               	rlcf	(??_ldexp+1)& (0+255),f,b
  8496  0122BC  0100               	movlb	0	; () banked
  8497  0122BE  51AA               	movf	??_ldexp& (0+255),w,b
  8498  0122C0  0100               	movlb	0	; () banked
  8499  0122C2  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8500  0122C4  0100               	movlb	0	; () banked
  8501  0122C6  51AB               	movf	(??_ldexp+1)& (0+255),w,b
  8502  0122C8  0100               	movlb	0	; () banked
  8503  0122CA  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8504  0122CC  0100               	movlb	0	; () banked
  8505  0122CE  AFA6               	btfss	(ldexp@value+1)& (0+255),7,b
  8506  0122D0  D004               	goto	u2760
  8507  0122D2  0100               	movlb	0	; () banked
  8508  0122D4  6BAA               	clrf	??_ldexp& (0+255),b
  8509  0122D6  2BAA               	incf	??_ldexp& (0+255),f,b
  8510  0122D8  D002               	goto	u2768
  8511  0122DA                     u2760:
  8512  0122DA  0100               	movlb	0	; () banked
  8513  0122DC  6BAA               	clrf	??_ldexp& (0+255),b
  8514  0122DE                     u2768:
  8515  0122DE  0100               	movlb	0	; () banked
  8516  0122E0  51AA               	movf	??_ldexp& (0+255),w,b
  8517  0122E2  0100               	movlb	0	; () banked
  8518  0122E4  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8519  0122E6  0E00               	movlw	0
  8520  0122E8  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8521  0122EA  0100               	movlb	0	; () banked
  8522  0122EC  AFA9               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8523  0122EE  D00F               	goto	l3251
  8524                           
  8525                           ; BSR set to: 0
  8526  0122F0  0E00               	movlw	0
  8527  0122F2  0100               	movlb	0	; () banked
  8528  0122F4  6FE3               	movwf	(_errno+1)& (0+255),b
  8529  0122F6  0E22               	movlw	34
  8530  0122F8  6FE2               	movwf	_errno& (0+255),b
  8531  0122FA  0E00               	movlw	0
  8532  0122FC  0100               	movlb	0	; () banked
  8533  0122FE  6FA5               	movwf	?_ldexp& (0+255),b
  8534  012300  0E00               	movlw	0
  8535  012302  0100               	movlb	0	; () banked
  8536  012304  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8537  012306  0E00               	movlw	0
  8538  012308                     L6:
  8539  012308  0100               	movlb	0	; () banked
  8540  01230A  6FA7               	movwf	(?_ldexp+2)& (0+255),b
  8541                           
  8542                           ; BSR set to: 0
  8543  01230C  0012               	return	
  8544  01230E                     l3251:
  8545                           
  8546                           ; BSR set to: 0
  8547  01230E  0100               	movlb	0	; () banked
  8548  012310  BFA9               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  8549  012312  D01C               	goto	l3267
  8550  012314  0100               	movlb	0	; () banked
  8551  012316  05A9               	decf	(ldexp@newexp+1)& (0+255),w,b
  8552  012318  A0D8               	btfss	status,0,c
  8553  01231A  D018               	goto	l3267
  8554                           
  8555                           ; BSR set to: 0
  8556  01231C  0E00               	movlw	0
  8557  01231E  0100               	movlb	0	; () banked
  8558  012320  6FE3               	movwf	(_errno+1)& (0+255),b
  8559  012322  0E22               	movlw	34
  8560  012324  6FE2               	movwf	_errno& (0+255),b
  8561                           
  8562                           ; BSR set to: 0
  8563  012326  0100               	movlb	0	; () banked
  8564  012328  AFA7               	btfss	(ldexp@value+2)& (0+255),7,b
  8565  01232A  D008               	goto	l3263
  8566                           
  8567                           ; BSR set to: 0
  8568  01232C  0EFF               	movlw	255
  8569  01232E  0100               	movlb	0	; () banked
  8570  012330  6FA5               	movwf	?_ldexp& (0+255),b
  8571  012332  0E7F               	movlw	127
  8572  012334  0100               	movlb	0	; () banked
  8573  012336  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8574  012338  0EFF               	movlw	255
  8575  01233A  D7E6               	goto	L6
  8576  01233C                     l3263:
  8577                           
  8578                           ; BSR set to: 0
  8579  01233C  0EFF               	movlw	255
  8580  01233E  0100               	movlb	0	; () banked
  8581  012340  6FA5               	movwf	?_ldexp& (0+255),b
  8582  012342  0E7F               	movlw	127
  8583  012344  0100               	movlb	0	; () banked
  8584  012346  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8585  012348  0E7F               	movlw	127
  8586  01234A  D7DE               	goto	L6
  8587  01234C                     l3267:
  8588                           
  8589                           ; BSR set to: 0
  8590  01234C  0100               	movlb	0	; () banked
  8591  01234E  35A9               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  8592  012350  31A9               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  8593  012352  0100               	movlb	0	; () banked
  8594  012354  6FAB               	movwf	(??_ldexp+1)& (0+255),b
  8595  012356  0100               	movlb	0	; () banked
  8596  012358  31A8               	rrcf	ldexp@newexp& (0+255),w,b
  8597  01235A  0100               	movlb	0	; () banked
  8598  01235C  6FAA               	movwf	??_ldexp& (0+255),b
  8599  01235E  0100               	movlb	0	; () banked
  8600  012360  51A7               	movf	(ldexp@value+2)& (0+255),w,b
  8601  012362  0100               	movlb	0	; () banked
  8602  012364  19AA               	xorwf	??_ldexp& (0+255),w,b
  8603  012366  0B80               	andlw	-128
  8604  012368  19AA               	xorwf	??_ldexp& (0+255),w,b
  8605  01236A  0100               	movlb	0	; () banked
  8606  01236C  6FA7               	movwf	(ldexp@value+2)& (0+255),b
  8607  01236E  C0A8  F0AA         	movff	ldexp@newexp,??_ldexp
  8608  012372  0E01               	movlw	1
  8609  012374  0100               	movlb	0	; () banked
  8610  012376  17AA               	andwf	??_ldexp& (0+255),f,b
  8611  012378  0100               	movlb	0	; () banked
  8612  01237A  33AA               	rrcf	??_ldexp& (0+255),f,b
  8613  01237C  33AA               	rrcf	??_ldexp& (0+255),f,b
  8614  01237E  0100               	movlb	0	; () banked
  8615  012380  51A6               	movf	(ldexp@value+1)& (0+255),w,b
  8616  012382  0100               	movlb	0	; () banked
  8617  012384  19AA               	xorwf	??_ldexp& (0+255),w,b
  8618  012386  0B7F               	andlw	-129
  8619  012388  19AA               	xorwf	??_ldexp& (0+255),w,b
  8620  01238A  0100               	movlb	0	; () banked
  8621  01238C  6FA6               	movwf	(ldexp@value+1)& (0+255),b
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626                           
  8627                           ; BSR set to: 0
  8628  01238E  C0A5  F0A5         	movff	ldexp@value,?_ldexp
  8629  012392  C0A6  F0A6         	movff	ldexp@value+1,?_ldexp+1
  8630  012396  C0A7  F0A7         	movff	ldexp@value+2,?_ldexp+2
  8631  01239A  0012               	return	
  8632  01239C                     __end_of_ldexp:
  8633                           	opt stack 0
  8634                           tblptru	equ	0xFF8
  8635                           tblptrh	equ	0xFF7
  8636                           tblptrl	equ	0xFF6
  8637                           tablat	equ	0xFF5
  8638                           prodh	equ	0xFF4
  8639                           prodl	equ	0xFF3
  8640                           intcon	equ	0xFF2
  8641                           postinc0	equ	0xFEE
  8642                           wreg	equ	0xFE8
  8643                           indf1	equ	0xFE7
  8644                           postdec1	equ	0xFE5
  8645                           fsr1h	equ	0xFE2
  8646                           fsr1l	equ	0xFE1
  8647                           indf2	equ	0xFDF
  8648                           postinc2	equ	0xFDE
  8649                           postdec2	equ	0xFDD
  8650                           fsr2h	equ	0xFDA
  8651                           fsr2l	equ	0xFD9
  8652                           status	equ	0xFD8
  8653                           
  8654 ;; *************** function _floor *****************
  8655 ;; Defined at:
  8656 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\floor.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;  x               3   67[BANK0 ] int 
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;  i               3   70[BANK0 ] int 
  8661 ;;  expon           2   73[BANK0 ] int 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;                  3   67[BANK0 ] int 
  8664 ;; Registers used:
  8665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8672 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;Total ram usage:        8 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    6
  8678 ;; This function calls:
  8679 ;;		___altoft
  8680 ;;		___ftadd
  8681 ;;		___ftge
  8682 ;;		___fttol
  8683 ;;		_frexp
  8684 ;; This function is called by:
  8685 ;;		_exp
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text29
  8690  0125AC                     __ptext29:
  8691                           	opt stack 0
  8692  0125AC                     _floor:
  8693                           	opt stack 21
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;incstack = 0
  8697  0125AC  C0A3  F060         	movff	floor@x,frexp@value
  8698  0125B0  C0A4  F061         	movff	floor@x+1,frexp@value+1
  8699  0125B4  C0A5  F062         	movff	floor@x+2,frexp@value+2
  8700  0125B8  0EA9               	movlw	low floor@expon
  8701  0125BA  0100               	movlb	0	; () banked
  8702  0125BC  6F63               	movwf	frexp@eptr& (0+255),b
  8703  0125BE  0E00               	movlw	high floor@expon
  8704  0125C0  0100               	movlb	0	; () banked
  8705  0125C2  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  8706  0125C4  EC36  F096         	call	_frexp	;wreg free
  8707  0125C8  0100               	movlb	0	; () banked
  8708  0125CA  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
  8709  0125CC  D017               	goto	l3221
  8710                           
  8711                           ; BSR set to: 0
  8712  0125CE  0100               	movlb	0	; () banked
  8713  0125D0  AFA5               	btfss	(floor@x+2)& (0+255),7,b
  8714  0125D2  D00A               	goto	l3217
  8715                           
  8716                           ; BSR set to: 0
  8717  0125D4  0E00               	movlw	0
  8718  0125D6  0100               	movlb	0	; () banked
  8719  0125D8  6FA3               	movwf	?_floor& (0+255),b
  8720  0125DA  0E80               	movlw	128
  8721  0125DC  0100               	movlb	0	; () banked
  8722  0125DE  6FA4               	movwf	(?_floor+1)& (0+255),b
  8723  0125E0  0EBF               	movlw	191
  8724  0125E2  0100               	movlb	0	; () banked
  8725  0125E4  6FA5               	movwf	(?_floor+2)& (0+255),b
  8726                           
  8727                           ; BSR set to: 0
  8728  0125E6  0012               	return	
  8729  0125E8                     l3217:
  8730                           
  8731                           ; BSR set to: 0
  8732  0125E8  0E00               	movlw	0
  8733  0125EA  0100               	movlb	0	; () banked
  8734  0125EC  6FA3               	movwf	?_floor& (0+255),b
  8735  0125EE  0E00               	movlw	0
  8736  0125F0  0100               	movlb	0	; () banked
  8737  0125F2  6FA4               	movwf	(?_floor+1)& (0+255),b
  8738  0125F4  0E00               	movlw	0
  8739  0125F6  0100               	movlb	0	; () banked
  8740  0125F8  6FA5               	movwf	(?_floor+2)& (0+255),b
  8741                           
  8742                           ; BSR set to: 0
  8743  0125FA  0012               	return	
  8744  0125FC                     l3221:
  8745                           
  8746                           ; BSR set to: 0
  8747  0125FC  0100               	movlb	0	; () banked
  8748  0125FE  51AA               	movf	(floor@expon+1)& (0+255),w,b
  8749  012600  E105               	bnz	u2720
  8750  012602  0E15               	movlw	21
  8751  012604  0100               	movlb	0	; () banked
  8752  012606  5DA9               	subwf	floor@expon& (0+255),w,b
  8753  012608  A0D8               	btfss	status,0,c
  8754  01260A  D007               	goto	l3225
  8755  01260C                     u2720:
  8756                           
  8757                           ; BSR set to: 0
  8758  01260C  C0A3  F0A3         	movff	floor@x,?_floor
  8759  012610  C0A4  F0A4         	movff	floor@x+1,?_floor+1
  8760  012614  C0A5  F0A5         	movff	floor@x+2,?_floor+2
  8761  012618  0012               	return	
  8762  01261A                     l3225:
  8763                           
  8764                           ; BSR set to: 0
  8765  01261A  C0A3  F08A         	movff	floor@x,___fttol@f1
  8766  01261E  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
  8767  012622  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
  8768  012626  EC0D  F090         	call	___fttol	;wreg free
  8769  01262A  C08A  F099         	movff	?___fttol,___altoft@c
  8770  01262E  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
  8771  012632  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
  8772  012636  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
  8773  01263A  EC87  F097         	call	___altoft	;wreg free
  8774  01263E  C099  F0A6         	movff	?___altoft,floor@i
  8775  012642  C09A  F0A7         	movff	?___altoft+1,floor@i+1
  8776  012646  C09B  F0A8         	movff	?___altoft+2,floor@i+2
  8777  01264A  C0A3  F083         	movff	floor@x,___ftge@ff1
  8778  01264E  C0A4  F084         	movff	floor@x+1,___ftge@ff1+1
  8779  012652  C0A5  F085         	movff	floor@x+2,___ftge@ff1+2
  8780  012656  C0A6  F086         	movff	floor@i,___ftge@ff2
  8781  01265A  C0A7  F087         	movff	floor@i+1,___ftge@ff2+1
  8782  01265E  C0A8  F088         	movff	floor@i+2,___ftge@ff2+2
  8783  012662  EC15  F095         	call	___ftge	;wreg free
  8784  012666  0100               	movlb	0	; () banked
  8785  012668  B0D8               	btfsc	status,0,c
  8786  01266A  D018               	goto	l1215
  8787                           
  8788                           ; BSR set to: 0
  8789  01266C  C0A6  F08D         	movff	floor@i,___ftadd@f1
  8790  012670  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
  8791  012674  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
  8792  012678  0E00               	movlw	0
  8793  01267A  0100               	movlb	0	; () banked
  8794  01267C  6F90               	movwf	___ftadd@f2& (0+255),b
  8795  01267E  0E80               	movlw	128
  8796  012680  0100               	movlb	0	; () banked
  8797  012682  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8798  012684  0EBF               	movlw	191
  8799  012686  0100               	movlb	0	; () banked
  8800  012688  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8801  01268A  ECAB  F088         	call	___ftadd	;wreg free
  8802  01268E  C08D  F0A3         	movff	?___ftadd,?_floor
  8803  012692  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
  8804  012696  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
  8805  01269A  0012               	return	
  8806  01269C                     l1215:
  8807                           
  8808                           ; BSR set to: 0
  8809  01269C  C0A6  F0A3         	movff	floor@i,?_floor
  8810  0126A0  C0A7  F0A4         	movff	floor@i+1,?_floor+1
  8811  0126A4  C0A8  F0A5         	movff	floor@i+2,?_floor+2
  8812  0126A8  0012               	return		;funcret
  8813  0126AA                     __end_of_floor:
  8814                           	opt stack 0
  8815                           tblptru	equ	0xFF8
  8816                           tblptrh	equ	0xFF7
  8817                           tblptrl	equ	0xFF6
  8818                           tablat	equ	0xFF5
  8819                           prodh	equ	0xFF4
  8820                           prodl	equ	0xFF3
  8821                           intcon	equ	0xFF2
  8822                           postinc0	equ	0xFEE
  8823                           wreg	equ	0xFE8
  8824                           indf1	equ	0xFE7
  8825                           postdec1	equ	0xFE5
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835 ;; *************** function _frexp *****************
  8836 ;; Defined at:
  8837 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;  value           3    0[BANK0 ] int 
  8840 ;;  eptr            2    3[BANK0 ] PTR int 
  8841 ;;		 -> log@exponent(2), floor@expon(2), 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  3    0[BANK0 ] PTR int 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8853 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8856 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8857 ;;Total ram usage:        7 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    4
  8860 ;; This function calls:
  8861 ;;		Nothing
  8862 ;; This function is called by:
  8863 ;;		_floor
  8864 ;;		_log
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           	psect	text30
  8869  012C6C                     __ptext30:
  8870                           	opt stack 0
  8871  012C6C                     _frexp:
  8872                           	opt stack 23
  8873                           
  8874                           ;incstack = 0
  8875  012C6C  0100               	movlb	0	; () banked
  8876  012C6E  5160               	movf	frexp@value& (0+255),w,b
  8877  012C70  0100               	movlb	0	; () banked
  8878  012C72  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  8879  012C74  0100               	movlb	0	; () banked
  8880  012C76  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  8881  012C78  A4D8               	btfss	status,2,c
  8882  012C7A  D012               	goto	l3125
  8883                           
  8884                           ; BSR set to: 0
  8885  012C7C  C063  FFD9         	movff	frexp@eptr,fsr2l
  8886  012C80  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  8887  012C84  0E00               	movlw	0
  8888  012C86  6EDE               	movwf	postinc2,c
  8889  012C88  0E00               	movlw	0
  8890  012C8A  6EDD               	movwf	postdec2,c
  8891                           
  8892                           ; BSR set to: 0
  8893  012C8C  0E00               	movlw	0
  8894  012C8E  0100               	movlb	0	; () banked
  8895  012C90  6F60               	movwf	?_frexp& (0+255),b
  8896  012C92  0E00               	movlw	0
  8897  012C94  0100               	movlb	0	; () banked
  8898  012C96  6F61               	movwf	(?_frexp+1)& (0+255),b
  8899  012C98  0E00               	movlw	0
  8900  012C9A  0100               	movlb	0	; () banked
  8901  012C9C  6F62               	movwf	(?_frexp+2)& (0+255),b
  8902                           
  8903                           ; BSR set to: 0
  8904  012C9E  0012               	return	
  8905  012CA0                     l3125:
  8906                           
  8907                           ; BSR set to: 0
  8908  012CA0  0100               	movlb	0	; () banked
  8909  012CA2  5162               	movf	(frexp@value+2)& (0+255),w,b
  8910  012CA4  0B7F               	andlw	127
  8911  012CA6  0100               	movlb	0	; () banked
  8912  012CA8  6F65               	movwf	??_frexp& (0+255),b
  8913  012CAA  6B66               	clrf	(??_frexp+1)& (0+255),b
  8914  012CAC  90D8               	bcf	status,0,c
  8915  012CAE  0100               	movlb	0	; () banked
  8916  012CB0  3765               	rlcf	??_frexp& (0+255),f,b
  8917  012CB2  3766               	rlcf	(??_frexp+1)& (0+255),f,b
  8918  012CB4  C063  FFD9         	movff	frexp@eptr,fsr2l
  8919  012CB8  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  8920  012CBC  C065  FFDE         	movff	??_frexp,postinc2
  8921  012CC0  C066  FFDD         	movff	??_frexp+1,postdec2
  8922  012CC4  0100               	movlb	0	; () banked
  8923  012CC6  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  8924  012CC8  D004               	goto	u2610
  8925  012CCA  0100               	movlb	0	; () banked
  8926  012CCC  6B65               	clrf	??_frexp& (0+255),b
  8927  012CCE  2B65               	incf	??_frexp& (0+255),f,b
  8928  012CD0  D002               	goto	u2618
  8929  012CD2                     u2610:
  8930  012CD2  0100               	movlb	0	; () banked
  8931  012CD4  6B65               	clrf	??_frexp& (0+255),b
  8932  012CD6                     u2618:
  8933  012CD6  0100               	movlb	0	; () banked
  8934  012CD8  5165               	movf	??_frexp& (0+255),w,b
  8935  012CDA  C063  FFD9         	movff	frexp@eptr,fsr2l
  8936  012CDE  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  8937  012CE2  12DE               	iorwf	postinc2,f,c
  8938  012CE4  0E00               	movlw	0
  8939  012CE6  12DD               	iorwf	postdec2,f,c
  8940                           
  8941                           ; BSR set to: 0
  8942  012CE8  C063  FFD9         	movff	frexp@eptr,fsr2l
  8943  012CEC  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  8944  012CF0  0E82               	movlw	130
  8945  012CF2  26DE               	addwf	postinc2,f,c
  8946  012CF4  0EFF               	movlw	255
  8947  012CF6  22DD               	addwfc	postdec2,f,c
  8948                           
  8949                           ; BSR set to: 0
  8950  012CF8  0100               	movlb	0	; () banked
  8951  012CFA  8162               	bsf	(frexp@value+2)& (0+255),0,b
  8952  012CFC  8362               	bsf	(frexp@value+2)& (0+255),1,b
  8953  012CFE  8562               	bsf	(frexp@value+2)& (0+255),2,b
  8954  012D00  8762               	bsf	(frexp@value+2)& (0+255),3,b
  8955  012D02  8962               	bsf	(frexp@value+2)& (0+255),4,b
  8956  012D04  8B62               	bsf	(frexp@value+2)& (0+255),5,b
  8957  012D06  9D62               	bcf	(frexp@value+2)& (0+255),6,b
  8958                           
  8959                           ; BSR set to: 0
  8960  012D08  0100               	movlb	0	; () banked
  8961  012D0A  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  8962                           
  8963                           ; BSR set to: 0
  8964  012D0C  C060  F060         	movff	frexp@value,?_frexp
  8965  012D10  C061  F061         	movff	frexp@value+1,?_frexp+1
  8966  012D14  C062  F062         	movff	frexp@value+2,?_frexp+2
  8967  012D18  0012               	return	
  8968  012D1A                     __end_of_frexp:
  8969                           	opt stack 0
  8970                           tblptru	equ	0xFF8
  8971                           tblptrh	equ	0xFF7
  8972                           tblptrl	equ	0xFF6
  8973                           tablat	equ	0xFF5
  8974                           prodh	equ	0xFF4
  8975                           prodl	equ	0xFF3
  8976                           intcon	equ	0xFF2
  8977                           postinc0	equ	0xFEE
  8978                           wreg	equ	0xFE8
  8979                           indf1	equ	0xFE7
  8980                           postdec1	equ	0xFE5
  8981                           fsr1h	equ	0xFE2
  8982                           fsr1l	equ	0xFE1
  8983                           indf2	equ	0xFDF
  8984                           postinc2	equ	0xFDE
  8985                           postdec2	equ	0xFDD
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function ___fttol *****************
  8991 ;; Defined at:
  8992 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;  f1              3   42[BANK0 ] float 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;  lval            4   52[BANK0 ] unsigned long 
  8997 ;;  exp1            1   56[BANK0 ] unsigned char 
  8998 ;;  sign1           1   51[BANK0 ] unsigned char 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  4   42[BANK0 ] long 
  9001 ;; Registers used:
  9002 ;;		wreg, status,2, status,0
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9009 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9010 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9011 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9012 ;;Total ram usage:       15 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    4
  9015 ;; This function calls:
  9016 ;;		Nothing
  9017 ;; This function is called by:
  9018 ;;		_sprintf
  9019 ;;		_pow
  9020 ;;		_exp
  9021 ;;		_floor
  9022 ;;		_calculateTemp
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           	psect	text31
  9027  01201A                     __ptext31:
  9028                           	opt stack 0
  9029  01201A                     ___fttol:
  9030                           	opt stack 24
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;incstack = 0
  9034  01201A  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  9035  01201E  0100               	movlb	0	; () banked
  9036  012020  6B8F               	clrf	(??___fttol+1)& (0+255),b
  9037  012022  6B90               	clrf	(??___fttol+2)& (0+255),b
  9038  012024  0100               	movlb	0	; () banked
  9039  012026  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9040  012028  0100               	movlb	0	; () banked
  9041  01202A  378E               	rlcf	??___fttol& (0+255),f,b
  9042  01202C  E301               	bnc	u2521
  9043  01202E  818F               	bsf	(??___fttol+1)& (0+255),0,b
  9044  012030                     u2521:
  9045  012030  0100               	movlb	0	; () banked
  9046  012032  518E               	movf	??___fttol& (0+255),w,b
  9047  012034  0100               	movlb	0	; () banked
  9048  012036  6F98               	movwf	___fttol@exp1& (0+255),b
  9049  012038  0100               	movlb	0	; () banked
  9050  01203A  5198               	movf	___fttol@exp1& (0+255),w,b
  9051  01203C  A4D8               	btfss	status,2,c
  9052  01203E  D00A               	goto	l3077
  9053                           
  9054                           ; BSR set to: 0
  9055  012040  0E00               	movlw	0
  9056  012042  0100               	movlb	0	; () banked
  9057  012044  6F8A               	movwf	?___fttol& (0+255),b
  9058  012046  0E00               	movlw	0
  9059  012048  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9060  01204A  0E00               	movlw	0
  9061  01204C  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9062  01204E  0E00               	movlw	0
  9063  012050  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9064                           
  9065                           ; BSR set to: 0
  9066  012052  0012               	return	
  9067  012054                     l3077:
  9068                           
  9069                           ; BSR set to: 0
  9070  012054  0E17               	movlw	23
  9071  012056  0100               	movlb	0	; () banked
  9072  012058  6F8E               	movwf	??___fttol& (0+255),b
  9073  01205A  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  9074  01205E  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  9075  012062  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  9076  012066  0100               	movlb	0	; () banked
  9077  012068  298E               	incf	??___fttol& (0+255),w,b
  9078  01206A  0100               	movlb	0	; () banked
  9079  01206C  6F92               	movwf	(??___fttol+4)& (0+255),b
  9080  01206E  D005               	goto	u2540
  9081  012070                     u2545:
  9082  012070  0100               	movlb	0	; () banked
  9083  012072  90D8               	bcf	status,0,c
  9084  012074  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  9085  012076  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  9086  012078  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  9087  01207A                     u2540:
  9088  01207A  0100               	movlb	0	; () banked
  9089  01207C  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  9090  01207E  D7F8               	goto	u2545
  9091  012080  0100               	movlb	0	; () banked
  9092  012082  518F               	movf	(??___fttol+1)& (0+255),w,b
  9093  012084  0100               	movlb	0	; () banked
  9094  012086  6F93               	movwf	___fttol@sign1& (0+255),b
  9095                           
  9096                           ; BSR set to: 0
  9097  012088  0100               	movlb	0	; () banked
  9098  01208A  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  9099                           
  9100                           ; BSR set to: 0
  9101  01208C  0EFF               	movlw	255
  9102  01208E  0100               	movlb	0	; () banked
  9103  012090  178A               	andwf	___fttol@f1& (0+255),f,b
  9104  012092  0EFF               	movlw	255
  9105  012094  0100               	movlb	0	; () banked
  9106  012096  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  9107  012098  0E00               	movlw	0
  9108  01209A  0100               	movlb	0	; () banked
  9109  01209C  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  9110                           
  9111                           ; BSR set to: 0
  9112  01209E  0100               	movlb	0	; () banked
  9113  0120A0  518A               	movf	___fttol@f1& (0+255),w,b
  9114  0120A2  0100               	movlb	0	; () banked
  9115  0120A4  6F94               	movwf	___fttol@lval& (0+255),b
  9116  0120A6  0100               	movlb	0	; () banked
  9117  0120A8  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  9118  0120AA  0100               	movlb	0	; () banked
  9119  0120AC  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  9120  0120AE  0100               	movlb	0	; () banked
  9121  0120B0  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  9122  0120B2  0100               	movlb	0	; () banked
  9123  0120B4  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  9124  0120B6  0100               	movlb	0	; () banked
  9125  0120B8  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  9126                           
  9127                           ; BSR set to: 0
  9128  0120BA  0E8E               	movlw	142
  9129  0120BC  0100               	movlb	0	; () banked
  9130  0120BE  5F98               	subwf	___fttol@exp1& (0+255),f,b
  9131                           
  9132                           ; BSR set to: 0
  9133  0120C0  0100               	movlb	0	; () banked
  9134  0120C2  AF98               	btfss	___fttol@exp1& (0+255),7,b
  9135  0120C4  D01A               	goto	l3099
  9136                           
  9137                           ; BSR set to: 0
  9138  0120C6  0100               	movlb	0	; () banked
  9139  0120C8  5198               	movf	___fttol@exp1& (0+255),w,b
  9140  0120CA  0A80               	xorlw	128
  9141  0120CC  0F8F               	addlw	143
  9142  0120CE  B0D8               	btfsc	status,0,c
  9143  0120D0  D00A               	goto	l3095
  9144                           
  9145                           ; BSR set to: 0
  9146  0120D2  0E00               	movlw	0
  9147  0120D4  0100               	movlb	0	; () banked
  9148  0120D6  6F8A               	movwf	?___fttol& (0+255),b
  9149  0120D8  0E00               	movlw	0
  9150  0120DA  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9151  0120DC  0E00               	movlw	0
  9152  0120DE  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9153  0120E0  0E00               	movlw	0
  9154  0120E2  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9155                           
  9156                           ; BSR set to: 0
  9157  0120E4  0012               	return	
  9158  0120E6                     l3095:
  9159                           
  9160                           ; BSR set to: 0
  9161  0120E6  0100               	movlb	0	; () banked
  9162  0120E8  90D8               	bcf	status,0,c
  9163  0120EA  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9164  0120EC  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9165  0120EE  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9166  0120F0  3394               	rrcf	___fttol@lval& (0+255),f,b
  9167                           
  9168                           ; BSR set to: 0
  9169  0120F2  0100               	movlb	0	; () banked
  9170  0120F4  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  9171  0120F6  D7F7               	goto	l3095
  9172                           
  9173                           ; BSR set to: 0
  9174  0120F8  D01B               	goto	l3109
  9175  0120FA                     l3099:
  9176                           
  9177                           ; BSR set to: 0
  9178  0120FA  0E17               	movlw	23
  9179  0120FC  0100               	movlb	0	; () banked
  9180  0120FE  6598               	cpfsgt	___fttol@exp1& (0+255),b
  9181  012100  D012               	goto	l3107
  9182                           
  9183                           ; BSR set to: 0
  9184  012102  0E00               	movlw	0
  9185  012104  0100               	movlb	0	; () banked
  9186  012106  6F8A               	movwf	?___fttol& (0+255),b
  9187  012108  0E00               	movlw	0
  9188  01210A  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9189  01210C  0E00               	movlw	0
  9190  01210E  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9191  012110  0E00               	movlw	0
  9192  012112  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9193                           
  9194                           ; BSR set to: 0
  9195  012114  0012               	return	
  9196  012116                     l3105:
  9197                           
  9198                           ; BSR set to: 0
  9199  012116  0100               	movlb	0	; () banked
  9200  012118  90D8               	bcf	status,0,c
  9201  01211A  3794               	rlcf	___fttol@lval& (0+255),f,b
  9202  01211C  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9203  01211E  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9204  012120  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9205  012122  0100               	movlb	0	; () banked
  9206  012124  0798               	decf	___fttol@exp1& (0+255),f,b
  9207  012126                     l3107:
  9208                           
  9209                           ; BSR set to: 0
  9210  012126  0100               	movlb	0	; () banked
  9211  012128  5198               	movf	___fttol@exp1& (0+255),w,b
  9212  01212A  0100               	movlb	0	; () banked
  9213  01212C  A4D8               	btfss	status,2,c
  9214  01212E  D7F3               	goto	l3105
  9215  012130                     l3109:
  9216                           
  9217                           ; BSR set to: 0
  9218  012130  0100               	movlb	0	; () banked
  9219  012132  5193               	movf	___fttol@sign1& (0+255),w,b
  9220  012134  0100               	movlb	0	; () banked
  9221  012136  B4D8               	btfsc	status,2,c
  9222  012138  D009               	goto	l3113
  9223                           
  9224                           ; BSR set to: 0
  9225  01213A  0100               	movlb	0	; () banked
  9226  01213C  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  9227  01213E  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  9228  012140  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  9229  012142  6D94               	negf	___fttol@lval& (0+255),b
  9230  012144  0E00               	movlw	0
  9231  012146  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9232  012148  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9233  01214A  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9234  01214C                     l3113:
  9235                           
  9236                           ; BSR set to: 0
  9237  01214C  C094  F08A         	movff	___fttol@lval,?___fttol
  9238  012150  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  9239  012154  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  9240  012158  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  9241  01215C  0012               	return	
  9242  01215E                     __end_of___fttol:
  9243                           	opt stack 0
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           prodh	equ	0xFF4
  9249                           prodl	equ	0xFF3
  9250                           intcon	equ	0xFF2
  9251                           postinc0	equ	0xFEE
  9252                           wreg	equ	0xFE8
  9253                           indf1	equ	0xFE7
  9254                           postdec1	equ	0xFE5
  9255                           fsr1h	equ	0xFE2
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function ___ftge *****************
  9265 ;; Defined at:
  9266 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  ff1             3   35[BANK0 ] float 
  9269 ;;  ff2             3   38[BANK0 ] float 
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;		None
  9272 ;; Return value:  Size  Location     Type
  9273 ;;		None               void
  9274 ;; Registers used:
  9275 ;;		wreg, status,2, status,0
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9281 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9283 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9284 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9285 ;;Total ram usage:        9 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    4
  9288 ;; This function calls:
  9289 ;;		Nothing
  9290 ;; This function is called by:
  9291 ;;		_digipot
  9292 ;;		_sprintf
  9293 ;;		_pow
  9294 ;;		_exp
  9295 ;;		_floor
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text32
  9300  012A2A                     __ptext32:
  9301                           	opt stack 0
  9302  012A2A                     ___ftge:
  9303                           	opt stack 24
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;incstack = 0
  9307  012A2A  0100               	movlb	0	; () banked
  9308  012A2C  AF85               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9309  012A2E  D01D               	goto	l3057
  9310                           
  9311                           ; BSR set to: 0
  9312  012A30  C083  F089         	movff	___ftge@ff1,??___ftge
  9313  012A34  C084  F08A         	movff	___ftge@ff1+1,??___ftge+1
  9314  012A38  C085  F08B         	movff	___ftge@ff1+2,??___ftge+2
  9315  012A3C  0100               	movlb	0	; () banked
  9316  012A3E  1F89               	comf	??___ftge& (0+255),f,b
  9317  012A40  1F8A               	comf	(??___ftge+1)& (0+255),f,b
  9318  012A42  1F8B               	comf	(??___ftge+2)& (0+255),f,b
  9319  012A44  2B89               	incf	??___ftge& (0+255),f,b
  9320  012A46  0E00               	movlw	0
  9321  012A48  238A               	addwfc	(??___ftge+1)& (0+255),f,b
  9322  012A4A  238B               	addwfc	(??___ftge+2)& (0+255),f,b
  9323  012A4C  0E00               	movlw	0
  9324  012A4E  0100               	movlb	0	; () banked
  9325  012A50  2589               	addwf	??___ftge& (0+255),w,b
  9326  012A52  0100               	movlb	0	; () banked
  9327  012A54  6F83               	movwf	___ftge@ff1& (0+255),b
  9328  012A56  0E00               	movlw	0
  9329  012A58  0100               	movlb	0	; () banked
  9330  012A5A  218A               	addwfc	(??___ftge+1)& (0+255),w,b
  9331  012A5C  0100               	movlb	0	; () banked
  9332  012A5E  6F84               	movwf	(___ftge@ff1+1)& (0+255),b
  9333  012A60  0E80               	movlw	128
  9334  012A62  0100               	movlb	0	; () banked
  9335  012A64  218B               	addwfc	(??___ftge+2)& (0+255),w,b
  9336  012A66  0100               	movlb	0	; () banked
  9337  012A68  6F85               	movwf	(___ftge@ff1+2)& (0+255),b
  9338  012A6A                     l3057:
  9339                           
  9340                           ; BSR set to: 0
  9341  012A6A  0100               	movlb	0	; () banked
  9342  012A6C  AF88               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9343  012A6E  D01D               	goto	l3061
  9344                           
  9345                           ; BSR set to: 0
  9346  012A70  C086  F089         	movff	___ftge@ff2,??___ftge
  9347  012A74  C087  F08A         	movff	___ftge@ff2+1,??___ftge+1
  9348  012A78  C088  F08B         	movff	___ftge@ff2+2,??___ftge+2
  9349  012A7C  0100               	movlb	0	; () banked
  9350  012A7E  1F89               	comf	??___ftge& (0+255),f,b
  9351  012A80  1F8A               	comf	(??___ftge+1)& (0+255),f,b
  9352  012A82  1F8B               	comf	(??___ftge+2)& (0+255),f,b
  9353  012A84  2B89               	incf	??___ftge& (0+255),f,b
  9354  012A86  0E00               	movlw	0
  9355  012A88  238A               	addwfc	(??___ftge+1)& (0+255),f,b
  9356  012A8A  238B               	addwfc	(??___ftge+2)& (0+255),f,b
  9357  012A8C  0E00               	movlw	0
  9358  012A8E  0100               	movlb	0	; () banked
  9359  012A90  2589               	addwf	??___ftge& (0+255),w,b
  9360  012A92  0100               	movlb	0	; () banked
  9361  012A94  6F86               	movwf	___ftge@ff2& (0+255),b
  9362  012A96  0E00               	movlw	0
  9363  012A98  0100               	movlb	0	; () banked
  9364  012A9A  218A               	addwfc	(??___ftge+1)& (0+255),w,b
  9365  012A9C  0100               	movlb	0	; () banked
  9366  012A9E  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  9367  012AA0  0E80               	movlw	128
  9368  012AA2  0100               	movlb	0	; () banked
  9369  012AA4  218B               	addwfc	(??___ftge+2)& (0+255),w,b
  9370  012AA6  0100               	movlb	0	; () banked
  9371  012AA8  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  9372  012AAA                     l3061:
  9373                           
  9374                           ; BSR set to: 0
  9375  012AAA  0E00               	movlw	0
  9376  012AAC  0100               	movlb	0	; () banked
  9377  012AAE  1B83               	xorwf	___ftge@ff1& (0+255),f,b
  9378  012AB0  0E00               	movlw	0
  9379  012AB2  0100               	movlb	0	; () banked
  9380  012AB4  1B84               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9381  012AB6  0E80               	movlw	128
  9382  012AB8  0100               	movlb	0	; () banked
  9383  012ABA  1B85               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9384                           
  9385                           ; BSR set to: 0
  9386  012ABC  0E00               	movlw	0
  9387  012ABE  0100               	movlb	0	; () banked
  9388  012AC0  1B86               	xorwf	___ftge@ff2& (0+255),f,b
  9389  012AC2  0E00               	movlw	0
  9390  012AC4  0100               	movlb	0	; () banked
  9391  012AC6  1B87               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9392  012AC8  0E80               	movlw	128
  9393  012ACA  0100               	movlb	0	; () banked
  9394  012ACC  1B88               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9395  012ACE  0100               	movlb	0	; () banked
  9396  012AD0  5186               	movf	___ftge@ff2& (0+255),w,b
  9397  012AD2  0100               	movlb	0	; () banked
  9398  012AD4  5D83               	subwf	___ftge@ff1& (0+255),w,b
  9399  012AD6  0100               	movlb	0	; () banked
  9400  012AD8  5187               	movf	(___ftge@ff2+1)& (0+255),w,b
  9401  012ADA  0100               	movlb	0	; () banked
  9402  012ADC  5984               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9403  012ADE  0100               	movlb	0	; () banked
  9404  012AE0  5188               	movf	(___ftge@ff2+2)& (0+255),w,b
  9405  012AE2  0100               	movlb	0	; () banked
  9406  012AE4  5985               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9407  012AE6  B0D8               	btfsc	status,0,c
  9408  012AE8  D002               	goto	l3067
  9409                           
  9410                           ; BSR set to: 0
  9411  012AEA  90D8               	bcf	status,0,c
  9412  012AEC  0012               	return	
  9413  012AEE                     l3067:
  9414                           
  9415                           ; BSR set to: 0
  9416  012AEE  80D8               	bsf	status,0,c
  9417                           
  9418                           ; BSR set to: 0
  9419  012AF0  0012               	return	
  9420  012AF2                     __end_of___ftge:
  9421                           	opt stack 0
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           postinc0	equ	0xFEE
  9430                           wreg	equ	0xFE8
  9431                           indf1	equ	0xFE7
  9432                           postdec1	equ	0xFE5
  9433                           fsr1h	equ	0xFE2
  9434                           fsr1l	equ	0xFE1
  9435                           indf2	equ	0xFDF
  9436                           postinc2	equ	0xFDE
  9437                           postdec2	equ	0xFDD
  9438                           fsr2h	equ	0xFDA
  9439                           fsr2l	equ	0xFD9
  9440                           status	equ	0xFD8
  9441                           
  9442 ;; *************** function ___altoft *****************
  9443 ;; Defined at:
  9444 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;  c               4   57[BANK0 ] long 
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  sign            1   66[BANK0 ] unsigned char 
  9449 ;;  exp             1   65[BANK0 ] unsigned char 
  9450 ;; Return value:  Size  Location     Type
  9451 ;;                  3   57[BANK0 ] float 
  9452 ;; Registers used:
  9453 ;;		wreg, status,2, status,0, cstack
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9459 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9460 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9461 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9462 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9463 ;;Total ram usage:       10 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    5
  9466 ;; This function calls:
  9467 ;;		___ftpack
  9468 ;; This function is called by:
  9469 ;;		_floor
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text33
  9474  012F0E                     __ptext33:
  9475                           	opt stack 0
  9476  012F0E                     ___altoft:
  9477                           	opt stack 21
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;incstack = 0
  9481  012F0E  0E00               	movlw	0
  9482  012F10  0100               	movlb	0	; () banked
  9483  012F12  6FA2               	movwf	___altoft@sign& (0+255),b
  9484  012F14  0E8E               	movlw	142
  9485  012F16  0100               	movlb	0	; () banked
  9486  012F18  6FA1               	movwf	___altoft@exp& (0+255),b
  9487                           
  9488                           ; BSR set to: 0
  9489  012F1A  0100               	movlb	0	; () banked
  9490  012F1C  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
  9491  012F1E  D015               	goto	l2929
  9492                           
  9493                           ; BSR set to: 0
  9494  012F20  0100               	movlb	0	; () banked
  9495  012F22  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
  9496  012F24  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
  9497  012F26  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
  9498  012F28  6D99               	negf	___altoft@c& (0+255),b
  9499  012F2A  0E00               	movlw	0
  9500  012F2C  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
  9501  012F2E  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
  9502  012F30  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
  9503                           
  9504                           ; BSR set to: 0
  9505  012F32  0E01               	movlw	1
  9506  012F34  0100               	movlb	0	; () banked
  9507  012F36  6FA2               	movwf	___altoft@sign& (0+255),b
  9508                           
  9509                           ; BSR set to: 0
  9510  012F38  D008               	goto	l2929
  9511  012F3A                     l2927:
  9512                           
  9513                           ; BSR set to: 0
  9514  012F3A  0100               	movlb	0	; () banked
  9515  012F3C  90D8               	bcf	status,0,c
  9516  012F3E  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
  9517  012F40  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
  9518  012F42  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
  9519  012F44  3399               	rrcf	___altoft@c& (0+255),f,b
  9520  012F46  0100               	movlb	0	; () banked
  9521  012F48  2BA1               	incf	___altoft@exp& (0+255),f,b
  9522  012F4A                     l2929:
  9523                           
  9524                           ; BSR set to: 0
  9525  012F4A  0E00               	movlw	0
  9526  012F4C  0100               	movlb	0	; () banked
  9527  012F4E  1599               	andwf	___altoft@c& (0+255),w,b
  9528  012F50  0100               	movlb	0	; () banked
  9529  012F52  6F9D               	movwf	??___altoft& (0+255),b
  9530  012F54  0E00               	movlw	0
  9531  012F56  0100               	movlb	0	; () banked
  9532  012F58  159A               	andwf	(___altoft@c+1)& (0+255),w,b
  9533  012F5A  0100               	movlb	0	; () banked
  9534  012F5C  6F9E               	movwf	(??___altoft+1)& (0+255),b
  9535  012F5E  0E00               	movlw	0
  9536  012F60  0100               	movlb	0	; () banked
  9537  012F62  159B               	andwf	(___altoft@c+2)& (0+255),w,b
  9538  012F64  0100               	movlb	0	; () banked
  9539  012F66  6F9F               	movwf	(??___altoft+2)& (0+255),b
  9540  012F68  0EFF               	movlw	255
  9541  012F6A  0100               	movlb	0	; () banked
  9542  012F6C  159C               	andwf	(___altoft@c+3)& (0+255),w,b
  9543  012F6E  0100               	movlb	0	; () banked
  9544  012F70  6FA0               	movwf	(??___altoft+3)& (0+255),b
  9545  012F72  0100               	movlb	0	; () banked
  9546  012F74  519D               	movf	??___altoft& (0+255),w,b
  9547  012F76  0100               	movlb	0	; () banked
  9548  012F78  119E               	iorwf	(??___altoft+1)& (0+255),w,b
  9549  012F7A  0100               	movlb	0	; () banked
  9550  012F7C  119F               	iorwf	(??___altoft+2)& (0+255),w,b
  9551  012F7E  0100               	movlb	0	; () banked
  9552  012F80  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
  9553  012F82  A4D8               	btfss	status,2,c
  9554  012F84  D7DA               	goto	l2927
  9555                           
  9556                           ; BSR set to: 0
  9557                           
  9558                           ; BSR set to: 0
  9559  012F86  C099  F060         	movff	___altoft@c,___ftpack@arg
  9560  012F8A  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
  9561  012F8E  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
  9562  012F92  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
  9563  012F96  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
  9564  012F9A  ECCE  F091         	call	___ftpack	;wreg free
  9565  012F9E  C060  F099         	movff	?___ftpack,?___altoft
  9566  012FA2  C061  F09A         	movff	?___ftpack+1,?___altoft+1
  9567  012FA6  C062  F09B         	movff	?___ftpack+2,?___altoft+2
  9568  012FAA  0012               	return	
  9569  012FAC                     __end_of___altoft:
  9570                           	opt stack 0
  9571                           tblptru	equ	0xFF8
  9572                           tblptrh	equ	0xFF7
  9573                           tblptrl	equ	0xFF6
  9574                           tablat	equ	0xFF5
  9575                           prodh	equ	0xFF4
  9576                           prodl	equ	0xFF3
  9577                           intcon	equ	0xFF2
  9578                           postinc0	equ	0xFEE
  9579                           wreg	equ	0xFE8
  9580                           indf1	equ	0xFE7
  9581                           postdec1	equ	0xFE5
  9582                           fsr1h	equ	0xFE2
  9583                           fsr1l	equ	0xFE1
  9584                           indf2	equ	0xFDF
  9585                           postinc2	equ	0xFDE
  9586                           postdec2	equ	0xFDD
  9587                           fsr2h	equ	0xFDA
  9588                           fsr2l	equ	0xFD9
  9589                           status	equ	0xFD8
  9590                           
  9591 ;; *************** function _eval_poly *****************
  9592 ;; Defined at:
  9593 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\evalpoly.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;  x               3   57[BANK0 ] float 
  9596 ;;  d               2   60[BANK0 ] PTR const 
  9597 ;;		 -> log@coeff(27), exp@coeff(30), 
  9598 ;;  n               2   62[BANK0 ] int 
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;  res             3   66[BANK0 ] int 
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  3   57[BANK0 ] int 
  9603 ;; Registers used:
  9604 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9605 ;; Tracked objects:
  9606 ;;		On entry : 0/0
  9607 ;;		On exit  : 0/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9610 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9611 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9613 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9614 ;;Total ram usage:       12 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:    6
  9617 ;; This function calls:
  9618 ;;		___ftadd
  9619 ;;		___ftmul
  9620 ;;		___wmul
  9621 ;; This function is called by:
  9622 ;;		_exp
  9623 ;;		_log
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           	psect	text34
  9628  0126AA                     __ptext34:
  9629                           	opt stack 0
  9630  0126AA                     _eval_poly:
  9631                           	opt stack 21
  9632                           
  9633                           ;incstack = 0
  9634  0126AA  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  9635  0126AE  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  9636  0126B2  0E00               	movlw	0
  9637  0126B4  0100               	movlb	0	; () banked
  9638  0126B6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9639  0126B8  0E03               	movlw	3
  9640  0126BA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  9641  0126BC  EC9C  F09A         	call	___wmul	;wreg free
  9642  0126C0  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  9643  0126C4  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  9644  0126C8  0100               	movlb	0	; () banked
  9645  0126CA  516E               	movf	?___wmul& (0+255),w,b
  9646  0126CC  0100               	movlb	0	; () banked
  9647  0126CE  27A0               	addwf	??_eval_poly& (0+255),f,b
  9648  0126D0  0100               	movlb	0	; () banked
  9649  0126D2  516F               	movf	(?___wmul+1)& (0+255),w,b
  9650  0126D4  0100               	movlb	0	; () banked
  9651  0126D6  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9652  0126D8  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  9653  0126DC  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  9654  0126E0                     	if	0	;tblptru may be non-zero
  9655  0126E0                     	endif
  9656  0126E0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9657  0126E0  0E00               	movlw	low (__mediumconst shr (0+16))
  9658  0126E2  6EF8               	movwf	tblptru,c
  9659  0126E4                     	endif
  9660  0126E4  0009               	tblrd		*+
  9661  0126E6  CFF5 F0A2          	movff	tablat,eval_poly@res
  9662  0126EA  0009               	tblrd		*+
  9663  0126EC  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  9664  0126F0  000A               	tblrd		*-
  9665  0126F2  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  9666  0126F6  D046               	goto	l3235
  9667  0126F8                     l3233:
  9668                           
  9669                           ; BSR set to: 0
  9670  0126F8  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
  9671  0126FC  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
  9672  012700  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
  9673  012704  C099  F074         	movff	eval_poly@x,___ftmul@f1
  9674  012708  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
  9675  01270C  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
  9676  012710  EC69  F08D         	call	___ftmul	;wreg free
  9677  012714  C074  F08D         	movff	?___ftmul,___ftadd@f1
  9678  012718  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  9679  01271C  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  9680  012720  0E00               	movlw	0
  9681  012722  0100               	movlb	0	; () banked
  9682  012724  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9683  012726  0E03               	movlw	3
  9684  012728  6F70               	movwf	___wmul@multiplicand& (0+255),b
  9685  01272A  0100               	movlb	0	; () banked
  9686  01272C  079E               	decf	eval_poly@n& (0+255),f,b
  9687  01272E  A0D8               	btfss	status,0,c
  9688  012730  079F               	decf	(eval_poly@n+1)& (0+255),f,b
  9689  012732  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  9690  012736  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  9691  01273A  EC9C  F09A         	call	___wmul	;wreg free
  9692  01273E  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  9693  012742  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  9694  012746  0100               	movlb	0	; () banked
  9695  012748  516E               	movf	?___wmul& (0+255),w,b
  9696  01274A  0100               	movlb	0	; () banked
  9697  01274C  27A0               	addwf	??_eval_poly& (0+255),f,b
  9698  01274E  0100               	movlb	0	; () banked
  9699  012750  516F               	movf	(?___wmul+1)& (0+255),w,b
  9700  012752  0100               	movlb	0	; () banked
  9701  012754  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9702  012756  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  9703  01275A  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  9704  01275E                     	if	0	;tblptru may be non-zero
  9705  01275E                     	endif
  9706  01275E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9707  01275E  0E00               	movlw	low (__mediumconst shr (0+16))
  9708  012760  6EF8               	movwf	tblptru,c
  9709  012762                     	endif
  9710  012762  0009               	tblrd		*+
  9711  012764  CFF5 F090          	movff	tablat,___ftadd@f2
  9712  012768  0009               	tblrd		*+
  9713  01276A  CFF5 F091          	movff	tablat,___ftadd@f2+1
  9714  01276E  000A               	tblrd		*-
  9715  012770  CFF5 F092          	movff	tablat,___ftadd@f2+2
  9716  012774  ECAB  F088         	call	___ftadd	;wreg free
  9717  012778  C08D  F0A2         	movff	?___ftadd,eval_poly@res
  9718  01277C  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  9719  012780  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  9720  012784                     l3235:
  9721  012784  0100               	movlb	0	; () banked
  9722  012786  519E               	movf	eval_poly@n& (0+255),w,b
  9723  012788  0100               	movlb	0	; () banked
  9724  01278A  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
  9725  01278C  A4D8               	btfss	status,2,c
  9726  01278E  D7B4               	goto	l3233
  9727                           
  9728                           ; BSR set to: 0
  9729  012790  C0A2  F099         	movff	eval_poly@res,?_eval_poly
  9730  012794  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
  9731  012798  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
  9732                           
  9733                           ; BSR set to: 0
  9734  01279C  0012               	return		;funcret
  9735  01279E                     __end_of_eval_poly:
  9736                           	opt stack 0
  9737                           tblptru	equ	0xFF8
  9738                           tblptrh	equ	0xFF7
  9739                           tblptrl	equ	0xFF6
  9740                           tablat	equ	0xFF5
  9741                           prodh	equ	0xFF4
  9742                           prodl	equ	0xFF3
  9743                           intcon	equ	0xFF2
  9744                           postinc0	equ	0xFEE
  9745                           wreg	equ	0xFE8
  9746                           indf1	equ	0xFE7
  9747                           postdec1	equ	0xFE5
  9748                           fsr1h	equ	0xFE2
  9749                           fsr1l	equ	0xFE1
  9750                           indf2	equ	0xFDF
  9751                           postinc2	equ	0xFDE
  9752                           postdec2	equ	0xFDD
  9753                           fsr2h	equ	0xFDA
  9754                           fsr2l	equ	0xFD9
  9755                           status	equ	0xFD8
  9756                           
  9757 ;; *************** function ___wmul *****************
  9758 ;; Defined at:
  9759 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;  multiplier      2   14[BANK0 ] unsigned int 
  9762 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  product         2   18[BANK0 ] unsigned int 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  2   14[BANK0 ] unsigned int 
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0, prodl, prodh
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9774 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9777 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9778 ;;Total ram usage:        6 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    4
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_fround
  9785 ;;		_scale
  9786 ;;		_sprintf
  9787 ;;		_eval_poly
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text35
  9792  013538                     __ptext35:
  9793                           	opt stack 0
  9794  013538                     ___wmul:
  9795                           	opt stack 23
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;incstack = 0
  9799  013538  0100               	movlb	0	; () banked
  9800  01353A  516E               	movf	___wmul@multiplier& (0+255),w,b
  9801  01353C  0100               	movlb	0	; () banked
  9802  01353E  0370               	mulwf	___wmul@multiplicand& (0+255),b
  9803  013540  CFF3 F072          	movff	prodl,___wmul@product
  9804  013544  CFF4 F073          	movff	prodh,___wmul@product+1
  9805  013548  0100               	movlb	0	; () banked
  9806  01354A  516E               	movf	___wmul@multiplier& (0+255),w,b
  9807  01354C  0100               	movlb	0	; () banked
  9808  01354E  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9809  013550  50F3               	movf	prodl,w,c
  9810  013552  0100               	movlb	0	; () banked
  9811  013554  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  9812  013556  0100               	movlb	0	; () banked
  9813  013558  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9814  01355A  0100               	movlb	0	; () banked
  9815  01355C  0370               	mulwf	___wmul@multiplicand& (0+255),b
  9816  01355E  50F3               	movf	prodl,w,c
  9817  013560  0100               	movlb	0	; () banked
  9818  013562  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  9819                           
  9820                           ; BSR set to: 0
  9821  013564  C072  F06E         	movff	___wmul@product,?___wmul
  9822  013568  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  9823  01356C  0012               	return	
  9824  01356E                     __end_of___wmul:
  9825                           	opt stack 0
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           postinc0	equ	0xFEE
  9834                           wreg	equ	0xFE8
  9835                           indf1	equ	0xFE7
  9836                           postdec1	equ	0xFE5
  9837                           fsr1h	equ	0xFE2
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function ___ftmul *****************
  9847 ;; Defined at:
  9848 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  f1              3   20[BANK0 ] float 
  9851 ;;  f2              3   23[BANK0 ] float 
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  9854 ;;  sign            1   34[BANK0 ] unsigned char 
  9855 ;;  cntr            1   33[BANK0 ] unsigned char 
  9856 ;;  exp             1   29[BANK0 ] unsigned char 
  9857 ;; Return value:  Size  Location     Type
  9858 ;;                  3   20[BANK0 ] float 
  9859 ;; Registers used:
  9860 ;;		wreg, status,2, status,0, cstack
  9861 ;; Tracked objects:
  9862 ;;		On entry : 0/0
  9863 ;;		On exit  : 0/0
  9864 ;;		Unchanged: 0/0
  9865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9866 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9867 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9868 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9869 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9870 ;;Total ram usage:       15 bytes
  9871 ;; Hardware stack levels used:    1
  9872 ;; Hardware stack levels required when called:    5
  9873 ;; This function calls:
  9874 ;;		___ftpack
  9875 ;; This function is called by:
  9876 ;;		_initSPI
  9877 ;;		_digipot
  9878 ;;		_adjustDigipot
  9879 ;;		_fround
  9880 ;;		_scale
  9881 ;;		_sprintf
  9882 ;;		_pow
  9883 ;;		_exp
  9884 ;;		_log
  9885 ;;		_eval_poly
  9886 ;;		_calculateTemp
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           	psect	text36
  9891  011AD2                     __ptext36:
  9892                           	opt stack 0
  9893  011AD2                     ___ftmul:
  9894                           	opt stack 22
  9895                           
  9896                           ; BSR set to: 0
  9897                           ;incstack = 0
  9898  011AD2  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  9899  011AD6  0100               	movlb	0	; () banked
  9900  011AD8  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  9901  011ADA  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  9902  011ADC  0100               	movlb	0	; () banked
  9903  011ADE  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9904  011AE0  0100               	movlb	0	; () banked
  9905  011AE2  377A               	rlcf	??___ftmul& (0+255),f,b
  9906  011AE4  E301               	bnc	u2431
  9907  011AE6  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  9908  011AE8                     u2431:
  9909  011AE8  0100               	movlb	0	; () banked
  9910  011AEA  517A               	movf	??___ftmul& (0+255),w,b
  9911  011AEC  0100               	movlb	0	; () banked
  9912  011AEE  6F7D               	movwf	___ftmul@exp& (0+255),b
  9913  011AF0  0100               	movlb	0	; () banked
  9914  011AF2  517D               	movf	___ftmul@exp& (0+255),w,b
  9915  011AF4  A4D8               	btfss	status,2,c
  9916  011AF6  D00A               	goto	l3011
  9917                           
  9918                           ; BSR set to: 0
  9919  011AF8  0E00               	movlw	0
  9920  011AFA  0100               	movlb	0	; () banked
  9921  011AFC  6F74               	movwf	?___ftmul& (0+255),b
  9922  011AFE  0E00               	movlw	0
  9923  011B00  0100               	movlb	0	; () banked
  9924  011B02  6F75               	movwf	(?___ftmul+1)& (0+255),b
  9925  011B04  0E00               	movlw	0
  9926  011B06  0100               	movlb	0	; () banked
  9927  011B08  6F76               	movwf	(?___ftmul+2)& (0+255),b
  9928                           
  9929                           ; BSR set to: 0
  9930  011B0A  0012               	return	
  9931  011B0C                     l3011:
  9932                           
  9933                           ; BSR set to: 0
  9934  011B0C  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  9935  011B10  0100               	movlb	0	; () banked
  9936  011B12  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  9937  011B14  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  9938  011B16  0100               	movlb	0	; () banked
  9939  011B18  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9940  011B1A  0100               	movlb	0	; () banked
  9941  011B1C  377A               	rlcf	??___ftmul& (0+255),f,b
  9942  011B1E  E301               	bnc	u2451
  9943  011B20  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  9944  011B22                     u2451:
  9945  011B22  0100               	movlb	0	; () banked
  9946  011B24  517A               	movf	??___ftmul& (0+255),w,b
  9947  011B26  0100               	movlb	0	; () banked
  9948  011B28  6F82               	movwf	___ftmul@sign& (0+255),b
  9949  011B2A  0100               	movlb	0	; () banked
  9950  011B2C  5182               	movf	___ftmul@sign& (0+255),w,b
  9951  011B2E  A4D8               	btfss	status,2,c
  9952  011B30  D00A               	goto	l3017
  9953                           
  9954                           ; BSR set to: 0
  9955  011B32  0E00               	movlw	0
  9956  011B34  0100               	movlb	0	; () banked
  9957  011B36  6F74               	movwf	?___ftmul& (0+255),b
  9958  011B38  0E00               	movlw	0
  9959  011B3A  0100               	movlb	0	; () banked
  9960  011B3C  6F75               	movwf	(?___ftmul+1)& (0+255),b
  9961  011B3E  0E00               	movlw	0
  9962  011B40  0100               	movlb	0	; () banked
  9963  011B42  6F76               	movwf	(?___ftmul+2)& (0+255),b
  9964                           
  9965                           ; BSR set to: 0
  9966  011B44  0012               	return	
  9967  011B46                     l3017:
  9968                           
  9969                           ; BSR set to: 0
  9970  011B46  0100               	movlb	0	; () banked
  9971  011B48  5182               	movf	___ftmul@sign& (0+255),w,b
  9972  011B4A  0F7B               	addlw	123
  9973  011B4C  0100               	movlb	0	; () banked
  9974  011B4E  277D               	addwf	___ftmul@exp& (0+255),f,b
  9975                           
  9976                           ; BSR set to: 0
  9977  011B50  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  9978  011B54  0100               	movlb	0	; () banked
  9979  011B56  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  9980  011B58  0100               	movlb	0	; () banked
  9981  011B5A  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  9982  011B5C  0E80               	movlw	128
  9983  011B5E  0100               	movlb	0	; () banked
  9984  011B60  1782               	andwf	___ftmul@sign& (0+255),f,b
  9985                           
  9986                           ; BSR set to: 0
  9987  011B62  0100               	movlb	0	; () banked
  9988  011B64  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9989                           
  9990                           ; BSR set to: 0
  9991  011B66  0100               	movlb	0	; () banked
  9992  011B68  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9993                           
  9994                           ; BSR set to: 0
  9995  011B6A  0EFF               	movlw	255
  9996  011B6C  0100               	movlb	0	; () banked
  9997  011B6E  1777               	andwf	___ftmul@f2& (0+255),f,b
  9998  011B70  0EFF               	movlw	255
  9999  011B72  0100               	movlb	0	; () banked
 10000  011B74  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10001  011B76  0E00               	movlw	0
 10002  011B78  0100               	movlb	0	; () banked
 10003  011B7A  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10004                           
 10005                           ; BSR set to: 0
 10006  011B7C  0E00               	movlw	0
 10007  011B7E  0100               	movlb	0	; () banked
 10008  011B80  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
 10009  011B82  0E00               	movlw	0
 10010  011B84  0100               	movlb	0	; () banked
 10011  011B86  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10012  011B88  0E00               	movlw	0
 10013  011B8A  0100               	movlb	0	; () banked
 10014  011B8C  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10015                           
 10016                           ; BSR set to: 0
 10017  011B8E  0E07               	movlw	7
 10018  011B90  0100               	movlb	0	; () banked
 10019  011B92  6F81               	movwf	___ftmul@cntr& (0+255),b
 10020  011B94                     l3031:
 10021                           
 10022                           ; BSR set to: 0
 10023  011B94  0100               	movlb	0	; () banked
 10024  011B96  A174               	btfss	___ftmul@f1& (0+255),0,b
 10025  011B98  D00C               	goto	l3035
 10026                           
 10027                           ; BSR set to: 0
 10028  011B9A  0100               	movlb	0	; () banked
 10029  011B9C  5177               	movf	___ftmul@f2& (0+255),w,b
 10030  011B9E  0100               	movlb	0	; () banked
 10031  011BA0  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10032  011BA2  0100               	movlb	0	; () banked
 10033  011BA4  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 10034  011BA6  0100               	movlb	0	; () banked
 10035  011BA8  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10036  011BAA  0100               	movlb	0	; () banked
 10037  011BAC  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 10038  011BAE  0100               	movlb	0	; () banked
 10039  011BB0  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10040  011BB2                     l3035:
 10041                           
 10042                           ; BSR set to: 0
 10043  011BB2  0100               	movlb	0	; () banked
 10044  011BB4  90D8               	bcf	status,0,c
 10045  011BB6  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10046  011BB8  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10047  011BBA  3374               	rrcf	___ftmul@f1& (0+255),f,b
 10048  011BBC  0100               	movlb	0	; () banked
 10049  011BBE  90D8               	bcf	status,0,c
 10050  011BC0  3777               	rlcf	___ftmul@f2& (0+255),f,b
 10051  011BC2  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10052  011BC4  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10053                           
 10054                           ; BSR set to: 0
 10055  011BC6  0100               	movlb	0	; () banked
 10056  011BC8  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 10057  011BCA  D7E4               	goto	l3031
 10058                           
 10059                           ; BSR set to: 0
 10060                           
 10061                           ; BSR set to: 0
 10062  011BCC  0E09               	movlw	9
 10063  011BCE  0100               	movlb	0	; () banked
 10064  011BD0  6F81               	movwf	___ftmul@cntr& (0+255),b
 10065  011BD2                     l3041:
 10066                           
 10067                           ; BSR set to: 0
 10068  011BD2  0100               	movlb	0	; () banked
 10069  011BD4  A174               	btfss	___ftmul@f1& (0+255),0,b
 10070  011BD6  D00C               	goto	l3045
 10071                           
 10072                           ; BSR set to: 0
 10073  011BD8  0100               	movlb	0	; () banked
 10074  011BDA  5177               	movf	___ftmul@f2& (0+255),w,b
 10075  011BDC  0100               	movlb	0	; () banked
 10076  011BDE  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10077  011BE0  0100               	movlb	0	; () banked
 10078  011BE2  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 10079  011BE4  0100               	movlb	0	; () banked
 10080  011BE6  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10081  011BE8  0100               	movlb	0	; () banked
 10082  011BEA  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 10083  011BEC  0100               	movlb	0	; () banked
 10084  011BEE  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10085  011BF0                     l3045:
 10086                           
 10087                           ; BSR set to: 0
 10088  011BF0  0100               	movlb	0	; () banked
 10089  011BF2  90D8               	bcf	status,0,c
 10090  011BF4  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10091  011BF6  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10092  011BF8  3374               	rrcf	___ftmul@f1& (0+255),f,b
 10093  011BFA  0100               	movlb	0	; () banked
 10094  011BFC  90D8               	bcf	status,0,c
 10095  011BFE  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10096  011C00  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10097  011C02  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10098                           
 10099                           ; BSR set to: 0
 10100  011C04  0100               	movlb	0	; () banked
 10101  011C06  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 10102  011C08  D7E4               	goto	l3041
 10103                           
 10104                           ; BSR set to: 0
 10105                           
 10106                           ; BSR set to: 0
 10107  011C0A  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 10108  011C0E  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10109  011C12  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10110  011C16  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
 10111  011C1A  C082  F064         	movff	___ftmul@sign,___ftpack@sign
 10112  011C1E  ECCE  F091         	call	___ftpack	;wreg free
 10113  011C22  C060  F074         	movff	?___ftpack,?___ftmul
 10114  011C26  C061  F075         	movff	?___ftpack+1,?___ftmul+1
 10115  011C2A  C062  F076         	movff	?___ftpack+2,?___ftmul+2
 10116  011C2E  0012               	return	
 10117  011C30                     __end_of___ftmul:
 10118                           	opt stack 0
 10119                           tblptru	equ	0xFF8
 10120                           tblptrh	equ	0xFF7
 10121                           tblptrl	equ	0xFF6
 10122                           tablat	equ	0xFF5
 10123                           prodh	equ	0xFF4
 10124                           prodl	equ	0xFF3
 10125                           intcon	equ	0xFF2
 10126                           postinc0	equ	0xFEE
 10127                           wreg	equ	0xFE8
 10128                           indf1	equ	0xFE7
 10129                           postdec1	equ	0xFE5
 10130                           fsr1h	equ	0xFE2
 10131                           fsr1l	equ	0xFE1
 10132                           indf2	equ	0xFDF
 10133                           postinc2	equ	0xFDE
 10134                           postdec2	equ	0xFDD
 10135                           fsr2h	equ	0xFDA
 10136                           fsr2l	equ	0xFD9
 10137                           status	equ	0xFD8
 10138                           
 10139 ;; *************** function ___ftsub *****************
 10140 ;; Defined at:
 10141 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;  f1              3   57[BANK0 ] float 
 10144 ;;  f2              3   60[BANK0 ] float 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;		None
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  3   57[BANK0 ] float 
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10156 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10159 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10160 ;;Total ram usage:        6 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    6
 10163 ;; This function calls:
 10164 ;;		___ftadd
 10165 ;; This function is called by:
 10166 ;;		_sprintf
 10167 ;;		_exp
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           	psect	text37
 10172  0133EE                     __ptext37:
 10173                           	opt stack 0
 10174  0133EE                     ___ftsub:
 10175                           	opt stack 22
 10176                           
 10177                           ;incstack = 0
 10178  0133EE  0100               	movlb	0	; () banked
 10179  0133F0  519C               	movf	___ftsub@f2& (0+255),w,b
 10180  0133F2  0100               	movlb	0	; () banked
 10181  0133F4  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10182  0133F6  0100               	movlb	0	; () banked
 10183  0133F8  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10184  0133FA  B4D8               	btfsc	status,2,c
 10185  0133FC  D009               	goto	l3187
 10186                           
 10187                           ; BSR set to: 0
 10188  0133FE  0E00               	movlw	0
 10189  013400  0100               	movlb	0	; () banked
 10190  013402  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 10191  013404  0E00               	movlw	0
 10192  013406  0100               	movlb	0	; () banked
 10193  013408  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10194  01340A  0E80               	movlw	128
 10195  01340C  0100               	movlb	0	; () banked
 10196  01340E  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10197  013410                     l3187:
 10198                           
 10199                           ; BSR set to: 0
 10200  013410  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 10201  013414  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 10202  013418  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 10203  01341C  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 10204  013420  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 10205  013424  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 10206  013428  ECAB  F088         	call	___ftadd	;wreg free
 10207  01342C  C08D  F099         	movff	?___ftadd,?___ftsub
 10208  013430  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 10209  013434  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 10210  013438  0012               	return	
 10211  01343A                     __end_of___ftsub:
 10212                           	opt stack 0
 10213                           tblptru	equ	0xFF8
 10214                           tblptrh	equ	0xFF7
 10215                           tblptrl	equ	0xFF6
 10216                           tablat	equ	0xFF5
 10217                           prodh	equ	0xFF4
 10218                           prodl	equ	0xFF3
 10219                           intcon	equ	0xFF2
 10220                           postinc0	equ	0xFEE
 10221                           wreg	equ	0xFE8
 10222                           indf1	equ	0xFE7
 10223                           postdec1	equ	0xFE5
 10224                           fsr1h	equ	0xFE2
 10225                           fsr1l	equ	0xFE1
 10226                           indf2	equ	0xFDF
 10227                           postinc2	equ	0xFDE
 10228                           postdec2	equ	0xFDD
 10229                           fsr2h	equ	0xFDA
 10230                           fsr2l	equ	0xFD9
 10231                           status	equ	0xFD8
 10232                           
 10233 ;; *************** function ___ftadd *****************
 10234 ;; Defined at:
 10235 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;  f1              3   45[BANK0 ] float 
 10238 ;;  f2              3   48[BANK0 ] float 
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  exp1            1   56[BANK0 ] unsigned char 
 10241 ;;  exp2            1   55[BANK0 ] unsigned char 
 10242 ;;  sign            1   54[BANK0 ] unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  3   45[BANK0 ] float 
 10245 ;; Registers used:
 10246 ;;		wreg, status,2, status,0, cstack
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10252 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10253 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10254 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10255 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10256 ;;Total ram usage:       12 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    5
 10259 ;; This function calls:
 10260 ;;		___ftpack
 10261 ;; This function is called by:
 10262 ;;		_initSPI
 10263 ;;		_adjustDigipot
 10264 ;;		_sprintf
 10265 ;;		___ftsub
 10266 ;;		_floor
 10267 ;;		_log
 10268 ;;		_eval_poly
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text38
 10273  011156                     __ptext38:
 10274                           	opt stack 0
 10275  011156                     ___ftadd:
 10276                           	opt stack 22
 10277                           
 10278                           ;incstack = 0
 10279  011156  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 10280  01115A  0100               	movlb	0	; () banked
 10281  01115C  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10282  01115E  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10283  011160  0100               	movlb	0	; () banked
 10284  011162  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10285  011164  0100               	movlb	0	; () banked
 10286  011166  3793               	rlcf	??___ftadd& (0+255),f,b
 10287  011168  E301               	bnc	u2221
 10288  01116A  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10289  01116C                     u2221:
 10290  01116C  0100               	movlb	0	; () banked
 10291  01116E  5193               	movf	??___ftadd& (0+255),w,b
 10292  011170  0100               	movlb	0	; () banked
 10293  011172  6F98               	movwf	___ftadd@exp1& (0+255),b
 10294  011174  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 10295  011178  0100               	movlb	0	; () banked
 10296  01117A  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10297  01117C  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10298  01117E  0100               	movlb	0	; () banked
 10299  011180  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10300  011182  0100               	movlb	0	; () banked
 10301  011184  3793               	rlcf	??___ftadd& (0+255),f,b
 10302  011186  E301               	bnc	u2231
 10303  011188  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10304  01118A                     u2231:
 10305  01118A  0100               	movlb	0	; () banked
 10306  01118C  5193               	movf	??___ftadd& (0+255),w,b
 10307  01118E  0100               	movlb	0	; () banked
 10308  011190  6F97               	movwf	___ftadd@exp2& (0+255),b
 10309                           
 10310                           ; BSR set to: 0
 10311  011192  0100               	movlb	0	; () banked
 10312  011194  5198               	movf	___ftadd@exp1& (0+255),w,b
 10313  011196  0100               	movlb	0	; () banked
 10314  011198  B4D8               	btfsc	status,2,c
 10315  01119A  D011               	goto	l833
 10316                           
 10317                           ; BSR set to: 0
 10318  01119C  0100               	movlb	0	; () banked
 10319  01119E  5197               	movf	___ftadd@exp2& (0+255),w,b
 10320  0111A0  0100               	movlb	0	; () banked
 10321  0111A2  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10322  0111A4  B0D8               	btfsc	status,0,c
 10323  0111A6  D012               	goto	l2943
 10324                           
 10325                           ; BSR set to: 0
 10326  0111A8  0100               	movlb	0	; () banked
 10327  0111AA  5198               	movf	___ftadd@exp1& (0+255),w,b
 10328  0111AC  0800               	sublw	0
 10329  0111AE  0100               	movlb	0	; () banked
 10330  0111B0  2597               	addwf	___ftadd@exp2& (0+255),w,b
 10331  0111B2  0100               	movlb	0	; () banked
 10332  0111B4  6F93               	movwf	??___ftadd& (0+255),b
 10333  0111B6  0E18               	movlw	24
 10334  0111B8  0100               	movlb	0	; () banked
 10335  0111BA  6593               	cpfsgt	??___ftadd& (0+255),b
 10336  0111BC  D007               	goto	l2943
 10337  0111BE                     l833:
 10338                           
 10339                           ; BSR set to: 0
 10340  0111BE  C090  F08D         	movff	___ftadd@f2,?___ftadd
 10341  0111C2  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 10342  0111C6  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 10343  0111CA  0012               	return	
 10344  0111CC                     l2943:
 10345                           
 10346                           ; BSR set to: 0
 10347  0111CC  0100               	movlb	0	; () banked
 10348  0111CE  5197               	movf	___ftadd@exp2& (0+255),w,b
 10349  0111D0  0100               	movlb	0	; () banked
 10350  0111D2  B4D8               	btfsc	status,2,c
 10351  0111D4  D011               	goto	l837
 10352                           
 10353                           ; BSR set to: 0
 10354  0111D6  0100               	movlb	0	; () banked
 10355  0111D8  5198               	movf	___ftadd@exp1& (0+255),w,b
 10356  0111DA  0100               	movlb	0	; () banked
 10357  0111DC  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10358  0111DE  B0D8               	btfsc	status,0,c
 10359  0111E0  D012               	goto	l2949
 10360                           
 10361                           ; BSR set to: 0
 10362  0111E2  0100               	movlb	0	; () banked
 10363  0111E4  5197               	movf	___ftadd@exp2& (0+255),w,b
 10364  0111E6  0800               	sublw	0
 10365  0111E8  0100               	movlb	0	; () banked
 10366  0111EA  2598               	addwf	___ftadd@exp1& (0+255),w,b
 10367  0111EC  0100               	movlb	0	; () banked
 10368  0111EE  6F93               	movwf	??___ftadd& (0+255),b
 10369  0111F0  0E18               	movlw	24
 10370  0111F2  0100               	movlb	0	; () banked
 10371  0111F4  6593               	cpfsgt	??___ftadd& (0+255),b
 10372  0111F6  D007               	goto	l2949
 10373  0111F8                     l837:
 10374                           
 10375                           ; BSR set to: 0
 10376  0111F8  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 10377  0111FC  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 10378  011200  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 10379  011204  0012               	return	
 10380  011206                     l2949:
 10381                           
 10382                           ; BSR set to: 0
 10383  011206  0E06               	movlw	6
 10384  011208  0100               	movlb	0	; () banked
 10385  01120A  6F96               	movwf	___ftadd@sign& (0+255),b
 10386                           
 10387                           ; BSR set to: 0
 10388  01120C  0100               	movlb	0	; () banked
 10389  01120E  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10390  011210  D002               	goto	l2955
 10391                           
 10392                           ; BSR set to: 0
 10393  011212  0100               	movlb	0	; () banked
 10394  011214  8F96               	bsf	___ftadd@sign& (0+255),7,b
 10395  011216                     l2955:
 10396                           
 10397                           ; BSR set to: 0
 10398  011216  0100               	movlb	0	; () banked
 10399  011218  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10400  01121A  D002               	goto	l839
 10401                           
 10402                           ; BSR set to: 0
 10403  01121C  0100               	movlb	0	; () banked
 10404  01121E  8D96               	bsf	___ftadd@sign& (0+255),6,b
 10405  011220                     l839:
 10406                           
 10407                           ; BSR set to: 0
 10408  011220  0100               	movlb	0	; () banked
 10409  011222  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10410                           
 10411                           ; BSR set to: 0
 10412  011224  0EFF               	movlw	255
 10413  011226  0100               	movlb	0	; () banked
 10414  011228  178D               	andwf	___ftadd@f1& (0+255),f,b
 10415  01122A  0EFF               	movlw	255
 10416  01122C  0100               	movlb	0	; () banked
 10417  01122E  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10418  011230  0E00               	movlw	0
 10419  011232  0100               	movlb	0	; () banked
 10420  011234  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10421  011236  0100               	movlb	0	; () banked
 10422  011238  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10423                           
 10424                           ; BSR set to: 0
 10425  01123A  0EFF               	movlw	255
 10426  01123C  0100               	movlb	0	; () banked
 10427  01123E  1790               	andwf	___ftadd@f2& (0+255),f,b
 10428  011240  0EFF               	movlw	255
 10429  011242  0100               	movlb	0	; () banked
 10430  011244  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10431  011246  0E00               	movlw	0
 10432  011248  0100               	movlb	0	; () banked
 10433  01124A  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10434                           
 10435                           ; BSR set to: 0
 10436  01124C  0100               	movlb	0	; () banked
 10437  01124E  5197               	movf	___ftadd@exp2& (0+255),w,b
 10438  011250  0100               	movlb	0	; () banked
 10439  011252  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10440  011254  B0D8               	btfsc	status,0,c
 10441  011256  D025               	goto	l2975
 10442  011258                     l2965:
 10443                           
 10444                           ; BSR set to: 0
 10445  011258  0100               	movlb	0	; () banked
 10446  01125A  90D8               	bcf	status,0,c
 10447  01125C  3790               	rlcf	___ftadd@f2& (0+255),f,b
 10448  01125E  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10449  011260  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10450  011262  0100               	movlb	0	; () banked
 10451  011264  0797               	decf	___ftadd@exp2& (0+255),f,b
 10452                           
 10453                           ; BSR set to: 0
 10454  011266  0100               	movlb	0	; () banked
 10455  011268  5198               	movf	___ftadd@exp1& (0+255),w,b
 10456  01126A  0100               	movlb	0	; () banked
 10457  01126C  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 10458  01126E  B4D8               	btfsc	status,2,c
 10459  011270  D011               	goto	l2973
 10460                           
 10461                           ; BSR set to: 0
 10462  011272  0100               	movlb	0	; () banked
 10463  011274  0796               	decf	___ftadd@sign& (0+255),f,b
 10464  011276  C096  F093         	movff	___ftadd@sign,??___ftadd
 10465  01127A  0E07               	movlw	7
 10466  01127C  0100               	movlb	0	; () banked
 10467  01127E  1793               	andwf	??___ftadd& (0+255),f,b
 10468  011280  B4D8               	btfsc	status,2,c
 10469  011282  D008               	goto	l2973
 10470  011284  D7E9               	goto	l2965
 10471  011286                     l2971:
 10472                           
 10473                           ; BSR set to: 0
 10474  011286  0100               	movlb	0	; () banked
 10475  011288  90D8               	bcf	status,0,c
 10476  01128A  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10477  01128C  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10478  01128E  338D               	rrcf	___ftadd@f1& (0+255),f,b
 10479  011290  0100               	movlb	0	; () banked
 10480  011292  2B98               	incf	___ftadd@exp1& (0+255),f,b
 10481  011294                     l2973:
 10482                           
 10483                           ; BSR set to: 0
 10484  011294  0100               	movlb	0	; () banked
 10485  011296  5197               	movf	___ftadd@exp2& (0+255),w,b
 10486  011298  0100               	movlb	0	; () banked
 10487  01129A  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10488  01129C  B4D8               	btfsc	status,2,c
 10489  01129E  D02B               	goto	l848
 10490  0112A0  D7F2               	goto	l2971
 10491  0112A2                     l2975:
 10492                           
 10493                           ; BSR set to: 0
 10494  0112A2  0100               	movlb	0	; () banked
 10495  0112A4  5198               	movf	___ftadd@exp1& (0+255),w,b
 10496  0112A6  0100               	movlb	0	; () banked
 10497  0112A8  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10498  0112AA  B0D8               	btfsc	status,0,c
 10499  0112AC  D024               	goto	l848
 10500  0112AE                     l2977:
 10501                           
 10502                           ; BSR set to: 0
 10503  0112AE  0100               	movlb	0	; () banked
 10504  0112B0  90D8               	bcf	status,0,c
 10505  0112B2  378D               	rlcf	___ftadd@f1& (0+255),f,b
 10506  0112B4  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10507  0112B6  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10508  0112B8  0100               	movlb	0	; () banked
 10509  0112BA  0798               	decf	___ftadd@exp1& (0+255),f,b
 10510                           
 10511                           ; BSR set to: 0
 10512  0112BC  0100               	movlb	0	; () banked
 10513  0112BE  5198               	movf	___ftadd@exp1& (0+255),w,b
 10514  0112C0  0100               	movlb	0	; () banked
 10515  0112C2  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 10516  0112C4  B4D8               	btfsc	status,2,c
 10517  0112C6  D011               	goto	l2985
 10518                           
 10519                           ; BSR set to: 0
 10520  0112C8  0100               	movlb	0	; () banked
 10521  0112CA  0796               	decf	___ftadd@sign& (0+255),f,b
 10522  0112CC  C096  F093         	movff	___ftadd@sign,??___ftadd
 10523  0112D0  0E07               	movlw	7
 10524  0112D2  0100               	movlb	0	; () banked
 10525  0112D4  1793               	andwf	??___ftadd& (0+255),f,b
 10526  0112D6  B4D8               	btfsc	status,2,c
 10527  0112D8  D008               	goto	l2985
 10528  0112DA  D7E9               	goto	l2977
 10529  0112DC                     l2983:
 10530                           
 10531                           ; BSR set to: 0
 10532  0112DC  0100               	movlb	0	; () banked
 10533  0112DE  90D8               	bcf	status,0,c
 10534  0112E0  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10535  0112E2  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10536  0112E4  3390               	rrcf	___ftadd@f2& (0+255),f,b
 10537  0112E6  0100               	movlb	0	; () banked
 10538  0112E8  2B97               	incf	___ftadd@exp2& (0+255),f,b
 10539  0112EA                     l2985:
 10540                           
 10541                           ; BSR set to: 0
 10542  0112EA  0100               	movlb	0	; () banked
 10543  0112EC  5197               	movf	___ftadd@exp2& (0+255),w,b
 10544  0112EE  0100               	movlb	0	; () banked
 10545  0112F0  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10546  0112F2  A4D8               	btfss	status,2,c
 10547  0112F4  D7F3               	goto	l2983
 10548  0112F6                     l848:
 10549                           
 10550                           ; BSR set to: 0
 10551  0112F6  0100               	movlb	0	; () banked
 10552  0112F8  AF96               	btfss	___ftadd@sign& (0+255),7,b
 10553  0112FA  D012               	goto	l857
 10554                           
 10555                           ; BSR set to: 0
 10556  0112FC  0EFF               	movlw	255
 10557  0112FE  0100               	movlb	0	; () banked
 10558  011300  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 10559  011302  0EFF               	movlw	255
 10560  011304  0100               	movlb	0	; () banked
 10561  011306  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10562  011308  0EFF               	movlw	255
 10563  01130A  0100               	movlb	0	; () banked
 10564  01130C  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10565  01130E  0E01               	movlw	1
 10566  011310  0100               	movlb	0	; () banked
 10567  011312  278D               	addwf	___ftadd@f1& (0+255),f,b
 10568  011314  0E00               	movlw	0
 10569  011316  0100               	movlb	0	; () banked
 10570  011318  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10571  01131A  0E00               	movlw	0
 10572  01131C  0100               	movlb	0	; () banked
 10573  01131E  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10574  011320                     l857:
 10575                           
 10576                           ; BSR set to: 0
 10577  011320  0100               	movlb	0	; () banked
 10578  011322  AD96               	btfss	___ftadd@sign& (0+255),6,b
 10579  011324  D012               	goto	l2991
 10580                           
 10581                           ; BSR set to: 0
 10582  011326  0EFF               	movlw	255
 10583  011328  0100               	movlb	0	; () banked
 10584  01132A  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10585  01132C  0EFF               	movlw	255
 10586  01132E  0100               	movlb	0	; () banked
 10587  011330  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10588  011332  0EFF               	movlw	255
 10589  011334  0100               	movlb	0	; () banked
 10590  011336  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10591  011338  0E01               	movlw	1
 10592  01133A  0100               	movlb	0	; () banked
 10593  01133C  2790               	addwf	___ftadd@f2& (0+255),f,b
 10594  01133E  0E00               	movlw	0
 10595  011340  0100               	movlb	0	; () banked
 10596  011342  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10597  011344  0E00               	movlw	0
 10598  011346  0100               	movlb	0	; () banked
 10599  011348  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10600  01134A                     l2991:
 10601                           
 10602                           ; BSR set to: 0
 10603  01134A  0E00               	movlw	0
 10604  01134C  0100               	movlb	0	; () banked
 10605  01134E  6F96               	movwf	___ftadd@sign& (0+255),b
 10606                           
 10607                           ; BSR set to: 0
 10608  011350  0100               	movlb	0	; () banked
 10609  011352  518D               	movf	___ftadd@f1& (0+255),w,b
 10610  011354  0100               	movlb	0	; () banked
 10611  011356  2790               	addwf	___ftadd@f2& (0+255),f,b
 10612  011358  0100               	movlb	0	; () banked
 10613  01135A  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 10614  01135C  0100               	movlb	0	; () banked
 10615  01135E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10616  011360  0100               	movlb	0	; () banked
 10617  011362  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 10618  011364  0100               	movlb	0	; () banked
 10619  011366  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10620                           
 10621                           ; BSR set to: 0
 10622  011368  0100               	movlb	0	; () banked
 10623  01136A  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10624  01136C  D015               	goto	l3001
 10625                           
 10626                           ; BSR set to: 0
 10627  01136E  0EFF               	movlw	255
 10628  011370  0100               	movlb	0	; () banked
 10629  011372  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10630  011374  0EFF               	movlw	255
 10631  011376  0100               	movlb	0	; () banked
 10632  011378  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10633  01137A  0EFF               	movlw	255
 10634  01137C  0100               	movlb	0	; () banked
 10635  01137E  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10636  011380  0E01               	movlw	1
 10637  011382  0100               	movlb	0	; () banked
 10638  011384  2790               	addwf	___ftadd@f2& (0+255),f,b
 10639  011386  0E00               	movlw	0
 10640  011388  0100               	movlb	0	; () banked
 10641  01138A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10642  01138C  0E00               	movlw	0
 10643  01138E  0100               	movlb	0	; () banked
 10644  011390  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10645                           
 10646                           ; BSR set to: 0
 10647  011392  0E01               	movlw	1
 10648  011394  0100               	movlb	0	; () banked
 10649  011396  6F96               	movwf	___ftadd@sign& (0+255),b
 10650  011398                     l3001:
 10651                           
 10652                           ; BSR set to: 0
 10653  011398  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 10654  01139C  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10655  0113A0  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10656  0113A4  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 10657  0113A8  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 10658  0113AC  ECCE  F091         	call	___ftpack	;wreg free
 10659  0113B0  C060  F08D         	movff	?___ftpack,?___ftadd
 10660  0113B4  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 10661  0113B8  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 10662  0113BC  0012               	return	
 10663  0113BE                     __end_of___ftadd:
 10664                           	opt stack 0
 10665                           tblptru	equ	0xFF8
 10666                           tblptrh	equ	0xFF7
 10667                           tblptrl	equ	0xFF6
 10668                           tablat	equ	0xFF5
 10669                           prodh	equ	0xFF4
 10670                           prodl	equ	0xFF3
 10671                           intcon	equ	0xFF2
 10672                           postinc0	equ	0xFEE
 10673                           wreg	equ	0xFE8
 10674                           indf1	equ	0xFE7
 10675                           postdec1	equ	0xFE5
 10676                           fsr1h	equ	0xFE2
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           postdec2	equ	0xFDD
 10681                           fsr2h	equ	0xFDA
 10682                           fsr2l	equ	0xFD9
 10683                           status	equ	0xFD8
 10684                           
 10685 ;; *************** function ___ftneg *****************
 10686 ;; Defined at:
 10687 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;  f1              3    0[BANK0 ] float 
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;		None
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  3    0[BANK0 ] float 
 10694 ;; Registers used:
 10695 ;;		wreg, status,2, status,0
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10701 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10704 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10705 ;;Total ram usage:        3 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    4
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_sprintf
 10712 ;;		_pow
 10713 ;;		_exp
 10714 ;; This function uses a non-reentrant model
 10715 ;;
 10716                           
 10717                           	psect	text39
 10718  01356E                     __ptext39:
 10719                           	opt stack 0
 10720  01356E                     ___ftneg:
 10721                           	opt stack 24
 10722                           
 10723                           ;incstack = 0
 10724  01356E  0100               	movlb	0	; () banked
 10725  013570  5160               	movf	___ftneg@f1& (0+255),w,b
 10726  013572  0100               	movlb	0	; () banked
 10727  013574  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10728  013576  0100               	movlb	0	; () banked
 10729  013578  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10730  01357A  B4D8               	btfsc	status,2,c
 10731  01357C  D009               	goto	l907
 10732                           
 10733                           ; BSR set to: 0
 10734  01357E  0E00               	movlw	0
 10735  013580  0100               	movlb	0	; () banked
 10736  013582  1B60               	xorwf	___ftneg@f1& (0+255),f,b
 10737  013584  0E00               	movlw	0
 10738  013586  0100               	movlb	0	; () banked
 10739  013588  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10740  01358A  0E80               	movlw	128
 10741  01358C  0100               	movlb	0	; () banked
 10742  01358E  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10743  013590                     l907:
 10744                           
 10745                           ; BSR set to: 0
 10746  013590  C060  F060         	movff	___ftneg@f1,?___ftneg
 10747  013594  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 10748  013598  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 10749                           
 10750                           ; BSR set to: 0
 10751  01359C  0012               	return		;funcret
 10752  01359E                     __end_of___ftneg:
 10753                           	opt stack 0
 10754                           tblptru	equ	0xFF8
 10755                           tblptrh	equ	0xFF7
 10756                           tblptrl	equ	0xFF6
 10757                           tablat	equ	0xFF5
 10758                           prodh	equ	0xFF4
 10759                           prodl	equ	0xFF3
 10760                           intcon	equ	0xFF2
 10761                           postinc0	equ	0xFEE
 10762                           wreg	equ	0xFE8
 10763                           indf1	equ	0xFE7
 10764                           postdec1	equ	0xFE5
 10765                           fsr1h	equ	0xFE2
 10766                           fsr1l	equ	0xFE1
 10767                           indf2	equ	0xFDF
 10768                           postinc2	equ	0xFDE
 10769                           postdec2	equ	0xFDD
 10770                           fsr2h	equ	0xFDA
 10771                           fsr2l	equ	0xFD9
 10772                           status	equ	0xFD8
 10773                           
 10774 ;; *************** function ___ftdiv *****************
 10775 ;; Defined at:
 10776 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;  f1              3   57[BANK0 ] float 
 10779 ;;  f2              3   60[BANK0 ] float 
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;  f3              3   67[BANK0 ] float 
 10782 ;;  sign            1   71[BANK0 ] unsigned char 
 10783 ;;  exp             1   70[BANK0 ] unsigned char 
 10784 ;;  cntr            1   66[BANK0 ] unsigned char 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  3   57[BANK0 ] float 
 10787 ;; Registers used:
 10788 ;;		wreg, status,2, status,0, cstack
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10794 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10795 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10796 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10797 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10798 ;;Total ram usage:       15 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    5
 10801 ;; This function calls:
 10802 ;;		___ftpack
 10803 ;; This function is called by:
 10804 ;;		_initSPI
 10805 ;;		_adjustDigipot
 10806 ;;		_exp
 10807 ;;		_calculateTemp
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           	psect	text40
 10812  011ECE                     __ptext40:
 10813                           	opt stack 0
 10814  011ECE                     ___ftdiv:
 10815                           	opt stack 22
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;incstack = 0
 10819  011ECE  C09B  F09F         	movff	___ftdiv@f1+2,??___ftdiv
 10820  011ED2  0100               	movlb	0	; () banked
 10821  011ED4  6BA0               	clrf	(??___ftdiv+1)& (0+255),b
 10822  011ED6  6BA1               	clrf	(??___ftdiv+2)& (0+255),b
 10823  011ED8  0100               	movlb	0	; () banked
 10824  011EDA  359A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10825  011EDC  0100               	movlb	0	; () banked
 10826  011EDE  379F               	rlcf	??___ftdiv& (0+255),f,b
 10827  011EE0  E301               	bnc	u2621
 10828  011EE2  81A0               	bsf	(??___ftdiv+1)& (0+255),0,b
 10829  011EE4                     u2621:
 10830  011EE4  0100               	movlb	0	; () banked
 10831  011EE6  519F               	movf	??___ftdiv& (0+255),w,b
 10832  011EE8  0100               	movlb	0	; () banked
 10833  011EEA  6FA6               	movwf	___ftdiv@exp& (0+255),b
 10834  011EEC  0100               	movlb	0	; () banked
 10835  011EEE  51A6               	movf	___ftdiv@exp& (0+255),w,b
 10836  011EF0  A4D8               	btfss	status,2,c
 10837  011EF2  D00A               	goto	l3143
 10838                           
 10839                           ; BSR set to: 0
 10840  011EF4  0E00               	movlw	0
 10841  011EF6  0100               	movlb	0	; () banked
 10842  011EF8  6F99               	movwf	?___ftdiv& (0+255),b
 10843  011EFA  0E00               	movlw	0
 10844  011EFC  0100               	movlb	0	; () banked
 10845  011EFE  6F9A               	movwf	(?___ftdiv+1)& (0+255),b
 10846  011F00  0E00               	movlw	0
 10847  011F02  0100               	movlb	0	; () banked
 10848  011F04  6F9B               	movwf	(?___ftdiv+2)& (0+255),b
 10849                           
 10850                           ; BSR set to: 0
 10851  011F06  0012               	return	
 10852  011F08                     l3143:
 10853                           
 10854                           ; BSR set to: 0
 10855  011F08  C09E  F09F         	movff	___ftdiv@f2+2,??___ftdiv
 10856  011F0C  0100               	movlb	0	; () banked
 10857  011F0E  6BA0               	clrf	(??___ftdiv+1)& (0+255),b
 10858  011F10  6BA1               	clrf	(??___ftdiv+2)& (0+255),b
 10859  011F12  0100               	movlb	0	; () banked
 10860  011F14  359D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10861  011F16  0100               	movlb	0	; () banked
 10862  011F18  379F               	rlcf	??___ftdiv& (0+255),f,b
 10863  011F1A  E301               	bnc	u2641
 10864  011F1C  81A0               	bsf	(??___ftdiv+1)& (0+255),0,b
 10865  011F1E                     u2641:
 10866  011F1E  0100               	movlb	0	; () banked
 10867  011F20  519F               	movf	??___ftdiv& (0+255),w,b
 10868  011F22  0100               	movlb	0	; () banked
 10869  011F24  6FA7               	movwf	___ftdiv@sign& (0+255),b
 10870  011F26  0100               	movlb	0	; () banked
 10871  011F28  51A7               	movf	___ftdiv@sign& (0+255),w,b
 10872  011F2A  A4D8               	btfss	status,2,c
 10873  011F2C  D00A               	goto	l3149
 10874                           
 10875                           ; BSR set to: 0
 10876  011F2E  0E00               	movlw	0
 10877  011F30  0100               	movlb	0	; () banked
 10878  011F32  6F99               	movwf	?___ftdiv& (0+255),b
 10879  011F34  0E00               	movlw	0
 10880  011F36  0100               	movlb	0	; () banked
 10881  011F38  6F9A               	movwf	(?___ftdiv+1)& (0+255),b
 10882  011F3A  0E00               	movlw	0
 10883  011F3C  0100               	movlb	0	; () banked
 10884  011F3E  6F9B               	movwf	(?___ftdiv+2)& (0+255),b
 10885                           
 10886                           ; BSR set to: 0
 10887  011F40  0012               	return	
 10888  011F42                     l3149:
 10889                           
 10890                           ; BSR set to: 0
 10891  011F42  0E00               	movlw	0
 10892  011F44  0100               	movlb	0	; () banked
 10893  011F46  6FA3               	movwf	___ftdiv@f3& (0+255),b
 10894  011F48  0E00               	movlw	0
 10895  011F4A  0100               	movlb	0	; () banked
 10896  011F4C  6FA4               	movwf	(___ftdiv@f3+1)& (0+255),b
 10897  011F4E  0E00               	movlw	0
 10898  011F50  0100               	movlb	0	; () banked
 10899  011F52  6FA5               	movwf	(___ftdiv@f3+2)& (0+255),b
 10900                           
 10901                           ; BSR set to: 0
 10902  011F54  0100               	movlb	0	; () banked
 10903  011F56  51A7               	movf	___ftdiv@sign& (0+255),w,b
 10904  011F58  0F89               	addlw	137
 10905  011F5A  0100               	movlb	0	; () banked
 10906  011F5C  5FA6               	subwf	___ftdiv@exp& (0+255),f,b
 10907                           
 10908                           ; BSR set to: 0
 10909  011F5E  C09B  F0A7         	movff	___ftdiv@f1+2,___ftdiv@sign
 10910                           
 10911                           ; BSR set to: 0
 10912  011F62  0100               	movlb	0	; () banked
 10913  011F64  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10914  011F66  0100               	movlb	0	; () banked
 10915  011F68  1BA7               	xorwf	___ftdiv@sign& (0+255),f,b
 10916                           
 10917                           ; BSR set to: 0
 10918  011F6A  0E80               	movlw	128
 10919  011F6C  0100               	movlb	0	; () banked
 10920  011F6E  17A7               	andwf	___ftdiv@sign& (0+255),f,b
 10921                           
 10922                           ; BSR set to: 0
 10923  011F70  0100               	movlb	0	; () banked
 10924  011F72  8F9A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10925                           
 10926                           ; BSR set to: 0
 10927  011F74  0EFF               	movlw	255
 10928  011F76  0100               	movlb	0	; () banked
 10929  011F78  1799               	andwf	___ftdiv@f1& (0+255),f,b
 10930  011F7A  0EFF               	movlw	255
 10931  011F7C  0100               	movlb	0	; () banked
 10932  011F7E  179A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10933  011F80  0E00               	movlw	0
 10934  011F82  0100               	movlb	0	; () banked
 10935  011F84  179B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10936                           
 10937                           ; BSR set to: 0
 10938  011F86  0100               	movlb	0	; () banked
 10939  011F88  8F9D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10940                           
 10941                           ; BSR set to: 0
 10942  011F8A  0EFF               	movlw	255
 10943  011F8C  0100               	movlb	0	; () banked
 10944  011F8E  179C               	andwf	___ftdiv@f2& (0+255),f,b
 10945  011F90  0EFF               	movlw	255
 10946  011F92  0100               	movlb	0	; () banked
 10947  011F94  179D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10948  011F96  0E00               	movlw	0
 10949  011F98  0100               	movlb	0	; () banked
 10950  011F9A  179E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10951                           
 10952                           ; BSR set to: 0
 10953  011F9C  0E18               	movlw	24
 10954  011F9E  0100               	movlb	0	; () banked
 10955  011FA0  6FA2               	movwf	___ftdiv@cntr& (0+255),b
 10956  011FA2                     l3169:
 10957                           
 10958                           ; BSR set to: 0
 10959  011FA2  0100               	movlb	0	; () banked
 10960  011FA4  90D8               	bcf	status,0,c
 10961  011FA6  37A3               	rlcf	___ftdiv@f3& (0+255),f,b
 10962  011FA8  37A4               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10963  011FAA  37A5               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10964                           
 10965                           ; BSR set to: 0
 10966  011FAC  0100               	movlb	0	; () banked
 10967  011FAE  519C               	movf	___ftdiv@f2& (0+255),w,b
 10968  011FB0  0100               	movlb	0	; () banked
 10969  011FB2  5D99               	subwf	___ftdiv@f1& (0+255),w,b
 10970  011FB4  0100               	movlb	0	; () banked
 10971  011FB6  519D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10972  011FB8  0100               	movlb	0	; () banked
 10973  011FBA  599A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10974  011FBC  0100               	movlb	0	; () banked
 10975  011FBE  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10976  011FC0  0100               	movlb	0	; () banked
 10977  011FC2  599B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10978  011FC4  A0D8               	btfss	status,0,c
 10979  011FC6  D00E               	goto	l868
 10980                           
 10981                           ; BSR set to: 0
 10982  011FC8  0100               	movlb	0	; () banked
 10983  011FCA  519C               	movf	___ftdiv@f2& (0+255),w,b
 10984  011FCC  0100               	movlb	0	; () banked
 10985  011FCE  5F99               	subwf	___ftdiv@f1& (0+255),f,b
 10986  011FD0  0100               	movlb	0	; () banked
 10987  011FD2  519D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10988  011FD4  0100               	movlb	0	; () banked
 10989  011FD6  5B9A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10990  011FD8  0100               	movlb	0	; () banked
 10991  011FDA  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10992  011FDC  0100               	movlb	0	; () banked
 10993  011FDE  5B9B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10994                           
 10995                           ; BSR set to: 0
 10996  011FE0  0100               	movlb	0	; () banked
 10997  011FE2  81A3               	bsf	___ftdiv@f3& (0+255),0,b
 10998  011FE4                     l868:
 10999                           
 11000                           ; BSR set to: 0
 11001  011FE4  0100               	movlb	0	; () banked
 11002  011FE6  90D8               	bcf	status,0,c
 11003  011FE8  3799               	rlcf	___ftdiv@f1& (0+255),f,b
 11004  011FEA  379A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11005  011FEC  379B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11006                           
 11007                           ; BSR set to: 0
 11008  011FEE  0100               	movlb	0	; () banked
 11009  011FF0  2FA2               	decfsz	___ftdiv@cntr& (0+255),f,b
 11010  011FF2  D7D7               	goto	l3169
 11011                           
 11012                           ; BSR set to: 0
 11013                           
 11014                           ; BSR set to: 0
 11015  011FF4  C0A3  F060         	movff	___ftdiv@f3,___ftpack@arg
 11016  011FF8  C0A4  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11017  011FFC  C0A5  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11018  012000  C0A6  F063         	movff	___ftdiv@exp,___ftpack@exp
 11019  012004  C0A7  F064         	movff	___ftdiv@sign,___ftpack@sign
 11020  012008  ECCE  F091         	call	___ftpack	;wreg free
 11021  01200C  C060  F099         	movff	?___ftpack,?___ftdiv
 11022  012010  C061  F09A         	movff	?___ftpack+1,?___ftdiv+1
 11023  012014  C062  F09B         	movff	?___ftpack+2,?___ftdiv+2
 11024  012018  0012               	return	
 11025  01201A                     __end_of___ftdiv:
 11026                           	opt stack 0
 11027                           tblptru	equ	0xFF8
 11028                           tblptrh	equ	0xFF7
 11029                           tblptrl	equ	0xFF6
 11030                           tablat	equ	0xFF5
 11031                           prodh	equ	0xFF4
 11032                           prodl	equ	0xFF3
 11033                           intcon	equ	0xFF2
 11034                           postinc0	equ	0xFEE
 11035                           wreg	equ	0xFE8
 11036                           indf1	equ	0xFE7
 11037                           postdec1	equ	0xFE5
 11038                           fsr1h	equ	0xFE2
 11039                           fsr1l	equ	0xFE1
 11040                           indf2	equ	0xFDF
 11041                           postinc2	equ	0xFDE
 11042                           postdec2	equ	0xFDD
 11043                           fsr2h	equ	0xFDA
 11044                           fsr2l	equ	0xFD9
 11045                           status	equ	0xFD8
 11046                           
 11047 ;; *************** function ___awtoft *****************
 11048 ;; Defined at:
 11049 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;  c               2    8[BANK0 ] int 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  sign            1   11[BANK0 ] unsigned char 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  3    8[BANK0 ] float 
 11056 ;; Registers used:
 11057 ;;		wreg, status,2, status,0, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11063 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11066 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11067 ;;Total ram usage:        4 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    5
 11070 ;; This function calls:
 11071 ;;		___ftpack
 11072 ;; This function is called by:
 11073 ;;		_initSPI
 11074 ;;		_adjustDigipot
 11075 ;;		_exp
 11076 ;;		_log
 11077 ;;		_calculateTemp
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           	psect	text41
 11082  01347E                     __ptext41:
 11083                           	opt stack 0
 11084  01347E                     ___awtoft:
 11085                           	opt stack 22
 11086                           
 11087                           ;incstack = 0
 11088  01347E  0E00               	movlw	0
 11089  013480  0100               	movlb	0	; () banked
 11090  013482  6F6B               	movwf	___awtoft@sign& (0+255),b
 11091                           
 11092                           ; BSR set to: 0
 11093  013484  0100               	movlb	0	; () banked
 11094  013486  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
 11095  013488  D008               	goto	l3199
 11096                           
 11097                           ; BSR set to: 0
 11098  01348A  0100               	movlb	0	; () banked
 11099  01348C  6D68               	negf	___awtoft@c& (0+255),b
 11100  01348E  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
 11101  013490  B0D8               	btfsc	status,0,c
 11102  013492  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
 11103                           
 11104                           ; BSR set to: 0
 11105  013494  0E01               	movlw	1
 11106  013496  0100               	movlb	0	; () banked
 11107  013498  6F6B               	movwf	___awtoft@sign& (0+255),b
 11108  01349A                     l3199:
 11109                           
 11110                           ; BSR set to: 0
 11111  01349A  C068  F060         	movff	___awtoft@c,___ftpack@arg
 11112  01349E  C069  F061         	movff	___awtoft@c+1,___ftpack@arg+1
 11113  0134A2  0100               	movlb	0	; () banked
 11114  0134A4  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 11115  0134A6  0E8E               	movlw	142
 11116  0134A8  0100               	movlb	0	; () banked
 11117  0134AA  6F63               	movwf	___ftpack@exp& (0+255),b
 11118  0134AC  C06B  F064         	movff	___awtoft@sign,___ftpack@sign
 11119  0134B0  ECCE  F091         	call	___ftpack	;wreg free
 11120  0134B4  C060  F068         	movff	?___ftpack,?___awtoft
 11121  0134B8  C061  F069         	movff	?___ftpack+1,?___awtoft+1
 11122  0134BC  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
 11123  0134C0  0012               	return	
 11124  0134C2                     __end_of___awtoft:
 11125                           	opt stack 0
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           postinc0	equ	0xFEE
 11134                           wreg	equ	0xFE8
 11135                           indf1	equ	0xFE7
 11136                           postdec1	equ	0xFE5
 11137                           fsr1h	equ	0xFE2
 11138                           fsr1l	equ	0xFE1
 11139                           indf2	equ	0xFDF
 11140                           postinc2	equ	0xFDE
 11141                           postdec2	equ	0xFDD
 11142                           fsr2h	equ	0xFDA
 11143                           fsr2l	equ	0xFD9
 11144                           status	equ	0xFD8
 11145                           
 11146 ;; *************** function ___lltoft *****************
 11147 ;; Defined at:
 11148 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  c               4    8[BANK0 ] unsigned long 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  exp             1   16[BANK0 ] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  3    8[BANK0 ] float 
 11155 ;; Registers used:
 11156 ;;		wreg, status,2, status,0, cstack
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11162 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11164 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11165 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11166 ;;Total ram usage:        9 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    5
 11169 ;; This function calls:
 11170 ;;		___ftpack
 11171 ;; This function is called by:
 11172 ;;		_digipot
 11173 ;;		_sprintf
 11174 ;;		_pow
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           	psect	text42
 11179  013160                     __ptext42:
 11180                           	opt stack 0
 11181  013160                     ___lltoft:
 11182                           	opt stack 23
 11183                           
 11184                           ;incstack = 0
 11185  013160  0E8E               	movlw	142
 11186  013162  0100               	movlb	0	; () banked
 11187  013164  6F70               	movwf	___lltoft@exp& (0+255),b
 11188  013166  D008               	goto	l3357
 11189  013168                     l3355:
 11190                           
 11191                           ; BSR set to: 0
 11192  013168  0100               	movlb	0	; () banked
 11193  01316A  90D8               	bcf	status,0,c
 11194  01316C  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11195  01316E  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11196  013170  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11197  013172  3368               	rrcf	___lltoft@c& (0+255),f,b
 11198  013174  0100               	movlb	0	; () banked
 11199  013176  2B70               	incf	___lltoft@exp& (0+255),f,b
 11200  013178                     l3357:
 11201                           
 11202                           ; BSR set to: 0
 11203  013178  0E00               	movlw	0
 11204  01317A  0100               	movlb	0	; () banked
 11205  01317C  1568               	andwf	___lltoft@c& (0+255),w,b
 11206  01317E  0100               	movlb	0	; () banked
 11207  013180  6F6C               	movwf	??___lltoft& (0+255),b
 11208  013182  0E00               	movlw	0
 11209  013184  0100               	movlb	0	; () banked
 11210  013186  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
 11211  013188  0100               	movlb	0	; () banked
 11212  01318A  6F6D               	movwf	(??___lltoft+1)& (0+255),b
 11213  01318C  0E00               	movlw	0
 11214  01318E  0100               	movlb	0	; () banked
 11215  013190  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
 11216  013192  0100               	movlb	0	; () banked
 11217  013194  6F6E               	movwf	(??___lltoft+2)& (0+255),b
 11218  013196  0EFF               	movlw	255
 11219  013198  0100               	movlb	0	; () banked
 11220  01319A  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
 11221  01319C  0100               	movlb	0	; () banked
 11222  01319E  6F6F               	movwf	(??___lltoft+3)& (0+255),b
 11223  0131A0  0100               	movlb	0	; () banked
 11224  0131A2  516C               	movf	??___lltoft& (0+255),w,b
 11225  0131A4  0100               	movlb	0	; () banked
 11226  0131A6  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11227  0131A8  0100               	movlb	0	; () banked
 11228  0131AA  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11229  0131AC  0100               	movlb	0	; () banked
 11230  0131AE  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11231  0131B0  A4D8               	btfss	status,2,c
 11232  0131B2  D7DA               	goto	l3355
 11233                           
 11234                           ; BSR set to: 0
 11235                           
 11236                           ; BSR set to: 0
 11237  0131B4  C068  F060         	movff	___lltoft@c,___ftpack@arg
 11238  0131B8  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
 11239  0131BC  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
 11240  0131C0  C070  F063         	movff	___lltoft@exp,___ftpack@exp
 11241  0131C4  0E00               	movlw	0
 11242  0131C6  0100               	movlb	0	; () banked
 11243  0131C8  6F64               	movwf	___ftpack@sign& (0+255),b
 11244  0131CA  ECCE  F091         	call	___ftpack	;wreg free
 11245  0131CE  C060  F068         	movff	?___ftpack,?___lltoft
 11246  0131D2  C061  F069         	movff	?___ftpack+1,?___lltoft+1
 11247  0131D6  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
 11248  0131DA  0012               	return	
 11249  0131DC                     __end_of___lltoft:
 11250                           	opt stack 0
 11251                           tblptru	equ	0xFF8
 11252                           tblptrh	equ	0xFF7
 11253                           tblptrl	equ	0xFF6
 11254                           tablat	equ	0xFF5
 11255                           prodh	equ	0xFF4
 11256                           prodl	equ	0xFF3
 11257                           intcon	equ	0xFF2
 11258                           postinc0	equ	0xFEE
 11259                           wreg	equ	0xFE8
 11260                           indf1	equ	0xFE7
 11261                           postdec1	equ	0xFE5
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function ___lbtoft *****************
 11272 ;; Defined at:
 11273 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lbtoft.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;  c               1    wreg     unsigned char 
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  c               1   11[BANK0 ] unsigned char 
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  3    8[BANK0 ] float 
 11280 ;; Registers used:
 11281 ;;		wreg, status,2, status,0, cstack
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11287 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11290 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11291 ;;Total ram usage:        4 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:    5
 11294 ;; This function calls:
 11295 ;;		___ftpack
 11296 ;; This function is called by:
 11297 ;;		_initSPI
 11298 ;;		_adjustDigipot
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text43
 11303  0135CC                     __ptext43:
 11304                           	opt stack 0
 11305  0135CC                     ___lbtoft:
 11306                           	opt stack 24
 11307                           
 11308                           ;incstack = 0
 11309                           ;___lbtoft@c stored from wreg
 11310  0135CC  0100               	movlb	0	; () banked
 11311  0135CE  6F6B               	movwf	___lbtoft@c& (0+255),b
 11312  0135D0  0100               	movlb	0	; () banked
 11313  0135D2  516B               	movf	___lbtoft@c& (0+255),w,b
 11314  0135D4  0100               	movlb	0	; () banked
 11315  0135D6  6F60               	movwf	___ftpack@arg& (0+255),b
 11316  0135D8  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
 11317  0135DA  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 11318  0135DC  0E8E               	movlw	142
 11319  0135DE  0100               	movlb	0	; () banked
 11320  0135E0  6F63               	movwf	___ftpack@exp& (0+255),b
 11321  0135E2  0E00               	movlw	0
 11322  0135E4  0100               	movlb	0	; () banked
 11323  0135E6  6F64               	movwf	___ftpack@sign& (0+255),b
 11324  0135E8  ECCE  F091         	call	___ftpack	;wreg free
 11325  0135EC  C060  F068         	movff	?___ftpack,?___lbtoft
 11326  0135F0  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
 11327  0135F4  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
 11328  0135F8  0012               	return	
 11329  0135FA                     __end_of___lbtoft:
 11330                           	opt stack 0
 11331                           tblptru	equ	0xFF8
 11332                           tblptrh	equ	0xFF7
 11333                           tblptrl	equ	0xFF6
 11334                           tablat	equ	0xFF5
 11335                           prodh	equ	0xFF4
 11336                           prodl	equ	0xFF3
 11337                           intcon	equ	0xFF2
 11338                           postinc0	equ	0xFEE
 11339                           wreg	equ	0xFE8
 11340                           indf1	equ	0xFE7
 11341                           postdec1	equ	0xFE5
 11342                           fsr1h	equ	0xFE2
 11343                           fsr1l	equ	0xFE1
 11344                           indf2	equ	0xFDF
 11345                           postinc2	equ	0xFDE
 11346                           postdec2	equ	0xFDD
 11347                           fsr2h	equ	0xFDA
 11348                           fsr2l	equ	0xFD9
 11349                           status	equ	0xFD8
 11350                           
 11351 ;; *************** function ___ftpack *****************
 11352 ;; Defined at:
 11353 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;  arg             3    0[BANK0 ] unsigned um
 11356 ;;  exp             1    3[BANK0 ] unsigned char 
 11357 ;;  sign            1    4[BANK0 ] unsigned char 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  3    0[BANK0 ] float 
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11369 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11371 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11372 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11373 ;;Total ram usage:        8 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    4
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		___altoft
 11380 ;;		___awtoft
 11381 ;;		___ftadd
 11382 ;;		___ftdiv
 11383 ;;		___ftmul
 11384 ;;		___lbtoft
 11385 ;;		___lltoft
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           	psect	text44
 11390  01239C                     __ptext44:
 11391                           	opt stack 0
 11392  01239C                     ___ftpack:
 11393                           	opt stack 22
 11394                           
 11395                           ;incstack = 0
 11396  01239C  0100               	movlb	0	; () banked
 11397  01239E  5163               	movf	___ftpack@exp& (0+255),w,b
 11398  0123A0  0100               	movlb	0	; () banked
 11399  0123A2  B4D8               	btfsc	status,2,c
 11400  0123A4  D008               	goto	l2881
 11401                           
 11402                           ; BSR set to: 0
 11403  0123A6  0100               	movlb	0	; () banked
 11404  0123A8  5160               	movf	___ftpack@arg& (0+255),w,b
 11405  0123AA  0100               	movlb	0	; () banked
 11406  0123AC  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11407  0123AE  0100               	movlb	0	; () banked
 11408  0123B0  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11409  0123B2  A4D8               	btfss	status,2,c
 11410  0123B4  D011               	goto	l2887
 11411  0123B6                     l2881:
 11412                           
 11413                           ; BSR set to: 0
 11414  0123B6  0E00               	movlw	0
 11415  0123B8  0100               	movlb	0	; () banked
 11416  0123BA  6F60               	movwf	?___ftpack& (0+255),b
 11417  0123BC  0E00               	movlw	0
 11418  0123BE  0100               	movlb	0	; () banked
 11419  0123C0  6F61               	movwf	(?___ftpack+1)& (0+255),b
 11420  0123C2  0E00               	movlw	0
 11421  0123C4  0100               	movlb	0	; () banked
 11422  0123C6  6F62               	movwf	(?___ftpack+2)& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425  0123C8  0012               	return	
 11426  0123CA                     l2885:
 11427                           
 11428                           ; BSR set to: 0
 11429  0123CA  0100               	movlb	0	; () banked
 11430  0123CC  2B63               	incf	___ftpack@exp& (0+255),f,b
 11431  0123CE  0100               	movlb	0	; () banked
 11432  0123D0  90D8               	bcf	status,0,c
 11433  0123D2  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11434  0123D4  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11435  0123D6  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11436  0123D8                     l2887:
 11437                           
 11438                           ; BSR set to: 0
 11439  0123D8  0E00               	movlw	0
 11440  0123DA  0100               	movlb	0	; () banked
 11441  0123DC  1560               	andwf	___ftpack@arg& (0+255),w,b
 11442  0123DE  0100               	movlb	0	; () banked
 11443  0123E0  6F65               	movwf	??___ftpack& (0+255),b
 11444  0123E2  0E00               	movlw	0
 11445  0123E4  0100               	movlb	0	; () banked
 11446  0123E6  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11447  0123E8  0100               	movlb	0	; () banked
 11448  0123EA  6F66               	movwf	(??___ftpack+1)& (0+255),b
 11449  0123EC  0EFE               	movlw	254
 11450  0123EE  0100               	movlb	0	; () banked
 11451  0123F0  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11452  0123F2  0100               	movlb	0	; () banked
 11453  0123F4  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11454  0123F6  0100               	movlb	0	; () banked
 11455  0123F8  5165               	movf	??___ftpack& (0+255),w,b
 11456  0123FA  0100               	movlb	0	; () banked
 11457  0123FC  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11458  0123FE  0100               	movlb	0	; () banked
 11459  012400  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11460  012402  B4D8               	btfsc	status,2,c
 11461  012404  D011               	goto	l2893
 11462  012406  D7E1               	goto	l2885
 11463  012408                     l2889:
 11464                           
 11465                           ; BSR set to: 0
 11466  012408  0100               	movlb	0	; () banked
 11467  01240A  2B63               	incf	___ftpack@exp& (0+255),f,b
 11468                           
 11469                           ; BSR set to: 0
 11470  01240C  0E01               	movlw	1
 11471  01240E  0100               	movlb	0	; () banked
 11472  012410  2760               	addwf	___ftpack@arg& (0+255),f,b
 11473  012412  0E00               	movlw	0
 11474  012414  0100               	movlb	0	; () banked
 11475  012416  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11476  012418  0E00               	movlw	0
 11477  01241A  0100               	movlb	0	; () banked
 11478  01241C  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11479  01241E  0100               	movlb	0	; () banked
 11480  012420  90D8               	bcf	status,0,c
 11481  012422  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11482  012424  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11483  012426  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11484  012428                     l2893:
 11485                           
 11486                           ; BSR set to: 0
 11487  012428  0E00               	movlw	0
 11488  01242A  0100               	movlb	0	; () banked
 11489  01242C  1560               	andwf	___ftpack@arg& (0+255),w,b
 11490  01242E  0100               	movlb	0	; () banked
 11491  012430  6F65               	movwf	??___ftpack& (0+255),b
 11492  012432  0E00               	movlw	0
 11493  012434  0100               	movlb	0	; () banked
 11494  012436  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11495  012438  0100               	movlb	0	; () banked
 11496  01243A  6F66               	movwf	(??___ftpack+1)& (0+255),b
 11497  01243C  0EFF               	movlw	255
 11498  01243E  0100               	movlb	0	; () banked
 11499  012440  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11500  012442  0100               	movlb	0	; () banked
 11501  012444  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11502  012446  0100               	movlb	0	; () banked
 11503  012448  5165               	movf	??___ftpack& (0+255),w,b
 11504  01244A  0100               	movlb	0	; () banked
 11505  01244C  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11506  01244E  0100               	movlb	0	; () banked
 11507  012450  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11508  012452  B4D8               	btfsc	status,2,c
 11509  012454  D008               	goto	l2897
 11510  012456  D7D8               	goto	l2889
 11511  012458                     l2895:
 11512                           
 11513                           ; BSR set to: 0
 11514  012458  0100               	movlb	0	; () banked
 11515  01245A  0763               	decf	___ftpack@exp& (0+255),f,b
 11516  01245C  0100               	movlb	0	; () banked
 11517  01245E  90D8               	bcf	status,0,c
 11518  012460  3760               	rlcf	___ftpack@arg& (0+255),f,b
 11519  012462  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11520  012464  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11521  012466                     l2897:
 11522                           
 11523                           ; BSR set to: 0
 11524  012466  0100               	movlb	0	; () banked
 11525  012468  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11526  01246A  D004               	goto	l810
 11527                           
 11528                           ; BSR set to: 0
 11529  01246C  0E02               	movlw	2
 11530  01246E  0100               	movlb	0	; () banked
 11531  012470  6163               	cpfslt	___ftpack@exp& (0+255),b
 11532  012472  D7F2               	goto	l2895
 11533  012474                     l810:
 11534                           
 11535                           ; BSR set to: 0
 11536  012474  0100               	movlb	0	; () banked
 11537  012476  B163               	btfsc	___ftpack@exp& (0+255),0,b
 11538  012478  D002               	goto	l2903
 11539                           
 11540                           ; BSR set to: 0
 11541  01247A  0100               	movlb	0	; () banked
 11542  01247C  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11543  01247E                     l2903:
 11544                           
 11545                           ; BSR set to: 0
 11546  01247E  0100               	movlb	0	; () banked
 11547  012480  90D8               	bcf	status,0,c
 11548  012482  3363               	rrcf	___ftpack@exp& (0+255),f,b
 11549  012484  0100               	movlb	0	; () banked
 11550  012486  5163               	movf	___ftpack@exp& (0+255),w,b
 11551  012488  0100               	movlb	0	; () banked
 11552  01248A  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11553                           
 11554                           ; BSR set to: 0
 11555  01248C  0100               	movlb	0	; () banked
 11556  01248E  5164               	movf	___ftpack@sign& (0+255),w,b
 11557  012490  0100               	movlb	0	; () banked
 11558  012492  B4D8               	btfsc	status,2,c
 11559  012494  D002               	goto	l2909
 11560                           
 11561                           ; BSR set to: 0
 11562  012496  0100               	movlb	0	; () banked
 11563  012498  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11564  01249A                     l2909:
 11565                           
 11566                           ; BSR set to: 0
 11567  01249A  C060  F060         	movff	___ftpack@arg,?___ftpack
 11568  01249E  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 11569  0124A2  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 11570  0124A6  0012               	return	
 11571  0124A8                     __end_of___ftpack:
 11572                           	opt stack 0
 11573                           tblptru	equ	0xFF8
 11574                           tblptrh	equ	0xFF7
 11575                           tblptrl	equ	0xFF6
 11576                           tablat	equ	0xFF5
 11577                           prodh	equ	0xFF4
 11578                           prodl	equ	0xFF3
 11579                           intcon	equ	0xFF2
 11580                           postinc0	equ	0xFEE
 11581                           wreg	equ	0xFE8
 11582                           indf1	equ	0xFE7
 11583                           postdec1	equ	0xFE5
 11584                           fsr1h	equ	0xFE2
 11585                           fsr1l	equ	0xFE1
 11586                           indf2	equ	0xFDF
 11587                           postinc2	equ	0xFDE
 11588                           postdec2	equ	0xFDD
 11589                           fsr2h	equ	0xFDA
 11590                           fsr2l	equ	0xFD9
 11591                           status	equ	0xFD8
 11592                           
 11593 ;; *************** function _UARTReceive *****************
 11594 ;; Defined at:
 11595 ;;		line 54 in file "uart.c"
 11596 ;; Parameters:    Size  Location     Type
 11597 ;;  on_or_off       1    wreg     unsigned char 
 11598 ;; Auto vars:     Size  Location     Type
 11599 ;;  on_or_off       1    0[BANK0 ] unsigned char 
 11600 ;; Return value:  Size  Location     Type
 11601 ;;		None               void
 11602 ;; Registers used:
 11603 ;;		wreg, status,2, status,0
 11604 ;; Tracked objects:
 11605 ;;		On entry : 0/0
 11606 ;;		On exit  : 0/0
 11607 ;;		Unchanged: 0/0
 11608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11613 ;;Total ram usage:        1 bytes
 11614 ;; Hardware stack levels used:    1
 11615 ;; Hardware stack levels required when called:    4
 11616 ;; This function calls:
 11617 ;;		Nothing
 11618 ;; This function is called by:
 11619 ;;		_main
 11620 ;; This function uses a non-reentrant model
 11621 ;;
 11622                           
 11623                           	psect	text45
 11624  01369A                     __ptext45:
 11625                           	opt stack 0
 11626  01369A                     _UARTReceive:
 11627                           	opt stack 26
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;incstack = 0
 11631                           ;UARTReceive@on_or_off stored from wreg
 11632  01369A  0100               	movlb	0	; () banked
 11633  01369C  6F60               	movwf	UARTReceive@on_or_off& (0+255),b
 11634                           
 11635                           ;uart.c: 55: if(on_or_off == 1){
 11636  01369E  0100               	movlb	0	; () banked
 11637  0136A0  0560               	decf	UARTReceive@on_or_off& (0+255),w,b
 11638  0136A2  A4D8               	btfss	status,2,c
 11639  0136A4  D002               	goto	l160
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;uart.c: 56: RCSTA1bits.CREN = 1;
 11643  0136A6  88AC               	bsf	4012,4,c	;volatile
 11644                           
 11645                           ;uart.c: 57: }
 11646  0136A8  0012               	return	
 11647  0136AA                     l160:
 11648                           
 11649                           ; BSR set to: 0
 11650                           ;uart.c: 58: else{
 11651                           ;uart.c: 59: RCSTA1bits.CREN = 0;
 11652  0136AA  98AC               	bcf	4012,4,c	;volatile
 11653  0136AC  0012               	return	
 11654  0136AE                     __end_of_UARTReceive:
 11655                           	opt stack 0
 11656                           tblptru	equ	0xFF8
 11657                           tblptrh	equ	0xFF7
 11658                           tblptrl	equ	0xFF6
 11659                           tablat	equ	0xFF5
 11660                           prodh	equ	0xFF4
 11661                           prodl	equ	0xFF3
 11662                           intcon	equ	0xFF2
 11663                           postinc0	equ	0xFEE
 11664                           wreg	equ	0xFE8
 11665                           indf1	equ	0xFE7
 11666                           postdec1	equ	0xFE5
 11667                           fsr1h	equ	0xFE2
 11668                           fsr1l	equ	0xFE1
 11669                           indf2	equ	0xFDF
 11670                           postinc2	equ	0xFDE
 11671                           postdec2	equ	0xFDD
 11672                           fsr2h	equ	0xFDA
 11673                           fsr2l	equ	0xFD9
 11674                           status	equ	0xFD8
 11675                           
 11676 ;; *************** function _high_ISR *****************
 11677 ;; Defined at:
 11678 ;;		line 69 in file "main.c"
 11679 ;; Parameters:    Size  Location     Type
 11680 ;;		None
 11681 ;; Auto vars:     Size  Location     Type
 11682 ;;		None
 11683 ;; Return value:  Size  Location     Type
 11684 ;;		None               void
 11685 ;; Registers used:
 11686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11687 ;; Tracked objects:
 11688 ;;		On entry : 0/0
 11689 ;;		On exit  : 0/0
 11690 ;;		Unchanged: 0/0
 11691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11694 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11695 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11696 ;;Total ram usage:       14 bytes
 11697 ;; Hardware stack levels used:    1
 11698 ;; Hardware stack levels required when called:    3
 11699 ;; This function calls:
 11700 ;;		_frequency_interrupt
 11701 ;;		_temperature_interrupt
 11702 ;;		_timer1_interrupt
 11703 ;;		_uart_interrupt
 11704 ;; This function is called by:
 11705 ;;		Interrupt level 2
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           	psect	intcode
 11710  000008                     __pintcode:
 11711                           	opt stack 0
 11712  000008                     _high_ISR:
 11713                           	opt stack 20
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;incstack = 0
 11717  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11718  00000A  CFFA F023          	movff	pclath,??_high_ISR
 11719  00000E  CFFB F024          	movff	pclatu,??_high_ISR+1
 11720  000012  CFE9 F025          	movff	fsr0l,??_high_ISR+2
 11721  000016  CFEA F026          	movff	fsr0h,??_high_ISR+3
 11722  00001A  CFE1 F027          	movff	fsr1l,??_high_ISR+4
 11723  00001E  CFE2 F028          	movff	fsr1h,??_high_ISR+5
 11724  000022  CFD9 F029          	movff	fsr2l,??_high_ISR+6
 11725  000026  CFDA F02A          	movff	fsr2h,??_high_ISR+7
 11726  00002A  CFF3 F02B          	movff	prodl,??_high_ISR+8
 11727  00002E  CFF4 F02C          	movff	prodh,??_high_ISR+9
 11728  000032  CFF6 F02D          	movff	tblptrl,??_high_ISR+10
 11729  000036  CFF7 F02E          	movff	tblptrh,??_high_ISR+11
 11730  00003A  CFF8 F02F          	movff	tblptru,??_high_ISR+12
 11731  00003E  CFF5 F030          	movff	tablat,??_high_ISR+13
 11732                           
 11733                           ;main.c: 70: temperature_interrupt();
 11734  000042  EC23  F098         	call	_temperature_interrupt	;wreg free
 11735                           
 11736                           ;main.c: 71: uart_interrupt();
 11737  000046  EC61  F09A         	call	_uart_interrupt	;wreg free
 11738                           
 11739                           ;main.c: 72: frequency_interrupt();
 11740  00004A  EC54  F092         	call	_frequency_interrupt	;wreg free
 11741                           
 11742                           ;main.c: 73: timer1_interrupt();
 11743  00004E  EC57  F09B         	call	_timer1_interrupt	;wreg free
 11744  000052  C030  FFF5         	movff	??_high_ISR+13,tablat
 11745  000056  C02F  FFF8         	movff	??_high_ISR+12,tblptru
 11746  00005A  C02E  FFF7         	movff	??_high_ISR+11,tblptrh
 11747  00005E  C02D  FFF6         	movff	??_high_ISR+10,tblptrl
 11748  000062  C02C  FFF4         	movff	??_high_ISR+9,prodh
 11749  000066  C02B  FFF3         	movff	??_high_ISR+8,prodl
 11750  00006A  C02A  FFDA         	movff	??_high_ISR+7,fsr2h
 11751  00006E  C029  FFD9         	movff	??_high_ISR+6,fsr2l
 11752  000072  C028  FFE2         	movff	??_high_ISR+5,fsr1h
 11753  000076  C027  FFE1         	movff	??_high_ISR+4,fsr1l
 11754  00007A  C026  FFEA         	movff	??_high_ISR+3,fsr0h
 11755  00007E  C025  FFE9         	movff	??_high_ISR+2,fsr0l
 11756  000082  C024  FFFB         	movff	??_high_ISR+1,pclatu
 11757  000086  C023  FFFA         	movff	??_high_ISR,pclath
 11758  00008A  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11759  00008C  0011               	retfie		f
 11760  00008E                     __end_of_high_ISR:
 11761                           	opt stack 0
 11762                           pclatu	equ	0xFFB
 11763                           pclath	equ	0xFFA
 11764                           tblptru	equ	0xFF8
 11765                           tblptrh	equ	0xFF7
 11766                           tblptrl	equ	0xFF6
 11767                           tablat	equ	0xFF5
 11768                           prodh	equ	0xFF4
 11769                           prodl	equ	0xFF3
 11770                           intcon	equ	0xFF2
 11771                           postinc0	equ	0xFEE
 11772                           fsr0h	equ	0xFEA
 11773                           fsr0l	equ	0xFE9
 11774                           wreg	equ	0xFE8
 11775                           indf1	equ	0xFE7
 11776                           postdec1	equ	0xFE5
 11777                           fsr1h	equ	0xFE2
 11778                           fsr1l	equ	0xFE1
 11779                           indf2	equ	0xFDF
 11780                           postinc2	equ	0xFDE
 11781                           postdec2	equ	0xFDD
 11782                           fsr2h	equ	0xFDA
 11783                           fsr2l	equ	0xFD9
 11784                           status	equ	0xFD8
 11785                           
 11786 ;; *************** function _uart_interrupt *****************
 11787 ;; Defined at:
 11788 ;;		line 103 in file "uart.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;		None
 11791 ;; Auto vars:     Size  Location     Type
 11792 ;;		None
 11793 ;; Return value:  Size  Location     Type
 11794 ;;		None               void
 11795 ;; Registers used:
 11796 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11806 ;;Total ram usage:        0 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; This function calls:
 11809 ;;		Nothing
 11810 ;; This function is called by:
 11811 ;;		_high_ISR
 11812 ;; This function uses a non-reentrant model
 11813 ;;
 11814                           
 11815                           	psect	text47
 11816  0134C2                     __ptext47:
 11817                           	opt stack 0
 11818  0134C2                     _uart_interrupt:
 11819                           	opt stack 22
 11820                           
 11821                           ;uart.c: 105: if(PIR1bits.RC1IF == 1){
 11822                           
 11823                           ;incstack = 0
 11824  0134C2  AA9E               	btfss	3998,5,c	;volatile
 11825  0134C4  0012               	return	
 11826                           
 11827                           ;uart.c: 106: PIR1bits.RC1IF = 0;
 11828  0134C6  9A9E               	bcf	3998,5,c	;volatile
 11829                           
 11830                           ;uart.c: 108: uart_receive_buffer[uart_receive_buffer_index] = RCREG1;
 11831  0134C8  0E00               	movlw	low _uart_receive_buffer
 11832  0134CA  0100               	movlb	0	; () banked
 11833  0134CC  25E4               	addwf	_uart_receive_buffer_index& (0+255),w,b
 11834  0134CE  6ED9               	movwf	fsr2l,c
 11835  0134D0  0E01               	movlw	high _uart_receive_buffer
 11836  0134D2  0100               	movlb	0	; () banked
 11837  0134D4  21E5               	addwfc	(_uart_receive_buffer_index+1)& (0+255),w,b
 11838  0134D6  6EDA               	movwf	fsr2h,c
 11839  0134D8  CFAF FFDF          	movff	4015,indf2	;volatile
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;uart.c: 109: uart_receive_buffer_index += 1;
 11843  0134DC  0100               	movlb	0	; () banked
 11844  0134DE  4BE4               	infsnz	_uart_receive_buffer_index& (0+255),f,b
 11845  0134E0  2BE5               	incf	(_uart_receive_buffer_index+1)& (0+255),f,b
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;uart.c: 113: if(uart_receive_buffer_index > 100){
 11849  0134E2  0100               	movlb	0	; () banked
 11850  0134E4  51E5               	movf	(_uart_receive_buffer_index+1)& (0+255),w,b
 11851  0134E6  E105               	bnz	i2u406_40
 11852  0134E8  0E65               	movlw	101
 11853  0134EA  0100               	movlb	0	; () banked
 11854  0134EC  5DE4               	subwf	_uart_receive_buffer_index& (0+255),w,b
 11855  0134EE  A0D8               	btfss	status,0,c
 11856  0134F0  0012               	return	
 11857  0134F2                     i2u406_40:
 11858                           
 11859                           ; BSR set to: 0
 11860                           ;uart.c: 114: uart_receive_buffer_index = 0;
 11861  0134F2  0E00               	movlw	0
 11862  0134F4  0100               	movlb	0	; () banked
 11863  0134F6  6FE5               	movwf	(_uart_receive_buffer_index+1)& (0+255),b
 11864  0134F8  0E00               	movlw	0
 11865  0134FA  6FE4               	movwf	_uart_receive_buffer_index& (0+255),b
 11866                           
 11867                           ; BSR set to: 0
 11868  0134FC  0012               	return	
 11869  0134FE                     __end_of_uart_interrupt:
 11870                           	opt stack 0
 11871                           pclatu	equ	0xFFB
 11872                           pclath	equ	0xFFA
 11873                           tblptru	equ	0xFF8
 11874                           tblptrh	equ	0xFF7
 11875                           tblptrl	equ	0xFF6
 11876                           tablat	equ	0xFF5
 11877                           prodh	equ	0xFF4
 11878                           prodl	equ	0xFF3
 11879                           intcon	equ	0xFF2
 11880                           postinc0	equ	0xFEE
 11881                           fsr0h	equ	0xFEA
 11882                           fsr0l	equ	0xFE9
 11883                           wreg	equ	0xFE8
 11884                           indf1	equ	0xFE7
 11885                           postdec1	equ	0xFE5
 11886                           fsr1h	equ	0xFE2
 11887                           fsr1l	equ	0xFE1
 11888                           indf2	equ	0xFDF
 11889                           postinc2	equ	0xFDE
 11890                           postdec2	equ	0xFDD
 11891                           fsr2h	equ	0xFDA
 11892                           fsr2l	equ	0xFD9
 11893                           status	equ	0xFD8
 11894                           
 11895 ;; *************** function _timer1_interrupt *****************
 11896 ;; Defined at:
 11897 ;;		line 81 in file "frequency.c"
 11898 ;; Parameters:    Size  Location     Type
 11899 ;;		None
 11900 ;; Auto vars:     Size  Location     Type
 11901 ;;		None
 11902 ;; Return value:  Size  Location     Type
 11903 ;;                  2   40[None  ] int 
 11904 ;; Registers used:
 11905 ;;		status,2, status,0
 11906 ;; Tracked objects:
 11907 ;;		On entry : 0/0
 11908 ;;		On exit  : 0/0
 11909 ;;		Unchanged: 0/0
 11910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11915 ;;Total ram usage:        0 bytes
 11916 ;; Hardware stack levels used:    1
 11917 ;; This function calls:
 11918 ;;		Nothing
 11919 ;; This function is called by:
 11920 ;;		_high_ISR
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text48
 11925  0136AE                     __ptext48:
 11926                           	opt stack 0
 11927  0136AE                     _timer1_interrupt:
 11928                           	opt stack 22
 11929                           
 11930                           ;frequency.c: 83: if(PIR1bits.TMR1IF == 1)
 11931                           
 11932                           ;incstack = 0
 11933  0136AE  A09E               	btfss	3998,0,c	;volatile
 11934  0136B0  0012               	return	
 11935                           
 11936                           ;frequency.c: 84: {
 11937                           ;frequency.c: 85: interrupt_count++;
 11938  0136B2  4A3D               	infsnz	_interrupt_count,f,c
 11939  0136B4  2A3E               	incf	_interrupt_count+1,f,c
 11940                           
 11941                           ;frequency.c: 86: PIR1bits.TMR1IF = 0;
 11942  0136B6  909E               	bcf	3998,0,c	;volatile
 11943  0136B8  0012               	return	
 11944  0136BA                     __end_of_timer1_interrupt:
 11945                           	opt stack 0
 11946                           pclatu	equ	0xFFB
 11947                           pclath	equ	0xFFA
 11948                           tblptru	equ	0xFF8
 11949                           tblptrh	equ	0xFF7
 11950                           tblptrl	equ	0xFF6
 11951                           tablat	equ	0xFF5
 11952                           prodh	equ	0xFF4
 11953                           prodl	equ	0xFF3
 11954                           intcon	equ	0xFF2
 11955                           postinc0	equ	0xFEE
 11956                           fsr0h	equ	0xFEA
 11957                           fsr0l	equ	0xFE9
 11958                           wreg	equ	0xFE8
 11959                           indf1	equ	0xFE7
 11960                           postdec1	equ	0xFE5
 11961                           fsr1h	equ	0xFE2
 11962                           fsr1l	equ	0xFE1
 11963                           indf2	equ	0xFDF
 11964                           postinc2	equ	0xFDE
 11965                           postdec2	equ	0xFDD
 11966                           fsr2h	equ	0xFDA
 11967                           fsr2l	equ	0xFD9
 11968                           status	equ	0xFD8
 11969                           
 11970 ;; *************** function _temperature_interrupt *****************
 11971 ;; Defined at:
 11972 ;;		line 113 in file "temperature.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;		None
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;		None
 11977 ;; Return value:  Size  Location     Type
 11978 ;;		None               void
 11979 ;; Registers used:
 11980 ;;		wreg, status,2, status,0
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11990 ;;Total ram usage:        2 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; This function calls:
 11993 ;;		Nothing
 11994 ;; This function is called by:
 11995 ;;		_high_ISR
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           	psect	text49
 12000  013046                     __ptext49:
 12001                           	opt stack 0
 12002  013046                     _temperature_interrupt:
 12003                           	opt stack 22
 12004                           
 12005                           ;temperature.c: 115: if(PIR1bits.ADIF == 1)
 12006                           
 12007                           ;incstack = 0
 12008  013046  AC9E               	btfss	3998,6,c	;volatile
 12009  013048  0012               	return	
 12010                           
 12011                           ;temperature.c: 116: {
 12012                           ;temperature.c: 117: PIR1bits.ADIF = 0;
 12013  01304A  9C9E               	bcf	3998,6,c	;volatile
 12014                           
 12015                           ;temperature.c: 118: switch(currentChannel){
 12016  01304C  D031               	goto	i2l2661
 12017  01304E                     i2l261:
 12018                           
 12019                           ;temperature.c: 120: plus_pipe = ADRES;
 12020  01304E  CFC3 F045          	movff	4035,_plus_pipe	;volatile
 12021  013052  CFC4 F046          	movff	4036,_plus_pipe+1	;volatile
 12022                           
 12023                           ;temperature.c: 121: ADCON0bits.CHS = 0b1000;
 12024  013056  50C2               	movf	4034,w,c	;volatile
 12025  013058  0BC3               	andlw	-61
 12026  01305A  0920               	iorlw	32
 12027  01305C  6EC2               	movwf	4034,c	;volatile
 12028                           
 12029                           ;temperature.c: 122: currentChannel = 1;
 12030  01305E  0E00               	movlw	0
 12031  013060  6E36               	movwf	_currentChannel+1,c
 12032  013062  0E01               	movlw	1
 12033  013064  D023               	goto	L9
 12034  013066                     i2l263:
 12035                           
 12036                           ;temperature.c: 125: minus_pipe = ADRES;
 12037  013066  CFC3 F041          	movff	4035,_minus_pipe	;volatile
 12038  01306A  CFC4 F042          	movff	4036,_minus_pipe+1	;volatile
 12039                           
 12040                           ;temperature.c: 126: ADCON0bits.CHS = 0b0001;
 12041  01306E  50C2               	movf	4034,w,c	;volatile
 12042  013070  0BC3               	andlw	-61
 12043  013072  0904               	iorlw	4
 12044  013074  6EC2               	movwf	4034,c	;volatile
 12045                           
 12046                           ;temperature.c: 127: currentChannel = 2;
 12047  013076  0E00               	movlw	0
 12048  013078  6E36               	movwf	_currentChannel+1,c
 12049  01307A  0E02               	movlw	2
 12050  01307C  D017               	goto	L9
 12051  01307E                     i2l264:
 12052                           
 12053                           ;temperature.c: 130: plus_ambient = ADRES;
 12054  01307E  CFC3 F043          	movff	4035,_plus_ambient	;volatile
 12055  013082  CFC4 F044          	movff	4036,_plus_ambient+1	;volatile
 12056                           
 12057                           ;temperature.c: 131: ADCON0bits.CHS = 0b0000;
 12058  013086  94C2               	bcf	4034,2,c	;volatile
 12059  013088  96C2               	bcf	4034,3,c	;volatile
 12060  01308A  98C2               	bcf	4034,4,c	;volatile
 12061  01308C  9AC2               	bcf	4034,5,c	;volatile
 12062                           
 12063                           ;temperature.c: 132: currentChannel = 3;
 12064  01308E  0E00               	movlw	0
 12065  013090  6E36               	movwf	_currentChannel+1,c
 12066  013092  0E03               	movlw	3
 12067  013094  D00B               	goto	L9
 12068  013096                     i2l265:
 12069                           
 12070                           ;temperature.c: 135: minus_ambient = ADRES;
 12071  013096  CFC3 F03F          	movff	4035,_minus_ambient	;volatile
 12072  01309A  CFC4 F040          	movff	4036,_minus_ambient+1	;volatile
 12073                           
 12074                           ;temperature.c: 136: ADCON0bits.CHS = 0b1001;
 12075  01309E  50C2               	movf	4034,w,c	;volatile
 12076  0130A0  0BC3               	andlw	-61
 12077  0130A2  0924               	iorlw	36
 12078  0130A4  6EC2               	movwf	4034,c	;volatile
 12079                           
 12080                           ;temperature.c: 137: currentChannel = 0;
 12081  0130A6  0E00               	movlw	0
 12082  0130A8  6E36               	movwf	_currentChannel+1,c
 12083  0130AA  0E00               	movlw	0
 12084  0130AC                     L9:
 12085  0130AC  6E35               	movwf	_currentChannel,c
 12086                           
 12087                           ;temperature.c: 139: }
 12088                           
 12089                           ;temperature.c: 138: break;
 12090  0130AE  D015               	goto	i2l262
 12091  0130B0                     i2l2661:
 12092  0130B0  C035  F001         	movff	_currentChannel,??_temperature_interrupt
 12093  0130B4  C036  F002         	movff	_currentChannel+1,??_temperature_interrupt+1
 12094                           
 12095                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12096                           ; Switch size 1, requested type "space"
 12097                           ; Number of cases is 1, Range of values is 0 to 0
 12098                           ; switch strategies available:
 12099                           ; Name         Instructions Cycles
 12100                           ; simple_byte            4     3 (average)
 12101                           ;	Chosen strategy is simple_byte
 12102  0130B8  5002               	movf	??_temperature_interrupt+1,w,c
 12103  0130BA  0A00               	xorlw	0	; case 0
 12104  0130BC  A4D8               	btfss	status,2,c
 12105  0130BE  D00D               	goto	i2l262
 12106                           
 12107                           ; Switch size 1, requested type "space"
 12108                           ; Number of cases is 4, Range of values is 0 to 3
 12109                           ; switch strategies available:
 12110                           ; Name         Instructions Cycles
 12111                           ; simple_byte           13     7 (average)
 12112                           ;	Chosen strategy is simple_byte
 12113  0130C0  5001               	movf	??_temperature_interrupt,w,c
 12114  0130C2  0A00               	xorlw	0	; case 0
 12115  0130C4  B4D8               	btfsc	status,2,c
 12116  0130C6  D7C3               	goto	i2l261
 12117  0130C8  0A01               	xorlw	1	; case 1
 12118  0130CA  B4D8               	btfsc	status,2,c
 12119  0130CC  D7CC               	goto	i2l263
 12120  0130CE  0A03               	xorlw	3	; case 2
 12121  0130D0  B4D8               	btfsc	status,2,c
 12122  0130D2  D7D5               	goto	i2l264
 12123  0130D4  0A01               	xorlw	1	; case 3
 12124  0130D6  B4D8               	btfsc	status,2,c
 12125  0130D8  D7DE               	goto	i2l265
 12126  0130DA                     i2l262:
 12127                           
 12128                           ;temperature.c: 140: ADCON0bits.GO_DONE = 1;
 12129  0130DA  82C2               	bsf	4034,1,c	;volatile
 12130  0130DC  0012               	return	
 12131  0130DE                     __end_of_temperature_interrupt:
 12132                           	opt stack 0
 12133                           pclatu	equ	0xFFB
 12134                           pclath	equ	0xFFA
 12135                           tblptru	equ	0xFF8
 12136                           tblptrh	equ	0xFF7
 12137                           tblptrl	equ	0xFF6
 12138                           tablat	equ	0xFF5
 12139                           prodh	equ	0xFF4
 12140                           prodl	equ	0xFF3
 12141                           intcon	equ	0xFF2
 12142                           postinc0	equ	0xFEE
 12143                           fsr0h	equ	0xFEA
 12144                           fsr0l	equ	0xFE9
 12145                           wreg	equ	0xFE8
 12146                           indf1	equ	0xFE7
 12147                           postdec1	equ	0xFE5
 12148                           fsr1h	equ	0xFE2
 12149                           fsr1l	equ	0xFE1
 12150                           indf2	equ	0xFDF
 12151                           postinc2	equ	0xFDE
 12152                           postdec2	equ	0xFDD
 12153                           fsr2h	equ	0xFDA
 12154                           fsr2l	equ	0xFD9
 12155                           status	equ	0xFD8
 12156                           
 12157 ;; *************** function _frequency_interrupt *****************
 12158 ;; Defined at:
 12159 ;;		line 46 in file "frequency.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;		None
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;		None
 12164 ;; Return value:  Size  Location     Type
 12165 ;;		None               void
 12166 ;; Registers used:
 12167 ;;		wreg, status,2, status,0, cstack
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12175 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12176 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12177 ;;Total ram usage:        8 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; Hardware stack levels required when called:    2
 12180 ;; This function calls:
 12181 ;;		___aldiv
 12182 ;;		___lmul
 12183 ;;		i2___lldiv
 12184 ;;		i2___lltoft
 12185 ;; This function is called by:
 12186 ;;		_high_ISR
 12187 ;; This function uses a non-reentrant model
 12188 ;;
 12189                           
 12190                           	psect	text50
 12191  0124A8                     __ptext50:
 12192                           	opt stack 0
 12193  0124A8                     _frequency_interrupt:
 12194                           	opt stack 20
 12195                           
 12196                           ;frequency.c: 62: if(PIR4bits.CCP4IF == 1)
 12197                           
 12198                           ;incstack = 0
 12199  0124A8  A28F               	btfss	3983,1,c	;volatile
 12200  0124AA  0012               	return	
 12201                           
 12202                           ;frequency.c: 63: {
 12203                           ;frequency.c: 65: cap_measurement_old = cap_measurement_new;
 12204  0124AC  C031  F033         	movff	_cap_measurement_new,_cap_measurement_old
 12205  0124B0  C032  F034         	movff	_cap_measurement_new+1,_cap_measurement_old+1
 12206                           
 12207                           ;frequency.c: 66: cap_measurement_new = (CCPR4L + 256*CCPR4H);
 12208  0124B4  010F               	movlb	15	; () banked
 12209  0124B6  5114               	movf	20,w,b	;volatile
 12210  0124B8  6E1C               	movwf	(??_frequency_interrupt+1)& (0+255),c
 12211  0124BA  6A1B               	clrf	??_frequency_interrupt& (0+255),c
 12212  0124BC  010F               	movlb	15	; () banked
 12213  0124BE  5113               	movf	19,w,b	;volatile
 12214  0124C0  241B               	addwf	??_frequency_interrupt,w,c
 12215  0124C2  6E31               	movwf	_cap_measurement_new,c
 12216  0124C4  0E00               	movlw	0
 12217  0124C6  201C               	addwfc	??_frequency_interrupt+1,w,c
 12218  0124C8  6E32               	movwf	_cap_measurement_new+1,c
 12219                           
 12220                           ; BSR set to: 15
 12221                           ;frequency.c: 67: cap_value = (cap_measurement_new + (interrupt_count * 65535) - cap_mea
      +                          surement_old)/16;
 12222  0124CA  5033               	movf	_cap_measurement_old,w,c
 12223  0124CC  6E1B               	movwf	??_frequency_interrupt& (0+255),c
 12224  0124CE  5034               	movf	_cap_measurement_old+1,w,c
 12225  0124D0  6E1C               	movwf	(??_frequency_interrupt+1)& (0+255),c
 12226  0124D2  6A1D               	clrf	(??_frequency_interrupt+2)& (0+255),c
 12227  0124D4  6A1E               	clrf	(??_frequency_interrupt+3)& (0+255),c
 12228  0124D6  1E1B               	comf	??_frequency_interrupt,f,c
 12229  0124D8  1E1C               	comf	??_frequency_interrupt+1,f,c
 12230  0124DA  1E1D               	comf	??_frequency_interrupt+2,f,c
 12231  0124DC  1E1E               	comf	??_frequency_interrupt+3,f,c
 12232  0124DE  2A1B               	incf	??_frequency_interrupt,f,c
 12233  0124E0  0E00               	movlw	0
 12234  0124E2  221C               	addwfc	??_frequency_interrupt+1,f,c
 12235  0124E4  221D               	addwfc	??_frequency_interrupt+2,f,c
 12236  0124E6  221E               	addwfc	??_frequency_interrupt+3,f,c
 12237  0124E8  C03D  F001         	movff	_interrupt_count,___lmul@multiplier
 12238  0124EC  C03E  F002         	movff	_interrupt_count+1,___lmul@multiplier+1
 12239  0124F0  6A03               	clrf	___lmul@multiplier+2,c
 12240  0124F2  6A04               	clrf	___lmul@multiplier+3,c
 12241  0124F4  0EFF               	movlw	255
 12242  0124F6  6E05               	movwf	___lmul@multiplicand,c
 12243  0124F8  0EFF               	movlw	255
 12244  0124FA  6E06               	movwf	___lmul@multiplicand+1,c
 12245  0124FC  0E00               	movlw	0
 12246  0124FE  6E07               	movwf	___lmul@multiplicand+2,c
 12247  012500  0E00               	movlw	0
 12248  012502  6E08               	movwf	___lmul@multiplicand+3,c
 12249  012504  ECCC  F099         	call	___lmul	;wreg free
 12250  012508  5031               	movf	_cap_measurement_new,w,c
 12251  01250A  2401               	addwf	?___lmul,w,c
 12252  01250C  6E1F               	movwf	(??_frequency_interrupt+4)& (0+255),c
 12253  01250E  5032               	movf	_cap_measurement_new+1,w,c
 12254  012510  2002               	addwfc	?___lmul+1,w,c
 12255  012512  6E20               	movwf	(??_frequency_interrupt+5)& (0+255),c
 12256  012514  0E00               	movlw	0
 12257  012516  2003               	addwfc	?___lmul+2,w,c
 12258  012518  6E21               	movwf	(??_frequency_interrupt+6)& (0+255),c
 12259  01251A  0E00               	movlw	0
 12260  01251C  2004               	addwfc	?___lmul+3,w,c
 12261  01251E  6E22               	movwf	(??_frequency_interrupt+7)& (0+255),c
 12262  012520  501B               	movf	??_frequency_interrupt,w,c
 12263  012522  241F               	addwf	??_frequency_interrupt+4,w,c
 12264  012524  6E0D               	movwf	___aldiv@dividend,c
 12265  012526  501C               	movf	??_frequency_interrupt+1,w,c
 12266  012528  2020               	addwfc	??_frequency_interrupt+5,w,c
 12267  01252A  6E0E               	movwf	___aldiv@dividend+1,c
 12268  01252C  501D               	movf	??_frequency_interrupt+2,w,c
 12269  01252E  2021               	addwfc	??_frequency_interrupt+6,w,c
 12270  012530  6E0F               	movwf	___aldiv@dividend+2,c
 12271  012532  501E               	movf	??_frequency_interrupt+3,w,c
 12272  012534  2022               	addwfc	??_frequency_interrupt+7,w,c
 12273  012536  6E10               	movwf	___aldiv@dividend+3,c
 12274  012538  0E10               	movlw	16
 12275  01253A  6E11               	movwf	___aldiv@divisor,c
 12276  01253C  0E00               	movlw	0
 12277  01253E  6E12               	movwf	___aldiv@divisor+1,c
 12278  012540  0E00               	movlw	0
 12279  012542  6E13               	movwf	___aldiv@divisor+2,c
 12280  012544  0E00               	movlw	0
 12281  012546  6E14               	movwf	___aldiv@divisor+3,c
 12282  012548  ECAF  F094         	call	___aldiv	;wreg free
 12283  01254C  C00D  F053         	movff	?___aldiv,_cap_value
 12284  012550  C00E  F054         	movff	?___aldiv+1,_cap_value+1
 12285  012554  C00F  F055         	movff	?___aldiv+2,_cap_value+2
 12286  012558  C010  F056         	movff	?___aldiv+3,_cap_value+3
 12287                           
 12288                           ;frequency.c: 68: cap_freq = 2000000/cap_value;
 12289  01255C  C053  F005         	movff	_cap_value,i2___lldiv@divisor
 12290  012560  C054  F006         	movff	_cap_value+1,i2___lldiv@divisor+1
 12291  012564  C055  F007         	movff	_cap_value+2,i2___lldiv@divisor+2
 12292  012568  C056  F008         	movff	_cap_value+3,i2___lldiv@divisor+3
 12293  01256C  0E80               	movlw	128
 12294  01256E  6E01               	movwf	i2___lldiv@dividend,c
 12295  012570  0E84               	movlw	132
 12296  012572  6E02               	movwf	i2___lldiv@dividend+1,c
 12297  012574  0E1E               	movlw	30
 12298  012576  6E03               	movwf	i2___lldiv@dividend+2,c
 12299  012578  0E00               	movlw	0
 12300  01257A  6E04               	movwf	i2___lldiv@dividend+3,c
 12301  01257C  EC6F  F098         	call	i2___lldiv	;wreg free
 12302  012580  C001  F00E         	movff	?i2___lldiv,i2___lltoft@c
 12303  012584  C002  F00F         	movff	?i2___lldiv+1,i2___lltoft@c+1
 12304  012588  C003  F010         	movff	?i2___lldiv+2,i2___lltoft@c+2
 12305  01258C  C004  F011         	movff	?i2___lldiv+3,i2___lltoft@c+3
 12306  012590  EC9E  F099         	call	i2___lltoft	;wreg free
 12307  012594  C00E  F0D9         	movff	?i2___lltoft,_cap_freq
 12308  012598  C00F  F0DA         	movff	?i2___lltoft+1,_cap_freq+1
 12309  01259C  C010  F0DB         	movff	?i2___lltoft+2,_cap_freq+2
 12310                           
 12311                           ;frequency.c: 70: interrupt_count = 0;
 12312  0125A0  0E00               	movlw	0
 12313  0125A2  6E3E               	movwf	_interrupt_count+1,c
 12314  0125A4  0E00               	movlw	0
 12315  0125A6  6E3D               	movwf	_interrupt_count,c
 12316                           
 12317                           ;frequency.c: 76: PIR4bits.CCP4IF=0;
 12318  0125A8  928F               	bcf	3983,1,c	;volatile
 12319  0125AA  0012               	return	
 12320  0125AC                     __end_of_frequency_interrupt:
 12321                           	opt stack 0
 12322                           pclatu	equ	0xFFB
 12323                           pclath	equ	0xFFA
 12324                           tblptru	equ	0xFF8
 12325                           tblptrh	equ	0xFF7
 12326                           tblptrl	equ	0xFF6
 12327                           tablat	equ	0xFF5
 12328                           prodh	equ	0xFF4
 12329                           prodl	equ	0xFF3
 12330                           intcon	equ	0xFF2
 12331                           postinc0	equ	0xFEE
 12332                           fsr0h	equ	0xFEA
 12333                           fsr0l	equ	0xFE9
 12334                           wreg	equ	0xFE8
 12335                           indf1	equ	0xFE7
 12336                           postdec1	equ	0xFE5
 12337                           fsr1h	equ	0xFE2
 12338                           fsr1l	equ	0xFE1
 12339                           indf2	equ	0xFDF
 12340                           postinc2	equ	0xFDE
 12341                           postdec2	equ	0xFDD
 12342                           fsr2h	equ	0xFDA
 12343                           fsr2l	equ	0xFD9
 12344                           status	equ	0xFD8
 12345                           
 12346 ;; *************** function i2___lltoft *****************
 12347 ;; Defined at:
 12348 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;  c               4   13[COMRAM] unsigned long 
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;  __lltoft        1   21[COMRAM] unsigned char 
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  3   13[COMRAM] float 
 12355 ;; Registers used:
 12356 ;;		wreg, status,2, status,0, cstack
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12364 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12365 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12366 ;;Total ram usage:        9 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    1
 12369 ;; This function calls:
 12370 ;;		i2___ftpack
 12371 ;; This function is called by:
 12372 ;;		_frequency_interrupt
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	text51
 12377  01333C                     __ptext51:
 12378                           	opt stack 0
 12379  01333C                     i2___lltoft:
 12380                           	opt stack 20
 12381                           
 12382                           ;incstack = 0
 12383  01333C  0E8E               	movlw	142
 12384  01333E  6E16               	movwf	i2___lltoft@exp,c
 12385  013340  D006               	goto	i2l4091
 12386  013342                     i2l4089:
 12387  013342  90D8               	bcf	status,0,c
 12388  013344  3211               	rrcf	i2___lltoft@c+3,f,c
 12389  013346  3210               	rrcf	i2___lltoft@c+2,f,c
 12390  013348  320F               	rrcf	i2___lltoft@c+1,f,c
 12391  01334A  320E               	rrcf	i2___lltoft@c,f,c
 12392  01334C  2A16               	incf	i2___lltoft@exp,f,c
 12393  01334E                     i2l4091:
 12394  01334E  0E00               	movlw	0
 12395  013350  140E               	andwf	i2___lltoft@c,w,c
 12396  013352  6E12               	movwf	??i2___lltoft& (0+255),c
 12397  013354  0E00               	movlw	0
 12398  013356  140F               	andwf	i2___lltoft@c+1,w,c
 12399  013358  6E13               	movwf	(??i2___lltoft+1)& (0+255),c
 12400  01335A  0E00               	movlw	0
 12401  01335C  1410               	andwf	i2___lltoft@c+2,w,c
 12402  01335E  6E14               	movwf	(??i2___lltoft+2)& (0+255),c
 12403  013360  0EFF               	movlw	255
 12404  013362  1411               	andwf	i2___lltoft@c+3,w,c
 12405  013364  6E15               	movwf	(??i2___lltoft+3)& (0+255),c
 12406  013366  5012               	movf	??i2___lltoft,w,c
 12407  013368  1013               	iorwf	??i2___lltoft+1,w,c
 12408  01336A  1014               	iorwf	??i2___lltoft+2,w,c
 12409  01336C  1015               	iorwf	??i2___lltoft+3,w,c
 12410  01336E  A4D8               	btfss	status,2,c
 12411  013370  D7E8               	goto	i2l4089
 12412  013372  C00E  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 12413  013376  C00F  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 12414  01337A  C010  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 12415  01337E  C016  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 12416  013382  0E00               	movlw	0
 12417  013384  6E05               	movwf	i2___ftpack@sign,c
 12418  013386  EC8D  F096         	call	i2___ftpack	;wreg free
 12419  01338A  C001  F00E         	movff	?i2___ftpack,?i2___lltoft
 12420  01338E  C002  F00F         	movff	?i2___ftpack+1,?i2___lltoft+1
 12421  013392  C003  F010         	movff	?i2___ftpack+2,?i2___lltoft+2
 12422  013396  0012               	return	
 12423  013398                     __end_ofi2___lltoft:
 12424                           	opt stack 0
 12425                           pclatu	equ	0xFFB
 12426                           pclath	equ	0xFFA
 12427                           tblptru	equ	0xFF8
 12428                           tblptrh	equ	0xFF7
 12429                           tblptrl	equ	0xFF6
 12430                           tablat	equ	0xFF5
 12431                           prodh	equ	0xFF4
 12432                           prodl	equ	0xFF3
 12433                           intcon	equ	0xFF2
 12434                           postinc0	equ	0xFEE
 12435                           fsr0h	equ	0xFEA
 12436                           fsr0l	equ	0xFE9
 12437                           wreg	equ	0xFE8
 12438                           indf1	equ	0xFE7
 12439                           postdec1	equ	0xFE5
 12440                           fsr1h	equ	0xFE2
 12441                           fsr1l	equ	0xFE1
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           fsr2h	equ	0xFDA
 12446                           fsr2l	equ	0xFD9
 12447                           status	equ	0xFD8
 12448                           
 12449 ;; *************** function i2___ftpack *****************
 12450 ;; Defined at:
 12451 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;  arg             3    0[COMRAM] unsigned um
 12454 ;;  exp             1    3[COMRAM] unsigned char 
 12455 ;;  sign            1    4[COMRAM] unsigned char 
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;		None
 12458 ;; Return value:  Size  Location     Type
 12459 ;;                  3    0[COMRAM] float 
 12460 ;; Registers used:
 12461 ;;		wreg, status,2, status,0
 12462 ;; Tracked objects:
 12463 ;;		On entry : 0/0
 12464 ;;		On exit  : 0/0
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12467 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12469 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12470 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12471 ;;Total ram usage:        8 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; This function calls:
 12474 ;;		Nothing
 12475 ;; This function is called by:
 12476 ;;		i2___lltoft
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           	psect	text52
 12481  012D1A                     __ptext52:
 12482                           	opt stack 0
 12483  012D1A                     i2___ftpack:
 12484                           	opt stack 20
 12485                           
 12486                           ;incstack = 0
 12487  012D1A  5004               	movf	i2___ftpack@exp,w,c
 12488  012D1C  B4D8               	btfsc	status,2,c
 12489  012D1E  D005               	goto	i2l3697
 12490  012D20  5001               	movf	i2___ftpack@arg,w,c
 12491  012D22  1002               	iorwf	i2___ftpack@arg+1,w,c
 12492  012D24  1003               	iorwf	i2___ftpack@arg+2,w,c
 12493  012D26  A4D8               	btfss	status,2,c
 12494  012D28  D00C               	goto	i2l3703
 12495  012D2A                     i2l3697:
 12496  012D2A  0E00               	movlw	0
 12497  012D2C  6E01               	movwf	?i2___ftpack,c
 12498  012D2E  0E00               	movlw	0
 12499  012D30  6E02               	movwf	?i2___ftpack+1,c
 12500  012D32  0E00               	movlw	0
 12501  012D34  6E03               	movwf	?i2___ftpack+2,c
 12502  012D36  0012               	return	
 12503  012D38                     i2l3701:
 12504  012D38  2A04               	incf	i2___ftpack@exp,f,c
 12505  012D3A  90D8               	bcf	status,0,c
 12506  012D3C  3203               	rrcf	i2___ftpack@arg+2,f,c
 12507  012D3E  3202               	rrcf	i2___ftpack@arg+1,f,c
 12508  012D40  3201               	rrcf	i2___ftpack@arg,f,c
 12509  012D42                     i2l3703:
 12510  012D42  0E00               	movlw	0
 12511  012D44  1401               	andwf	i2___ftpack@arg,w,c
 12512  012D46  6E06               	movwf	??i2___ftpack& (0+255),c
 12513  012D48  0E00               	movlw	0
 12514  012D4A  1402               	andwf	i2___ftpack@arg+1,w,c
 12515  012D4C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12516  012D4E  0EFE               	movlw	254
 12517  012D50  1403               	andwf	i2___ftpack@arg+2,w,c
 12518  012D52  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12519  012D54  5006               	movf	??i2___ftpack,w,c
 12520  012D56  1007               	iorwf	??i2___ftpack+1,w,c
 12521  012D58  1008               	iorwf	??i2___ftpack+2,w,c
 12522  012D5A  B4D8               	btfsc	status,2,c
 12523  012D5C  D00C               	goto	i2l3709
 12524  012D5E  D7EC               	goto	i2l3701
 12525  012D60                     i2l3705:
 12526  012D60  2A04               	incf	i2___ftpack@exp,f,c
 12527  012D62  0E01               	movlw	1
 12528  012D64  2601               	addwf	i2___ftpack@arg,f,c
 12529  012D66  0E00               	movlw	0
 12530  012D68  2202               	addwfc	i2___ftpack@arg+1,f,c
 12531  012D6A  0E00               	movlw	0
 12532  012D6C  2203               	addwfc	i2___ftpack@arg+2,f,c
 12533  012D6E  90D8               	bcf	status,0,c
 12534  012D70  3203               	rrcf	i2___ftpack@arg+2,f,c
 12535  012D72  3202               	rrcf	i2___ftpack@arg+1,f,c
 12536  012D74  3201               	rrcf	i2___ftpack@arg,f,c
 12537  012D76                     i2l3709:
 12538  012D76  0E00               	movlw	0
 12539  012D78  1401               	andwf	i2___ftpack@arg,w,c
 12540  012D7A  6E06               	movwf	??i2___ftpack& (0+255),c
 12541  012D7C  0E00               	movlw	0
 12542  012D7E  1402               	andwf	i2___ftpack@arg+1,w,c
 12543  012D80  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12544  012D82  0EFF               	movlw	255
 12545  012D84  1403               	andwf	i2___ftpack@arg+2,w,c
 12546  012D86  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12547  012D88  5006               	movf	??i2___ftpack,w,c
 12548  012D8A  1007               	iorwf	??i2___ftpack+1,w,c
 12549  012D8C  1008               	iorwf	??i2___ftpack+2,w,c
 12550  012D8E  B4D8               	btfsc	status,2,c
 12551  012D90  D006               	goto	i2l3713
 12552  012D92  D7E6               	goto	i2l3705
 12553  012D94                     i2l3711:
 12554  012D94  0604               	decf	i2___ftpack@exp,f,c
 12555  012D96  90D8               	bcf	status,0,c
 12556  012D98  3601               	rlcf	i2___ftpack@arg,f,c
 12557  012D9A  3602               	rlcf	i2___ftpack@arg+1,f,c
 12558  012D9C  3603               	rlcf	i2___ftpack@arg+2,f,c
 12559  012D9E                     i2l3713:
 12560  012D9E  BE02               	btfsc	i2___ftpack@arg+1,7,c
 12561  012DA0  D003               	goto	i2l810
 12562  012DA2  0E02               	movlw	2
 12563  012DA4  6004               	cpfslt	i2___ftpack@exp,c
 12564  012DA6  D7F6               	goto	i2l3711
 12565  012DA8                     i2l810:
 12566  012DA8  A004               	btfss	i2___ftpack@exp,0,c
 12567  012DAA  9E02               	bcf	i2___ftpack@arg+1,7,c
 12568  012DAC  90D8               	bcf	status,0,c
 12569  012DAE  3204               	rrcf	i2___ftpack@exp,f,c
 12570  012DB0  5004               	movf	i2___ftpack@exp,w,c
 12571  012DB2  1203               	iorwf	i2___ftpack@arg+2,f,c
 12572  012DB4  5005               	movf	i2___ftpack@sign,w,c
 12573  012DB6  A4D8               	btfss	status,2,c
 12574  012DB8  8E03               	bsf	i2___ftpack@arg+2,7,c
 12575  012DBA  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 12576  012DBE  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12577  012DC2  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12578  012DC6  0012               	return	
 12579  012DC8                     __end_ofi2___ftpack:
 12580                           	opt stack 0
 12581                           pclatu	equ	0xFFB
 12582                           pclath	equ	0xFFA
 12583                           tblptru	equ	0xFF8
 12584                           tblptrh	equ	0xFF7
 12585                           tblptrl	equ	0xFF6
 12586                           tablat	equ	0xFF5
 12587                           prodh	equ	0xFF4
 12588                           prodl	equ	0xFF3
 12589                           intcon	equ	0xFF2
 12590                           postinc0	equ	0xFEE
 12591                           fsr0h	equ	0xFEA
 12592                           fsr0l	equ	0xFE9
 12593                           wreg	equ	0xFE8
 12594                           indf1	equ	0xFE7
 12595                           postdec1	equ	0xFE5
 12596                           fsr1h	equ	0xFE2
 12597                           fsr1l	equ	0xFE1
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function i2___lldiv *****************
 12606 ;; Defined at:
 12607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  dividend        4    0[COMRAM] unsigned long 
 12610 ;;  divisor         4    4[COMRAM] unsigned long 
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;  __lldiv         4    8[COMRAM] unsigned long 
 12613 ;;  __lldiv         1   12[COMRAM] unsigned char 
 12614 ;; Return value:  Size  Location     Type
 12615 ;;                  4    0[COMRAM] unsigned long 
 12616 ;; Registers used:
 12617 ;;		wreg, status,2, status,0
 12618 ;; Tracked objects:
 12619 ;;		On entry : 0/0
 12620 ;;		On exit  : 0/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12623 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12624 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12626 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12627 ;;Total ram usage:       13 bytes
 12628 ;; Hardware stack levels used:    1
 12629 ;; This function calls:
 12630 ;;		Nothing
 12631 ;; This function is called by:
 12632 ;;		_frequency_interrupt
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	text53
 12637  0130DE                     __ptext53:
 12638                           	opt stack 0
 12639  0130DE                     i2___lldiv:
 12640                           	opt stack 21
 12641                           
 12642                           ;incstack = 0
 12643  0130DE  0E00               	movlw	0
 12644  0130E0  6E09               	movwf	i2___lldiv@quotient,c
 12645  0130E2  0E00               	movlw	0
 12646  0130E4  6E0A               	movwf	i2___lldiv@quotient+1,c
 12647  0130E6  0E00               	movlw	0
 12648  0130E8  6E0B               	movwf	i2___lldiv@quotient+2,c
 12649  0130EA  0E00               	movlw	0
 12650  0130EC  6E0C               	movwf	i2___lldiv@quotient+3,c
 12651  0130EE  5005               	movf	i2___lldiv@divisor,w,c
 12652  0130F0  1006               	iorwf	i2___lldiv@divisor+1,w,c
 12653  0130F2  1007               	iorwf	i2___lldiv@divisor+2,w,c
 12654  0130F4  1008               	iorwf	i2___lldiv@divisor+3,w,c
 12655  0130F6  B4D8               	btfsc	status,2,c
 12656  0130F8  D02A               	goto	i2l952
 12657  0130FA  0E01               	movlw	1
 12658  0130FC  6E0D               	movwf	i2___lldiv@counter,c
 12659  0130FE  D006               	goto	i2l4073
 12660  013100                     i2l4071:
 12661  013100  90D8               	bcf	status,0,c
 12662  013102  3605               	rlcf	i2___lldiv@divisor,f,c
 12663  013104  3606               	rlcf	i2___lldiv@divisor+1,f,c
 12664  013106  3607               	rlcf	i2___lldiv@divisor+2,f,c
 12665  013108  3608               	rlcf	i2___lldiv@divisor+3,f,c
 12666  01310A  2A0D               	incf	i2___lldiv@counter,f,c
 12667  01310C                     i2l4073:
 12668  01310C  AE08               	btfss	i2___lldiv@divisor+3,7,c
 12669  01310E  D7F8               	goto	i2l4071
 12670  013110                     i2l4075:
 12671  013110  90D8               	bcf	status,0,c
 12672  013112  3609               	rlcf	i2___lldiv@quotient,f,c
 12673  013114  360A               	rlcf	i2___lldiv@quotient+1,f,c
 12674  013116  360B               	rlcf	i2___lldiv@quotient+2,f,c
 12675  013118  360C               	rlcf	i2___lldiv@quotient+3,f,c
 12676  01311A  5005               	movf	i2___lldiv@divisor,w,c
 12677  01311C  5C01               	subwf	i2___lldiv@dividend,w,c
 12678  01311E  5006               	movf	i2___lldiv@divisor+1,w,c
 12679  013120  5802               	subwfb	i2___lldiv@dividend+1,w,c
 12680  013122  5007               	movf	i2___lldiv@divisor+2,w,c
 12681  013124  5803               	subwfb	i2___lldiv@dividend+2,w,c
 12682  013126  5008               	movf	i2___lldiv@divisor+3,w,c
 12683  013128  5804               	subwfb	i2___lldiv@dividend+3,w,c
 12684  01312A  A0D8               	btfss	status,0,c
 12685  01312C  D009               	goto	i2l4083
 12686  01312E  5005               	movf	i2___lldiv@divisor,w,c
 12687  013130  5E01               	subwf	i2___lldiv@dividend,f,c
 12688  013132  5006               	movf	i2___lldiv@divisor+1,w,c
 12689  013134  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 12690  013136  5007               	movf	i2___lldiv@divisor+2,w,c
 12691  013138  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 12692  01313A  5008               	movf	i2___lldiv@divisor+3,w,c
 12693  01313C  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 12694  01313E  8009               	bsf	i2___lldiv@quotient,0,c
 12695  013140                     i2l4083:
 12696  013140  90D8               	bcf	status,0,c
 12697  013142  3208               	rrcf	i2___lldiv@divisor+3,f,c
 12698  013144  3207               	rrcf	i2___lldiv@divisor+2,f,c
 12699  013146  3206               	rrcf	i2___lldiv@divisor+1,f,c
 12700  013148  3205               	rrcf	i2___lldiv@divisor,f,c
 12701  01314A  2E0D               	decfsz	i2___lldiv@counter,f,c
 12702  01314C  D7E1               	goto	i2l4075
 12703  01314E                     i2l952:
 12704  01314E  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 12705  013152  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 12706  013156  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 12707  01315A  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 12708  01315E  0012               	return		;funcret
 12709  013160                     __end_ofi2___lldiv:
 12710                           	opt stack 0
 12711                           pclatu	equ	0xFFB
 12712                           pclath	equ	0xFFA
 12713                           tblptru	equ	0xFF8
 12714                           tblptrh	equ	0xFF7
 12715                           tblptrl	equ	0xFF6
 12716                           tablat	equ	0xFF5
 12717                           prodh	equ	0xFF4
 12718                           prodl	equ	0xFF3
 12719                           intcon	equ	0xFF2
 12720                           postinc0	equ	0xFEE
 12721                           fsr0h	equ	0xFEA
 12722                           fsr0l	equ	0xFE9
 12723                           wreg	equ	0xFE8
 12724                           indf1	equ	0xFE7
 12725                           postdec1	equ	0xFE5
 12726                           fsr1h	equ	0xFE2
 12727                           fsr1l	equ	0xFE1
 12728                           indf2	equ	0xFDF
 12729                           postinc2	equ	0xFDE
 12730                           postdec2	equ	0xFDD
 12731                           fsr2h	equ	0xFDA
 12732                           fsr2l	equ	0xFD9
 12733                           status	equ	0xFD8
 12734                           
 12735 ;; *************** function ___lmul *****************
 12736 ;; Defined at:
 12737 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
 12738 ;; Parameters:    Size  Location     Type
 12739 ;;  multiplier      4    0[COMRAM] unsigned long 
 12740 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;  product         4    8[COMRAM] unsigned long 
 12743 ;; Return value:  Size  Location     Type
 12744 ;;                  4    0[COMRAM] unsigned long 
 12745 ;; Registers used:
 12746 ;;		wreg, status,2, status,0
 12747 ;; Tracked objects:
 12748 ;;		On entry : 0/0
 12749 ;;		On exit  : 0/0
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12752 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12753 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12755 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12756 ;;Total ram usage:       12 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; This function calls:
 12759 ;;		Nothing
 12760 ;; This function is called by:
 12761 ;;		_frequency_interrupt
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           	psect	text54
 12766  013398                     __ptext54:
 12767                           	opt stack 0
 12768  013398                     ___lmul:
 12769                           	opt stack 21
 12770                           
 12771                           ;incstack = 0
 12772  013398  0E00               	movlw	0
 12773  01339A  6E09               	movwf	___lmul@product,c
 12774  01339C  0E00               	movlw	0
 12775  01339E  6E0A               	movwf	___lmul@product+1,c
 12776  0133A0  0E00               	movlw	0
 12777  0133A2  6E0B               	movwf	___lmul@product+2,c
 12778  0133A4  0E00               	movlw	0
 12779  0133A6  6E0C               	movwf	___lmul@product+3,c
 12780  0133A8                     i2l4013:
 12781  0133A8  A001               	btfss	___lmul@multiplier,0,c
 12782  0133AA  D008               	goto	i2l4017
 12783  0133AC  5005               	movf	___lmul@multiplicand,w,c
 12784  0133AE  2609               	addwf	___lmul@product,f,c
 12785  0133B0  5006               	movf	___lmul@multiplicand+1,w,c
 12786  0133B2  220A               	addwfc	___lmul@product+1,f,c
 12787  0133B4  5007               	movf	___lmul@multiplicand+2,w,c
 12788  0133B6  220B               	addwfc	___lmul@product+2,f,c
 12789  0133B8  5008               	movf	___lmul@multiplicand+3,w,c
 12790  0133BA  220C               	addwfc	___lmul@product+3,f,c
 12791  0133BC                     i2l4017:
 12792  0133BC  90D8               	bcf	status,0,c
 12793  0133BE  3605               	rlcf	___lmul@multiplicand,f,c
 12794  0133C0  3606               	rlcf	___lmul@multiplicand+1,f,c
 12795  0133C2  3607               	rlcf	___lmul@multiplicand+2,f,c
 12796  0133C4  3608               	rlcf	___lmul@multiplicand+3,f,c
 12797  0133C6  90D8               	bcf	status,0,c
 12798  0133C8  3204               	rrcf	___lmul@multiplier+3,f,c
 12799  0133CA  3203               	rrcf	___lmul@multiplier+2,f,c
 12800  0133CC  3202               	rrcf	___lmul@multiplier+1,f,c
 12801  0133CE  3201               	rrcf	___lmul@multiplier,f,c
 12802  0133D0  5001               	movf	___lmul@multiplier,w,c
 12803  0133D2  1002               	iorwf	___lmul@multiplier+1,w,c
 12804  0133D4  1003               	iorwf	___lmul@multiplier+2,w,c
 12805  0133D6  1004               	iorwf	___lmul@multiplier+3,w,c
 12806  0133D8  A4D8               	btfss	status,2,c
 12807  0133DA  D7E6               	goto	i2l4013
 12808  0133DC  C009  F001         	movff	___lmul@product,?___lmul
 12809  0133E0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12810  0133E4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12811  0133E8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12812  0133EC  0012               	return		;funcret
 12813  0133EE                     __end_of___lmul:
 12814                           	opt stack 0
 12815                           pclatu	equ	0xFFB
 12816                           pclath	equ	0xFFA
 12817                           tblptru	equ	0xFF8
 12818                           tblptrh	equ	0xFF7
 12819                           tblptrl	equ	0xFF6
 12820                           tablat	equ	0xFF5
 12821                           prodh	equ	0xFF4
 12822                           prodl	equ	0xFF3
 12823                           intcon	equ	0xFF2
 12824                           postinc0	equ	0xFEE
 12825                           fsr0h	equ	0xFEA
 12826                           fsr0l	equ	0xFE9
 12827                           wreg	equ	0xFE8
 12828                           indf1	equ	0xFE7
 12829                           postdec1	equ	0xFE5
 12830                           fsr1h	equ	0xFE2
 12831                           fsr1l	equ	0xFE1
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           fsr2h	equ	0xFDA
 12836                           fsr2l	equ	0xFD9
 12837                           status	equ	0xFD8
 12838                           
 12839 ;; *************** function ___aldiv *****************
 12840 ;; Defined at:
 12841 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\aldiv.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;  dividend        4   12[COMRAM] long 
 12844 ;;  divisor         4   16[COMRAM] long 
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;  quotient        4   22[COMRAM] long 
 12847 ;;  sign            1   21[COMRAM] unsigned char 
 12848 ;;  counter         1   20[COMRAM] unsigned char 
 12849 ;; Return value:  Size  Location     Type
 12850 ;;                  4   12[COMRAM] long 
 12851 ;; Registers used:
 12852 ;;		wreg, status,2, status,0
 12853 ;; Tracked objects:
 12854 ;;		On entry : 0/0
 12855 ;;		On exit  : 0/0
 12856 ;;		Unchanged: 0/0
 12857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12858 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12859 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12861 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12862 ;;Total ram usage:       14 bytes
 12863 ;; Hardware stack levels used:    1
 12864 ;; This function calls:
 12865 ;;		Nothing
 12866 ;; This function is called by:
 12867 ;;		_frequency_interrupt
 12868 ;; This function uses a non-reentrant model
 12869 ;;
 12870                           
 12871                           	psect	text55
 12872  01295E                     __ptext55:
 12873                           	opt stack 0
 12874  01295E                     ___aldiv:
 12875                           	opt stack 21
 12876                           
 12877                           ;incstack = 0
 12878  01295E  0E00               	movlw	0
 12879  012960  6E16               	movwf	___aldiv@sign,c
 12880  012962  AE14               	btfss	___aldiv@divisor+3,7,c
 12881  012964  D00A               	goto	i2l4029
 12882  012966  1E14               	comf	___aldiv@divisor+3,f,c
 12883  012968  1E13               	comf	___aldiv@divisor+2,f,c
 12884  01296A  1E12               	comf	___aldiv@divisor+1,f,c
 12885  01296C  6C11               	negf	___aldiv@divisor,c
 12886  01296E  0E00               	movlw	0
 12887  012970  2212               	addwfc	___aldiv@divisor+1,f,c
 12888  012972  2213               	addwfc	___aldiv@divisor+2,f,c
 12889  012974  2214               	addwfc	___aldiv@divisor+3,f,c
 12890  012976  0E01               	movlw	1
 12891  012978  6E16               	movwf	___aldiv@sign,c
 12892  01297A                     i2l4029:
 12893  01297A  AE10               	btfss	___aldiv@dividend+3,7,c
 12894  01297C  D00A               	goto	i2l4035
 12895  01297E  1E10               	comf	___aldiv@dividend+3,f,c
 12896  012980  1E0F               	comf	___aldiv@dividend+2,f,c
 12897  012982  1E0E               	comf	___aldiv@dividend+1,f,c
 12898  012984  6C0D               	negf	___aldiv@dividend,c
 12899  012986  0E00               	movlw	0
 12900  012988  220E               	addwfc	___aldiv@dividend+1,f,c
 12901  01298A  220F               	addwfc	___aldiv@dividend+2,f,c
 12902  01298C  2210               	addwfc	___aldiv@dividend+3,f,c
 12903  01298E  0E01               	movlw	1
 12904  012990  1A16               	xorwf	___aldiv@sign,f,c
 12905  012992                     i2l4035:
 12906  012992  0E00               	movlw	0
 12907  012994  6E17               	movwf	___aldiv@quotient,c
 12908  012996  0E00               	movlw	0
 12909  012998  6E18               	movwf	___aldiv@quotient+1,c
 12910  01299A  0E00               	movlw	0
 12911  01299C  6E19               	movwf	___aldiv@quotient+2,c
 12912  01299E  0E00               	movlw	0
 12913  0129A0  6E1A               	movwf	___aldiv@quotient+3,c
 12914  0129A2  5011               	movf	___aldiv@divisor,w,c
 12915  0129A4  1012               	iorwf	___aldiv@divisor+1,w,c
 12916  0129A6  1013               	iorwf	___aldiv@divisor+2,w,c
 12917  0129A8  1014               	iorwf	___aldiv@divisor+3,w,c
 12918  0129AA  B4D8               	btfsc	status,2,c
 12919  0129AC  D02A               	goto	i2l4057
 12920  0129AE  0E01               	movlw	1
 12921  0129B0  6E15               	movwf	___aldiv@counter,c
 12922  0129B2  D006               	goto	i2l4043
 12923  0129B4                     i2l4041:
 12924  0129B4  90D8               	bcf	status,0,c
 12925  0129B6  3611               	rlcf	___aldiv@divisor,f,c
 12926  0129B8  3612               	rlcf	___aldiv@divisor+1,f,c
 12927  0129BA  3613               	rlcf	___aldiv@divisor+2,f,c
 12928  0129BC  3614               	rlcf	___aldiv@divisor+3,f,c
 12929  0129BE  2A15               	incf	___aldiv@counter,f,c
 12930  0129C0                     i2l4043:
 12931  0129C0  AE14               	btfss	___aldiv@divisor+3,7,c
 12932  0129C2  D7F8               	goto	i2l4041
 12933  0129C4                     i2l4045:
 12934  0129C4  90D8               	bcf	status,0,c
 12935  0129C6  3617               	rlcf	___aldiv@quotient,f,c
 12936  0129C8  3618               	rlcf	___aldiv@quotient+1,f,c
 12937  0129CA  3619               	rlcf	___aldiv@quotient+2,f,c
 12938  0129CC  361A               	rlcf	___aldiv@quotient+3,f,c
 12939  0129CE  5011               	movf	___aldiv@divisor,w,c
 12940  0129D0  5C0D               	subwf	___aldiv@dividend,w,c
 12941  0129D2  5012               	movf	___aldiv@divisor+1,w,c
 12942  0129D4  580E               	subwfb	___aldiv@dividend+1,w,c
 12943  0129D6  5013               	movf	___aldiv@divisor+2,w,c
 12944  0129D8  580F               	subwfb	___aldiv@dividend+2,w,c
 12945  0129DA  5014               	movf	___aldiv@divisor+3,w,c
 12946  0129DC  5810               	subwfb	___aldiv@dividend+3,w,c
 12947  0129DE  A0D8               	btfss	status,0,c
 12948  0129E0  D009               	goto	i2l4053
 12949  0129E2  5011               	movf	___aldiv@divisor,w,c
 12950  0129E4  5E0D               	subwf	___aldiv@dividend,f,c
 12951  0129E6  5012               	movf	___aldiv@divisor+1,w,c
 12952  0129E8  5A0E               	subwfb	___aldiv@dividend+1,f,c
 12953  0129EA  5013               	movf	___aldiv@divisor+2,w,c
 12954  0129EC  5A0F               	subwfb	___aldiv@dividend+2,f,c
 12955  0129EE  5014               	movf	___aldiv@divisor+3,w,c
 12956  0129F0  5A10               	subwfb	___aldiv@dividend+3,f,c
 12957  0129F2  8017               	bsf	___aldiv@quotient,0,c
 12958  0129F4                     i2l4053:
 12959  0129F4  90D8               	bcf	status,0,c
 12960  0129F6  3214               	rrcf	___aldiv@divisor+3,f,c
 12961  0129F8  3213               	rrcf	___aldiv@divisor+2,f,c
 12962  0129FA  3212               	rrcf	___aldiv@divisor+1,f,c
 12963  0129FC  3211               	rrcf	___aldiv@divisor,f,c
 12964  0129FE  2E15               	decfsz	___aldiv@counter,f,c
 12965  012A00  D7E1               	goto	i2l4045
 12966  012A02                     i2l4057:
 12967  012A02  5016               	movf	___aldiv@sign,w,c
 12968  012A04  B4D8               	btfsc	status,2,c
 12969  012A06  D008               	goto	i2l4061
 12970  012A08  1E1A               	comf	___aldiv@quotient+3,f,c
 12971  012A0A  1E19               	comf	___aldiv@quotient+2,f,c
 12972  012A0C  1E18               	comf	___aldiv@quotient+1,f,c
 12973  012A0E  6C17               	negf	___aldiv@quotient,c
 12974  012A10  0E00               	movlw	0
 12975  012A12  2218               	addwfc	___aldiv@quotient+1,f,c
 12976  012A14  2219               	addwfc	___aldiv@quotient+2,f,c
 12977  012A16  221A               	addwfc	___aldiv@quotient+3,f,c
 12978  012A18                     i2l4061:
 12979  012A18  C017  F00D         	movff	___aldiv@quotient,?___aldiv
 12980  012A1C  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
 12981  012A20  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
 12982  012A24  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
 12983  012A28  0012               	return	
 12984  012A2A                     __end_of___aldiv:
 12985                           	opt stack 0
 12986                           pclatu	equ	0xFFB
 12987                           pclath	equ	0xFFA
 12988                           tblptru	equ	0xFF8
 12989                           tblptrh	equ	0xFF7
 12990                           tblptrl	equ	0xFF6
 12991                           tablat	equ	0xFF5
 12992                           prodh	equ	0xFF4
 12993                           prodl	equ	0xFF3
 12994                           intcon	equ	0xFF2
 12995                           postinc0	equ	0xFEE
 12996                           fsr0h	equ	0xFEA
 12997                           fsr0l	equ	0xFE9
 12998                           wreg	equ	0xFE8
 12999                           indf1	equ	0xFE7
 13000                           postdec1	equ	0xFE5
 13001                           fsr1h	equ	0xFE2
 13002                           fsr1l	equ	0xFE1
 13003                           indf2	equ	0xFDF
 13004                           postinc2	equ	0xFDE
 13005                           postdec2	equ	0xFDD
 13006                           fsr2h	equ	0xFDA
 13007                           fsr2l	equ	0xFD9
 13008                           status	equ	0xFD8
 13009                           pclatu	equ	0xFFB
 13010                           pclath	equ	0xFFA
 13011                           tblptru	equ	0xFF8
 13012                           tblptrh	equ	0xFF7
 13013                           tblptrl	equ	0xFF6
 13014                           tablat	equ	0xFF5
 13015                           prodh	equ	0xFF4
 13016                           prodl	equ	0xFF3
 13017                           intcon	equ	0xFF2
 13018                           postinc0	equ	0xFEE
 13019                           fsr0h	equ	0xFEA
 13020                           fsr0l	equ	0xFE9
 13021                           wreg	equ	0xFE8
 13022                           indf1	equ	0xFE7
 13023                           postdec1	equ	0xFE5
 13024                           fsr1h	equ	0xFE2
 13025                           fsr1l	equ	0xFE1
 13026                           indf2	equ	0xFDF
 13027                           postinc2	equ	0xFDE
 13028                           postdec2	equ	0xFDD
 13029                           fsr2h	equ	0xFDA
 13030                           fsr2l	equ	0xFD9
 13031                           status	equ	0xFD8
 13032                           
 13033                           	psect	rparam
 13034  0000                     pclatu	equ	0xFFB
 13035                           pclath	equ	0xFFA
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           postinc0	equ	0xFEE
 13044                           fsr0h	equ	0xFEA
 13045                           fsr0l	equ	0xFE9
 13046                           wreg	equ	0xFE8
 13047                           indf1	equ	0xFE7
 13048                           postdec1	equ	0xFE5
 13049                           fsr1h	equ	0xFE2
 13050                           fsr1l	equ	0xFE1
 13051                           indf2	equ	0xFDF
 13052                           postinc2	equ	0xFDE
 13053                           postdec2	equ	0xFDD
 13054                           fsr2h	equ	0xFDA
 13055                           fsr2l	equ	0xFD9
 13056                           status	equ	0xFD8
 13057                           
 13058                           	psect	temp
 13059  00005E                     btemp:
 13060                           	opt stack 0
 13061  00005E                     	ds	1
 13062  0000                     int$flags	set	btemp
 13063                           pclatu	equ	0xFFB
 13064                           pclath	equ	0xFFA
 13065                           tblptru	equ	0xFF8
 13066                           tblptrh	equ	0xFF7
 13067                           tblptrl	equ	0xFF6
 13068                           tablat	equ	0xFF5
 13069                           prodh	equ	0xFF4
 13070                           prodl	equ	0xFF3
 13071                           intcon	equ	0xFF2
 13072                           postinc0	equ	0xFEE
 13073                           fsr0h	equ	0xFEA
 13074                           fsr0l	equ	0xFE9
 13075                           wreg	equ	0xFE8
 13076                           indf1	equ	0xFE7
 13077                           postdec1	equ	0xFE5
 13078                           fsr1h	equ	0xFE2
 13079                           fsr1l	equ	0xFE1
 13080                           indf2	equ	0xFDF
 13081                           postinc2	equ	0xFDE
 13082                           postdec2	equ	0xFDD
 13083                           fsr2h	equ	0xFDA
 13084                           fsr2l	equ	0xFD9
 13085                           status	equ	0xFD8


Data Sizes:
    Strings     118
    Constant    383
    Data        26
    BSS         784
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      93
    BANK0           160    121     143
    BANK1           256      0     150
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_6(CODE[27]), STR_5(CODE[34]), STR_4(CODE[24]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 200
		 -> lora_message(BANK3[200]), cap_step_message(BANK4[200]), cap_frequency_message(BANK2[200]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sendUARTMessage@newMessagePointer	PTR unsigned char  size(2) Largest target is 200
		 -> lora_message(BANK3[200]), join_network(CODE[16]), set_app_key(CODE[50]), set_app_eui(CODE[34]), 
		 -> set_dev_eui(CODE[34]), cap_step_message(BANK4[200]), cap_frequency_message(BANK2[200]), 

    currentMessagePointer	PTR unsigned char  size(2) Largest target is 200
		 -> NULL(NULL[0]), lora_message(BANK3[200]), join_network(CODE[16]), set_app_key(CODE[50]), 
		 -> set_app_eui(CODE[34]), set_dev_eui(CODE[34]), cap_step_message(BANK4[200]), cap_frequency_message(BANK2[200]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_ISR in COMRAM

    _high_ISR->_frequency_interrupt
    _frequency_interrupt->___aldiv
    i2___lltoft->i2___lldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    _main->_sendSensorData
    _sendSensorData->_sprintf
    _make_step_message->_sprintf
    _make_frequency_message->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___llmod->___lldiv
    _initSPI->_pow
    _initLoRa->_sendUARTMessage
    _sendUARTMessage->_delay_ms
    _digipot->_adjustDigipot
    _adjustDigipot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _high_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  379643
                        _UARTReceive
                           _delay_ms
                            _digipot
                            _initADC
                     _initInterrupts
                           _initLoRa
                            _initSPI
                          _initUART1
                     _init_frequency
             _make_frequency_message
                  _make_step_message
                     _sendSensorData
                    _sendUARTMessage
 ---------------------------------------------------------------------------------
 (1) _sendSensorData                                      12     0     12   56664
                                            109 BANK0     12     0     12
                           _delay_ms
                    _sendUARTMessage
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _make_step_message                                    0     0      0   54350
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _make_frequency_message                               0     0      0   54350
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             54    38     16   54350
                                             63 BANK0     46    30     16
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12793
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12595
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1704
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1836
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     750
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_frequency                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUART1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSPI                                              9     9      0  100121
                                            102 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                                _pow
                         _remappings
 ---------------------------------------------------------------------------------
 (2) _remappings                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLoRa                                             0     0      0    1970
                           _delay_ms
                    _sendUARTMessage
 ---------------------------------------------------------------------------------
 (1) _sendUARTMessage                                      2     0      2    1220
                                              5 BANK0      2     0      2
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     750
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _digipot                                              0     0      0  110196
                             ___ftge
                            ___ftmul
                           ___lltoft
                      _adjustDigipot
                           _unselect
 ---------------------------------------------------------------------------------
 (2) _unselect                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adjustDigipot                                        9     9      0  100121
                                            102 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   81582
                                             85 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   27291
                                             69 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   42600
                                             76 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     376
                                             69 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    9325
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     480
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     700
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1288
                                             35 BANK0      9     3      6
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2389
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   13479
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2463
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6301
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4578
                                             57 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4153
                                             45 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     301
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3209
                                             57 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2598
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2486
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2209
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2187
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _UARTReceive                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_ISR                                            14    14      0    1368
                                             34 COMRAM    14    14      0
                _frequency_interrupt
              _temperature_interrupt
                   _timer1_interrupt
                     _uart_interrupt
 ---------------------------------------------------------------------------------
 (9) _uart_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _timer1_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _temperature_interrupt                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _frequency_interrupt                                  8     8      0    1368
                                             26 COMRAM     8     8      0
                            ___aldiv
                             ___lmul
                          i2___lldiv
                         i2___lltoft
 ---------------------------------------------------------------------------------
 (10) i2___lltoft                                          9     5      4     404
                                             13 COMRAM     9     5      4
                         i2___ftpack
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) ___lmul                                             12     4      8     322
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (10) ___aldiv                                            14     6      8     428
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTReceive
   _delay_ms
   _digipot
     ___ftge
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___lltoft
       ___ftpack
     _adjustDigipot
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lbtoft
         ___ftpack
       _pow
         ___ftge
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _unselect
   _initADC
   _initInterrupts
   _initLoRa
     _delay_ms
     _sendUARTMessage
       _delay_ms
   _initSPI
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___lbtoft
       ___ftpack
     _pow
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _exp (ARG)
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftge
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _remappings
   _initUART1
   _init_frequency
   _make_frequency_message
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _make_step_message
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sendSensorData
     _delay_ms
     _sendUARTMessage
       _delay_ms
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sendUARTMessage
     _delay_ms

 _high_ISR (ROOT)
   _frequency_interrupt
     ___aldiv
       ___lmul (ARG)
     ___lmul
     i2___lldiv
     i2___lltoft
       i2___ftpack
       i2___lldiv (ARG)
   _temperature_interrupt
   _timer1_interrupt
   _uart_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      C8      12       78.1%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      C8      10       78.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      96       8       58.6%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      5D       1       98.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3DA       6        0.0%
DATA                 0      0     3DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Apr 20 15:03:11 2017

                    ___altoft@exp 00A1                     ___altoft@sign 00A2  
                    ___awdiv@sign 006B               ___wmul@multiplicand 0070  
                      i2___ftpack 2D1A                      ___ftadd@exp1 0098  
                    ___ftadd@exp2 0097                        i2___lltoft 333C  
                    ___ftadd@sign 0096                               l160 36AA  
                             l309 345C                               l166 326A  
                             l540 0548                               l453 2954  
                             l810 2474                               l833 11BE  
                             l907 3590                               l837 11F8  
                             l839 1220                               l848 12F6  
                             l952 2C5A                               l857 1320  
                             l962 3034                               l778 1AC0  
                             l882 1938                               l875 1874  
                             l868 1FE4                               l876 18B8  
          ?_temperature_interrupt 0001                               _exp 13BE  
                             _log 1C30                               _pow 15F8  
                    ___awmod@sign 0065                               wreg 000FE8  
                      _TXSTA1bits 000FAD                  _cap_step_message 0400  
           ??_frequency_interrupt 001B                      ___ftdiv@cntr 00A2  
                    ___ftdiv@sign 00A7                              l1042 179E  
                            l1204 14A4                              l1205 15EA  
                            l1037 1640                              l1215 269C  
                            l3001 1398                              l3011 1B0C  
                            l3031 1B94                              l3041 1BD2  
                            l3017 1B46                              l3113 214C  
                            l3105 2116                              l3035 1BB2  
                            l3107 2126                              l3045 1BF0  
                            l3061 2AAA                              l3109 2130  
                            l3125 2CA0                              l3221 25FC  
                            l3143 1F08                              l3233 26F8  
                            l3057 2A6A                              l3225 261A  
                            l3217 25E8                              l3313 2BA6  
                            l3305 2B84                              l3235 2784  
                            l3067 2AEE                              l3251 230E  
                            l3243 22A8                              l3403 146E  
                            l3149 1F42                              l3077 2054  
                            l3309 2B92                              l3341 2EE2  
                            l3333 2EAC                              l3325 2E88  
                            l3095 20E6                              l3263 233C  
                            l3431 3446                              l3335 2EB8  
                            l3169 1FA2                              l3425 15BA  
                            l3281 2B0E                              l3337 2EBE  
                            l3345 2EF0                              l3329 2E98  
                            l3513 0BE6                              l4313 27C2  
                            l3355 3168                              l3187 3410  
                            l3099 20FA                              l3267 234C  
                            l3451 1678                              l3603 1996  
                            l3531 0E5A                              l3507 0B14  
                            l3357 3178                              l3445 1654  
                            l3541 17E6                              l3293 2B42  
                            l3349 2F04                              l3525 0D88  
                            l3517 0C12                              l2903 247E  
                            l3199 349A                              l3391 13E2  
                            l3375 1C82                              l3463 1716  
                            l3295 2B4E                              l3287 2B24  
                            l3369 1C54                              l3641 1A8A  
                            l3625 1A3E                              l3617 19EA  
                            l3297 2B54                              l3801 0206  
                            l3459 16F0                              l3547 1820  
                            l3811 0290                              l2909 249A  
                            l3397 1428                              l3741 32A6  
                            l3661 2BDE                              l3637 1A76  
                            l3581 1902                              l3493 1108  
                            l3485 1018                              l3901 06D0  
                            l3821 0308                              l3805 0234  
                            l2943 11CC                              l2927 2F3A  
                            l4199 28FC                              l3663 2BEE  
                            l3647 1AA6                              l3831 0366  
                            l3807 024A                              l3751 0030  
                            l2881 23B6                              l2929 2F4A  
                            l3673 2C48                              l3665 2BF4  
                            l3681 2FC8                              l3649 1AB6  
                            l3577 18EE                              l3913 0722  
                            l3817 02DA                              l3809 027A  
                            l3753 003C                              l3761 0050  
                            l3745 0010                              l2971 1286  
                            l2955 1216                              l3683 2FD8  
                            l3587 191E                              l3915 0728  
                            l3907 06EA                              l3835 03CC  
                            l3755 0042                              l3763 008A  
                            l2893 2428                              l2885 23CA  
                            l2973 1294                              l2965 1258  
                            l2949 1206                              l3685 2FDE  
                            l3597 1970                              l3589 192E  
                            l3853 044A                              l3837 03D2  
                            l3909 06F8                              l3757 0048  
                            l2895 2458                              l2887 23D8  
                            l2991 134A                              l2983 12DC  
                            l2975 12A2                              l3951 080A  
                            l3927 0774                              l3943 07C6  
                            l3871 0516                              l3855 0452  
                            l3863 04EE                              l2897 2466  
                            l2889 2408                              l2985 12EA  
                            l2977 12AE                              l3689 3022  
                            l3953 081A                              l3961 0926  
                            l3929 077A                              l3945 07D8  
                            l3873 052A                              l3865 04FC  
                            l3849 041E                              l3793 0196  
                            l3777 00E4                              l3955 08A4  
                            l3963 0938                              l3971 0982  
                            ?_exp 00AC                              l3885 057C  
                            l3877 054C                              ?_log 00A5  
                            l3967 094A                              l3993 1DA4  
                            l3889 05CE                              l3969 0960  
                            l3987 1D94                              l3899 06C2  
                            l3997 1DB2                              ?_pow 00B5  
                            STR_1 FFEE                              STR_2 FFC1  
                            STR_3 FFFC                              STR_4 FFC5  
                            STR_5 FF88                              STR_6 FFAA  
                            STR_7 FFDD                              u2221 116C  
                            u2231 118A                              u2431 1AE8  
                            u3080 16D2                              u2521 2030  
                            u2610 2CD2                              u2451 1B22  
                            u3171 17C2                              u2540 207A  
                            u2621 1EE4                              u3191 17FC  
                            u2720 260C                              u2641 1F1E  
                            u2545 2070                              u4217 344E  
                            u2618 2CD6                              u3710 0540  
                            u3550 012A                              u2760 22DA  
                            u3480 3290                              u3490 32C8  
                            u3555 011E                              u3487 3286  
                            u2768 22DE                              u3497 32BE  
                            u2980 1478                              u2990 147A  
           __end_of_adjustDigipot 1ECE           ?_make_frequency_message 0001  
                            _main 279E                      ___ftpack@arg 0060  
                    ___ftpack@exp 0063                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _step 00E8  
                            btemp 005E                              exp@x 00AC  
                            log@x 00A5                              pclat 000FFA  
                            pow@x 00B5                              pow@y 00B8  
                            prodh 000FF4                              prodl 000FF3  
                            start 008E                  ??_uart_interrupt 0001  
                    _sprintf$2536 00B5                      ___ftmul@cntr 0081  
                    ___param_bank 000010                      ___ftmul@sign 0082  
                    ___fttol@exp1 0098                      i2___lltoft@c 000E  
                           ??_exp 00AF                             ??_log 00A8  
                    ___fttol@lval 0094                  ?_sendUARTMessage 0065  
                           ??_pow 00BB                      _BAUDCON1bits 000F7E  
                 __end_of___aldiv 2A2A                             ?_main 0001  
                 __end_of___awdiv 2BB0                             _ADRES 000FC3  
                 __end_of___ftadd 13BE             __end_of_ambient_ascii FEC1  
                 __end_of___awmod 2F0E                   __end_of___ftdiv 201A  
                 __end_of___ftneg 359E                   __end_of___lldiv 2C6C  
                 __end_of___ftmul 1C30                   ___awdiv@divisor 0068  
                 __end_of___llmod 3046                   __end_of___ftsub 343A  
                 __end_of___fttol 215E                             i2l261 304E  
                           i2l262 30DA                             i2l263 3066  
                           i2l264 307E                             i2l265 3096  
                           i2l810 2DA8                             i2l952 314E  
                 ___awdiv@counter 006A                             _TMR1H 000FCF  
                           _TMR1L 000FCE                             _RPOR2 000EC2  
                           _RPOR5 000EC5        sendSensorData@ambient_temp 00D0  
             ___lmul@multiplicand 0005                      ___lltoft@exp 0070  
                 __end_of_digipot 295E                   __end_of_initADC 35CC  
                   ___awtoft@sign 006B                   __end_of_initSPI 2284  
                 __end_of_dpowers FE31                             _floor 25AC  
                           _ldexp 2284                             _frexp 2C6C  
                           _errno 00E2                             _scale 0990  
  __end_of_make_frequency_message 3624                     ___ftpack@sign 0064  
                           _value 004D                             _timer 004B  
        __end_of_send_data_part_1 FEC9                             _state 00E7  
                           tablat 000FF5                             pow@yi 00C2  
                           status 000FD8                   __end_of_sprintf 0990  
                     exp@exponent 00B2                __size_ofi2___lldiv 0082  
                     ldexp@newexp 00A8                   __initialization 2DC8  
           __end_of_send_data_EOL FEC8                       log@exponent 00A8  
               i2___lldiv@divisor 0005                      __end_of_main 288E  
               i2___lldiv@counter 000D                       ?i2___ftpack 0001  
                     ?i2___lltoft 000E                            ??_main 00D9  
                   ___fttol@sign1 0093                    _sendSensorData 32D0  
                   __activetblptr 000003              __size_of__tdiv_to_l_ 019E  
               _last_uart_message 0164          sendSensorData@inductance 00D6  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          ?_floor 00A3                            ?_ldexp 00A5  
                          ?_frexp 0060                  __end_of___altoft 2FAC  
               _make_step_message 3624                  ___llmod@dividend 006D  
                          ?_scale 0083                            _CCPR4H 000F14  
                          _CCPR4L 000F13                            _EECON2 000FA7  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 0066                  __end_of___awtoft 34C2  
                __end_of___ftpack 24A8                  __end_of___lbtoft 35FA  
                __end_of___lltoft 31DC                            i2l4013 33A8  
                          i2l4041 29B4                            i2l4017 33BC  
                          i2l4043 29C0                            i2l4035 2992  
                          i2l4061 2A18                            i2l4053 29F4  
                          i2l4045 29C4                            i2l4029 297A  
                          _IOLOCK 0075F8                    __CFG_WDTEN$OFF 000000  
                          i2l4071 3100                            i2l4057 2A02  
                          i2l4073 310C                            i2l4083 3140  
                          i2l4075 3110                            i2l4091 334E  
                          i2l3701 2D38                            i2l2661 30B0  
                          i2l3711 2D94                            i2l3703 2D42  
                          i2l3713 2D9E                            i2l3705 2D60  
                          i2l4089 3342                            i2l3709 2D76  
                          _INTCON 000FF2                            i2l3697 2D2A  
              ?_make_step_message 0001                            _RCREG1 000FAF  
                          _SPBRG1 000FB0                            _SSPBUF 000FC9  
                          _TXREG1 000FAE                      ?_UARTReceive 0001  
                __end_of_delay_ms 347E               ??_make_step_message 00CD  
                  __CFG_XINST$OFF 000000                  __end_of_high_ISR 008E  
            _temp_display_message 0182                  _timer1_interrupt 36AE  
                __end_of__powers_ FE7F                      _CCPTMRS1bits 000F51  
                          ___ftge 2A2A                            ___lmul 3398  
                       ??___aldiv 0015                            ___wmul 3538  
                       ??___awdiv 006A                         ??___ftadd 0093  
                       ??___awmod 0064                         ??___ftdiv 009F  
                       ??___ftneg 0063                         ??___lldiv 0068  
                       ??___ftmul 007A                         ??___llmod 0075  
                       ??___ftsub 009F                         ??___fttol 008E  
                __end_of_initLoRa 3256            __end_of_sendSensorData 333C  
                          _fround 0E86                            clear_0 2DCE  
                          clear_1 2DDA                            clear_2 2DE6  
                          clear_3 2DF2                            clear_4 2DFE  
                          clear_5 2E0A                  ___awdiv@quotient 006C  
                 ___awmod@divisor 0062                            _valueH 004F  
                          _valueL 0051                         ??_digipot 00CF  
                 ___awmod@counter 0064                            floor@i 00A6  
                          floor@x 00A3                         ??_initADC 0060  
           ___ftmul@f3_as_product 007E             __end_of_set_data_rate FEAE  
                       ??_initSPI 00C6                      __pdataCOMRAM 0057  
               __end_ofi2___lldiv 3160                      __mediumconst FE08  
       __end_of_make_step_message 364A                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 00AF                  __end_of_unselect 36CC  
                __end_ofexp@coeff FF5D                  __end_oflog@coeff FF78  
                      __accesstop 0060           __end_of__initialization 2E62  
                      ___altoft@c 0099             _cap_frequency_message 0200  
                      ___ftadd@f1 008D                        ___ftadd@f2 0090  
             __size_ofi2___ftpack 00AE                        ___ftge@ff1 0083  
                      ___ftge@ff2 0086               __size_ofi2___lltoft 005C  
                    eval_poly@res 00A2                     ___rparam_used 000001  
                      ___ftdiv@f1 0099                        ___ftdiv@f2 009C  
                      ___ftdiv@f3 00A3                        ___ftneg@f1 0060  
                      ___awtoft@c 0068                    i2___ftpack@arg 0001  
                  i2___ftpack@exp 0004                        ___lbtoft@c 006B  
                      ___ftmul@f1 0074                        ___ftmul@f2 0077  
                      ___ftsub@f1 0099                        ___ftsub@f2 009C  
                      ___fttol@f1 008A                    __pcstackCOMRAM 0001  
              i2___lldiv@dividend 0001                      __pidataBANK0 36CC  
                    __pidataBANK1 3686                        ___lltoft@c 0068  
         __size_of_initInterrupts 0008                     __end_of_floor 26AA  
                   __end_of_ldexp 239C                     __end_of_frexp 2D1A  
                   __end_of_scale 0E86           ??_temperature_interrupt 0001  
                 ?_sendSensorData 00CD                        __div_to_l_ 194A  
                 __div_to_l_@exp1 006B                           ??_floor 00A6  
                         ??_ldexp 00AA                   __div_to_l_@cntr 006A  
                         ??_frexp 0065                           ??_scale 0086  
                  i2___lltoft@exp 0016                   __div_to_l_@quot 0066  
              i2___lldiv@quotient 0009                        __pbssBANK0 00D9  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                      __pbssBANK3 0300                        __pbssBANK4 0400  
              __size_of_initUART1 001C                __size_of_eval_poly 00F4  
                      __pnvCOMRAM 005C                     __div_to_l_@f1 0060  
                   __div_to_l_@f2 0063             __end_of_getVerCommand FEBC  
                      _bigorsmall 00E6                           ?___ftge 0083  
                         ?___lmul 0001                           ?___wmul 006E  
                         _CCP4CON 000F12                         ?___altoft 0099  
                         ?_fround 0083                    ___lmul@product 0009  
                       ?___awtoft 0068                         ?___ftpack 0060  
                       ?___lbtoft 0068                         ?___lltoft 0068  
     __end_of_frequency_interrupt 25AC                __CFG_OSC$INTOSCPLL 000000  
      __size_of_make_step_message 0026                         ?_delay_ms 0060  
                         _SPBRGH1 000F7F                           _RPINR21 000EFC  
                       ?_high_ISR 0001                  __CFG_CFGPLLEN$ON 000000  
                       ?_initLoRa 0001              UARTReceive@on_or_off 0060  
               __end_of_delimiter FEC7                 __end_of__npowers_ FE58  
                         __Hparam 0000                        _scale$2535 0086  
                         __Lparam 0000              __size_of_UARTReceive 0014  
                         ___aldiv 295E                   __size_of___ftge 00C8  
                         ___awdiv 2AF2                   __size_of___lmul 0056  
                         ___ftadd 1156                           ___awmod 2E6C  
                         ___ftdiv 1ECE                           ___ftneg 356E  
                         ___lldiv 2BB0                   __size_of___wmul 0036  
                         ___ftmul 1AD2                           ___llmod 2FAC  
                         ___ftsub 33EE                           ___fttol 201A  
                      ??___altoft 009D                         ?_unselect 0001  
                         __pcinit 2DC8                      ??i2___ftpack 0006  
                      ??___awtoft 006B                        ??___ftpack 0065  
                      ??___lbtoft 006B                 __end_of_initUART1 3686  
               __end_of_eval_poly 279E                   __size_of_fround 02D0  
                         __ramtop 0F00                      ??i2___lltoft 0012  
                         _digipot 288E                        ??___lltoft 006C  
                         __ptext0 279E                           __ptext1 32D0  
                         __ptext2 3624                           __ptext3 35FA  
                         __ptext4 0000                           __ptext5 0990  
                         __ptext6 0E86                           __ptext7 2E6C  
                         __ptext8 2AF2                           __ptext9 17AC  
          __size_of_adjustDigipot 014E           __size_of_init_frequency 003A  
                         _initADC 359E                 __end_of_hexpowers FE9F  
                       _T1CONbits 000FCD                       ?__div_to_l_ 0060  
                         _initSPI 215E                           _dpowers FE09  
                    __size_of_exp 023A                      __size_of_log 0150  
                    __size_of_pow 01B4                  ___awmod@dividend 0060  
                         _percent 00DF                  ___aldiv@dividend 000D  
        __size_of_sendUARTMessage 007A                        ??_delay_ms 0062  
        __end_of_timer1_interrupt 36BA                        ??_high_ISR 0023  
                         _sprintf 0000                        delay_ms@ms 0060  
            end_of_initialization 2E62                           exp@sign 00B4  
                      _minus_pipe 0041                        _pipe_ascii FEC1  
                      ??_initLoRa 0067                        _remappings 364A  
            __end_of_join_network FF88                __end_ofi2___ftpack 2DC8  
              __end_ofi2___lltoft 3398                   ___lldiv@divisor 0064  
                         pow@sign 00C1                   ___lldiv@counter 006C  
                ___aldiv@quotient 0017                           postdec1 000FE5  
                         postdec2 000FDD                    _initInterrupts 36BA  
                         postinc0 000FEE                           postinc2 000FDE  
                  __tdiv_to_l_@f1 0060                    __tdiv_to_l_@f2 0063  
                      ??_unselect 0060                     ??__tdiv_to_l_ 0066  
       _uart_receive_buffer_index 00E4           __size_of_uart_interrupt 003C  
                       _PORTAbits 000F80                         _PORTBbits 000F81  
                __CFG_CPUDIV$OSC1 000000                         _TRISAbits 000F92  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
                       i2___lldiv 30DE                     _adjustDigipot 1D80  
                     ___ftdiv@exp 00A6                   i2___ftpack@sign 0005  
             __size_of__div_to_l_ 0188            __end_of_initInterrupts 36C2  
                ??_sendSensorData 00D9                       ___ftmul@exp 007D  
                  __end_of___ftge 2AF2                    __end_of___lmul 33EE  
                  __end_of___wmul 356E                     __pidataCOMRAM 36C2  
                    _initSPI$2527 00C6                      _initSPI$2528 00C9  
                    _initSPI$2529 00CC    __size_of_temperature_interrupt 0098  
   __end_of_temperature_interrupt 30DE                    __end_of_fround 1156  
                   _minus_ambient 003F                        floor@expon 00A9  
              _adjustDigipot$2530 00C6                _adjustDigipot$2531 00C9  
              _adjustDigipot$2532 00CC                     _ambient_ascii FEBC  
        ??_make_frequency_message 00CD               start_initialization 2DC8  
                      eval_poly@d 009C                        eval_poly@n 009E  
                      eval_poly@x 0099                        ldexp@value 00A5  
             __end_of__tdiv_to_l_ 194A                       __end_of_exp 15F8  
                     __end_of_log 1D80                       __end_of_pow 17AC  
                      ?i2___lldiv 0001  sendUARTMessage@newMessagePointer 0065  
               ??_sendUARTMessage 0067                    ?_adjustDigipot 0001  
                     ?_remappings 0001                        frexp@value 0060  
                 ___llmod@divisor 0071                   ___llmod@counter 0075  
                  _currentChannel 0035                   ?_initInterrupts 0001  
                        ??___ftge 0089                          ??___lmul 0009  
                   _send_data_EOL FEC7                          ??___wmul 0072  
         sendSensorData@pipe_temp 00D3                       __pdataBANK0 00EE  
                     __pdataBANK1 0182                          ??_fround 0086  
                _nominalfrequency 00E9                    _init_frequency 34FE  
                   sprintf@tmpval 00C5                 __size_of___altoft 009E  
                      fround@prec 008C                 __size_of___awtoft 0044  
               __size_of___ftpack 010C                 __size_of___lbtoft 002E  
               __size_of___lltoft 007C                       __pbssCOMRAM 0031  
                   __pcstackBANK0 0060                 __size_of_delay_ms 0044  
               __size_of_high_ISR 0086                       sprintf@flag 00BB  
                     sprintf@fval 00C9                       sprintf@prec 00BD  
                       _cap_value 0053                         __pnvBANK0 00E9  
               __size_of_initLoRa 007A                         _delimiter FEC6  
                       __pintcode 0008                         _asciiTemp 0057  
                   __pmediumconst FE08                          ?___aldiv 000D  
                        ?___awdiv 0066                          ?___ftadd 008D  
                        ?___awmod 0060                          ?___ftdiv 0099  
                        ?___ftneg 0060                          ?___lldiv 0060  
                        ?___ftmul 0074                          ?___llmod 006D  
                        ?___ftsub 0099                         __npowers_ FE31  
                        ?___fttol 008A            __end_of_init_frequency 3538  
                  _uart_interrupt 34C2                          ?_digipot 0001  
                     __tdiv_to_l_ 17AC                      _join_network FF78  
             __size_of_remappings 0020                          ?_initADC 0001  
                    ??__div_to_l_ 0066                 __size_of_unselect 0004  
                        ?_initSPI 0001                     _set_data_rate FE9F  
                       _initUART1 366A                         _eval_poly 26AA  
 __size_of_make_frequency_message 002A                         _frequency 00DC  
                       _hexpowers FE7F                 ?_timer1_interrupt 0001  
                       _inductive 003B      __size_of_frequency_interrupt 0104  
                        ?_sprintf 009F                    __size_of_floor 00FE  
                 ??_adjustDigipot 00C6                    __size_of_ldexp 0118  
                  __size_of_frexp 00AE                       ??i2___lldiv 0009  
                  __size_of_scale 04F6                ??_timer1_interrupt 0001  
                 ___aldiv@divisor 0011                   ___aldiv@counter 0015  
                  ___wmul@product 0072                     ??_UARTReceive 0060  
                       delay_ms@i 0063         sendSensorData@capacitance 00CD  
                        _PIE1bits 000F9D                          _PIE4bits 000F8E  
           _currentMessagePointer 00EC                          i2u406_40 34F2  
                        _PIR1bits 000F9E                __end_of__div_to_l_ 1AD2  
                        _PIR4bits 000F8F                          _RCONbits 000FD0  
                       _temp_pipe 0049                          _SSP2CON1 000F72  
          __end_of_uart_interrupt 34FE                          _SSP2STAT 000F73  
                 ?_init_frequency 0001                         _plus_pipe 0045  
                _ind_measurement1 0037                  _ind_measurement2 0039  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 006E  
                      ?_initUART1 0001                        ?_eval_poly 0099  
             _uart_receive_buffer 0100                      _lora_message 0300  
               ___lmul@multiplier 0001                         copy_data0 2E24  
                       copy_data1 2E56                         frexp@eptr 0063  
          _make_frequency_message 35FA                          __Hrparam 0000  
                        __Lrparam 0000                     _getVerCommand FEAE  
             __end_of_UARTReceive 36AE                   ?_uart_interrupt 0001  
             __end_of_set_dev_eui FF3F               __end_of_set_app_eui FF1D  
                __size_of___aldiv 00CC               __end_of_set_app_key FEFB  
                __size_of___awdiv 00BE                  __size_of___ftadd 0268  
                __size_of___awmod 00A2                  __size_of___ftdiv 014C  
                __size_of___ftneg 0030                  __size_of___lldiv 00BC  
                        ___altoft 2F0E                  __size_of___ftmul 015E  
                __size_of___llmod 009A                  __size_of___ftsub 004C  
                __size_of___fttol 0144       _last_received_message_index 005C  
                        ___awtoft 347E                          ___ftpack 239C  
                        ___lbtoft 35CC                       _fround$2533 0089  
                     _fround$2534 0086                          ___lltoft 3160  
                __size_of_digipot 00D0                   _sendUARTMessage 3256  
                        _exp$2539 00AF               _cap_measurement_old 0033  
             _cap_measurement_new 0031                        sprintf@idx 00B8  
                        _cap_freq 00D9                        sprintf@exp 00C3  
                      sprintf@val 00BF                  __size_of_initADC 002E  
                __size_of_initSPI 0126                          _delay_ms 343A  
                        __ptext10 194A                          __ptext11 2FAC  
                        __ptext20 36BA                          __ptext12 2BB0  
                        __ptext21 359E                          __ptext13 34FE  
                        __ptext30 2C6C                          __ptext22 288E  
                        __ptext14 366A                          __ptext31 201A  
                        __ptext23 36C8                          __ptext15 215E  
                        __ptext40 1ECE                          __ptext32 2A2A  
                        __ptext24 1D80                          __ptext16 364A  
                        __ptext41 347E                          __ptext33 2F0E  
                        __ptext25 15F8                          __ptext17 31DC  
                        __ptext50 24A8                          __ptext42 3160  
                        __ptext34 26AA                          __ptext26 1C30  
                        __ptext18 3256                          __ptext51 333C  
                        __ptext43 35CC                          __ptext35 3538  
                        __ptext27 13BE                          __ptext19 343A  
                        __ptext52 2D1A                          __ptext44 239C  
                        __ptext36 1AD2                          __ptext28 2284  
                        __ptext53 30DE                          __ptext45 369A  
                        __ptext37 33EE                          __ptext29 25AC  
                        __ptext54 3398                          __ptext38 1156  
                        __ptext55 295E                          __ptext47 34C2  
                        __ptext39 356E                          __ptext48 36AE  
                        __ptext49 3046                          _high_ISR 0008  
                        __powers_ FE58                          _pow$2537 00BB  
                        _pow$2538 00BE                  __size_of_sprintf 0990  
                   _isCommandSent 00EE                      ??_remappings 0060  
                ??_initInterrupts 0060                          _initLoRa 31DC  
                   __size_of_main 00F0                          int$flags 005E  
                _send_data_part_1 FEC8                      _temp_ambient 0047  
                        _unselect 36C8                      _SSP2STATbits 000F73  
                        exp@coeff FF3F                          log@coeff FF5D  
              __end_of_pipe_ascii FEC6                __end_of_remappings 366A  
                     ??_initUART1 0060                       ??_eval_poly 00A0  
           _temperature_interrupt 3046                          scale@scl 0089  
                        intlevel2 0000                         sprintf@ap 00B9  
                __tdiv_to_l_@exp1 006E                         sprintf@sp 009F  
                __tdiv_to_l_@cntr 006D                  __tdiv_to_l_@quot 0069  
                ___lldiv@dividend 0060                   _interrupt_count 003D  
                     _UARTReceive 369A                        _RCSTA1bits 000FAC  
                     _set_dev_eui FF1D                       _set_app_eui FEFB  
                     _set_app_key FEC9                        _OSCCONbits 000FD3  
             _frequency_interrupt 24A8           __end_of_sendUARTMessage 32D0  
                    _plus_ambient 0043                      ?__tdiv_to_l_ 0060  
                        sprintf@c 00CC                          sprintf@f 00A1  
         __size_of_sendSensorData 006C                  ___lldiv@quotient 0068  
                    ___aldiv@sign 0016              ?_frequency_interrupt 0001  
                ??_init_frequency 0060         __size_of_timer1_interrupt 000C  
