

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Wed Apr 19 11:10:52 2017

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18LF27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataBANK0
    71  011D6E                     __pidataBANK0:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _asciiTemp
    75  011D6E  20                 	db	32
    76  011D6F  20                 	db	32
    77  011D70  20                 	db	32
    78  011D71  20                 	db	32
    79  011D72  20                 	db	32
    80                           
    81                           ;initializer for _isCommandSent
    82  011D73  01                 	db	1
    83                           
    84                           ;initializer for _ind_frequency_message
    85  011D74  54                 	db	84
    86  011D75  68                 	db	104
    87  011D76  65                 	db	101
    88  011D77  20                 	db	32
    89  011D78  69                 	db	105
    90  011D79  6E                 	db	110
    91  011D7A  64                 	db	100
    92  011D7B  75                 	db	117
    93  011D7C  63                 	db	99
    94  011D7D  74                 	db	116
    95  011D7E  69                 	db	105
    96  011D7F  76                 	db	118
    97  011D80  65                 	db	101
    98  011D81  20                 	db	32
    99  011D82  66                 	db	102
   100  011D83  72                 	db	114
   101  011D84  65                 	db	101
   102  011D85  71                 	db	113
   103  011D86  75                 	db	117
   104  011D87  65                 	db	101
   105  011D88  6E                 	db	110
   106  011D89  63                 	db	99
   107  011D8A  79                 	db	121
   108  011D8B  20                 	db	32
   109  011D8C  69                 	db	105
   110  011D8D  73                 	db	115
   111  011D8E  3A                 	db	58
   112  011D8F  20                 	db	32
   113  011D90  20                 	db	32
   114  011D91  20                 	db	32
   115  011D92  20                 	db	32
   116  011D93  20                 	db	32
   117  011D94  20                 	db	32
   118  011D95  0D                 	db	13
   119  011D96  0A                 	db	10
   120  011D97  00                 	db	0
   121                           
   122                           ;initializer for _temp_display_message
   123  011D98  50                 	db	80
   124  011D99  69                 	db	105
   125  011D9A  70                 	db	112
   126  011D9B  65                 	db	101
   127  011D9C  20                 	db	32
   128  011D9D  74                 	db	116
   129  011D9E  65                 	db	101
   130  011D9F  6D                 	db	109
   131  011DA0  70                 	db	112
   132  011DA1  20                 	db	32
   133  011DA2  3D                 	db	61
   134  011DA3  20                 	db	32
   135  011DA4  20                 	db	32
   136  011DA5  20                 	db	32
   137  011DA6  20                 	db	32
   138  011DA7  20                 	db	32
   139  011DA8  20                 	db	32
   140  011DA9  0D                 	db	13
   141  011DAA  0A                 	db	10
   142  011DAB  00                 	db	0
   143                           
   144                           	psect	idataBANK1
   145  011E9A                     __pidataBANK1:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _cap_frequency_message
   149  011E9A  54                 	db	84
   150  011E9B  68                 	db	104
   151  011E9C  65                 	db	101
   152  011E9D  20                 	db	32
   153  011E9E  63                 	db	99
   154  011E9F  61                 	db	97
   155  011EA0  70                 	db	112
   156  011EA1  61                 	db	97
   157  011EA2  63                 	db	99
   158  011EA3  69                 	db	105
   159  011EA4  74                 	db	116
   160  011EA5  69                 	db	105
   161  011EA6  76                 	db	118
   162  011EA7  65                 	db	101
   163  011EA8  20                 	db	32
   164  011EA9  66                 	db	102
   165  011EAA  72                 	db	114
   166  011EAB  65                 	db	101
   167  011EAC  71                 	db	113
   168  011EAD  75                 	db	117
   169  011EAE  65                 	db	101
   170  011EAF  6E                 	db	110
   171  011EB0  63                 	db	99
   172  011EB1  79                 	db	121
   173  011EB2  20                 	db	32
   174  011EB3  69                 	db	105
   175  011EB4  73                 	db	115
   176  011EB5  3A                 	db	58
   177  011EB6  20                 	db	32
   178  011EB7  20                 	db	32
   179  011EB8  20                 	db	32
   180  011EB9  20                 	db	32
   181  011EBA  20                 	db	32
   182  011EBB  20                 	db	32
   183  011EBC  0D                 	db	13
   184  011EBD  0A                 	db	10
   185  011EBE  00                 	db	0
   186                           
   187                           	psect	mediumconst
   188  00FEC6                     __pmediumconst:
   189                           	opt stack 0
   190  00FEC6  00                 	db	0
   191  00FEC7                     _set_data_rate:
   192                           	opt stack 0
   193  00FEC7  6D                 	db	109
   194  00FEC8  61                 	db	97
   195  00FEC9  63                 	db	99
   196  00FECA  20                 	db	32
   197  00FECB  73                 	db	115
   198  00FECC  65                 	db	101
   199  00FECD  74                 	db	116
   200  00FECE  20                 	db	32
   201  00FECF  64                 	db	100
   202  00FED0  72                 	db	114
   203  00FED1  20                 	db	32
   204  00FED2  78                 	db	120
   205  00FED3  0D                 	db	13
   206  00FED4  0A                 	db	10
   207  00FED5  00                 	db	0
   208  00FED6                     __end_of_set_data_rate:
   209                           	opt stack 0
   210  00FED6                     _getVerCommand:
   211                           	opt stack 0
   212  00FED6  73                 	db	115
   213  00FED7  79                 	db	121
   214  00FED8  73                 	db	115
   215  00FED9  20                 	db	32
   216  00FEDA  67                 	db	103
   217  00FEDB  65                 	db	101
   218  00FEDC  74                 	db	116
   219  00FEDD  20                 	db	32
   220  00FEDE  76                 	db	118
   221  00FEDF  65                 	db	101
   222  00FEE0  72                 	db	114
   223  00FEE1  0D                 	db	13
   224  00FEE2  0A                 	db	10
   225  00FEE3  00                 	db	0
   226  00FEE4                     __end_of_getVerCommand:
   227                           	opt stack 0
   228  00FEE4  0001               	dw	1
   229  00FEE6  0010               	dw	16
   230  00FEE8  0100               	dw	256
   231  00FEEA  1000               	dw	4096
   232  00FEEC                     __end_of_hexpowers:
   233                           	opt stack 0
   234  00FEEC                     _ambient_ascii:
   235                           	opt stack 0
   236  00FEEC  41                 	db	65
   237  00FEED  6D                 	db	109
   238  00FEEE  62                 	db	98
   239  00FEEF  2E                 	db	46
   240  00FEF0  00                 	db	0
   241  00FEF1                     __end_of_ambient_ascii:
   242                           	opt stack 0
   243  00FEF1                     _pipe_ascii:
   244                           	opt stack 0
   245  00FEF1  50                 	db	80
   246  00FEF2  69                 	db	105
   247  00FEF3  70                 	db	112
   248  00FEF4  65                 	db	101
   249  00FEF5  00                 	db	0
   250  00FEF6                     __end_of_pipe_ascii:
   251                           	opt stack 0
   252  00FEF6                     _delimiter:
   253                           	opt stack 0
   254  00FEF6  FD                 	db	low STR_3
   255  00FEF7                     __end_of_delimiter:
   256                           	opt stack 0
   257  00FEF7                     _send_data_EOL:
   258                           	opt stack 0
   259  00FEF7  D3                 	db	low (STR_4+27)
   260  00FEF8                     __end_of_send_data_EOL:
   261                           	opt stack 0
   262  00FEF8                     _send_data_part_1:
   263                           	opt stack 0
   264  00FEF8  E8                 	db	low STR_1
   265  00FEF9                     __end_of_send_data_part_1:
   266                           	opt stack 0
   267  00FEF9                     _set_app_key:
   268                           	opt stack 0
   269  00FEF9  6D                 	db	109
   270  00FEFA  61                 	db	97
   271  00FEFB  63                 	db	99
   272  00FEFC  20                 	db	32
   273  00FEFD  73                 	db	115
   274  00FEFE  65                 	db	101
   275  00FEFF  74                 	db	116
   276  00FF00  20                 	db	32
   277  00FF01  61                 	db	97
   278  00FF02  70                 	db	112
   279  00FF03  70                 	db	112
   280  00FF04  6B                 	db	107
   281  00FF05  65                 	db	101
   282  00FF06  79                 	db	121
   283  00FF07  20                 	db	32
   284  00FF08  32                 	db	50
   285  00FF09  45                 	db	69
   286  00FF0A  31                 	db	49
   287  00FF0B  35                 	db	53
   288  00FF0C  41                 	db	65
   289  00FF0D  46                 	db	70
   290  00FF0E  43                 	db	67
   291  00FF0F  39                 	db	57
   292  00FF10  34                 	db	52
   293  00FF11  41                 	db	65
   294  00FF12  37                 	db	55
   295  00FF13  45                 	db	69
   296  00FF14  46                 	db	70
   297  00FF15  36                 	db	54
   298  00FF16  39                 	db	57
   299  00FF17  41                 	db	65
   300  00FF18  45                 	db	69
   301  00FF19  36                 	db	54
   302  00FF1A  31                 	db	49
   303  00FF1B  41                 	db	65
   304  00FF1C  38                 	db	56
   305  00FF1D  31                 	db	49
   306  00FF1E  34                 	db	52
   307  00FF1F  37                 	db	55
   308  00FF20  33                 	db	51
   309  00FF21  37                 	db	55
   310  00FF22  43                 	db	67
   311  00FF23  33                 	db	51
   312  00FF24  38                 	db	56
   313  00FF25  36                 	db	54
   314  00FF26  39                 	db	57
   315  00FF27  39                 	db	57
   316  00FF28  0D                 	db	13
   317  00FF29  0A                 	db	10
   318  00FF2A  00                 	db	0
   319  00FF2B                     __end_of_set_app_key:
   320                           	opt stack 0
   321  00FF2B                     _set_app_eui:
   322                           	opt stack 0
   323  00FF2B  6D                 	db	109
   324  00FF2C  61                 	db	97
   325  00FF2D  63                 	db	99
   326  00FF2E  20                 	db	32
   327  00FF2F  73                 	db	115
   328  00FF30  65                 	db	101
   329  00FF31  74                 	db	116
   330  00FF32  20                 	db	32
   331  00FF33  61                 	db	97
   332  00FF34  70                 	db	112
   333  00FF35  70                 	db	112
   334  00FF36  65                 	db	101
   335  00FF37  75                 	db	117
   336  00FF38  69                 	db	105
   337  00FF39  20                 	db	32
   338  00FF3A  37                 	db	55
   339  00FF3B  34                 	db	52
   340  00FF3C  43                 	db	67
   341  00FF3D  35                 	db	53
   342  00FF3E  34                 	db	52
   343  00FF3F  32                 	db	50
   344  00FF40  34                 	db	52
   345  00FF41  35                 	db	53
   346  00FF42  33                 	db	51
   347  00FF43  38                 	db	56
   348  00FF44  35                 	db	53
   349  00FF45  37                 	db	55
   350  00FF46  39                 	db	57
   351  00FF47  37                 	db	55
   352  00FF48  34                 	db	52
   353  00FF49  41                 	db	65
   354  00FF4A  0D                 	db	13
   355  00FF4B  0A                 	db	10
   356  00FF4C  00                 	db	0
   357  00FF4D                     __end_of_set_app_eui:
   358                           	opt stack 0
   359  00FF4D                     _set_dev_eui:
   360                           	opt stack 0
   361  00FF4D  6D                 	db	109
   362  00FF4E  61                 	db	97
   363  00FF4F  63                 	db	99
   364  00FF50  20                 	db	32
   365  00FF51  73                 	db	115
   366  00FF52  65                 	db	101
   367  00FF53  74                 	db	116
   368  00FF54  20                 	db	32
   369  00FF55  64                 	db	100
   370  00FF56  65                 	db	101
   371  00FF57  76                 	db	118
   372  00FF58  65                 	db	101
   373  00FF59  75                 	db	117
   374  00FF5A  69                 	db	105
   375  00FF5B  20                 	db	32
   376  00FF5C  30                 	db	48
   377  00FF5D  30                 	db	48
   378  00FF5E  30                 	db	48
   379  00FF5F  34                 	db	52
   380  00FF60  41                 	db	65
   381  00FF61  33                 	db	51
   382  00FF62  30                 	db	48
   383  00FF63  42                 	db	66
   384  00FF64  30                 	db	48
   385  00FF65  30                 	db	48
   386  00FF66  31                 	db	49
   387  00FF67  41                 	db	65
   388  00FF68  43                 	db	67
   389  00FF69  46                 	db	70
   390  00FF6A  37                 	db	55
   391  00FF6B  44                 	db	68
   392  00FF6C  0D                 	db	13
   393  00FF6D  0A                 	db	10
   394  00FF6E  00                 	db	0
   395  00FF6F                     __end_of_set_dev_eui:
   396                           	opt stack 0
   397  00FF6F                     exp@coeff:
   398                           	opt stack 0
   399  00FF6F  00                 	db	0
   400  00FF70  80                 	db	128
   401  00FF71  3F                 	db	63
   402  00FF72  72                 	db	114
   403  00FF73  31                 	db	49
   404  00FF74  3F                 	db	63
   405  00FF75  FE                 	db	254
   406  00FF76  75                 	db	117
   407  00FF77  3E                 	db	62
   408  00FF78  58                 	db	88
   409  00FF79  63                 	db	99
   410  00FF7A  3D                 	db	61
   411  00FF7B  95                 	db	149
   412  00FF7C  1D                 	db	29
   413  00FF7D  3C                 	db	60
   414  00FF7E  C5                 	db	197
   415  00FF7F  AE                 	db	174
   416  00FF80  3A                 	db	58
   417  00FF81  79                 	db	121
   418  00FF82  21                 	db	33
   419  00FF83  39                 	db	57
   420  00FF84  94                 	db	148
   421  00FF85  80                 	db	128
   422  00FF86  37                 	db	55
   423  00FF87  93                 	db	147
   424  00FF88  A7                 	db	167
   425  00FF89  35                 	db	53
   426  00FF8A  56                 	db	86
   427  00FF8B  15                 	db	21
   428  00FF8C  34                 	db	52
   429  00FF8D                     __end_ofexp@coeff:
   430                           	opt stack 0
   431  00FF8D                     log@coeff:
   432                           	opt stack 0
   433  00FF8D  00                 	db	0
   434  00FF8E  00                 	db	0
   435  00FF8F  00                 	db	0
   436  00FF90  00                 	db	0
   437  00FF91  80                 	db	128
   438  00FF92  3F                 	db	63
   439  00FF93  F0                 	db	240
   440  00FF94  FF                 	db	255
   441  00FF95  BE                 	db	190
   442  00FF96  E2                 	db	226
   443  00FF97  A9                 	db	169
   444  00FF98  3E                 	db	62
   445  00FF99  83                 	db	131
   446  00FF9A  76                 	db	118
   447  00FF9B  BE                 	db	190
   448  00FF9C  AE                 	db	174
   449  00FF9D  2B                 	db	43
   450  00FF9E  3E                 	db	62
   451  00FF9F  3C                 	db	60
   452  00FFA0  C3                 	db	195
   453  00FFA1  BD                 	db	189
   454  00FFA2  D2                 	db	210
   455  00FFA3  13                 	db	19
   456  00FFA4  3D                 	db	61
   457  00FFA5  78                 	db	120
   458  00FFA6  D3                 	db	211
   459  00FFA7  BB                 	db	187
   460  00FFA8                     __end_oflog@coeff:
   461                           	opt stack 0
   462  00FFA8                     _join_network:
   463                           	opt stack 0
   464  00FFA8  6D                 	db	109
   465  00FFA9  61                 	db	97
   466  00FFAA  63                 	db	99
   467  00FFAB  20                 	db	32
   468  00FFAC  6A                 	db	106
   469  00FFAD  6F                 	db	111
   470  00FFAE  69                 	db	105
   471  00FFAF  6E                 	db	110
   472  00FFB0  20                 	db	32
   473  00FFB1  6F                 	db	111
   474  00FFB2  74                 	db	116
   475  00FFB3  61                 	db	97
   476  00FFB4  61                 	db	97
   477  00FFB5  0D                 	db	13
   478  00FFB6  0A                 	db	10
   479  00FFB7  00                 	db	0
   480  00FFB8                     __end_of_join_network:
   481                           	opt stack 0
   482  00FFB8                     STR_4:
   483  00FFB8  6D                 	db	109	;'m'
   484  00FFB9  61                 	db	97	;'a'
   485  00FFBA  63                 	db	99	;'c'
   486  00FFBB  20                 	db	32
   487  00FFBC  74                 	db	116	;'t'
   488  00FFBD  78                 	db	120	;'x'
   489  00FFBE  20                 	db	32
   490  00FFBF  63                 	db	99	;'c'
   491  00FFC0  6E                 	db	110	;'n'
   492  00FFC1  66                 	db	102	;'f'
   493  00FFC2  20                 	db	32
   494  00FFC3  31                 	db	49	;'1'
   495  00FFC4  20                 	db	32
   496  00FFC5  25                 	db	37
   497  00FFC6  78                 	db	120	;'x'
   498  00FFC7  25                 	db	37
   499  00FFC8  73                 	db	115	;'s'
   500  00FFC9  25                 	db	37
   501  00FFCA  78                 	db	120	;'x'
   502  00FFCB  25                 	db	37
   503  00FFCC  73                 	db	115	;'s'
   504  00FFCD  25                 	db	37
   505  00FFCE  78                 	db	120	;'x'
   506  00FFCF  25                 	db	37
   507  00FFD0  73                 	db	115	;'s'
   508  00FFD1  25                 	db	37
   509  00FFD2  78                 	db	120	;'x'
   510  00FFD3  20                 	db	32
   511  00FFD4  0D                 	db	13
   512  00FFD5  0A                 	db	10
   513  00FFD6  00                 	db	0
   514  00FFD7  30                 	db	48	;'0'
   515  00FFD8  31                 	db	49	;'1'
   516  00FFD9  32                 	db	50	;'2'
   517  00FFDA  33                 	db	51	;'3'
   518  00FFDB  34                 	db	52	;'4'
   519  00FFDC  35                 	db	53	;'5'
   520  00FFDD  36                 	db	54	;'6'
   521  00FFDE  37                 	db	55	;'7'
   522  00FFDF  38                 	db	56	;'8'
   523  00FFE0  39                 	db	57	;'9'
   524  00FFE1  61                 	db	97	;'a'
   525  00FFE2  62                 	db	98	;'b'
   526  00FFE3  63                 	db	99	;'c'
   527  00FFE4  64                 	db	100	;'d'
   528  00FFE5  65                 	db	101	;'e'
   529  00FFE6  66                 	db	102	;'f'
   530  00FFE7  00                 	db	0
   531  00FFE8                     STR_1:
   532  00FFE8  6D                 	db	109	;'m'
   533  00FFE9  61                 	db	97	;'a'
   534  00FFEA  63                 	db	99	;'c'
   535  00FFEB  20                 	db	32
   536  00FFEC  74                 	db	116	;'t'
   537  00FFED  78                 	db	120	;'x'
   538  00FFEE  20                 	db	32
   539  00FFEF  63                 	db	99	;'c'
   540  00FFF0  6E                 	db	110	;'n'
   541  00FFF1  66                 	db	102	;'f'
   542  00FFF2  20                 	db	32
   543  00FFF3  31                 	db	49	;'1'
   544  00FFF4  20                 	db	32
   545  00FFF5  00                 	db	0
   546  00FFF6  28                 	db	40
   547  00FFF7  6E                 	db	110	;'n'
   548  00FFF8  75                 	db	117	;'u'
   549  00FFF9  6C                 	db	108	;'l'
   550  00FFFA  6C                 	db	108	;'l'
   551  00FFFB  29                 	db	41
   552  00FFFC  00                 	db	0
   553  00FFFD                     STR_3:
   554  00FFFD  5F                 	db	95	;'_'
   555  00FFFE  00                 	db	0
   556  0000                     
   557                           ; #config settings
   558  00FFFF  00                 	db	0	; dummy byte at the end
   559  0000                     
   560                           	psect	nvBANK0
   561  0000FA                     __pnvBANK0:
   562                           	opt stack 0
   563  0000FA                     _nominalfrequency:
   564                           	opt stack 0
   565  0000FA                     	ds	3
   566  0000FD                     _inductive:
   567                           	opt stack 0
   568  0000FD                     	ds	2
   569  0000                     _RPINR21	set	3836
   570  0000                     _RPOR7	set	3783
   571  0000                     _RPOR9	set	3785
   572  0000                     _IOLOCK	set	30200
   573  0000                     _ANCON0	set	3912
   574  0000                     _ANCON1	set	3913
   575  0000                     _CCP7CON	set	3849
   576  0000                     _CCP8CON	set	3846
   577  0000                     _CCPR7H	set	3851
   578  0000                     _CCPR7L	set	3850
   579  0000                     _CCPR8H	set	3848
   580  0000                     _CCPR8L	set	3847
   581  0000                     _CCPTMRS1bits	set	3921
   582  0000                     _CCPTMRS2bits	set	3920
   583  0000                     _T5CONbits	set	3874
   584  0000                     _TMR5H	set	3876
   585  0000                     _TMR5L	set	3875
   586  0000                     _ADRES	set	4035
   587  0000                     _ADCON0	set	4034
   588  0000                     _ADCON0bits	set	4034
   589  0000                     _ADCON1	set	4033
   590  0000                     _BAUDCON1bits	set	3966
   591  0000                     _EECON2	set	4007
   592  0000                     _INTCON	set	4082
   593  0000                     _INTCONbits	set	4082
   594  0000                     _OSCCONbits	set	4051
   595  0000                     _PIE1bits	set	3997
   596  0000                     _PIE4bits	set	3982
   597  0000                     _PIR1bits	set	3998
   598  0000                     _PIR4bits	set	3983
   599  0000                     _PORTAbits	set	3968
   600  0000                     _PORTBbits	set	3969
   601  0000                     _RCONbits	set	4048
   602  0000                     _RCREG1	set	4015
   603  0000                     _RCSTA1bits	set	4012
   604  0000                     _SPBRG1	set	4016
   605  0000                     _SPBRGH1	set	3967
   606  0000                     _SSP2CON1	set	3954
   607  0000                     _SSP2STAT	set	3955
   608  0000                     _SSP2STATbits	set	3955
   609  0000                     _SSPBUF	set	4041
   610  0000                     _T1CONbits	set	4045
   611  0000                     _TMR1H	set	4047
   612  0000                     _TMR1L	set	4046
   613  0000                     _TRISA	set	3986
   614  0000                     _TRISAbits	set	3986
   615  0000                     _TRISB	set	3987
   616  0000                     _TRISBbits	set	3987
   617  0000                     _TRISC	set	3988
   618  0000                     _TRISCbits	set	3988
   619  0000                     _TXREG1	set	4014
   620  0000                     _TXSTA1bits	set	4013
   621                           
   622                           	psect	cinit
   623  011B0C                     __pcinit:
   624                           	opt stack 0
   625  011B0C                     start_initialization:
   626                           	opt stack 0
   627  011B0C                     __initialization:
   628                           	opt stack 0
   629                           
   630                           ; Clear objects allocated to BANK1 (130 bytes)
   631  011B0C  EE01  F000         	lfsr	0,__pbssBANK1
   632  011B10  0E82               	movlw	130
   633  011B12                     clear_0:
   634  011B12  6AEE               	clrf	postinc0,c
   635  011B14  06E8               	decf	wreg,f,c
   636  011B16  E1FD               	bnz	clear_0
   637                           
   638                           ; Clear objects allocated to BANK0 (35 bytes)
   639  011B18  EE00  F0D7         	lfsr	0,__pbssBANK0
   640  011B1C  0E23               	movlw	35
   641  011B1E                     clear_1:
   642  011B1E  6AEE               	clrf	postinc0,c
   643  011B20  06E8               	decf	wreg,f,c
   644  011B22  E1FD               	bnz	clear_1
   645                           
   646                           ; Clear objects allocated to COMRAM (16 bytes)
   647  011B24  EE00  F03E         	lfsr	0,__pbssCOMRAM
   648  011B28  0E10               	movlw	16
   649  011B2A                     clear_2:
   650  011B2A  6AEE               	clrf	postinc0,c
   651  011B2C  06E8               	decf	wreg,f,c
   652  011B2E  E1FD               	bnz	clear_2
   653                           
   654                           ; Initialize objects allocated to BANK1 (37 bytes)
   655                           ; load TBLPTR registers with __pidataBANK1
   656  011B30  0E9A               	movlw	low __pidataBANK1
   657  011B32  6EF6               	movwf	tblptrl,c
   658  011B34  0E1E               	movlw	high __pidataBANK1
   659  011B36  6EF7               	movwf	tblptrh,c
   660  011B38  0E01               	movlw	low (__pidataBANK1 shr (0+16))
   661  011B3A  6EF8               	movwf	tblptru,c
   662  011B3C  EE01  F082         	lfsr	0,__pdataBANK1
   663  011B40  EE10 F025          	lfsr	1,37
   664  011B44                     copy_data0:
   665  011B44  0009               	tblrd		*+
   666  011B46  CFF5 FFEE          	movff	tablat,postinc0
   667  011B4A  50E5               	movf	postdec1,w,c
   668  011B4C  50E1               	movf	fsr1l,w,c
   669  011B4E  E1FA               	bnz	copy_data0
   670                           
   671                           ; Initialize objects allocated to BANK0 (62 bytes)
   672                           ; load TBLPTR registers with __pidataBANK0
   673  011B50  0E6E               	movlw	low __pidataBANK0
   674  011B52  6EF6               	movwf	tblptrl,c
   675  011B54  0E1D               	movlw	high __pidataBANK0
   676  011B56  6EF7               	movwf	tblptrh,c
   677  011B58  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   678  011B5A  6EF8               	movwf	tblptru,c
   679  011B5C  EE00  F060         	lfsr	0,__pdataBANK0
   680  011B60  EE10 F03E          	lfsr	1,62
   681  011B64                     copy_data1:
   682  011B64  0009               	tblrd		*+
   683  011B66  CFF5 FFEE          	movff	tablat,postinc0
   684  011B6A  50E5               	movf	postdec1,w,c
   685  011B6C  50E1               	movf	fsr1l,w,c
   686  011B6E  E1FA               	bnz	copy_data1
   687  011B70                     end_of_initialization:
   688                           	opt stack 0
   689  011B70                     __end_of__initialization:
   690                           	opt stack 0
   691  011B70  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   692  011B72  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   693  011B74  0100               	movlb	0
   694  011B76  EFED  F088         	goto	_main	;jump to C main() function
   695                           tblptru	equ	0xFF8
   696                           tblptrh	equ	0xFF7
   697                           tblptrl	equ	0xFF6
   698                           tablat	equ	0xFF5
   699                           postinc0	equ	0xFEE
   700                           wreg	equ	0xFE8
   701                           postdec1	equ	0xFE5
   702                           fsr1l	equ	0xFE1
   703                           
   704                           	psect	bssCOMRAM
   705  00003E                     __pbssCOMRAM:
   706                           	opt stack 0
   707  00003E                     _cap_measurement2:
   708                           	opt stack 0
   709  00003E                     	ds	2
   710  000040                     _cap_value:
   711                           	opt stack 0
   712  000040                     	ds	2
   713  000042                     _currentMessagePointer:
   714                           	opt stack 0
   715  000042                     	ds	2
   716  000044                     _ind_measurement1:
   717                           	opt stack 0
   718  000044                     	ds	2
   719  000046                     _ind_measurement2:
   720                           	opt stack 0
   721  000046                     	ds	2
   722  000048                     _ind_value:
   723                           	opt stack 0
   724  000048                     	ds	2
   725  00004A                     _last_received_message_index:
   726                           	opt stack 0
   727  00004A                     	ds	2
   728  00004C                     _uart_receive_buffer_index:
   729                           	opt stack 0
   730  00004C                     	ds	2
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           postdec1	equ	0xFE5
   738                           fsr1l	equ	0xFE1
   739                           
   740                           	psect	bssBANK0
   741  0000D7                     __pbssBANK0:
   742                           	opt stack 0
   743  0000D7                     _frequency:
   744                           	opt stack 0
   745  0000D7                     	ds	3
   746  0000DA                     _percent:
   747                           	opt stack 0
   748  0000DA                     	ds	3
   749  0000DD                     _cap_measurement1:
   750                           	opt stack 0
   751  0000DD                     	ds	2
   752  0000DF                     _currentChannel:
   753                           	opt stack 0
   754  0000DF                     	ds	2
   755  0000E1                     _errno:
   756                           	opt stack 0
   757  0000E1                     	ds	2
   758  0000E3                     _minus_ambient:
   759                           	opt stack 0
   760  0000E3                     	ds	2
   761  0000E5                     _minus_pipe:
   762                           	opt stack 0
   763  0000E5                     	ds	2
   764  0000E7                     _plus_ambient:
   765                           	opt stack 0
   766  0000E7                     	ds	2
   767  0000E9                     _plus_pipe:
   768                           	opt stack 0
   769  0000E9                     	ds	2
   770  0000EB                     _temp_ambient:
   771                           	opt stack 0
   772  0000EB                     	ds	2
   773  0000ED                     _temp_pipe:
   774                           	opt stack 0
   775  0000ED                     	ds	2
   776  0000EF                     _timer:
   777                           	opt stack 0
   778  0000EF                     	ds	2
   779  0000F1                     _valueH:
   780                           	opt stack 0
   781  0000F1                     	ds	2
   782  0000F3                     _valueL:
   783                           	opt stack 0
   784  0000F3                     	ds	2
   785  0000F5                     _bigorsmall:
   786                           	opt stack 0
   787  0000F5                     	ds	1
   788  0000F6                     _state:
   789                           	opt stack 0
   790  0000F6                     	ds	1
   791  0000F7                     _value:
   792                           	opt stack 0
   793  0000F7                     	ds	2
   794  0000F9                     _step:
   795                           	opt stack 0
   796  0000F9                     	ds	1
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1l	equ	0xFE1
   805                           
   806                           	psect	dataBANK0
   807  000060                     __pdataBANK0:
   808                           	opt stack 0
   809  000060                     _asciiTemp:
   810                           	opt stack 0
   811  000060                     	ds	5
   812  000065                     _isCommandSent:
   813                           	opt stack 0
   814  000065                     	ds	1
   815  000066                     _ind_frequency_message:
   816                           	opt stack 0
   817  000066                     	ds	36
   818  00008A                     _temp_display_message:
   819                           	opt stack 0
   820  00008A                     	ds	20
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           postdec1	equ	0xFE5
   828                           fsr1l	equ	0xFE1
   829                           
   830                           	psect	bssBANK1
   831  000100                     __pbssBANK1:
   832                           	opt stack 0
   833  000100                     _uart_receive_buffer:
   834                           	opt stack 0
   835  000100                     	ds	100
   836  000164                     _last_uart_message:
   837                           	opt stack 0
   838  000164                     	ds	30
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	dataBANK1
   849  000182                     __pdataBANK1:
   850                           	opt stack 0
   851  000182                     _cap_frequency_message:
   852                           	opt stack 0
   853  000182                     	ds	37
   854                           tblptru	equ	0xFF8
   855                           tblptrh	equ	0xFF7
   856                           tblptrl	equ	0xFF6
   857                           tablat	equ	0xFF5
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           postdec1	equ	0xFE5
   861                           fsr1l	equ	0xFE1
   862                           
   863                           	psect	cstackBANK1
   864  0001A7                     __pcstackBANK1:
   865                           	opt stack 0
   866  0001A7                     _initSPI$2555:
   867                           	opt stack 0
   868  0001A7                     _adjustDigipot$2558:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x0
   872  0001A7                     	ds	3
   873  0001AA                     _initSPI$2556:
   874                           	opt stack 0
   875  0001AA                     _adjustDigipot$2559:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x3
   879  0001AA                     	ds	3
   880  0001AD                     _initSPI$2557:
   881                           	opt stack 0
   882  0001AD                     _adjustDigipot$2560:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x6
   886  0001AD                     	ds	3
   887  0001B0                     _main$2553:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x9
   891  0001B0                     	ds	2
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           postdec1	equ	0xFE5
   899                           fsr1l	equ	0xFE1
   900                           
   901                           	psect	cstackBANK0
   902  00009E                     __pcstackBANK0:
   903                           	opt stack 0
   904  00009E                     ?___ftadd:
   905                           	opt stack 0
   906  00009E                     ?___fttol:
   907                           	opt stack 0
   908  00009E                     ___ftadd@f1:
   909                           	opt stack 0
   910  00009E                     ___ftge@ff1:
   911                           	opt stack 0
   912  00009E                     ___fttol@f1:
   913                           	opt stack 0
   914                           
   915                           ; 3 bytes @ 0x0
   916  00009E                     	ds	3
   917  0000A1                     ___ftadd@f2:
   918                           	opt stack 0
   919  0000A1                     ___ftge@ff2:
   920                           	opt stack 0
   921                           
   922                           ; 3 bytes @ 0x3
   923  0000A1                     	ds	1
   924  0000A2                     ??___fttol:
   925                           
   926                           ; 1 bytes @ 0x4
   927  0000A2                     	ds	2
   928  0000A4                     ??___ftadd:
   929  0000A4                     ??___ftge:
   930                           
   931                           ; 1 bytes @ 0x6
   932  0000A4                     	ds	3
   933  0000A7                     ___ftadd@sign:
   934                           	opt stack 0
   935  0000A7                     ___fttol@sign1:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x9
   939  0000A7                     	ds	1
   940  0000A8                     ___ftadd@exp2:
   941                           	opt stack 0
   942  0000A8                     ___fttol@lval:
   943                           	opt stack 0
   944                           
   945                           ; 4 bytes @ 0xA
   946  0000A8                     	ds	1
   947  0000A9                     ___ftadd@exp1:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0xB
   951  0000A9                     	ds	1
   952  0000AA                     ?___ftsub:
   953                           	opt stack 0
   954  0000AA                     ?_eval_poly:
   955                           	opt stack 0
   956  0000AA                     ___ftsub@f1:
   957                           	opt stack 0
   958  0000AA                     eval_poly@x:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0xC
   962  0000AA                     	ds	2
   963  0000AC                     ___fttol@exp1:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0xE
   967  0000AC                     	ds	1
   968  0000AD                     ?_calculateTemp:
   969                           	opt stack 0
   970  0000AD                     ?___altoft:
   971                           	opt stack 0
   972  0000AD                     calculateTemp@plus:
   973                           	opt stack 0
   974  0000AD                     eval_poly@d:
   975                           	opt stack 0
   976  0000AD                     ___ftsub@f2:
   977                           	opt stack 0
   978  0000AD                     ___altoft@c:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0xF
   982  0000AD                     	ds	2
   983  0000AF                     calculateTemp@minus:
   984                           	opt stack 0
   985  0000AF                     eval_poly@n:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x11
   989  0000AF                     	ds	2
   990  0000B1                     ??___altoft:
   991  0000B1                     eval_poly@res:
   992                           	opt stack 0
   993  0000B1                     _calculateTemp$2554:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0x13
   997  0000B1                     	ds	3
   998  0000B4                     ?_log:
   999                           	opt stack 0
  1000  0000B4                     ?_ldexp:
  1001                           	opt stack 0
  1002  0000B4                     calculateTemp@temp:
  1003                           	opt stack 0
  1004  0000B4                     ldexp@value:
  1005                           	opt stack 0
  1006  0000B4                     log@x:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x16
  1010  0000B4                     	ds	1
  1011  0000B5                     ?_floor:
  1012                           	opt stack 0
  1013  0000B5                     floor@x:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x17
  1017  0000B5                     	ds	1
  1018  0000B6                     makeTempMessage@pipe_or_ambient:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x18
  1022  0000B6                     	ds	1
  1023  0000B7                     ldexp@newexp:
  1024                           	opt stack 0
  1025  0000B7                     log@exponent:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x19
  1029  0000B7                     	ds	1
  1030  0000B8                     floor@i:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x1A
  1034  0000B8                     	ds	1
  1035  0000B9                     ??_ldexp:
  1036                           
  1037                           ; 1 bytes @ 0x1B
  1038  0000B9                     	ds	2
  1039  0000BB                     floor@expon:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x1D
  1043  0000BB                     	ds	2
  1044  0000BD                     ?_exp:
  1045                           	opt stack 0
  1046  0000BD                     exp@x:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x1F
  1050  0000BD                     	ds	3
  1051  0000C0                     _exp$2563:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x22
  1055  0000C0                     	ds	3
  1056  0000C3                     exp@exponent:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x25
  1060  0000C3                     	ds	2
  1061  0000C5                     exp@sign:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x27
  1065  0000C5                     	ds	1
  1066  0000C6                     ?_pow:
  1067                           	opt stack 0
  1068  0000C6                     pow@x:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x28
  1072  0000C6                     	ds	3
  1073  0000C9                     pow@y:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x2B
  1077  0000C9                     	ds	3
  1078  0000CC                     _pow$2561:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x2E
  1082  0000CC                     	ds	3
  1083  0000CF                     _pow$2562:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x31
  1087  0000CF                     	ds	3
  1088  0000D2                     pow@sign:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x34
  1092  0000D2                     	ds	1
  1093  0000D3                     pow@yi:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x35
  1097  0000D3                     	ds	4
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           
  1107                           	psect	cstackCOMRAM
  1108  000001                     __pcstackCOMRAM:
  1109                           	opt stack 0
  1110  000001                     ??_temperature_interrupt:
  1111  000001                     ??_frequency_interrupt:
  1112  000001                     
  1113                           ; 2 bytes @ 0x0
  1114  000001                     	ds	3
  1115  000004                     ??_high_ISR:
  1116                           
  1117                           ; 1 bytes @ 0x3
  1118  000004                     	ds	14
  1119  000012                     ?___wmul:
  1120                           	opt stack 0
  1121  000012                     ?___awmod:
  1122                           	opt stack 0
  1123  000012                     ?___lwmod:
  1124                           	opt stack 0
  1125  000012                     ?___ftpack:
  1126                           	opt stack 0
  1127  000012                     ?_frexp:
  1128                           	opt stack 0
  1129  000012                     ?___ftneg:
  1130                           	opt stack 0
  1131  000012                     UARTReceive@on_or_off:
  1132                           	opt stack 0
  1133  000012                     delay_ms@ms:
  1134                           	opt stack 0
  1135  000012                     ___wmul@multiplier:
  1136                           	opt stack 0
  1137  000012                     ___awmod@dividend:
  1138                           	opt stack 0
  1139  000012                     ___lwmod@dividend:
  1140                           	opt stack 0
  1141  000012                     ___ftpack@arg:
  1142                           	opt stack 0
  1143  000012                     ___ftneg@f1:
  1144                           	opt stack 0
  1145  000012                     frexp@value:
  1146                           	opt stack 0
  1147                           
  1148                           ; 3 bytes @ 0x11
  1149  000012                     	ds	2
  1150  000014                     ??_delay_ms:
  1151  000014                     ___wmul@multiplicand:
  1152                           	opt stack 0
  1153  000014                     ___awmod@divisor:
  1154                           	opt stack 0
  1155  000014                     ___lwmod@divisor:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x13
  1159  000014                     	ds	1
  1160  000015                     ___ftpack@exp:
  1161                           	opt stack 0
  1162  000015                     delay_ms@i:
  1163                           	opt stack 0
  1164  000015                     frexp@eptr:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x14
  1168  000015                     	ds	1
  1169  000016                     ___awmod@counter:
  1170                           	opt stack 0
  1171  000016                     ___ftpack@sign:
  1172                           	opt stack 0
  1173  000016                     ___lwmod@counter:
  1174                           	opt stack 0
  1175  000016                     ___wmul@product:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x15
  1179  000016                     	ds	1
  1180  000017                     ??___ftpack:
  1181  000017                     ??_frexp:
  1182  000017                     ?___lwdiv:
  1183                           	opt stack 0
  1184  000017                     ___awmod@sign:
  1185                           	opt stack 0
  1186  000017                     sendUARTMessage@newMessagePointer:
  1187                           	opt stack 0
  1188  000017                     ___lwdiv@dividend:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x16
  1192  000017                     	ds	1
  1193  000018                     ?___awdiv:
  1194                           	opt stack 0
  1195  000018                     ___awdiv@dividend:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x17
  1199  000018                     	ds	1
  1200  000019                     ___lwdiv@divisor:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x18
  1204  000019                     	ds	1
  1205  00001A                     ?___awtoft:
  1206                           	opt stack 0
  1207  00001A                     ?___lbtoft:
  1208                           	opt stack 0
  1209  00001A                     ?___lltoft:
  1210                           	opt stack 0
  1211  00001A                     ?___lwtoft:
  1212                           	opt stack 0
  1213  00001A                     ___awdiv@divisor:
  1214                           	opt stack 0
  1215  00001A                     ___awtoft@c:
  1216                           	opt stack 0
  1217  00001A                     ___lwtoft@c:
  1218                           	opt stack 0
  1219  00001A                     ___lltoft@c:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x19
  1223  00001A                     	ds	1
  1224  00001B                     ___lwdiv@counter:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x1A
  1228  00001B                     	ds	1
  1229  00001C                     ___awdiv@counter:
  1230                           	opt stack 0
  1231  00001C                     ___lwdiv@quotient:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x1B
  1235  00001C                     	ds	1
  1236  00001D                     ___awdiv@sign:
  1237                           	opt stack 0
  1238  00001D                     ___awtoft@sign:
  1239                           	opt stack 0
  1240  00001D                     ___lbtoft@c:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x1C
  1244  00001D                     	ds	1
  1245  00001E                     ??___lltoft:
  1246  00001E                     ?___ftdiv:
  1247                           	opt stack 0
  1248  00001E                     ___awdiv@quotient:
  1249                           	opt stack 0
  1250  00001E                     ___ftdiv@f1:
  1251                           	opt stack 0
  1252                           
  1253                           ; 3 bytes @ 0x1D
  1254  00001E                     	ds	2
  1255  000020                     ??_fillInTemp:
  1256                           
  1257                           ; 1 bytes @ 0x1F
  1258  000020                     	ds	1
  1259  000021                     ___ftdiv@f2:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x20
  1263  000021                     	ds	1
  1264  000022                     ___lltoft@exp:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x21
  1268  000022                     	ds	2
  1269  000024                     ??___ftdiv:
  1270  000024                     fillInTemp@pipe_or_ambience:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x23
  1274  000024                     	ds	1
  1275  000025                     fillInTemp@i:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x24
  1279  000025                     	ds	2
  1280  000027                     ___ftdiv@cntr:
  1281                           	opt stack 0
  1282  000027                     fillInTemp@i_1156:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x26
  1286  000027                     	ds	1
  1287  000028                     ___ftdiv@f3:
  1288                           	opt stack 0
  1289                           
  1290                           ; 3 bytes @ 0x27
  1291  000028                     	ds	1
  1292  000029                     fillInTemp@i_1157:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x28
  1296  000029                     	ds	1
  1297  00002A                     fillInTemp@temp:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x29
  1301  00002A                     	ds	1
  1302  00002B                     ___ftdiv@exp:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x2A
  1306  00002B                     	ds	1
  1307  00002C                     ___ftdiv@sign:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x2B
  1311  00002C                     	ds	1
  1312  00002D                     ?___ftmul:
  1313                           	opt stack 0
  1314  00002D                     ___ftmul@f1:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x2C
  1318  00002D                     	ds	3
  1319  000030                     ___ftmul@f2:
  1320                           	opt stack 0
  1321                           
  1322                           ; 3 bytes @ 0x2F
  1323  000030                     	ds	3
  1324  000033                     ??___ftmul:
  1325                           
  1326                           ; 1 bytes @ 0x32
  1327  000033                     	ds	3
  1328  000036                     ___ftmul@exp:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x35
  1332  000036                     	ds	1
  1333  000037                     ___ftmul@f3_as_product:
  1334                           	opt stack 0
  1335                           
  1336                           ; 3 bytes @ 0x36
  1337  000037                     	ds	3
  1338  00003A                     ___ftmul@cntr:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x39
  1342  00003A                     	ds	1
  1343  00003B                     ___ftmul@sign:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x3A
  1347  00003B                     	ds	1
  1348  00003C                     ??_eval_poly:
  1349  00003C                     ??_calculateTemp:
  1350  00003C                     ___altoft@exp:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x3B
  1354  00003C                     	ds	1
  1355  00003D                     ___altoft@sign:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x3C
  1359  00003D                     	ds	1
  1360  00003E                     tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postdec1	equ	0xFE5
  1367                           fsr1l	equ	0xFE1
  1368                           
  1369                           ; 1 bytes @ 0x3D
  1370 ;;
  1371 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1372 ;;
  1373 ;; *************** function _main *****************
  1374 ;; Defined at:
  1375 ;;		line 26 in file "main.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1390 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1392 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;Total ram usage:        2 bytes
  1394 ;; Hardware stack levels required when called:    9
  1395 ;; This function calls:
  1396 ;;		_UARTReceive
  1397 ;;		___wmul
  1398 ;;		_delay_ms
  1399 ;;		_digipot
  1400 ;;		_initADC
  1401 ;;		_initInterrupts
  1402 ;;		_initLoRa
  1403 ;;		_initSPI
  1404 ;;		_initUART1
  1405 ;;		_init_frequency
  1406 ;;		_makeTempMessage
  1407 ;;		_make_frequency_message
  1408 ;;		_sendUARTMessage
  1409 ;; This function is called by:
  1410 ;;		Startup code after reset
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text0
  1415  0111DA                     __ptext0:
  1416                           	opt stack 0
  1417  0111DA                     _main:
  1418                           	opt stack 22
  1419                           
  1420                           ;main.c: 28: OSCCONbits.IRCF0 = 1;
  1421                           
  1422                           ;incstack = 0
  1423  0111DA  88D3               	bsf	4051,4,c	;volatile
  1424                           
  1425                           ;main.c: 29: OSCCONbits.SCS0 = 1;
  1426  0111DC  80D3               	bsf	4051,0,c	;volatile
  1427                           
  1428                           ;main.c: 30: OSCCONbits.SCS1 = 1;
  1429  0111DE  82D3               	bsf	4051,1,c	;volatile
  1430                           
  1431                           ;main.c: 32: isCommandSent = 1;
  1432  0111E0  0E01               	movlw	1
  1433  0111E2  0100               	movlb	0	; () banked
  1434  0111E4  6F65               	movwf	_isCommandSent& (0+255),b
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 33: init_frequency();
  1438  0111E6  ECD2  F08C         	call	_init_frequency	;wreg free
  1439                           
  1440                           ;main.c: 34: initUART1();
  1441  0111EA  ECA6  F08F         	call	_initUART1	;wreg free
  1442                           
  1443                           ;main.c: 35: initADC();
  1444  0111EE  EC23  F08F         	call	_initADC	;wreg free
  1445                           
  1446                           ;main.c: 36: initInterrupts();
  1447  0111F2  ECC9  F08F         	call	_initInterrupts	;wreg free
  1448                           
  1449                           ;main.c: 37: initSPI();
  1450  0111F6  EC56  F086         	call	_initSPI	;wreg free
  1451  0111FA                     l4230:
  1452                           
  1453                           ;main.c: 39: inductive= 40*value*value;
  1454  0111FA  C0F7  F012         	movff	_value,___wmul@multiplier
  1455  0111FE  C0F8  F013         	movff	_value+1,___wmul@multiplier+1
  1456  011202  C0F7  F014         	movff	_value,___wmul@multiplicand
  1457  011206  C0F8  F015         	movff	_value+1,___wmul@multiplicand+1
  1458  01120A  EC3A  F08F         	call	___wmul	;wreg free
  1459  01120E  C012  F1B0         	movff	?___wmul,_main$2553
  1460  011212  C013  F1B1         	movff	?___wmul+1,_main$2553+1
  1461                           
  1462                           ;main.c: 39: inductive= 40*value*value;
  1463  011216  C1B0  F012         	movff	_main$2553,___wmul@multiplier
  1464  01121A  C1B1  F013         	movff	_main$2553+1,___wmul@multiplier+1
  1465  01121E  0E00               	movlw	0
  1466  011220  6E15               	movwf	___wmul@multiplicand+1,c
  1467  011222  0E28               	movlw	40
  1468  011224  6E14               	movwf	___wmul@multiplicand,c
  1469  011226  EC3A  F08F         	call	___wmul	;wreg free
  1470  01122A  C012  F0FD         	movff	?___wmul,_inductive
  1471  01122E  C013  F0FE         	movff	?___wmul+1,_inductive+1
  1472                           
  1473                           ;main.c: 40: UARTReceive(1);
  1474  011232  0E01               	movlw	1
  1475  011234  ECC1  F08F         	call	_UARTReceive
  1476                           
  1477                           ;main.c: 41: initLoRa();
  1478  011238  ECBD  F08D         	call	_initLoRa	;wreg free
  1479                           
  1480                           ;main.c: 42: UARTReceive(0);
  1481  01123C  0E00               	movlw	0
  1482  01123E  ECC1  F08F         	call	_UARTReceive
  1483                           
  1484                           ;main.c: 44: delay_ms(800);
  1485  011242  0E03               	movlw	3
  1486  011244  6E13               	movwf	delay_ms@ms+1,c
  1487  011246  0E20               	movlw	32
  1488  011248  6E12               	movwf	delay_ms@ms,c
  1489  01124A  ECF2  F08E         	call	_delay_ms	;wreg free
  1490                           
  1491                           ;main.c: 45: make_frequency_message();
  1492  01124E  ECBD  F085         	call	_make_frequency_message	;wreg free
  1493                           
  1494                           ;main.c: 46: sendUARTMessage(ind_frequency_message);
  1495  011252  0E66               	movlw	low _ind_frequency_message
  1496  011254  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  1497  011256  0E00               	movlw	high _ind_frequency_message
  1498  011258  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  1499  01125A  EC13  F08D         	call	_sendUARTMessage	;wreg free
  1500                           
  1501                           ;main.c: 47: delay_ms(800);
  1502  01125E  0E03               	movlw	3
  1503  011260  6E13               	movwf	delay_ms@ms+1,c
  1504  011262  0E20               	movlw	32
  1505  011264  6E12               	movwf	delay_ms@ms,c
  1506  011266  ECF2  F08E         	call	_delay_ms	;wreg free
  1507                           
  1508                           ;main.c: 48: sendUARTMessage(cap_frequency_message);
  1509  01126A  0E82               	movlw	low _cap_frequency_message
  1510  01126C  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  1511  01126E  0E01               	movlw	high _cap_frequency_message
  1512  011270  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  1513  011272  EC13  F08D         	call	_sendUARTMessage	;wreg free
  1514                           
  1515                           ;main.c: 49: delay_ms(800);
  1516  011276  0E03               	movlw	3
  1517  011278  6E13               	movwf	delay_ms@ms+1,c
  1518  01127A  0E20               	movlw	32
  1519  01127C  6E12               	movwf	delay_ms@ms,c
  1520  01127E  ECF2  F08E         	call	_delay_ms	;wreg free
  1521                           
  1522                           ;main.c: 51: makeTempMessage(0);
  1523  011282  0E00               	movlw	0
  1524  011284  EC1C  F08E         	call	_makeTempMessage
  1525                           
  1526                           ;main.c: 52: sendUARTMessage(temp_display_message);
  1527  011288  0E8A               	movlw	low _temp_display_message
  1528  01128A  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  1529  01128C  0E00               	movlw	high _temp_display_message
  1530  01128E  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  1531  011290  EC13  F08D         	call	_sendUARTMessage	;wreg free
  1532                           
  1533                           ;main.c: 53: delay_ms(800);
  1534  011294  0E03               	movlw	3
  1535  011296  6E13               	movwf	delay_ms@ms+1,c
  1536  011298  0E20               	movlw	32
  1537  01129A  6E12               	movwf	delay_ms@ms,c
  1538  01129C  ECF2  F08E         	call	_delay_ms	;wreg free
  1539                           
  1540                           ;main.c: 55: makeTempMessage(1);
  1541  0112A0  0E01               	movlw	1
  1542  0112A2  EC1C  F08E         	call	_makeTempMessage
  1543                           
  1544                           ;main.c: 56: sendUARTMessage(temp_display_message);
  1545  0112A6  0E8A               	movlw	low _temp_display_message
  1546  0112A8  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  1547  0112AA  0E00               	movlw	high _temp_display_message
  1548  0112AC  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  1549  0112AE  EC13  F08D         	call	_sendUARTMessage	;wreg free
  1550                           
  1551                           ;main.c: 57: delay_ms(800);
  1552  0112B2  0E03               	movlw	3
  1553  0112B4  6E13               	movwf	delay_ms@ms+1,c
  1554  0112B6  0E20               	movlw	32
  1555  0112B8  6E12               	movwf	delay_ms@ms,c
  1556  0112BA  ECF2  F08E         	call	_delay_ms	;wreg free
  1557                           
  1558                           ;main.c: 60: digipot();
  1559  0112BE  EC59  F08B         	call	_digipot	;wreg free
  1560  0112C2  D79B               	goto	l4230
  1561  0112C4                     __end_of_main:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1l	equ	0xFE1
  1571                           
  1572 ;; *************** function _make_frequency_message *****************
  1573 ;; Defined at:
  1574 ;;		line 99 in file "frequency.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0, cstack
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1592 ;;Total ram usage:        0 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    3
  1595 ;; This function calls:
  1596 ;;		___lwdiv
  1597 ;;		___lwmod
  1598 ;; This function is called by:
  1599 ;;		_main
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text1
  1604  010B7A                     __ptext1:
  1605                           	opt stack 0
  1606  010B7A                     _make_frequency_message:
  1607                           	opt stack 27
  1608                           
  1609                           ;frequency.c: 100: ind_frequency_message[29] = (ind_value / 1000 + 48);
  1610                           
  1611                           ;incstack = 0
  1612  010B7A  C048  F017         	movff	_ind_value,___lwdiv@dividend
  1613  010B7E  C049  F018         	movff	_ind_value+1,___lwdiv@dividend+1
  1614  010B82  0E03               	movlw	3
  1615  010B84  6E1A               	movwf	___lwdiv@divisor+1,c
  1616  010B86  0EE8               	movlw	232
  1617  010B88  6E19               	movwf	___lwdiv@divisor,c
  1618  010B8A  EC47  F08E         	call	___lwdiv	;wreg free
  1619  010B8E  5017               	movf	?___lwdiv,w,c
  1620  010B90  0F30               	addlw	48
  1621  010B92  0100               	movlb	0	; () banked
  1622  010B94  6F83               	movwf	(_ind_frequency_message+29)& (0+255),b
  1623                           
  1624                           ;frequency.c: 101: ind_frequency_message[30] = (ind_value % 1000 / 100 + 48);
  1625  010B96  0E03               	movlw	3
  1626  010B98  6E15               	movwf	___lwmod@divisor+1,c
  1627  010B9A  0EE8               	movlw	232
  1628  010B9C  6E14               	movwf	___lwmod@divisor,c
  1629  010B9E  C048  F012         	movff	_ind_value,___lwmod@dividend
  1630  010BA2  C049  F013         	movff	_ind_value+1,___lwmod@dividend+1
  1631  010BA6  EC96  F08E         	call	___lwmod	;wreg free
  1632  010BAA  C012  F017         	movff	?___lwmod,___lwdiv@dividend
  1633  010BAE  C013  F018         	movff	?___lwmod+1,___lwdiv@dividend+1
  1634  010BB2  0E00               	movlw	0
  1635  010BB4  6E1A               	movwf	___lwdiv@divisor+1,c
  1636  010BB6  0E64               	movlw	100
  1637  010BB8  6E19               	movwf	___lwdiv@divisor,c
  1638  010BBA  EC47  F08E         	call	___lwdiv	;wreg free
  1639  010BBE  5017               	movf	?___lwdiv,w,c
  1640  010BC0  0F30               	addlw	48
  1641  010BC2  0100               	movlb	0	; () banked
  1642  010BC4  6F84               	movwf	(_ind_frequency_message+30)& (0+255),b
  1643                           
  1644                           ;frequency.c: 102: ind_frequency_message[31] = (ind_value % 100 / 10 + 48);
  1645  010BC6  0E00               	movlw	0
  1646  010BC8  6E15               	movwf	___lwmod@divisor+1,c
  1647  010BCA  0E64               	movlw	100
  1648  010BCC  6E14               	movwf	___lwmod@divisor,c
  1649  010BCE  C048  F012         	movff	_ind_value,___lwmod@dividend
  1650  010BD2  C049  F013         	movff	_ind_value+1,___lwmod@dividend+1
  1651  010BD6  EC96  F08E         	call	___lwmod	;wreg free
  1652  010BDA  C012  F017         	movff	?___lwmod,___lwdiv@dividend
  1653  010BDE  C013  F018         	movff	?___lwmod+1,___lwdiv@dividend+1
  1654  010BE2  0E00               	movlw	0
  1655  010BE4  6E1A               	movwf	___lwdiv@divisor+1,c
  1656  010BE6  0E0A               	movlw	10
  1657  010BE8  6E19               	movwf	___lwdiv@divisor,c
  1658  010BEA  EC47  F08E         	call	___lwdiv	;wreg free
  1659  010BEE  5017               	movf	?___lwdiv,w,c
  1660  010BF0  0F30               	addlw	48
  1661  010BF2  0100               	movlb	0	; () banked
  1662  010BF4  6F85               	movwf	(_ind_frequency_message+31)& (0+255),b
  1663                           
  1664                           ;frequency.c: 103: ind_frequency_message[32] = (ind_value % 10 + 48);
  1665  010BF6  C048  F012         	movff	_ind_value,___lwmod@dividend
  1666  010BFA  C049  F013         	movff	_ind_value+1,___lwmod@dividend+1
  1667  010BFE  0E00               	movlw	0
  1668  010C00  6E15               	movwf	___lwmod@divisor+1,c
  1669  010C02  0E0A               	movlw	10
  1670  010C04  6E14               	movwf	___lwmod@divisor,c
  1671  010C06  EC96  F08E         	call	___lwmod	;wreg free
  1672  010C0A  5012               	movf	?___lwmod,w,c
  1673  010C0C  0F30               	addlw	48
  1674  010C0E  0100               	movlb	0	; () banked
  1675  010C10  6F86               	movwf	(_ind_frequency_message+32)& (0+255),b
  1676                           
  1677                           ;frequency.c: 104: cap_frequency_message[30] = (cap_value / 1000 + 48);
  1678  010C12  C040  F017         	movff	_cap_value,___lwdiv@dividend
  1679  010C16  C041  F018         	movff	_cap_value+1,___lwdiv@dividend+1
  1680  010C1A  0E03               	movlw	3
  1681  010C1C  6E1A               	movwf	___lwdiv@divisor+1,c
  1682  010C1E  0EE8               	movlw	232
  1683  010C20  6E19               	movwf	___lwdiv@divisor,c
  1684  010C22  EC47  F08E         	call	___lwdiv	;wreg free
  1685  010C26  5017               	movf	?___lwdiv,w,c
  1686  010C28  0F30               	addlw	48
  1687  010C2A  0101               	movlb	1	; () banked
  1688  010C2C  6FA0               	movwf	(_cap_frequency_message+30)& (0+255),b
  1689                           
  1690                           ;frequency.c: 105: cap_frequency_message[31] = (cap_value % 1000 / 100 + 48);
  1691  010C2E  0E03               	movlw	3
  1692  010C30  6E15               	movwf	___lwmod@divisor+1,c
  1693  010C32  0EE8               	movlw	232
  1694  010C34  6E14               	movwf	___lwmod@divisor,c
  1695  010C36  C040  F012         	movff	_cap_value,___lwmod@dividend
  1696  010C3A  C041  F013         	movff	_cap_value+1,___lwmod@dividend+1
  1697  010C3E  EC96  F08E         	call	___lwmod	;wreg free
  1698  010C42  C012  F017         	movff	?___lwmod,___lwdiv@dividend
  1699  010C46  C013  F018         	movff	?___lwmod+1,___lwdiv@dividend+1
  1700  010C4A  0E00               	movlw	0
  1701  010C4C  6E1A               	movwf	___lwdiv@divisor+1,c
  1702  010C4E  0E64               	movlw	100
  1703  010C50  6E19               	movwf	___lwdiv@divisor,c
  1704  010C52  EC47  F08E         	call	___lwdiv	;wreg free
  1705  010C56  5017               	movf	?___lwdiv,w,c
  1706  010C58  0F30               	addlw	48
  1707  010C5A  0101               	movlb	1	; () banked
  1708  010C5C  6FA1               	movwf	(_cap_frequency_message+31)& (0+255),b
  1709                           
  1710                           ;frequency.c: 106: cap_frequency_message[32] = (cap_value % 100 / 10 + 48);
  1711  010C5E  0E00               	movlw	0
  1712  010C60  6E15               	movwf	___lwmod@divisor+1,c
  1713  010C62  0E64               	movlw	100
  1714  010C64  6E14               	movwf	___lwmod@divisor,c
  1715  010C66  C040  F012         	movff	_cap_value,___lwmod@dividend
  1716  010C6A  C041  F013         	movff	_cap_value+1,___lwmod@dividend+1
  1717  010C6E  EC96  F08E         	call	___lwmod	;wreg free
  1718  010C72  C012  F017         	movff	?___lwmod,___lwdiv@dividend
  1719  010C76  C013  F018         	movff	?___lwmod+1,___lwdiv@dividend+1
  1720  010C7A  0E00               	movlw	0
  1721  010C7C  6E1A               	movwf	___lwdiv@divisor+1,c
  1722  010C7E  0E0A               	movlw	10
  1723  010C80  6E19               	movwf	___lwdiv@divisor,c
  1724  010C82  EC47  F08E         	call	___lwdiv	;wreg free
  1725  010C86  5017               	movf	?___lwdiv,w,c
  1726  010C88  0F30               	addlw	48
  1727  010C8A  0101               	movlb	1	; () banked
  1728  010C8C  6FA2               	movwf	(_cap_frequency_message+32)& (0+255),b
  1729                           
  1730                           ;frequency.c: 107: cap_frequency_message[33] = (cap_value % 10 + 48);
  1731  010C8E  C040  F012         	movff	_cap_value,___lwmod@dividend
  1732  010C92  C041  F013         	movff	_cap_value+1,___lwmod@dividend+1
  1733  010C96  0E00               	movlw	0
  1734  010C98  6E15               	movwf	___lwmod@divisor+1,c
  1735  010C9A  0E0A               	movlw	10
  1736  010C9C  6E14               	movwf	___lwmod@divisor,c
  1737  010C9E  EC96  F08E         	call	___lwmod	;wreg free
  1738  010CA2  5012               	movf	?___lwmod,w,c
  1739  010CA4  0F30               	addlw	48
  1740  010CA6  0101               	movlb	1	; () banked
  1741  010CA8  6FA3               	movwf	(_cap_frequency_message+33)& (0+255),b
  1742                           
  1743                           ; BSR set to: 1
  1744  010CAA  0012               	return		;funcret
  1745  010CAC                     __end_of_make_frequency_message:
  1746                           	opt stack 0
  1747                           tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           postinc0	equ	0xFEE
  1752                           wreg	equ	0xFE8
  1753                           postdec1	equ	0xFE5
  1754                           fsr1l	equ	0xFE1
  1755                           
  1756 ;; *************** function ___lwmod *****************
  1757 ;; Defined at:
  1758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwmod.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  dividend        2   17[COMRAM] unsigned int 
  1761 ;;  divisor         2   19[COMRAM] unsigned int 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  counter         1   21[COMRAM] unsigned char 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  2   17[COMRAM] unsigned int 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1776 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1777 ;;Total ram usage:        5 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    2
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_make_frequency_message
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text2
  1788  011D2C                     __ptext2:
  1789                           	opt stack 0
  1790  011D2C                     ___lwmod:
  1791                           	opt stack 27
  1792                           
  1793                           ; BSR set to: 1
  1794                           ;incstack = 0
  1795  011D2C  5014               	movf	___lwmod@divisor,w,c
  1796  011D2E  1015               	iorwf	___lwmod@divisor+1,w,c
  1797  011D30  B4D8               	btfsc	status,2,c
  1798  011D32  D018               	goto	l910
  1799  011D34  0E01               	movlw	1
  1800  011D36  6E16               	movwf	___lwmod@counter,c
  1801  011D38  D004               	goto	l4074
  1802  011D3A                     l4072:
  1803  011D3A  90D8               	bcf	status,0,c
  1804  011D3C  3614               	rlcf	___lwmod@divisor,f,c
  1805  011D3E  3615               	rlcf	___lwmod@divisor+1,f,c
  1806  011D40  2A16               	incf	___lwmod@counter,f,c
  1807  011D42                     l4074:
  1808  011D42  AE15               	btfss	___lwmod@divisor+1,7,c
  1809  011D44  D7FA               	goto	l4072
  1810  011D46                     l4076:
  1811  011D46  5014               	movf	___lwmod@divisor,w,c
  1812  011D48  5C12               	subwf	___lwmod@dividend,w,c
  1813  011D4A  5015               	movf	___lwmod@divisor+1,w,c
  1814  011D4C  5813               	subwfb	___lwmod@dividend+1,w,c
  1815  011D4E  A0D8               	btfss	status,0,c
  1816  011D50  D004               	goto	l4080
  1817  011D52  5014               	movf	___lwmod@divisor,w,c
  1818  011D54  5E12               	subwf	___lwmod@dividend,f,c
  1819  011D56  5015               	movf	___lwmod@divisor+1,w,c
  1820  011D58  5A13               	subwfb	___lwmod@dividend+1,f,c
  1821  011D5A                     l4080:
  1822  011D5A  90D8               	bcf	status,0,c
  1823  011D5C  3215               	rrcf	___lwmod@divisor+1,f,c
  1824  011D5E  3214               	rrcf	___lwmod@divisor,f,c
  1825  011D60  2E16               	decfsz	___lwmod@counter,f,c
  1826  011D62  D7F1               	goto	l4076
  1827  011D64                     l910:
  1828  011D64  C012  F012         	movff	___lwmod@dividend,?___lwmod
  1829  011D68  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
  1830  011D6C  0012               	return		;funcret
  1831  011D6E                     __end_of___lwmod:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1l	equ	0xFE1
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function ___lwdiv *****************
  1844 ;; Defined at:
  1845 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  dividend        2   22[COMRAM] unsigned int 
  1848 ;;  divisor         2   24[COMRAM] unsigned int 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  quotient        2   27[COMRAM] unsigned int 
  1851 ;;  counter         1   26[COMRAM] unsigned char 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  2   22[COMRAM] unsigned int 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1861 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1862 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1864 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1865 ;;Total ram usage:        7 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    2
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_make_frequency_message
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text3
  1876  011C8E                     __ptext3:
  1877                           	opt stack 0
  1878  011C8E                     ___lwdiv:
  1879                           	opt stack 27
  1880                           
  1881                           ;incstack = 0
  1882  011C8E  0E00               	movlw	0
  1883  011C90  6E1D               	movwf	___lwdiv@quotient+1,c
  1884  011C92  0E00               	movlw	0
  1885  011C94  6E1C               	movwf	___lwdiv@quotient,c
  1886  011C96  5019               	movf	___lwdiv@divisor,w,c
  1887  011C98  101A               	iorwf	___lwdiv@divisor+1,w,c
  1888  011C9A  B4D8               	btfsc	status,2,c
  1889  011C9C  D01C               	goto	l900
  1890  011C9E  0E01               	movlw	1
  1891  011CA0  6E1B               	movwf	___lwdiv@counter,c
  1892  011CA2  D004               	goto	l4054
  1893  011CA4                     l4052:
  1894  011CA4  90D8               	bcf	status,0,c
  1895  011CA6  3619               	rlcf	___lwdiv@divisor,f,c
  1896  011CA8  361A               	rlcf	___lwdiv@divisor+1,f,c
  1897  011CAA  2A1B               	incf	___lwdiv@counter,f,c
  1898  011CAC                     l4054:
  1899  011CAC  AE1A               	btfss	___lwdiv@divisor+1,7,c
  1900  011CAE  D7FA               	goto	l4052
  1901  011CB0                     l4056:
  1902  011CB0  90D8               	bcf	status,0,c
  1903  011CB2  361C               	rlcf	___lwdiv@quotient,f,c
  1904  011CB4  361D               	rlcf	___lwdiv@quotient+1,f,c
  1905  011CB6  5019               	movf	___lwdiv@divisor,w,c
  1906  011CB8  5C17               	subwf	___lwdiv@dividend,w,c
  1907  011CBA  501A               	movf	___lwdiv@divisor+1,w,c
  1908  011CBC  5818               	subwfb	___lwdiv@dividend+1,w,c
  1909  011CBE  A0D8               	btfss	status,0,c
  1910  011CC0  D005               	goto	l4064
  1911  011CC2  5019               	movf	___lwdiv@divisor,w,c
  1912  011CC4  5E17               	subwf	___lwdiv@dividend,f,c
  1913  011CC6  501A               	movf	___lwdiv@divisor+1,w,c
  1914  011CC8  5A18               	subwfb	___lwdiv@dividend+1,f,c
  1915  011CCA  801C               	bsf	___lwdiv@quotient,0,c
  1916  011CCC                     l4064:
  1917  011CCC  90D8               	bcf	status,0,c
  1918  011CCE  321A               	rrcf	___lwdiv@divisor+1,f,c
  1919  011CD0  3219               	rrcf	___lwdiv@divisor,f,c
  1920  011CD2  2E1B               	decfsz	___lwdiv@counter,f,c
  1921  011CD4  D7ED               	goto	l4056
  1922  011CD6                     l900:
  1923  011CD6  C01C  F017         	movff	___lwdiv@quotient,?___lwdiv
  1924  011CDA  C01D  F018         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1925  011CDE  0012               	return		;funcret
  1926  011CE0                     __end_of___lwdiv:
  1927                           	opt stack 0
  1928                           tblptru	equ	0xFF8
  1929                           tblptrh	equ	0xFF7
  1930                           tblptrl	equ	0xFF6
  1931                           tablat	equ	0xFF5
  1932                           postinc0	equ	0xFEE
  1933                           wreg	equ	0xFE8
  1934                           postdec1	equ	0xFE5
  1935                           fsr1l	equ	0xFE1
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function _makeTempMessage *****************
  1939 ;; Defined at:
  1940 ;;		line 100 in file "temperature.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;  pipe_or_ambi    1    wreg     unsigned char 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  pipe_or_ambi    1   24[BANK0 ] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1957 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1958 ;;Total ram usage:        1 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    5
  1961 ;; This function calls:
  1962 ;;		_calculateTemp
  1963 ;;		_fillInTemp
  1964 ;; This function is called by:
  1965 ;;		_main
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text4
  1970  011C38                     __ptext4:
  1971                           	opt stack 0
  1972  011C38                     _makeTempMessage:
  1973                           	opt stack 25
  1974                           
  1975                           ;incstack = 0
  1976                           ;makeTempMessage@pipe_or_ambient stored from wreg
  1977  011C38  0100               	movlb	0	; () banked
  1978  011C3A  6FB6               	movwf	makeTempMessage@pipe_or_ambient& (0+255),b
  1979                           
  1980                           ;temperature.c: 102: if(pipe_or_ambient == 0){
  1981  011C3C  0100               	movlb	0	; () banked
  1982  011C3E  51B6               	movf	makeTempMessage@pipe_or_ambient& (0+255),w,b
  1983  011C40  0100               	movlb	0	; () banked
  1984  011C42  A4D8               	btfss	status,2,c
  1985  011C44  D012               	goto	l4196
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;temperature.c: 103: temp_pipe = calculateTemp(plus_pipe, minus_pipe);
  1989  011C46  C0E9  F0AD         	movff	_plus_pipe,calculateTemp@plus
  1990  011C4A  C0EA  F0AE         	movff	_plus_pipe+1,calculateTemp@plus+1
  1991  011C4E  C0E5  F0AF         	movff	_minus_pipe,calculateTemp@minus
  1992  011C52  C0E6  F0B0         	movff	_minus_pipe+1,calculateTemp@minus+1
  1993  011C56  ECA9  F08A         	call	_calculateTemp	;wreg free
  1994  011C5A  C0AD  F0ED         	movff	?_calculateTemp,_temp_pipe
  1995  011C5E  C0AE  F0EE         	movff	?_calculateTemp+1,_temp_pipe+1
  1996                           
  1997                           ;temperature.c: 104: fillInTemp(0);
  1998  011C62  0E00               	movlw	0
  1999  011C64  EC22  F083         	call	_fillInTemp
  2000                           
  2001                           ;temperature.c: 105: }
  2002  011C68  0012               	return	
  2003  011C6A                     l4196:
  2004                           
  2005                           ;temperature.c: 107: else{
  2006                           ;temperature.c: 108: temp_ambient = calculateTemp(plus_ambient, minus_ambient);
  2007  011C6A  C0E7  F0AD         	movff	_plus_ambient,calculateTemp@plus
  2008  011C6E  C0E8  F0AE         	movff	_plus_ambient+1,calculateTemp@plus+1
  2009  011C72  C0E3  F0AF         	movff	_minus_ambient,calculateTemp@minus
  2010  011C76  C0E4  F0B0         	movff	_minus_ambient+1,calculateTemp@minus+1
  2011  011C7A  ECA9  F08A         	call	_calculateTemp	;wreg free
  2012  011C7E  C0AD  F0EB         	movff	?_calculateTemp,_temp_ambient
  2013  011C82  C0AE  F0EC         	movff	?_calculateTemp+1,_temp_ambient+1
  2014                           
  2015                           ;temperature.c: 109: fillInTemp(1);
  2016  011C86  0E01               	movlw	1
  2017  011C88  EC22  F083         	call	_fillInTemp
  2018  011C8C  0012               	return	
  2019  011C8E                     __end_of_makeTempMessage:
  2020                           	opt stack 0
  2021                           tblptru	equ	0xFF8
  2022                           tblptrh	equ	0xFF7
  2023                           tblptrl	equ	0xFF6
  2024                           tablat	equ	0xFF5
  2025                           postinc0	equ	0xFEE
  2026                           wreg	equ	0xFE8
  2027                           postdec1	equ	0xFE5
  2028                           fsr1l	equ	0xFE1
  2029                           status	equ	0xFD8
  2030                           
  2031 ;; *************** function _fillInTemp *****************
  2032 ;; Defined at:
  2033 ;;		line 50 in file "temperature.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  pipe_or_ambi    1    wreg     unsigned char 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  pipe_or_ambi    1   35[COMRAM] unsigned char 
  2038 ;;  i               2   38[COMRAM] int 
  2039 ;;  i               2   36[COMRAM] int 
  2040 ;;  i               1   40[COMRAM] unsigned char 
  2041 ;;  temp            2   41[COMRAM] int 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2053 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2054 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2055 ;;Total ram usage:       12 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    3
  2058 ;; This function calls:
  2059 ;;		___awdiv
  2060 ;;		___awmod
  2061 ;; This function is called by:
  2062 ;;		_makeTempMessage
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text5
  2067  010644                     __ptext5:
  2068                           	opt stack 0
  2069  010644                     _fillInTemp:
  2070                           	opt stack 26
  2071                           
  2072                           ;incstack = 0
  2073                           ;fillInTemp@pipe_or_ambience stored from wreg
  2074  010644  6E24               	movwf	fillInTemp@pipe_or_ambience,c
  2075                           
  2076                           ;temperature.c: 51: signed int temp;
  2077                           ;temperature.c: 53: if(pipe_or_ambience == 0){
  2078  010646  5024               	movf	fillInTemp@pipe_or_ambience,w,c
  2079  010648  A4D8               	btfss	status,2,c
  2080  01064A  D02A               	goto	l3960
  2081                           
  2082                           ;temperature.c: 55: for(int i = 0; i<4; i++){
  2083  01064C  0E00               	movlw	0
  2084  01064E  6E26               	movwf	fillInTemp@i+1,c
  2085  010650  0E00               	movlw	0
  2086  010652  6E25               	movwf	fillInTemp@i,c
  2087  010654  BE26               	btfsc	fillInTemp@i+1,7,c
  2088  010656  D006               	goto	l3954
  2089  010658  5026               	movf	fillInTemp@i+1,w,c
  2090  01065A  E11D               	bnz	l226
  2091  01065C  0E04               	movlw	4
  2092  01065E  5C25               	subwf	fillInTemp@i,w,c
  2093  010660  B0D8               	btfsc	status,0,c
  2094  010662  D019               	goto	l226
  2095  010664                     l3954:
  2096                           
  2097                           ;temperature.c: 56: temp_display_message[i] = pipe_ascii[i];
  2098  010664  0EF1               	movlw	low _pipe_ascii
  2099  010666  2425               	addwf	fillInTemp@i,w,c
  2100  010668  6EF6               	movwf	tblptrl,c
  2101  01066A  0EFE               	movlw	high _pipe_ascii
  2102  01066C  2026               	addwfc	fillInTemp@i+1,w,c
  2103  01066E  6EF7               	movwf	tblptrh,c
  2104  010670                     	if	1	;There are 3 active tblptr bytes
  2105  010670  6AF8               	clrf	tblptru,c
  2106  010672  0E00               	movlw	low (__mediumconst shr (0+16))
  2107  010674  22F8               	addwfc	tblptru,f,c
  2108  010676                     	endif
  2109  010676  0E8A               	movlw	low _temp_display_message
  2110  010678  2425               	addwf	fillInTemp@i,w,c
  2111  01067A  6ED9               	movwf	fsr2l,c
  2112  01067C  0E00               	movlw	high _temp_display_message
  2113  01067E  2026               	addwfc	fillInTemp@i+1,w,c
  2114  010680  6EDA               	movwf	fsr2h,c
  2115  010682  0008               	tblrd		*
  2116  010684  CFF5 FFDF          	movff	tablat,indf2
  2117  010688  4A25               	infsnz	fillInTemp@i,f,c
  2118  01068A  2A26               	incf	fillInTemp@i+1,f,c
  2119  01068C  BE26               	btfsc	fillInTemp@i+1,7,c
  2120  01068E  D7EA               	goto	l3954
  2121  010690  5026               	movf	fillInTemp@i+1,w,c
  2122  010692  E101               	bnz	u3870
  2123  010694  D7E3               	goto	L1
  2124  010696                     u3870:
  2125  010696                     l226:
  2126                           
  2127                           ;temperature.c: 57: }
  2128                           ;temperature.c: 58: temp = temp_pipe;
  2129  010696  C0ED  F02A         	movff	_temp_pipe,fillInTemp@temp
  2130  01069A  C0EE  F02B         	movff	_temp_pipe+1,fillInTemp@temp+1
  2131                           
  2132                           ;temperature.c: 59: }
  2133  01069E  D029               	goto	l3972
  2134  0106A0                     l3960:
  2135                           
  2136                           ;temperature.c: 60: else{
  2137                           ;temperature.c: 62: for(int i = 0; i<4; i++){
  2138  0106A0  0E00               	movlw	0
  2139  0106A2  6E28               	movwf	fillInTemp@i_1156+1,c
  2140  0106A4  0E00               	movlw	0
  2141  0106A6  6E27               	movwf	fillInTemp@i_1156,c
  2142  0106A8  BE28               	btfsc	fillInTemp@i_1156+1,7,c
  2143  0106AA  D006               	goto	l3966
  2144  0106AC  5028               	movf	fillInTemp@i_1156+1,w,c
  2145  0106AE  E11D               	bnz	l229
  2146  0106B0  0E04               	movlw	4
  2147  0106B2  5C27               	subwf	fillInTemp@i_1156,w,c
  2148  0106B4  B0D8               	btfsc	status,0,c
  2149  0106B6  D019               	goto	l229
  2150  0106B8                     l3966:
  2151                           
  2152                           ;temperature.c: 63: temp_display_message[i] = ambient_ascii[i];
  2153  0106B8  0EEC               	movlw	low _ambient_ascii
  2154  0106BA  2427               	addwf	fillInTemp@i_1156,w,c
  2155  0106BC  6EF6               	movwf	tblptrl,c
  2156  0106BE  0EFE               	movlw	high _ambient_ascii
  2157  0106C0  2028               	addwfc	fillInTemp@i_1156+1,w,c
  2158  0106C2  6EF7               	movwf	tblptrh,c
  2159  0106C4                     	if	1	;There are 3 active tblptr bytes
  2160  0106C4  6AF8               	clrf	tblptru,c
  2161  0106C6  0E00               	movlw	low (__mediumconst shr (0+16))
  2162  0106C8  22F8               	addwfc	tblptru,f,c
  2163  0106CA                     	endif
  2164  0106CA  0E8A               	movlw	low _temp_display_message
  2165  0106CC  2427               	addwf	fillInTemp@i_1156,w,c
  2166  0106CE  6ED9               	movwf	fsr2l,c
  2167  0106D0  0E00               	movlw	high _temp_display_message
  2168  0106D2  2028               	addwfc	fillInTemp@i_1156+1,w,c
  2169  0106D4  6EDA               	movwf	fsr2h,c
  2170  0106D6  0008               	tblrd		*
  2171  0106D8  CFF5 FFDF          	movff	tablat,indf2
  2172  0106DC  4A27               	infsnz	fillInTemp@i_1156,f,c
  2173  0106DE  2A28               	incf	fillInTemp@i_1156+1,f,c
  2174  0106E0  BE28               	btfsc	fillInTemp@i_1156+1,7,c
  2175  0106E2  D7EA               	goto	l3966
  2176  0106E4  5028               	movf	fillInTemp@i_1156+1,w,c
  2177  0106E6  E101               	bnz	u3890
  2178  0106E8  D7E3               	goto	L2
  2179  0106EA                     u3890:
  2180  0106EA                     l229:
  2181                           
  2182                           ;temperature.c: 64: }
  2183                           ;temperature.c: 65: temp = temp_ambient;
  2184  0106EA  C0EB  F02A         	movff	_temp_ambient,fillInTemp@temp
  2185  0106EE  C0EC  F02B         	movff	_temp_ambient+1,fillInTemp@temp+1
  2186  0106F2                     l3972:
  2187                           
  2188                           ;temperature.c: 66: }
  2189                           ;temperature.c: 69: if(temp < 0){
  2190  0106F2  AE2B               	btfss	fillInTemp@temp+1,7,c
  2191  0106F4  D008               	goto	l3978
  2192                           
  2193                           ;temperature.c: 71: asciiTemp[0] = '-';
  2194  0106F6  0E2D               	movlw	45
  2195  0106F8  0100               	movlb	0	; () banked
  2196  0106FA  6F60               	movwf	_asciiTemp& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;temperature.c: 73: temp = - temp;
  2200  0106FC  6C2A               	negf	fillInTemp@temp,c
  2201  0106FE  1E2B               	comf	fillInTemp@temp+1,f,c
  2202  010700  B0D8               	btfsc	status,0,c
  2203  010702  2A2B               	incf	fillInTemp@temp+1,f,c
  2204                           
  2205                           ;temperature.c: 74: }
  2206  010704  D003               	goto	l3980
  2207  010706                     l3978:
  2208                           
  2209                           ;temperature.c: 75: else{
  2210                           ;temperature.c: 76: asciiTemp[0] = ' ';
  2211  010706  0E20               	movlw	32
  2212  010708  0100               	movlb	0	; () banked
  2213  01070A  6F60               	movwf	_asciiTemp& (0+255),b
  2214  01070C                     l3980:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;temperature.c: 77: }
  2218                           ;temperature.c: 79: asciiTemp[1] =(char) (temp/100 + 48);
  2219  01070C  C02A  F018         	movff	fillInTemp@temp,___awdiv@dividend
  2220  010710  C02B  F019         	movff	fillInTemp@temp+1,___awdiv@dividend+1
  2221  010714  0E00               	movlw	0
  2222  010716  6E1B               	movwf	___awdiv@divisor+1,c
  2223  010718  0E64               	movlw	100
  2224  01071A  6E1A               	movwf	___awdiv@divisor,c
  2225  01071C  EC90  F08C         	call	___awdiv	;wreg free
  2226  010720  5018               	movf	?___awdiv,w,c
  2227  010722  0F30               	addlw	48
  2228  010724  0100               	movlb	0	; () banked
  2229  010726  6F61               	movwf	(_asciiTemp+1)& (0+255),b
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;temperature.c: 80: asciiTemp[2] =(char) (temp % 100 / 10 + 48);
  2233  010728  0E00               	movlw	0
  2234  01072A  6E15               	movwf	___awmod@divisor+1,c
  2235  01072C  0E64               	movlw	100
  2236  01072E  6E14               	movwf	___awmod@divisor,c
  2237  010730  C02A  F012         	movff	fillInTemp@temp,___awmod@dividend
  2238  010734  C02B  F013         	movff	fillInTemp@temp+1,___awmod@dividend+1
  2239  010738  EC4E  F08D         	call	___awmod	;wreg free
  2240  01073C  C012  F018         	movff	?___awmod,___awdiv@dividend
  2241  010740  C013  F019         	movff	?___awmod+1,___awdiv@dividend+1
  2242  010744  0E00               	movlw	0
  2243  010746  6E1B               	movwf	___awdiv@divisor+1,c
  2244  010748  0E0A               	movlw	10
  2245  01074A  6E1A               	movwf	___awdiv@divisor,c
  2246  01074C  EC90  F08C         	call	___awdiv	;wreg free
  2247  010750  5018               	movf	?___awdiv,w,c
  2248  010752  0F30               	addlw	48
  2249  010754  0100               	movlb	0	; () banked
  2250  010756  6F62               	movwf	(_asciiTemp+2)& (0+255),b
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;temperature.c: 81: asciiTemp[3] = (char) (temp % 10 + 48);
  2254  010758  C02A  F012         	movff	fillInTemp@temp,___awmod@dividend
  2255  01075C  C02B  F013         	movff	fillInTemp@temp+1,___awmod@dividend+1
  2256  010760  0E00               	movlw	0
  2257  010762  6E15               	movwf	___awmod@divisor+1,c
  2258  010764  0E0A               	movlw	10
  2259  010766  6E14               	movwf	___awmod@divisor,c
  2260  010768  EC4E  F08D         	call	___awmod	;wreg free
  2261  01076C  5012               	movf	?___awmod,w,c
  2262  01076E  0F30               	addlw	48
  2263  010770  0100               	movlb	0	; () banked
  2264  010772  6F63               	movwf	(_asciiTemp+3)& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;temperature.c: 85: for(char i = 12; i<17; i++){
  2268  010774  0E0C               	movlw	12
  2269  010776  6E29               	movwf	fillInTemp@i_1157,c
  2270  010778                     l3988:
  2271                           
  2272                           ; BSR set to: 0
  2273  010778  0E10               	movlw	16
  2274  01077A  6429               	cpfsgt	fillInTemp@i_1157,c
  2275  01077C  D001               	goto	l3992
  2276  01077E  0012               	return	
  2277  010780                     l3992:
  2278                           
  2279                           ;temperature.c: 86: temp_display_message[i] = asciiTemp[i-12];
  2280  010780  0EF4               	movlw	244
  2281  010782  6E20               	movwf	??_fillInTemp& (0+255),c
  2282  010784  0EFF               	movlw	255
  2283  010786  6E21               	movwf	(??_fillInTemp+1)& (0+255),c
  2284  010788  5029               	movf	fillInTemp@i_1157,w,c
  2285  01078A  6E22               	movwf	(??_fillInTemp+2)& (0+255),c
  2286  01078C  6A23               	clrf	(??_fillInTemp+3)& (0+255),c
  2287  01078E  5020               	movf	??_fillInTemp,w,c
  2288  010790  2622               	addwf	??_fillInTemp+2,f,c
  2289  010792  5021               	movf	??_fillInTemp+1,w,c
  2290  010794  2223               	addwfc	??_fillInTemp+3,f,c
  2291  010796  0E60               	movlw	low _asciiTemp
  2292  010798  2422               	addwf	??_fillInTemp+2,w,c
  2293  01079A  6ED9               	movwf	fsr2l,c
  2294  01079C  0E00               	movlw	high _asciiTemp
  2295  01079E  2023               	addwfc	??_fillInTemp+3,w,c
  2296  0107A0  6EDA               	movwf	fsr2h,c
  2297  0107A2  5029               	movf	fillInTemp@i_1157,w,c
  2298  0107A4  0D01               	mullw	1
  2299  0107A6  0E8A               	movlw	low _temp_display_message
  2300  0107A8  24F3               	addwf	prodl,w,c
  2301  0107AA  6EE1               	movwf	fsr1l,c
  2302  0107AC  0E00               	movlw	high _temp_display_message
  2303  0107AE  20F4               	addwfc	prodh,w,c
  2304  0107B0  6EE2               	movwf	fsr1h,c
  2305  0107B2  CFDF FFE7          	movff	indf2,indf1
  2306  0107B6  2A29               	incf	fillInTemp@i_1157,f,c
  2307  0107B8  D7DF               	goto	l3988
  2308  0107BA                     __end_of_fillInTemp:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           indf1	equ	0xFE7
  2319                           postdec1	equ	0xFE5
  2320                           fsr1h	equ	0xFE2
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function ___awmod *****************
  2328 ;; Defined at:
  2329 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  dividend        2   17[COMRAM] int 
  2332 ;;  divisor         2   19[COMRAM] int 
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;  sign            1   22[COMRAM] unsigned char 
  2335 ;;  counter         1   21[COMRAM] unsigned char 
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  2   17[COMRAM] int 
  2338 ;; Registers used:
  2339 ;;		wreg, status,2, status,0
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2348 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2349 ;;Total ram usage:        6 bytes
  2350 ;; Hardware stack levels used:    1
  2351 ;; Hardware stack levels required when called:    2
  2352 ;; This function calls:
  2353 ;;		Nothing
  2354 ;; This function is called by:
  2355 ;;		_fillInTemp
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text6
  2360  011A9C                     __ptext6:
  2361                           	opt stack 0
  2362  011A9C                     ___awmod:
  2363                           	opt stack 26
  2364                           
  2365                           ;incstack = 0
  2366  011A9C  0E00               	movlw	0
  2367  011A9E  6E17               	movwf	___awmod@sign,c
  2368  011AA0  AE13               	btfss	___awmod@dividend+1,7,c
  2369  011AA2  D006               	goto	l3896
  2370  011AA4  6C12               	negf	___awmod@dividend,c
  2371  011AA6  1E13               	comf	___awmod@dividend+1,f,c
  2372  011AA8  B0D8               	btfsc	status,0,c
  2373  011AAA  2A13               	incf	___awmod@dividend+1,f,c
  2374  011AAC  0E01               	movlw	1
  2375  011AAE  6E17               	movwf	___awmod@sign,c
  2376  011AB0                     l3896:
  2377  011AB0  AE15               	btfss	___awmod@divisor+1,7,c
  2378  011AB2  D004               	goto	l3900
  2379  011AB4  6C14               	negf	___awmod@divisor,c
  2380  011AB6  1E15               	comf	___awmod@divisor+1,f,c
  2381  011AB8  B0D8               	btfsc	status,0,c
  2382  011ABA  2A15               	incf	___awmod@divisor+1,f,c
  2383  011ABC                     l3900:
  2384  011ABC  5014               	movf	___awmod@divisor,w,c
  2385  011ABE  1015               	iorwf	___awmod@divisor+1,w,c
  2386  011AC0  B4D8               	btfsc	status,2,c
  2387  011AC2  D018               	goto	l3916
  2388  011AC4  0E01               	movlw	1
  2389  011AC6  6E16               	movwf	___awmod@counter,c
  2390  011AC8  D004               	goto	l3906
  2391  011ACA                     l3904:
  2392  011ACA  90D8               	bcf	status,0,c
  2393  011ACC  3614               	rlcf	___awmod@divisor,f,c
  2394  011ACE  3615               	rlcf	___awmod@divisor+1,f,c
  2395  011AD0  2A16               	incf	___awmod@counter,f,c
  2396  011AD2                     l3906:
  2397  011AD2  AE15               	btfss	___awmod@divisor+1,7,c
  2398  011AD4  D7FA               	goto	l3904
  2399  011AD6                     l3908:
  2400  011AD6  5014               	movf	___awmod@divisor,w,c
  2401  011AD8  5C12               	subwf	___awmod@dividend,w,c
  2402  011ADA  5015               	movf	___awmod@divisor+1,w,c
  2403  011ADC  5813               	subwfb	___awmod@dividend+1,w,c
  2404  011ADE  A0D8               	btfss	status,0,c
  2405  011AE0  D004               	goto	l3912
  2406  011AE2  5014               	movf	___awmod@divisor,w,c
  2407  011AE4  5E12               	subwf	___awmod@dividend,f,c
  2408  011AE6  5015               	movf	___awmod@divisor+1,w,c
  2409  011AE8  5A13               	subwfb	___awmod@dividend+1,f,c
  2410  011AEA                     l3912:
  2411  011AEA  90D8               	bcf	status,0,c
  2412  011AEC  3215               	rrcf	___awmod@divisor+1,f,c
  2413  011AEE  3214               	rrcf	___awmod@divisor,f,c
  2414  011AF0  2E16               	decfsz	___awmod@counter,f,c
  2415  011AF2  D7F1               	goto	l3908
  2416  011AF4                     l3916:
  2417  011AF4  5017               	movf	___awmod@sign,w,c
  2418  011AF6  B4D8               	btfsc	status,2,c
  2419  011AF8  D004               	goto	l3920
  2420  011AFA  6C12               	negf	___awmod@dividend,c
  2421  011AFC  1E13               	comf	___awmod@dividend+1,f,c
  2422  011AFE  B0D8               	btfsc	status,0,c
  2423  011B00  2A13               	incf	___awmod@dividend+1,f,c
  2424  011B02                     l3920:
  2425  011B02  C012  F012         	movff	___awmod@dividend,?___awmod
  2426  011B06  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
  2427  011B0A  0012               	return	
  2428  011B0C                     __end_of___awmod:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           tblptrh	equ	0xFF7
  2432                           tblptrl	equ	0xFF6
  2433                           tablat	equ	0xFF5
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           indf1	equ	0xFE7
  2439                           postdec1	equ	0xFE5
  2440                           fsr1h	equ	0xFE2
  2441                           fsr1l	equ	0xFE1
  2442                           indf2	equ	0xFDF
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function ___awdiv *****************
  2448 ;; Defined at:
  2449 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  dividend        2   23[COMRAM] int 
  2452 ;;  divisor         2   25[COMRAM] int 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  quotient        2   29[COMRAM] int 
  2455 ;;  sign            1   28[COMRAM] unsigned char 
  2456 ;;  counter         1   27[COMRAM] unsigned char 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  2   23[COMRAM] int 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2, status,0
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2467 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2469 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2470 ;;Total ram usage:        8 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    2
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_fillInTemp
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text7
  2481  011920                     __ptext7:
  2482                           	opt stack 0
  2483  011920                     ___awdiv:
  2484                           	opt stack 26
  2485                           
  2486                           ;incstack = 0
  2487  011920  0E00               	movlw	0
  2488  011922  6E1D               	movwf	___awdiv@sign,c
  2489  011924  AE1B               	btfss	___awdiv@divisor+1,7,c
  2490  011926  D006               	goto	l3852
  2491  011928  6C1A               	negf	___awdiv@divisor,c
  2492  01192A  1E1B               	comf	___awdiv@divisor+1,f,c
  2493  01192C  B0D8               	btfsc	status,0,c
  2494  01192E  2A1B               	incf	___awdiv@divisor+1,f,c
  2495  011930  0E01               	movlw	1
  2496  011932  6E1D               	movwf	___awdiv@sign,c
  2497  011934                     l3852:
  2498  011934  AE19               	btfss	___awdiv@dividend+1,7,c
  2499  011936  D006               	goto	l3858
  2500  011938  6C18               	negf	___awdiv@dividend,c
  2501  01193A  1E19               	comf	___awdiv@dividend+1,f,c
  2502  01193C  B0D8               	btfsc	status,0,c
  2503  01193E  2A19               	incf	___awdiv@dividend+1,f,c
  2504  011940  0E01               	movlw	1
  2505  011942  1A1D               	xorwf	___awdiv@sign,f,c
  2506  011944                     l3858:
  2507  011944  0E00               	movlw	0
  2508  011946  6E1F               	movwf	___awdiv@quotient+1,c
  2509  011948  0E00               	movlw	0
  2510  01194A  6E1E               	movwf	___awdiv@quotient,c
  2511  01194C  501A               	movf	___awdiv@divisor,w,c
  2512  01194E  101B               	iorwf	___awdiv@divisor+1,w,c
  2513  011950  B4D8               	btfsc	status,2,c
  2514  011952  D01C               	goto	l3880
  2515  011954  0E01               	movlw	1
  2516  011956  6E1C               	movwf	___awdiv@counter,c
  2517  011958  D004               	goto	l3866
  2518  01195A                     l3864:
  2519  01195A  90D8               	bcf	status,0,c
  2520  01195C  361A               	rlcf	___awdiv@divisor,f,c
  2521  01195E  361B               	rlcf	___awdiv@divisor+1,f,c
  2522  011960  2A1C               	incf	___awdiv@counter,f,c
  2523  011962                     l3866:
  2524  011962  AE1B               	btfss	___awdiv@divisor+1,7,c
  2525  011964  D7FA               	goto	l3864
  2526  011966                     l3868:
  2527  011966  90D8               	bcf	status,0,c
  2528  011968  361E               	rlcf	___awdiv@quotient,f,c
  2529  01196A  361F               	rlcf	___awdiv@quotient+1,f,c
  2530  01196C  501A               	movf	___awdiv@divisor,w,c
  2531  01196E  5C18               	subwf	___awdiv@dividend,w,c
  2532  011970  501B               	movf	___awdiv@divisor+1,w,c
  2533  011972  5819               	subwfb	___awdiv@dividend+1,w,c
  2534  011974  A0D8               	btfss	status,0,c
  2535  011976  D005               	goto	l3876
  2536  011978  501A               	movf	___awdiv@divisor,w,c
  2537  01197A  5E18               	subwf	___awdiv@dividend,f,c
  2538  01197C  501B               	movf	___awdiv@divisor+1,w,c
  2539  01197E  5A19               	subwfb	___awdiv@dividend+1,f,c
  2540  011980  801E               	bsf	___awdiv@quotient,0,c
  2541  011982                     l3876:
  2542  011982  90D8               	bcf	status,0,c
  2543  011984  321B               	rrcf	___awdiv@divisor+1,f,c
  2544  011986  321A               	rrcf	___awdiv@divisor,f,c
  2545  011988  2E1C               	decfsz	___awdiv@counter,f,c
  2546  01198A  D7ED               	goto	l3868
  2547  01198C                     l3880:
  2548  01198C  501D               	movf	___awdiv@sign,w,c
  2549  01198E  B4D8               	btfsc	status,2,c
  2550  011990  D004               	goto	l3884
  2551  011992  6C1E               	negf	___awdiv@quotient,c
  2552  011994  1E1F               	comf	___awdiv@quotient+1,f,c
  2553  011996  B0D8               	btfsc	status,0,c
  2554  011998  2A1F               	incf	___awdiv@quotient+1,f,c
  2555  01199A                     l3884:
  2556  01199A  C01E  F018         	movff	___awdiv@quotient,?___awdiv
  2557  01199E  C01F  F019         	movff	___awdiv@quotient+1,?___awdiv+1
  2558  0119A2  0012               	return	
  2559  0119A4                     __end_of___awdiv:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           indf1	equ	0xFE7
  2570                           postdec1	equ	0xFE5
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           indf2	equ	0xFDF
  2574                           fsr2h	equ	0xFDA
  2575                           fsr2l	equ	0xFD9
  2576                           status	equ	0xFD8
  2577                           
  2578 ;; *************** function _calculateTemp *****************
  2579 ;; Defined at:
  2580 ;;		line 90 in file "temperature.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  plus            2   15[BANK0 ] int 
  2583 ;;  minus           2   17[BANK0 ] int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  temp            2   22[BANK0 ] int 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  2   15[BANK0 ] int 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2595 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2596 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;Total ram usage:       11 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    4
  2602 ;; This function calls:
  2603 ;;		___awtoft
  2604 ;;		___ftdiv
  2605 ;;		___ftmul
  2606 ;;		___fttol
  2607 ;; This function is called by:
  2608 ;;		_makeTempMessage
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text8
  2613  011552                     __ptext8:
  2614                           	opt stack 0
  2615  011552                     _calculateTemp:
  2616                           	opt stack 25
  2617                           
  2618                           ;temperature.c: 91: signed int temp;
  2619                           ;temperature.c: 93: temp = plus - minus;
  2620                           
  2621                           ;incstack = 0
  2622  011552  C0AF  F03C         	movff	calculateTemp@minus,??_calculateTemp
  2623  011556  C0B0  F03D         	movff	calculateTemp@minus+1,??_calculateTemp+1
  2624  01155A  1E3C               	comf	??_calculateTemp,f,c
  2625  01155C  1E3D               	comf	??_calculateTemp+1,f,c
  2626  01155E  4A3C               	infsnz	??_calculateTemp,f,c
  2627  011560  2A3D               	incf	??_calculateTemp+1,f,c
  2628  011562  0100               	movlb	0	; () banked
  2629  011564  51AD               	movf	calculateTemp@plus& (0+255),w,b
  2630  011566  243C               	addwf	??_calculateTemp,w,c
  2631  011568  0100               	movlb	0	; () banked
  2632  01156A  6FB4               	movwf	calculateTemp@temp& (0+255),b
  2633  01156C  0100               	movlb	0	; () banked
  2634  01156E  51AE               	movf	(calculateTemp@plus+1)& (0+255),w,b
  2635  011570  203D               	addwfc	??_calculateTemp+1,w,c
  2636  011572  0100               	movlb	0	; () banked
  2637  011574  6FB5               	movwf	(calculateTemp@temp+1)& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;temperature.c: 95: temp = (int)((double)(temp) / 1024 * 2750 / 10);
  2641  011576  0EE0               	movlw	224
  2642  011578  6E30               	movwf	___ftmul@f2,c
  2643  01157A  0E2B               	movlw	43
  2644  01157C  6E31               	movwf	___ftmul@f2+1,c
  2645  01157E  0E45               	movlw	69
  2646  011580  6E32               	movwf	___ftmul@f2+2,c
  2647  011582  0E00               	movlw	0
  2648  011584  6E21               	movwf	___ftdiv@f2,c
  2649  011586  0E80               	movlw	128
  2650  011588  6E22               	movwf	___ftdiv@f2+1,c
  2651  01158A  0E44               	movlw	68
  2652  01158C  6E23               	movwf	___ftdiv@f2+2,c
  2653  01158E  C0B4  F01A         	movff	calculateTemp@temp,___awtoft@c
  2654  011592  C0B5  F01B         	movff	calculateTemp@temp+1,___awtoft@c+1
  2655  011596  ECD6  F08E         	call	___awtoft	;wreg free
  2656  01159A  C01A  F01E         	movff	?___awtoft,___ftdiv@f1
  2657  01159E  C01B  F01F         	movff	?___awtoft+1,___ftdiv@f1+1
  2658  0115A2  C01C  F020         	movff	?___awtoft+2,___ftdiv@f1+2
  2659  0115A6  EC62  F089         	call	___ftdiv	;wreg free
  2660  0115AA  C01E  F02D         	movff	?___ftdiv,___ftmul@f1
  2661  0115AE  C01F  F02E         	movff	?___ftdiv+1,___ftmul@f1+1
  2662  0115B2  C020  F02F         	movff	?___ftdiv+2,___ftmul@f1+2
  2663  0115B6  EC73  F088         	call	___ftmul	;wreg free
  2664  0115BA  C02D  F0B1         	movff	?___ftmul,_calculateTemp$2554
  2665  0115BE  C02E  F0B2         	movff	?___ftmul+1,_calculateTemp$2554+1
  2666  0115C2  C02F  F0B3         	movff	?___ftmul+2,_calculateTemp$2554+2
  2667                           
  2668                           ;temperature.c: 95: temp = (int)((double)(temp) / 1024 * 2750 / 10);
  2669  0115C6  0E00               	movlw	0
  2670  0115C8  6E21               	movwf	___ftdiv@f2,c
  2671  0115CA  0E20               	movlw	32
  2672  0115CC  6E22               	movwf	___ftdiv@f2+1,c
  2673  0115CE  0E41               	movlw	65
  2674  0115D0  6E23               	movwf	___ftdiv@f2+2,c
  2675  0115D2  C0B1  F01E         	movff	_calculateTemp$2554,___ftdiv@f1
  2676  0115D6  C0B2  F01F         	movff	_calculateTemp$2554+1,___ftdiv@f1+1
  2677  0115DA  C0B3  F020         	movff	_calculateTemp$2554+2,___ftdiv@f1+2
  2678  0115DE  EC62  F089         	call	___ftdiv	;wreg free
  2679  0115E2  C01E  F09E         	movff	?___ftdiv,___fttol@f1
  2680  0115E6  C01F  F09F         	movff	?___ftdiv+1,___fttol@f1+1
  2681  0115EA  C020  F0A0         	movff	?___ftdiv+2,___fttol@f1+2
  2682  0115EE  ECDD  F083         	call	___fttol	;wreg free
  2683  0115F2  C09E  F0B4         	movff	?___fttol,calculateTemp@temp
  2684  0115F6  C09F  F0B5         	movff	?___fttol+1,calculateTemp@temp+1
  2685                           
  2686                           ;temperature.c: 97: return temp;
  2687  0115FA  C0B4  F0AD         	movff	calculateTemp@temp,?_calculateTemp
  2688  0115FE  C0B5  F0AE         	movff	calculateTemp@temp+1,?_calculateTemp+1
  2689  011602  0012               	return	
  2690  011604                     __end_of_calculateTemp:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           postinc0	equ	0xFEE
  2699                           wreg	equ	0xFE8
  2700                           indf1	equ	0xFE7
  2701                           postdec1	equ	0xFE5
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _init_frequency *****************
  2710 ;; Defined at:
  2711 ;;		line 113 in file "frequency.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg, status,2
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2729 ;;Total ram usage:        0 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    2
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_main
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text9
  2740  0119A4                     __ptext9:
  2741                           	opt stack 0
  2742  0119A4                     _init_frequency:
  2743                           	opt stack 28
  2744                           
  2745                           ;frequency.c: 117: TRISCbits.TRISC1 = 1;
  2746                           
  2747                           ;incstack = 0
  2748  0119A4  8294               	bsf	3988,1,c	;volatile
  2749                           
  2750                           ;frequency.c: 119: CCPTMRS2bits.C8TSEL1=0;
  2751  0119A6  010F               	movlb	15	; () banked
  2752  0119A8  9350               	bcf	80,1,b	;volatile
  2753                           
  2754                           ;frequency.c: 120: CCPTMRS2bits.C8TSEL0=0;
  2755  0119AA  010F               	movlb	15	; () banked
  2756  0119AC  9150               	bcf	80,0,b	;volatile
  2757                           
  2758                           ;frequency.c: 122: PIE4bits.CCP8IE=1;
  2759  0119AE  8A8E               	bsf	3982,5,c	;volatile
  2760                           
  2761                           ;frequency.c: 123: PIR4bits.CCP8IF=0;
  2762  0119B0  9A8F               	bcf	3983,5,c	;volatile
  2763                           
  2764                           ; BSR set to: 15
  2765                           ;frequency.c: 124: CCP8CON=0x07;
  2766  0119B2  0E07               	movlw	7
  2767  0119B4  010F               	movlb	15	; () banked
  2768  0119B6  6F06               	movwf	6,b	;volatile
  2769                           
  2770                           ; BSR set to: 15
  2771                           ;frequency.c: 126: INTCONbits.GIE = 1;
  2772  0119B8  8EF2               	bsf	intcon,7,c	;volatile
  2773                           
  2774                           ; BSR set to: 15
  2775                           ;frequency.c: 128: T1CONbits.RD16=1;
  2776  0119BA  82CD               	bsf	4045,1,c	;volatile
  2777                           
  2778                           ; BSR set to: 15
  2779                           ;frequency.c: 129: T1CONbits.TMR1ON=1;
  2780  0119BC  80CD               	bsf	4045,0,c	;volatile
  2781                           
  2782                           ; BSR set to: 15
  2783                           ;frequency.c: 130: T1CONbits.TMR1CS0=1;
  2784  0119BE  8CCD               	bsf	4045,6,c	;volatile
  2785                           
  2786                           ; BSR set to: 15
  2787                           ;frequency.c: 131: T1CONbits.TMR1CS1=0;
  2788  0119C0  9ECD               	bcf	4045,7,c	;volatile
  2789                           
  2790                           ; BSR set to: 15
  2791                           ;frequency.c: 132: T1CONbits.T1CKPS1=0;
  2792  0119C2  9ACD               	bcf	4045,5,c	;volatile
  2793                           
  2794                           ; BSR set to: 15
  2795                           ;frequency.c: 133: T1CONbits.T1CKPS0=0;
  2796  0119C4  98CD               	bcf	4045,4,c	;volatile
  2797                           
  2798                           ; BSR set to: 15
  2799                           ;frequency.c: 134: T1CONbits.T1OSCEN=0;
  2800  0119C6  96CD               	bcf	4045,3,c	;volatile
  2801                           
  2802                           ;frequency.c: 135: TMR1L=0X00;
  2803  0119C8  0E00               	movlw	0
  2804  0119CA  6ECE               	movwf	4046,c	;volatile
  2805                           
  2806                           ;frequency.c: 136: TMR1H=0X00;
  2807  0119CC  0E00               	movlw	0
  2808  0119CE  6ECF               	movwf	4047,c	;volatile
  2809                           
  2810                           ;frequency.c: 137: CCPR8H=0x00;
  2811  0119D0  0E00               	movlw	0
  2812  0119D2  010F               	movlb	15	; () banked
  2813  0119D4  6F08               	movwf	8,b	;volatile
  2814                           
  2815                           ;frequency.c: 138: CCPR8L=0x00;
  2816  0119D6  0E00               	movlw	0
  2817  0119D8  010F               	movlb	15	; () banked
  2818  0119DA  6F07               	movwf	7,b	;volatile
  2819                           
  2820                           ; BSR set to: 15
  2821                           ;frequency.c: 143: TRISBbits.TRISB7 = 1;
  2822  0119DC  8E93               	bsf	3987,7,c	;volatile
  2823                           
  2824                           ; BSR set to: 15
  2825                           ;frequency.c: 145: CCPTMRS1bits.C7TSEL0=0;
  2826  0119DE  010F               	movlb	15	; () banked
  2827  0119E0  9D51               	bcf	81,6,b	;volatile
  2828                           
  2829                           ; BSR set to: 15
  2830                           ;frequency.c: 146: CCPTMRS1bits.C7TSEL1=1;
  2831  0119E2  010F               	movlb	15	; () banked
  2832  0119E4  8F51               	bsf	81,7,b	;volatile
  2833                           
  2834                           ; BSR set to: 15
  2835                           ;frequency.c: 147: PIE4bits.CCP7IE=1;
  2836  0119E6  888E               	bsf	3982,4,c	;volatile
  2837                           
  2838                           ; BSR set to: 15
  2839                           ;frequency.c: 148: PIR4bits.CCP7IF=0;
  2840  0119E8  988F               	bcf	3983,4,c	;volatile
  2841                           
  2842                           ;frequency.c: 149: CCP7CON=0x07;
  2843  0119EA  0E07               	movlw	7
  2844  0119EC  010F               	movlb	15	; () banked
  2845  0119EE  6F09               	movwf	9,b	;volatile
  2846                           
  2847                           ; BSR set to: 15
  2848                           ;frequency.c: 151: T5CONbits.RD16=1;
  2849  0119F0  010F               	movlb	15	; () banked
  2850  0119F2  8322               	bsf	34,1,b	;volatile
  2851                           
  2852                           ; BSR set to: 15
  2853                           ;frequency.c: 152: T5CONbits.TMR5ON=1;
  2854  0119F4  010F               	movlb	15	; () banked
  2855  0119F6  8122               	bsf	34,0,b	;volatile
  2856                           
  2857                           ; BSR set to: 15
  2858                           ;frequency.c: 153: T5CONbits.TMR5CS0=1;
  2859  0119F8  010F               	movlb	15	; () banked
  2860  0119FA  8D22               	bsf	34,6,b	;volatile
  2861                           
  2862                           ; BSR set to: 15
  2863                           ;frequency.c: 154: T5CONbits.TMR5CS1=0;
  2864  0119FC  010F               	movlb	15	; () banked
  2865  0119FE  9F22               	bcf	34,7,b	;volatile
  2866                           
  2867                           ; BSR set to: 15
  2868                           ;frequency.c: 155: T5CONbits.T5CKPS1=0;
  2869  011A00  010F               	movlb	15	; () banked
  2870  011A02  9B22               	bcf	34,5,b	;volatile
  2871                           
  2872                           ; BSR set to: 15
  2873                           ;frequency.c: 156: T5CONbits.T5CKPS0=0;
  2874  011A04  010F               	movlb	15	; () banked
  2875  011A06  9922               	bcf	34,4,b	;volatile
  2876                           
  2877                           ; BSR set to: 15
  2878                           ;frequency.c: 157: T5CONbits.T5OSCEN=0;
  2879  011A08  010F               	movlb	15	; () banked
  2880  011A0A  9722               	bcf	34,3,b	;volatile
  2881                           
  2882                           ;frequency.c: 159: TMR5L=0X00;
  2883  011A0C  0E00               	movlw	0
  2884  011A0E  010F               	movlb	15	; () banked
  2885  011A10  6F23               	movwf	35,b	;volatile
  2886                           
  2887                           ;frequency.c: 160: TMR5H=0X00;
  2888  011A12  0E00               	movlw	0
  2889  011A14  010F               	movlb	15	; () banked
  2890  011A16  6F24               	movwf	36,b	;volatile
  2891                           
  2892                           ;frequency.c: 161: CCPR7H=0x00;
  2893  011A18  0E00               	movlw	0
  2894  011A1A  010F               	movlb	15	; () banked
  2895  011A1C  6F0B               	movwf	11,b	;volatile
  2896                           
  2897                           ;frequency.c: 162: CCPR7L=0x00;
  2898  011A1E  0E00               	movlw	0
  2899  011A20  010F               	movlb	15	; () banked
  2900  011A22  6F0A               	movwf	10,b	;volatile
  2901                           
  2902                           ; BSR set to: 15
  2903  011A24  0012               	return		;funcret
  2904  011A26                     __end_of_init_frequency:
  2905                           	opt stack 0
  2906                           tblptru	equ	0xFF8
  2907                           tblptrh	equ	0xFF7
  2908                           tblptrl	equ	0xFF6
  2909                           tablat	equ	0xFF5
  2910                           prodh	equ	0xFF4
  2911                           prodl	equ	0xFF3
  2912                           intcon	equ	0xFF2
  2913                           postinc0	equ	0xFEE
  2914                           wreg	equ	0xFE8
  2915                           indf1	equ	0xFE7
  2916                           postdec1	equ	0xFE5
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           indf2	equ	0xFDF
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _initUART1 *****************
  2925 ;; Defined at:
  2926 ;;		line 21 in file "uart.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;		None
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;		None
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      void 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2944 ;;Total ram usage:        0 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    2
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_main
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text10
  2955  011F4C                     __ptext10:
  2956                           	opt stack 0
  2957  011F4C                     _initUART1:
  2958                           	opt stack 28
  2959                           
  2960                           ;uart.c: 24: TRISCbits.TRISC7 = 1;
  2961                           
  2962                           ; BSR set to: 15
  2963                           ;incstack = 0
  2964  011F4C  8E94               	bsf	3988,7,c	;volatile
  2965                           
  2966                           ;uart.c: 25: TRISCbits.TRISC6 = 0;
  2967  011F4E  9C94               	bcf	3988,6,c	;volatile
  2968                           
  2969                           ;uart.c: 27: TXSTA1bits.BRGH = 1;
  2970  011F50  84AD               	bsf	4013,2,c	;volatile
  2971                           
  2972                           ;uart.c: 28: BAUDCON1bits.BRG16 = 1;
  2973  011F52  867E               	bsf	3966,3,c	;volatile
  2974                           
  2975                           ;uart.c: 36: SPBRGH1 = 0;
  2976  011F54  0E00               	movlw	0
  2977  011F56  6E7F               	movwf	3967,c	;volatile
  2978                           
  2979                           ;uart.c: 37: SPBRG1 = 34;
  2980  011F58  0E22               	movlw	34
  2981  011F5A  6EB0               	movwf	4016,c	;volatile
  2982                           
  2983                           ;uart.c: 41: TXSTA1bits.SYNC = 0;
  2984  011F5C  98AD               	bcf	4013,4,c	;volatile
  2985                           
  2986                           ;uart.c: 42: RCSTA1bits.SPEN = 1;
  2987  011F5E  8EAC               	bsf	4012,7,c	;volatile
  2988                           
  2989                           ;uart.c: 46: PIE1bits.TXIE = 0;
  2990  011F60  989D               	bcf	3997,4,c	;volatile
  2991                           
  2992                           ;uart.c: 47: PIE1bits.RC1IE = 1;
  2993  011F62  8A9D               	bsf	3997,5,c	;volatile
  2994                           
  2995                           ;uart.c: 52: RCSTA1bits.CREN = 1;
  2996  011F64  88AC               	bsf	4012,4,c	;volatile
  2997  011F66  0012               	return		;funcret
  2998  011F68                     __end_of_initUART1:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           postinc0	equ	0xFEE
  3008                           wreg	equ	0xFE8
  3009                           indf1	equ	0xFE7
  3010                           postdec1	equ	0xFE5
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _initSPI *****************
  3019 ;; Defined at:
  3020 ;;		line 25 in file "digipot_spi.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  2   14[None  ] int 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3037 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3038 ;;Total ram usage:        9 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    7
  3041 ;; This function calls:
  3042 ;;		___awtoft
  3043 ;;		___ftadd
  3044 ;;		___ftdiv
  3045 ;;		___ftmul
  3046 ;;		___lbtoft
  3047 ;;		_pow
  3048 ;;		_remappings
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text11
  3055  010CAC                     __ptext11:
  3056                           	opt stack 0
  3057  010CAC                     _initSPI:
  3058                           	opt stack 23
  3059                           
  3060                           ;digipot_spi.c: 26: SSP2STAT = 0b00000000;
  3061                           
  3062                           ;incstack = 0
  3063  010CAC  0E00               	movlw	0
  3064  010CAE  6E73               	movwf	3955,c	;volatile
  3065                           
  3066                           ;digipot_spi.c: 27: SSP2CON1 = 0b00110010;
  3067  010CB0  0E32               	movlw	50
  3068  010CB2  6E72               	movwf	3954,c	;volatile
  3069                           
  3070                           ;digipot_spi.c: 28: TRISB = 0x01;
  3071  010CB4  0E01               	movlw	1
  3072  010CB6  6E93               	movwf	3987,c	;volatile
  3073                           
  3074                           ;digipot_spi.c: 29: TRISC = 0x00;
  3075  010CB8  0E00               	movlw	0
  3076  010CBA  6E94               	movwf	3988,c	;volatile
  3077                           
  3078                           ;digipot_spi.c: 30: TRISA = 0x01;
  3079  010CBC  0E01               	movlw	1
  3080  010CBE  6E92               	movwf	3986,c	;volatile
  3081                           
  3082                           ;digipot_spi.c: 31: PORTBbits.RB2=1;
  3083  010CC0  8481               	bsf	3969,2,c	;volatile
  3084                           
  3085                           ;digipot_spi.c: 32: ADCON1 = 0x0F;
  3086  010CC2  0E0F               	movlw	15
  3087  010CC4  6EC1               	movwf	4033,c	;volatile
  3088                           
  3089                           ;digipot_spi.c: 33: remappings();
  3090  010CC6  EC96  F08F         	call	_remappings	;wreg free
  3091                           
  3092                           ;digipot_spi.c: 34: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  3093  010CCA  0100               	movlb	0	; () banked
  3094  010CCC  51F9               	movf	_step& (0+255),w,b
  3095  010CCE  EC84  F08F         	call	___lbtoft
  3096  010CD2  C01A  F0C9         	movff	?___lbtoft,pow@y
  3097  010CD6  C01B  F0CA         	movff	?___lbtoft+1,pow@y+1
  3098  010CDA  C01C  F0CB         	movff	?___lbtoft+2,pow@y+2
  3099  010CDE  0E3B               	movlw	59
  3100  010CE0  0100               	movlb	0	; () banked
  3101  010CE2  6FC6               	movwf	pow@x& (0+255),b
  3102  010CE4  0E70               	movlw	112
  3103  010CE6  0100               	movlb	0	; () banked
  3104  010CE8  6FC7               	movwf	(pow@x+1)& (0+255),b
  3105  010CEA  0E3F               	movlw	63
  3106  010CEC  0100               	movlb	0	; () banked
  3107  010CEE  6FC8               	movwf	(pow@x+2)& (0+255),b
  3108  010CF0  EC4B  F082         	call	_pow	;wreg free
  3109  010CF4  C0C6  F1A7         	movff	?_pow,_initSPI$2555
  3110  010CF8  C0C7  F1A8         	movff	?_pow+1,_initSPI$2555+1
  3111  010CFC  C0C8  F1A9         	movff	?_pow+2,_initSPI$2555+2
  3112                           
  3113                           ;digipot_spi.c: 34: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  3114  010D00  0E00               	movlw	0
  3115  010D02  0100               	movlb	0	; () banked
  3116  010D04  6FA1               	movwf	___ftadd@f2& (0+255),b
  3117  010D06  0E7A               	movlw	122
  3118  010D08  0100               	movlb	0	; () banked
  3119  010D0A  6FA2               	movwf	(___ftadd@f2+1)& (0+255),b
  3120  010D0C  0E44               	movlw	68
  3121  010D0E  0100               	movlb	0	; () banked
  3122  010D10  6FA3               	movwf	(___ftadd@f2+2)& (0+255),b
  3123  010D12  0E51               	movlw	81
  3124  010D14  6E30               	movwf	___ftmul@f2,c
  3125  010D16  0EC3               	movlw	195
  3126  010D18  6E31               	movwf	___ftmul@f2+1,c
  3127  010D1A  0E43               	movlw	67
  3128  010D1C  6E32               	movwf	___ftmul@f2+2,c
  3129  010D1E  0100               	movlb	0	; () banked
  3130  010D20  51F9               	movf	_step& (0+255),w,b
  3131  010D22  0D02               	mullw	2
  3132  010D24  CFF3 F01A          	movff	prodl,___awtoft@c
  3133  010D28  CFF4 F01B          	movff	prodh,___awtoft@c+1
  3134  010D2C  ECD6  F08E         	call	___awtoft	;wreg free
  3135  010D30  C01A  F02D         	movff	?___awtoft,___ftmul@f1
  3136  010D34  C01B  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  3137  010D38  C01C  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  3138  010D3C  EC73  F088         	call	___ftmul	;wreg free
  3139  010D40  C02D  F09E         	movff	?___ftmul,___ftadd@f1
  3140  010D44  C02E  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  3141  010D48  C02F  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  3142  010D4C  EC00  F080         	call	___ftadd	;wreg free
  3143  010D50  C09E  F1AA         	movff	?___ftadd,_initSPI$2556
  3144  010D54  C09F  F1AB         	movff	?___ftadd+1,_initSPI$2556+1
  3145  010D58  C0A0  F1AC         	movff	?___ftadd+2,_initSPI$2556+2
  3146                           
  3147                           ;digipot_spi.c: 34: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  3148  010D5C  C1A7  F030         	movff	_initSPI$2555,___ftmul@f2
  3149  010D60  C1A8  F031         	movff	_initSPI$2555+1,___ftmul@f2+1
  3150  010D64  C1A9  F032         	movff	_initSPI$2555+2,___ftmul@f2+2
  3151  010D68  C1AA  F02D         	movff	_initSPI$2556,___ftmul@f1
  3152  010D6C  C1AB  F02E         	movff	_initSPI$2556+1,___ftmul@f1+1
  3153  010D70  C1AC  F02F         	movff	_initSPI$2556+2,___ftmul@f1+2
  3154  010D74  EC73  F088         	call	___ftmul	;wreg free
  3155  010D78  C02D  F1AD         	movff	?___ftmul,_initSPI$2557
  3156  010D7C  C02E  F1AE         	movff	?___ftmul+1,_initSPI$2557+1
  3157  010D80  C02F  F1AF         	movff	?___ftmul+2,_initSPI$2557+2
  3158                           
  3159                           ;digipot_spi.c: 34: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  3160  010D84  0E52               	movlw	82
  3161  010D86  6E1E               	movwf	___ftdiv@f1,c
  3162  010D88  0EB8               	movlw	184
  3163  010D8A  6E1F               	movwf	___ftdiv@f1+1,c
  3164  010D8C  0E3F               	movlw	63
  3165  010D8E  6E20               	movwf	___ftdiv@f1+2,c
  3166  010D90  0EFF               	movlw	255
  3167  010D92  6E30               	movwf	___ftmul@f2,c
  3168  010D94  0E96               	movlw	150
  3169  010D96  6E31               	movwf	___ftmul@f2+1,c
  3170  010D98  0E39               	movlw	57
  3171  010D9A  6E32               	movwf	___ftmul@f2+2,c
  3172  010D9C  C1AD  F02D         	movff	_initSPI$2557,___ftmul@f1
  3173  010DA0  C1AE  F02E         	movff	_initSPI$2557+1,___ftmul@f1+1
  3174  010DA4  C1AF  F02F         	movff	_initSPI$2557+2,___ftmul@f1+2
  3175  010DA8  EC73  F088         	call	___ftmul	;wreg free
  3176  010DAC  C02D  F021         	movff	?___ftmul,___ftdiv@f2
  3177  010DB0  C02E  F022         	movff	?___ftmul+1,___ftdiv@f2+1
  3178  010DB4  C02F  F023         	movff	?___ftmul+2,___ftdiv@f2+2
  3179  010DB8  EC62  F089         	call	___ftdiv	;wreg free
  3180  010DBC  C01E  F0FA         	movff	?___ftdiv,_nominalfrequency
  3181  010DC0  C01F  F0FB         	movff	?___ftdiv+1,_nominalfrequency+1
  3182  010DC4  C020  F0FC         	movff	?___ftdiv+2,_nominalfrequency+2
  3183  010DC8  0012               	return		;funcret
  3184  010DCA                     __end_of_initSPI:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           intcon	equ	0xFF2
  3193                           postinc0	equ	0xFEE
  3194                           wreg	equ	0xFE8
  3195                           indf1	equ	0xFE7
  3196                           postdec1	equ	0xFE5
  3197                           fsr1h	equ	0xFE2
  3198                           fsr1l	equ	0xFE1
  3199                           indf2	equ	0xFDF
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _remappings *****************
  3205 ;; Defined at:
  3206 ;;		line 37 in file "digipot_spi.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    2
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_initSPI
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text12
  3235  011F2C                     __ptext12:
  3236                           	opt stack 0
  3237  011F2C                     _remappings:
  3238                           	opt stack 27
  3239                           
  3240                           ;digipot_spi.c: 38: EECON2 = 0x55;
  3241                           
  3242                           ;incstack = 0
  3243  011F2C  0E55               	movlw	85
  3244  011F2E  6EA7               	movwf	4007,c	;volatile
  3245                           
  3246                           ;digipot_spi.c: 39: EECON2 = 0xaa;
  3247  011F30  0EAA               	movlw	170
  3248  011F32  6EA7               	movwf	4007,c	;volatile
  3249                           
  3250                           ;digipot_spi.c: 40: IOLOCK = 0;
  3251  011F34  010E               	movlb	14	; () banked
  3252  011F36  91BF               	bcf	191,0,b	;volatile
  3253                           
  3254                           ;digipot_spi.c: 41: RPINR21 = 0x08;
  3255  011F38  0E08               	movlw	8
  3256  011F3A  010E               	movlb	14	; () banked
  3257  011F3C  6FFC               	movwf	252,b	;volatile
  3258                           
  3259                           ;digipot_spi.c: 42: RPOR7 = 0x0b;
  3260  011F3E  0E0B               	movlw	11
  3261  011F40  010E               	movlb	14	; () banked
  3262  011F42  6FC7               	movwf	199,b	;volatile
  3263                           
  3264                           ;digipot_spi.c: 43: RPOR9 = 0x0a;
  3265  011F44  0E0A               	movlw	10
  3266  011F46  010E               	movlb	14	; () banked
  3267  011F48  6FC9               	movwf	201,b	;volatile
  3268                           
  3269                           ; BSR set to: 14
  3270  011F4A  0012               	return		;funcret
  3271  011F4C                     __end_of_remappings:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           intcon	equ	0xFF2
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           indf1	equ	0xFE7
  3283                           postdec1	equ	0xFE5
  3284                           fsr1h	equ	0xFE2
  3285                           fsr1l	equ	0xFE1
  3286                           indf2	equ	0xFDF
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _initLoRa *****************
  3292 ;; Defined at:
  3293 ;;		line 28 in file "lora.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    4
  3314 ;; This function calls:
  3315 ;;		_delay_ms
  3316 ;;		_sendUARTMessage
  3317 ;; This function is called by:
  3318 ;;		_main
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text13
  3323  011B7A                     __ptext13:
  3324                           	opt stack 0
  3325  011B7A                     _initLoRa:
  3326                           	opt stack 26
  3327                           
  3328                           ;lora.c: 30: sendUARTMessage(set_dev_eui);
  3329                           
  3330                           ; BSR set to: 14
  3331                           ;incstack = 0
  3332  011B7A  0E4D               	movlw	low _set_dev_eui
  3333  011B7C  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  3334  011B7E  0EFF               	movlw	high _set_dev_eui
  3335  011B80  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  3336  011B82  EC13  F08D         	call	_sendUARTMessage	;wreg free
  3337                           
  3338                           ;lora.c: 31: delay_ms(800);
  3339  011B86  0E03               	movlw	3
  3340  011B88  6E13               	movwf	delay_ms@ms+1,c
  3341  011B8A  0E20               	movlw	32
  3342  011B8C  6E12               	movwf	delay_ms@ms,c
  3343  011B8E  ECF2  F08E         	call	_delay_ms	;wreg free
  3344                           
  3345                           ;lora.c: 33: sendUARTMessage(set_app_eui);
  3346  011B92  0E2B               	movlw	low _set_app_eui
  3347  011B94  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  3348  011B96  0EFF               	movlw	high _set_app_eui
  3349  011B98  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  3350  011B9A  EC13  F08D         	call	_sendUARTMessage	;wreg free
  3351                           
  3352                           ;lora.c: 34: delay_ms(800);
  3353  011B9E  0E03               	movlw	3
  3354  011BA0  6E13               	movwf	delay_ms@ms+1,c
  3355  011BA2  0E20               	movlw	32
  3356  011BA4  6E12               	movwf	delay_ms@ms,c
  3357  011BA6  ECF2  F08E         	call	_delay_ms	;wreg free
  3358                           
  3359                           ;lora.c: 36: sendUARTMessage(set_app_key);
  3360  011BAA  0EF9               	movlw	low _set_app_key
  3361  011BAC  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  3362  011BAE  0EFE               	movlw	high _set_app_key
  3363  011BB0  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  3364  011BB2  EC13  F08D         	call	_sendUARTMessage	;wreg free
  3365                           
  3366                           ;lora.c: 37: delay_ms(3000);
  3367  011BB6  0E0B               	movlw	11
  3368  011BB8  6E13               	movwf	delay_ms@ms+1,c
  3369  011BBA  0EB8               	movlw	184
  3370  011BBC  6E12               	movwf	delay_ms@ms,c
  3371  011BBE  ECF2  F08E         	call	_delay_ms	;wreg free
  3372                           
  3373                           ;lora.c: 39: sendUARTMessage(join_network);
  3374  011BC2  0EA8               	movlw	low _join_network
  3375  011BC4  6E17               	movwf	sendUARTMessage@newMessagePointer,c
  3376  011BC6  0EFF               	movlw	high _join_network
  3377  011BC8  6E18               	movwf	sendUARTMessage@newMessagePointer+1,c
  3378  011BCA  EC13  F08D         	call	_sendUARTMessage	;wreg free
  3379                           
  3380                           ;lora.c: 40: delay_ms(3000);
  3381  011BCE  0E0B               	movlw	11
  3382  011BD0  6E13               	movwf	delay_ms@ms+1,c
  3383  011BD2  0EB8               	movlw	184
  3384  011BD4  6E12               	movwf	delay_ms@ms,c
  3385  011BD6  ECF2  F08E         	call	_delay_ms	;wreg free
  3386  011BDA  0012               	return		;funcret
  3387  011BDC                     __end_of_initLoRa:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           postinc0	equ	0xFEE
  3397                           wreg	equ	0xFE8
  3398                           indf1	equ	0xFE7
  3399                           postdec1	equ	0xFE5
  3400                           fsr1h	equ	0xFE2
  3401                           fsr1l	equ	0xFE1
  3402                           indf2	equ	0xFDF
  3403                           fsr2h	equ	0xFDA
  3404                           fsr2l	equ	0xFD9
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function _sendUARTMessage *****************
  3408 ;; Defined at:
  3409 ;;		line 62 in file "uart.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  newMessagePo    2   22[COMRAM] PTR unsigned char 
  3412 ;;		 -> sendData@message(200), join_network(16), set_app_key(50), set_app_eui(34), 
  3413 ;;		 -> set_dev_eui(34), temp_display_message(20), cap_frequency_message(37), ind_frequency_message(36), 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3428 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3429 ;;Total ram usage:        2 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		_delay_ms
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;;		_initLoRa
  3437 ;;		_sendData
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text14
  3442  011A26                     __ptext14:
  3443                           	opt stack 0
  3444  011A26                     _sendUARTMessage:
  3445                           	opt stack 27
  3446                           
  3447                           ;uart.c: 65: currentMessagePointer = newMessagePointer;
  3448                           
  3449                           ;incstack = 0
  3450  011A26  C017  F042         	movff	sendUARTMessage@newMessagePointer,_currentMessagePointer
  3451  011A2A  C018  F043         	movff	sendUARTMessage@newMessagePointer+1,_currentMessagePointer+1
  3452                           
  3453                           ;uart.c: 70: last_received_message_index = uart_receive_buffer_index;
  3454  011A2E  C04C  F04A         	movff	_uart_receive_buffer_index,_last_received_message_index
  3455  011A32  C04D  F04B         	movff	_uart_receive_buffer_index+1,_last_received_message_index+1
  3456                           
  3457                           ;uart.c: 71: TXSTA1bits.TXEN = 1;
  3458  011A36  8AAD               	bsf	4013,5,c	;volatile
  3459                           
  3460                           ;uart.c: 73: while(*currentMessagePointer != '\0'){
  3461  011A38  D01C               	goto	l3944
  3462  011A3A                     l152:
  3463                           
  3464                           ;uart.c: 74: if(PIR1bits.TXIF == 1){
  3465  011A3A  A89E               	btfss	3998,4,c	;volatile
  3466  011A3C  D01A               	goto	l3944
  3467                           
  3468                           ;uart.c: 76: TXREG1 = *currentMessagePointer;
  3469  011A3E  C042  FFF6         	movff	_currentMessagePointer,tblptrl
  3470  011A42  C043  FFF7         	movff	_currentMessagePointer+1,tblptrh
  3471  011A46  0E00               	movlw	low (__mediumconst shr (0+16))
  3472  011A48  6EF8               	movwf	tblptru,c
  3473  011A4A  0E0E               	movlw	(high __ramtop+-1)
  3474  011A4C  64F7               	cpfsgt	tblptrh,c
  3475  011A4E  D003               	bra	u3827
  3476  011A50  0008               	tblrd		*
  3477  011A52  50F5               	movf	tablat,w,c
  3478  011A54  D005               	bra	u3820
  3479  011A56                     u3827:
  3480  011A56  CFF6 FFE9          	movff	tblptrl,fsr0l
  3481  011A5A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3482  011A5E  50EF               	movf	indf0,w,c
  3483  011A60                     u3820:
  3484  011A60  6EAE               	movwf	4014,c	;volatile
  3485                           
  3486                           ;uart.c: 78: currentMessagePointer += 1;
  3487  011A62  4A42               	infsnz	_currentMessagePointer,f,c
  3488  011A64  2A43               	incf	_currentMessagePointer+1,f,c
  3489                           
  3490                           ;uart.c: 79: delay_ms(1);
  3491  011A66  0E00               	movlw	0
  3492  011A68  6E13               	movwf	delay_ms@ms+1,c
  3493  011A6A  0E01               	movlw	1
  3494  011A6C  6E12               	movwf	delay_ms@ms,c
  3495  011A6E  ECF2  F08E         	call	_delay_ms	;wreg free
  3496  011A72                     l3944:
  3497  011A72  C042  FFF6         	movff	_currentMessagePointer,tblptrl
  3498  011A76  C043  FFF7         	movff	_currentMessagePointer+1,tblptrh
  3499  011A7A  0E00               	movlw	low (__mediumconst shr (0+16))
  3500  011A7C  6EF8               	movwf	tblptru,c
  3501  011A7E  0E0E               	movlw	(high __ramtop+-1)
  3502  011A80  64F7               	cpfsgt	tblptrh,c
  3503  011A82  D003               	bra	u3837
  3504  011A84  0008               	tblrd		*
  3505  011A86  50F5               	movf	tablat,w,c
  3506  011A88  D005               	bra	u3830
  3507  011A8A                     u3837:
  3508  011A8A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3509  011A8E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3510  011A92  50EF               	movf	indf0,w,c
  3511  011A94                     u3830:
  3512  011A94  0900               	iorlw	0
  3513  011A96  B4D8               	btfsc	status,2,c
  3514  011A98  0012               	return	
  3515  011A9A  D7CF               	goto	l152
  3516  011A9C                     __end_of_sendUARTMessage:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           indf0	equ	0xFEF
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           indf1	equ	0xFE7
  3531                           postdec1	equ	0xFE5
  3532                           fsr1h	equ	0xFE2
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _delay_ms *****************
  3540 ;; Defined at:
  3541 ;;		line 11 in file "delay.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  ms              2   17[COMRAM] int 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  i               2   20[COMRAM] int 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3555 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3558 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3559 ;;Total ram usage:        5 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    2
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_main
  3566 ;;		_sendUARTMessage
  3567 ;;		_initLoRa
  3568 ;;		_sendData
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text15
  3573  011DE4                     __ptext15:
  3574                           	opt stack 0
  3575  011DE4                     _delay_ms:
  3576                           	opt stack 27
  3577                           
  3578                           ;delay.c: 12: for(int i = 0; i<ms; i++){
  3579                           
  3580                           ;incstack = 0
  3581  011DE4  0E00               	movlw	0
  3582  011DE6  6E16               	movwf	delay_ms@i+1,c
  3583  011DE8  0E00               	movlw	0
  3584  011DEA  6E15               	movwf	delay_ms@i,c
  3585  011DEC  D009               	goto	l293
  3586  011DEE                     l3800:
  3587                           
  3588                           ;delay.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  3589  011DEE  0E03               	movlw	3
  3590  011DF0  6E14               	movwf	??_delay_ms& (0+255),c
  3591  011DF2  0E98               	movlw	152
  3592  011DF4                     u4097:
  3593  011DF4  2EE8               	decfsz	wreg,f,c
  3594  011DF6  D7FE               	goto	u4097
  3595  011DF8  2E14               	decfsz	??_delay_ms& (0+255),f,c
  3596  011DFA  D7FC               	goto	u4097
  3597  011DFC  4A15               	infsnz	delay_ms@i,f,c
  3598  011DFE  2A16               	incf	delay_ms@i+1,f,c
  3599  011E00                     l293:
  3600  011E00  5012               	movf	delay_ms@ms,w,c
  3601  011E02  5C15               	subwf	delay_ms@i,w,c
  3602  011E04  5016               	movf	delay_ms@i+1,w,c
  3603  011E06  0A80               	xorlw	128
  3604  011E08  6E14               	movwf	??_delay_ms& (0+255),c
  3605  011E0A  5013               	movf	delay_ms@ms+1,w,c
  3606  011E0C  0A80               	xorlw	128
  3607  011E0E  5814               	subwfb	??_delay_ms& (0+255),w,c
  3608  011E10  B0D8               	btfsc	status,0,c
  3609  011E12  0012               	return	
  3610  011E14  D7EC               	goto	l3800
  3611  011E16                     __end_of_delay_ms:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           indf0	equ	0xFEF
  3621                           postinc0	equ	0xFEE
  3622                           fsr0h	equ	0xFEA
  3623                           fsr0l	equ	0xFE9
  3624                           wreg	equ	0xFE8
  3625                           indf1	equ	0xFE7
  3626                           postdec1	equ	0xFE5
  3627                           fsr1h	equ	0xFE2
  3628                           fsr1l	equ	0xFE1
  3629                           indf2	equ	0xFDF
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _initInterrupts *****************
  3635 ;; Defined at:
  3636 ;;		line 21 in file "main.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    2
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text16
  3665  011F92                     __ptext16:
  3666                           	opt stack 0
  3667  011F92                     _initInterrupts:
  3668                           	opt stack 28
  3669                           
  3670                           ;main.c: 22: INTCON = 0b11000000;
  3671                           
  3672                           ;incstack = 0
  3673  011F92  0EC0               	movlw	192
  3674  011F94  6EF2               	movwf	intcon,c	;volatile
  3675                           
  3676                           ;main.c: 23: RCONbits.IPEN = 0;
  3677  011F96  9ED0               	bcf	4048,7,c	;volatile
  3678  011F98  0012               	return		;funcret
  3679  011F9A                     __end_of_initInterrupts:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           intcon	equ	0xFF2
  3688                           indf0	equ	0xFEF
  3689                           postinc0	equ	0xFEE
  3690                           fsr0h	equ	0xFEA
  3691                           fsr0l	equ	0xFE9
  3692                           wreg	equ	0xFE8
  3693                           indf1	equ	0xFE7
  3694                           postdec1	equ	0xFE5
  3695                           fsr1h	equ	0xFE2
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _initADC *****************
  3703 ;; Defined at:
  3704 ;;		line 24 in file "temperature.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    2
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text17
  3733  011E46                     __ptext17:
  3734                           	opt stack 0
  3735  011E46                     _initADC:
  3736                           	opt stack 28
  3737                           
  3738                           ;temperature.c: 25: TRISAbits.TRISA0 = 1;
  3739                           
  3740                           ;incstack = 0
  3741  011E46  8092               	bsf	3986,0,c	;volatile
  3742                           
  3743                           ;temperature.c: 26: TRISAbits.TRISA1 = 1;
  3744  011E48  8292               	bsf	3986,1,c	;volatile
  3745                           
  3746                           ;temperature.c: 27: PORTAbits.RA0 = 0;
  3747  011E4A  9080               	bcf	3968,0,c	;volatile
  3748                           
  3749                           ;temperature.c: 28: PORTAbits.RA1 = 0;
  3750  011E4C  9280               	bcf	3968,1,c	;volatile
  3751                           
  3752                           ;temperature.c: 30: PORTBbits.RB0 = 0;
  3753  011E4E  9081               	bcf	3969,0,c	;volatile
  3754                           
  3755                           ;temperature.c: 31: TRISBbits.TRISB0 = 1;
  3756  011E50  8093               	bsf	3987,0,c	;volatile
  3757                           
  3758                           ;temperature.c: 32: PORTBbits.RB1 = 0;
  3759  011E52  9281               	bcf	3969,1,c	;volatile
  3760                           
  3761                           ;temperature.c: 33: TRISBbits.TRISB1 = 1;
  3762  011E54  8293               	bsf	3987,1,c	;volatile
  3763                           
  3764                           ;temperature.c: 36: ANCON0 = 0xFC;
  3765  011E56  0EFC               	movlw	252
  3766  011E58  010F               	movlb	15	; () banked
  3767  011E5A  6F48               	movwf	72,b	;volatile
  3768                           
  3769                           ;temperature.c: 37: ANCON1 = 0x1C;
  3770  011E5C  0E1C               	movlw	28
  3771  011E5E  010F               	movlb	15	; () banked
  3772  011E60  6F49               	movwf	73,b	;volatile
  3773                           
  3774                           ;temperature.c: 38: ADCON0 = 0x00;
  3775  011E62  0E00               	movlw	0
  3776  011E64  6EC2               	movwf	4034,c	;volatile
  3777                           
  3778                           ;temperature.c: 39: ADCON1 = 0b10111110;
  3779  011E66  0EBE               	movlw	190
  3780  011E68  6EC1               	movwf	4033,c	;volatile
  3781                           
  3782                           ; BSR set to: 15
  3783                           ;temperature.c: 40: ADCON0bits.ADON = 0x01;
  3784  011E6A  80C2               	bsf	4034,0,c	;volatile
  3785                           
  3786                           ; BSR set to: 15
  3787                           ;temperature.c: 42: PIR1bits.ADIF = 0;
  3788  011E6C  9C9E               	bcf	3998,6,c	;volatile
  3789                           
  3790                           ; BSR set to: 15
  3791                           ;temperature.c: 43: PIE1bits.ADIE = 0;
  3792  011E6E  9C9D               	bcf	3997,6,c	;volatile
  3793                           
  3794                           ; BSR set to: 15
  3795                           ;temperature.c: 46: ADCON0bits.GO_DONE = 1;
  3796  011E70  82C2               	bsf	4034,1,c	;volatile
  3797                           
  3798                           ; BSR set to: 15
  3799  011E72  0012               	return		;funcret
  3800  011E74                     __end_of_initADC:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           indf0	equ	0xFEF
  3810                           postinc0	equ	0xFEE
  3811                           fsr0h	equ	0xFEA
  3812                           fsr0l	equ	0xFE9
  3813                           wreg	equ	0xFE8
  3814                           indf1	equ	0xFE7
  3815                           postdec1	equ	0xFE5
  3816                           fsr1h	equ	0xFE2
  3817                           fsr1l	equ	0xFE1
  3818                           indf2	equ	0xFDF
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _digipot *****************
  3824 ;; Defined at:
  3825 ;;		line 51 in file "digipot_spi.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  2   34[None  ] int 
  3832 ;; Registers used:
  3833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3843 ;;Total ram usage:        0 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    8
  3846 ;; This function calls:
  3847 ;;		___ftge
  3848 ;;		___ftmul
  3849 ;;		_adjustDigipot
  3850 ;;		_checkFrequency
  3851 ;;		_unselect
  3852 ;; This function is called by:
  3853 ;;		_main
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text18
  3858  0116B2                     __ptext18:
  3859                           	opt stack 0
  3860  0116B2                     _digipot:
  3861                           	opt stack 22
  3862                           
  3863                           ;digipot_spi.c: 52: checkFrequency();
  3864                           
  3865                           ; BSR set to: 15
  3866                           ;incstack = 0
  3867  0116B2  ECB4  F08F         	call	_checkFrequency	;wreg free
  3868                           
  3869                           ;digipot_spi.c: 53: if (frequency > 1.033*nominalfrequency ){
  3870  0116B6  0E39               	movlw	57
  3871  0116B8  6E30               	movwf	___ftmul@f2,c
  3872  0116BA  0E84               	movlw	132
  3873  0116BC  6E31               	movwf	___ftmul@f2+1,c
  3874  0116BE  0E3F               	movlw	63
  3875  0116C0  6E32               	movwf	___ftmul@f2+2,c
  3876  0116C2  C0FA  F02D         	movff	_nominalfrequency,___ftmul@f1
  3877  0116C6  C0FB  F02E         	movff	_nominalfrequency+1,___ftmul@f1+1
  3878  0116CA  C0FC  F02F         	movff	_nominalfrequency+2,___ftmul@f1+2
  3879  0116CE  EC73  F088         	call	___ftmul	;wreg free
  3880  0116D2  C02D  F09E         	movff	?___ftmul,___ftge@ff1
  3881  0116D6  C02E  F09F         	movff	?___ftmul+1,___ftge@ff1+1
  3882  0116DA  C02F  F0A0         	movff	?___ftmul+2,___ftge@ff1+2
  3883  0116DE  C0D7  F0A1         	movff	_frequency,___ftge@ff2
  3884  0116E2  C0D8  F0A2         	movff	_frequency+1,___ftge@ff2+1
  3885  0116E6  C0D9  F0A3         	movff	_frequency+2,___ftge@ff2+2
  3886  0116EA  EC45  F08A         	call	___ftge	;wreg free
  3887  0116EE  0100               	movlb	0	; () banked
  3888  0116F0  B0D8               	btfsc	status,0,c
  3889  0116F2  D005               	goto	l4206
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;digipot_spi.c: 54: bigorsmall = 0x01;
  3893  0116F4  0E01               	movlw	1
  3894  0116F6  0100               	movlb	0	; () banked
  3895  0116F8  6FF5               	movwf	_bigorsmall& (0+255),b
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;digipot_spi.c: 55: adjustDigipot();
  3899  0116FA  EC1F  F085         	call	_adjustDigipot	;wreg free
  3900  0116FE                     l4206:
  3901                           
  3902                           ;digipot_spi.c: 56: }
  3903                           ;digipot_spi.c: 57: if (frequency< 0.9692*nominalfrequency&&step>0){
  3904  0116FE  C0D7  F09E         	movff	_frequency,___ftge@ff1
  3905  011702  C0D8  F09F         	movff	_frequency+1,___ftge@ff1+1
  3906  011706  C0D9  F0A0         	movff	_frequency+2,___ftge@ff1+2
  3907  01170A  0E1D               	movlw	29
  3908  01170C  6E30               	movwf	___ftmul@f2,c
  3909  01170E  0E78               	movlw	120
  3910  011710  6E31               	movwf	___ftmul@f2+1,c
  3911  011712  0E3F               	movlw	63
  3912  011714  6E32               	movwf	___ftmul@f2+2,c
  3913  011716  C0FA  F02D         	movff	_nominalfrequency,___ftmul@f1
  3914  01171A  C0FB  F02E         	movff	_nominalfrequency+1,___ftmul@f1+1
  3915  01171E  C0FC  F02F         	movff	_nominalfrequency+2,___ftmul@f1+2
  3916  011722  EC73  F088         	call	___ftmul	;wreg free
  3917  011726  C02D  F0A1         	movff	?___ftmul,___ftge@ff2
  3918  01172A  C02E  F0A2         	movff	?___ftmul+1,___ftge@ff2+1
  3919  01172E  C02F  F0A3         	movff	?___ftmul+2,___ftge@ff2+2
  3920  011732  EC45  F08A         	call	___ftge	;wreg free
  3921  011736  0100               	movlb	0	; () banked
  3922  011738  B0D8               	btfsc	status,0,c
  3923  01173A  D00A               	goto	l454
  3924                           
  3925                           ; BSR set to: 0
  3926  01173C  0100               	movlb	0	; () banked
  3927  01173E  51F9               	movf	_step& (0+255),w,b
  3928  011740  B4D8               	btfsc	status,2,c
  3929  011742  D006               	goto	l454
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;digipot_spi.c: 58: bigorsmall =0x02;
  3933  011744  0E02               	movlw	2
  3934  011746  0100               	movlb	0	; () banked
  3935  011748  6FF5               	movwf	_bigorsmall& (0+255),b
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;digipot_spi.c: 59: adjustDigipot();
  3939  01174A  EC1F  F085         	call	_adjustDigipot	;wreg free
  3940                           
  3941                           ;digipot_spi.c: 60: }
  3942  01174E  0012               	return	
  3943  011750                     l454:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;digipot_spi.c: 61: else{
  3947                           ;digipot_spi.c: 62: if(PORTBbits.RB3==0){
  3948  011750  B681               	btfsc	3969,3,c	;volatile
  3949  011752  0012               	return	
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;digipot_spi.c: 63: unselect();
  3953  011754  ECCD  F08F         	call	_unselect	;wreg free
  3954  011758  0012               	return	
  3955  01175A                     __end_of_digipot:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           indf0	equ	0xFEF
  3965                           postinc0	equ	0xFEE
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           indf1	equ	0xFE7
  3970                           postdec1	equ	0xFE5
  3971                           fsr1h	equ	0xFE2
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _unselect *****************
  3979 ;; Defined at:
  3980 ;;		line 88 in file "digipot_spi.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		None
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    2
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_digipot
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text19
  4009  011F9A                     __ptext19:
  4010                           	opt stack 0
  4011  011F9A                     _unselect:
  4012                           	opt stack 27
  4013                           
  4014                           ;digipot_spi.c: 89: PORTBbits.RB3=1;
  4015                           
  4016                           ;incstack = 0
  4017  011F9A  8681               	bsf	3969,3,c	;volatile
  4018  011F9C  0012               	return		;funcret
  4019  011F9E                     __end_of_unselect:
  4020                           	opt stack 0
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           intcon	equ	0xFF2
  4028                           indf0	equ	0xFEF
  4029                           postinc0	equ	0xFEE
  4030                           fsr0h	equ	0xFEA
  4031                           fsr0l	equ	0xFE9
  4032                           wreg	equ	0xFE8
  4033                           indf1	equ	0xFE7
  4034                           postdec1	equ	0xFE5
  4035                           fsr1h	equ	0xFE2
  4036                           fsr1l	equ	0xFE1
  4037                           indf2	equ	0xFDF
  4038                           fsr2h	equ	0xFDA
  4039                           fsr2l	equ	0xFD9
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _checkFrequency *****************
  4043 ;; Defined at:
  4044 ;;		line 46 in file "digipot_spi.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;		None
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2, status,0, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4062 ;;Total ram usage:        0 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    4
  4065 ;; This function calls:
  4066 ;;		___lwtoft
  4067 ;; This function is called by:
  4068 ;;		_digipot
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text20
  4073  011F68                     __ptext20:
  4074                           	opt stack 0
  4075  011F68                     _checkFrequency:
  4076                           	opt stack 25
  4077                           
  4078                           ;digipot_spi.c: 48: frequency = (float) cap_value;
  4079                           
  4080                           ;incstack = 0
  4081  011F68  C040  F01A         	movff	_cap_value,___lwtoft@c
  4082  011F6C  C041  F01B         	movff	_cap_value+1,___lwtoft@c+1
  4083  011F70  EC60  F08F         	call	___lwtoft	;wreg free
  4084  011F74  C01A  F0D7         	movff	?___lwtoft,_frequency
  4085  011F78  C01B  F0D8         	movff	?___lwtoft+1,_frequency+1
  4086  011F7C  C01C  F0D9         	movff	?___lwtoft+2,_frequency+2
  4087  011F80  0012               	return		;funcret
  4088  011F82                     __end_of_checkFrequency:
  4089                           	opt stack 0
  4090                           tblptru	equ	0xFF8
  4091                           tblptrh	equ	0xFF7
  4092                           tblptrl	equ	0xFF6
  4093                           tablat	equ	0xFF5
  4094                           prodh	equ	0xFF4
  4095                           prodl	equ	0xFF3
  4096                           intcon	equ	0xFF2
  4097                           indf0	equ	0xFEF
  4098                           postinc0	equ	0xFEE
  4099                           fsr0h	equ	0xFEA
  4100                           fsr0l	equ	0xFE9
  4101                           wreg	equ	0xFE8
  4102                           indf1	equ	0xFE7
  4103                           postdec1	equ	0xFE5
  4104                           fsr1h	equ	0xFE2
  4105                           fsr1l	equ	0xFE1
  4106                           indf2	equ	0xFDF
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function ___lwtoft *****************
  4112 ;; Defined at:
  4113 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  c               2   25[COMRAM] unsigned int 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  3   25[COMRAM] float 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4127 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4130 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4131 ;;Total ram usage:        3 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    3
  4134 ;; This function calls:
  4135 ;;		___ftpack
  4136 ;; This function is called by:
  4137 ;;		_checkFrequency
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text21
  4142  011EC0                     __ptext21:
  4143                           	opt stack 0
  4144  011EC0                     ___lwtoft:
  4145                           	opt stack 25
  4146                           
  4147                           ;incstack = 0
  4148  011EC0  C01A  F012         	movff	___lwtoft@c,___ftpack@arg
  4149  011EC4  C01B  F013         	movff	___lwtoft@c+1,___ftpack@arg+1
  4150  011EC8  6A14               	clrf	___ftpack@arg+2,c
  4151  011ECA  0E8E               	movlw	142
  4152  011ECC  6E15               	movwf	___ftpack@exp,c
  4153  011ECE  0E00               	movlw	0
  4154  011ED0  6E16               	movwf	___ftpack@sign,c
  4155  011ED2  EC02  F08B         	call	___ftpack	;wreg free
  4156  011ED6  C012  F01A         	movff	?___ftpack,?___lwtoft
  4157  011EDA  C013  F01B         	movff	?___ftpack+1,?___lwtoft+1
  4158  011EDE  C014  F01C         	movff	?___ftpack+2,?___lwtoft+2
  4159  011EE2  0012               	return	
  4160  011EE4                     __end_of___lwtoft:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           prodh	equ	0xFF4
  4167                           prodl	equ	0xFF3
  4168                           intcon	equ	0xFF2
  4169                           indf0	equ	0xFEF
  4170                           postinc0	equ	0xFEE
  4171                           fsr0h	equ	0xFEA
  4172                           fsr0l	equ	0xFE9
  4173                           wreg	equ	0xFE8
  4174                           indf1	equ	0xFE7
  4175                           postdec1	equ	0xFE5
  4176                           fsr1h	equ	0xFE2
  4177                           fsr1l	equ	0xFE1
  4178                           indf2	equ	0xFDF
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _adjustDigipot *****************
  4184 ;; Defined at:
  4185 ;;		line 68 in file "digipot_spi.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4200 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4202 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4203 ;;Total ram usage:        9 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    7
  4206 ;; This function calls:
  4207 ;;		___awtoft
  4208 ;;		___ftadd
  4209 ;;		___ftdiv
  4210 ;;		___ftmul
  4211 ;;		___lbtoft
  4212 ;;		_pow
  4213 ;; This function is called by:
  4214 ;;		_digipot
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text22
  4219  010A3E                     __ptext22:
  4220                           	opt stack 0
  4221  010A3E                     _adjustDigipot:
  4222                           	opt stack 22
  4223                           
  4224                           ;digipot_spi.c: 70: PORTBbits.RB3=0;
  4225                           
  4226                           ;incstack = 0
  4227  010A3E  9681               	bcf	3969,3,c	;volatile
  4228                           
  4229                           ;digipot_spi.c: 71: if(state==0x00){
  4230  010A40  0100               	movlb	0	; () banked
  4231  010A42  51F6               	movf	_state& (0+255),w,b
  4232  010A44  0100               	movlb	0	; () banked
  4233  010A46  A4D8               	btfss	status,2,c
  4234  010A48  D004               	goto	l4022
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;digipot_spi.c: 72: SSPBUF = 0x00;
  4238  010A4A  0E00               	movlw	0
  4239  010A4C  6EC9               	movwf	4041,c	;volatile
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;digipot_spi.c: 73: state++;
  4243  010A4E  0100               	movlb	0	; () banked
  4244  010A50  2BF6               	incf	_state& (0+255),f,b
  4245  010A52                     l4022:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;digipot_spi.c: 74: }
  4249                           ;digipot_spi.c: 75: if(SSP2STATbits.BF==1){
  4250  010A52  A073               	btfss	3955,0,c	;volatile
  4251  010A54  0012               	return	
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;digipot_spi.c: 76: if(bigorsmall==0x01){
  4255  010A56  0100               	movlb	0	; () banked
  4256  010A58  05F5               	decf	_bigorsmall& (0+255),w,b
  4257  010A5A  A4D8               	btfss	status,2,c
  4258  010A5C  D002               	goto	l4028
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;digipot_spi.c: 77: step++;
  4262  010A5E  0100               	movlb	0	; () banked
  4263  010A60  2BF9               	incf	_step& (0+255),f,b
  4264  010A62                     l4028:
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;digipot_spi.c: 78: }
  4268                           ;digipot_spi.c: 79: if(bigorsmall==0x02){
  4269  010A62  0E02               	movlw	2
  4270  010A64  0100               	movlb	0	; () banked
  4271  010A66  19F5               	xorwf	_bigorsmall& (0+255),w,b
  4272  010A68  A4D8               	btfss	status,2,c
  4273  010A6A  D002               	goto	l4032
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;digipot_spi.c: 80: step--;
  4277  010A6C  0100               	movlb	0	; () banked
  4278  010A6E  07F9               	decf	_step& (0+255),f,b
  4279  010A70                     l4032:
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;digipot_spi.c: 81: }
  4283                           ;digipot_spi.c: 82: SSPBUF = step;
  4284  010A70  C0F9  FFC9         	movff	_step,4041	;volatile
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;digipot_spi.c: 83: state=0x00;
  4288  010A74  0E00               	movlw	0
  4289  010A76  0100               	movlb	0	; () banked
  4290  010A78  6FF6               	movwf	_state& (0+255),b
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;digipot_spi.c: 84: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  4294  010A7A  0100               	movlb	0	; () banked
  4295  010A7C  51F9               	movf	_step& (0+255),w,b
  4296  010A7E  EC84  F08F         	call	___lbtoft
  4297  010A82  C01A  F0C9         	movff	?___lbtoft,pow@y
  4298  010A86  C01B  F0CA         	movff	?___lbtoft+1,pow@y+1
  4299  010A8A  C01C  F0CB         	movff	?___lbtoft+2,pow@y+2
  4300  010A8E  0E3B               	movlw	59
  4301  010A90  0100               	movlb	0	; () banked
  4302  010A92  6FC6               	movwf	pow@x& (0+255),b
  4303  010A94  0E70               	movlw	112
  4304  010A96  0100               	movlb	0	; () banked
  4305  010A98  6FC7               	movwf	(pow@x+1)& (0+255),b
  4306  010A9A  0E3F               	movlw	63
  4307  010A9C  0100               	movlb	0	; () banked
  4308  010A9E  6FC8               	movwf	(pow@x+2)& (0+255),b
  4309  010AA0  EC4B  F082         	call	_pow	;wreg free
  4310  010AA4  C0C6  F1A7         	movff	?_pow,_adjustDigipot$2558
  4311  010AA8  C0C7  F1A8         	movff	?_pow+1,_adjustDigipot$2558+1
  4312  010AAC  C0C8  F1A9         	movff	?_pow+2,_adjustDigipot$2558+2
  4313                           
  4314                           ;digipot_spi.c: 84: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  4315  010AB0  0E00               	movlw	0
  4316  010AB2  0100               	movlb	0	; () banked
  4317  010AB4  6FA1               	movwf	___ftadd@f2& (0+255),b
  4318  010AB6  0E7A               	movlw	122
  4319  010AB8  0100               	movlb	0	; () banked
  4320  010ABA  6FA2               	movwf	(___ftadd@f2+1)& (0+255),b
  4321  010ABC  0E44               	movlw	68
  4322  010ABE  0100               	movlb	0	; () banked
  4323  010AC0  6FA3               	movwf	(___ftadd@f2+2)& (0+255),b
  4324  010AC2  0E51               	movlw	81
  4325  010AC4  6E30               	movwf	___ftmul@f2,c
  4326  010AC6  0EC3               	movlw	195
  4327  010AC8  6E31               	movwf	___ftmul@f2+1,c
  4328  010ACA  0E43               	movlw	67
  4329  010ACC  6E32               	movwf	___ftmul@f2+2,c
  4330  010ACE  0100               	movlb	0	; () banked
  4331  010AD0  51F9               	movf	_step& (0+255),w,b
  4332  010AD2  0D02               	mullw	2
  4333  010AD4  CFF3 F01A          	movff	prodl,___awtoft@c
  4334  010AD8  CFF4 F01B          	movff	prodh,___awtoft@c+1
  4335  010ADC  ECD6  F08E         	call	___awtoft	;wreg free
  4336  010AE0  C01A  F02D         	movff	?___awtoft,___ftmul@f1
  4337  010AE4  C01B  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  4338  010AE8  C01C  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  4339  010AEC  EC73  F088         	call	___ftmul	;wreg free
  4340  010AF0  C02D  F09E         	movff	?___ftmul,___ftadd@f1
  4341  010AF4  C02E  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  4342  010AF8  C02F  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  4343  010AFC  EC00  F080         	call	___ftadd	;wreg free
  4344  010B00  C09E  F1AA         	movff	?___ftadd,_adjustDigipot$2559
  4345  010B04  C09F  F1AB         	movff	?___ftadd+1,_adjustDigipot$2559+1
  4346  010B08  C0A0  F1AC         	movff	?___ftadd+2,_adjustDigipot$2559+2
  4347                           
  4348                           ;digipot_spi.c: 84: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  4349  010B0C  C1A7  F030         	movff	_adjustDigipot$2558,___ftmul@f2
  4350  010B10  C1A8  F031         	movff	_adjustDigipot$2558+1,___ftmul@f2+1
  4351  010B14  C1A9  F032         	movff	_adjustDigipot$2558+2,___ftmul@f2+2
  4352  010B18  C1AA  F02D         	movff	_adjustDigipot$2559,___ftmul@f1
  4353  010B1C  C1AB  F02E         	movff	_adjustDigipot$2559+1,___ftmul@f1+1
  4354  010B20  C1AC  F02F         	movff	_adjustDigipot$2559+2,___ftmul@f1+2
  4355  010B24  EC73  F088         	call	___ftmul	;wreg free
  4356  010B28  C02D  F1AD         	movff	?___ftmul,_adjustDigipot$2560
  4357  010B2C  C02E  F1AE         	movff	?___ftmul+1,_adjustDigipot$2560+1
  4358  010B30  C02F  F1AF         	movff	?___ftmul+2,_adjustDigipot$2560+2
  4359                           
  4360                           ;digipot_spi.c: 84: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384,
      +                           step));
  4361  010B34  0E52               	movlw	82
  4362  010B36  6E1E               	movwf	___ftdiv@f1,c
  4363  010B38  0EB8               	movlw	184
  4364  010B3A  6E1F               	movwf	___ftdiv@f1+1,c
  4365  010B3C  0E3F               	movlw	63
  4366  010B3E  6E20               	movwf	___ftdiv@f1+2,c
  4367  010B40  0EFF               	movlw	255
  4368  010B42  6E30               	movwf	___ftmul@f2,c
  4369  010B44  0E96               	movlw	150
  4370  010B46  6E31               	movwf	___ftmul@f2+1,c
  4371  010B48  0E39               	movlw	57
  4372  010B4A  6E32               	movwf	___ftmul@f2+2,c
  4373  010B4C  C1AD  F02D         	movff	_adjustDigipot$2560,___ftmul@f1
  4374  010B50  C1AE  F02E         	movff	_adjustDigipot$2560+1,___ftmul@f1+1
  4375  010B54  C1AF  F02F         	movff	_adjustDigipot$2560+2,___ftmul@f1+2
  4376  010B58  EC73  F088         	call	___ftmul	;wreg free
  4377  010B5C  C02D  F021         	movff	?___ftmul,___ftdiv@f2
  4378  010B60  C02E  F022         	movff	?___ftmul+1,___ftdiv@f2+1
  4379  010B64  C02F  F023         	movff	?___ftmul+2,___ftdiv@f2+2
  4380  010B68  EC62  F089         	call	___ftdiv	;wreg free
  4381  010B6C  C01E  F0FA         	movff	?___ftdiv,_nominalfrequency
  4382  010B70  C01F  F0FB         	movff	?___ftdiv+1,_nominalfrequency+1
  4383  010B74  C020  F0FC         	movff	?___ftdiv+2,_nominalfrequency+2
  4384  010B78  0012               	return	
  4385  010B7A                     __end_of_adjustDigipot:
  4386                           	opt stack 0
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           intcon	equ	0xFF2
  4394                           indf0	equ	0xFEF
  4395                           postinc0	equ	0xFEE
  4396                           fsr0h	equ	0xFEA
  4397                           fsr0l	equ	0xFE9
  4398                           wreg	equ	0xFE8
  4399                           indf1	equ	0xFE7
  4400                           postdec1	equ	0xFE5
  4401                           fsr1h	equ	0xFE2
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _pow *****************
  4409 ;; Defined at:
  4410 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\pow.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  x               3   40[BANK0 ] void 
  4413 ;;  y               3   43[BANK0 ] void 
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;  yi              4   53[BANK0 ] unsigned long 
  4416 ;;  sign            1   52[BANK0 ] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  3   40[BANK0 ] unsigned char 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4426 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4427 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4429 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4430 ;;Total ram usage:       17 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    6
  4433 ;; This function calls:
  4434 ;;		___ftge
  4435 ;;		___ftmul
  4436 ;;		___ftneg
  4437 ;;		___fttol
  4438 ;;		___lltoft
  4439 ;;		_exp
  4440 ;;		_log
  4441 ;; This function is called by:
  4442 ;;		_initSPI
  4443 ;;		_adjustDigipot
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text23
  4448  010496                     __ptext23:
  4449                           	opt stack 0
  4450  010496                     _pow:
  4451                           	opt stack 23
  4452                           
  4453                           ;incstack = 0
  4454  010496  0E00               	movlw	0
  4455  010498  0100               	movlb	0	; () banked
  4456  01049A  6FD2               	movwf	pow@sign& (0+255),b
  4457                           
  4458                           ; BSR set to: 0
  4459  01049C  0100               	movlb	0	; () banked
  4460  01049E  51C6               	movf	pow@x& (0+255),w,b
  4461  0104A0  0100               	movlb	0	; () banked
  4462  0104A2  11C7               	iorwf	(pow@x+1)& (0+255),w,b
  4463  0104A4  0100               	movlb	0	; () banked
  4464  0104A6  11C8               	iorwf	(pow@x+2)& (0+255),w,b
  4465  0104A8  A4D8               	btfss	status,2,c
  4466  0104AA  D023               	goto	l3814
  4467                           
  4468                           ; BSR set to: 0
  4469  0104AC  0E00               	movlw	0
  4470  0104AE  0100               	movlb	0	; () banked
  4471  0104B0  6F9E               	movwf	___ftge@ff1& (0+255),b
  4472  0104B2  0E00               	movlw	0
  4473  0104B4  0100               	movlb	0	; () banked
  4474  0104B6  6F9F               	movwf	(___ftge@ff1+1)& (0+255),b
  4475  0104B8  0E00               	movlw	0
  4476  0104BA  0100               	movlb	0	; () banked
  4477  0104BC  6FA0               	movwf	(___ftge@ff1+2)& (0+255),b
  4478  0104BE  C0C9  F0A1         	movff	pow@y,___ftge@ff2
  4479  0104C2  C0CA  F0A2         	movff	pow@y+1,___ftge@ff2+1
  4480  0104C6  C0CB  F0A3         	movff	pow@y+2,___ftge@ff2+2
  4481  0104CA  EC45  F08A         	call	___ftge	;wreg free
  4482  0104CE  0100               	movlb	0	; () banked
  4483  0104D0  A0D8               	btfss	status,0,c
  4484  0104D2  D005               	goto	l932
  4485                           
  4486                           ; BSR set to: 0
  4487  0104D4  0E00               	movlw	0
  4488  0104D6  0100               	movlb	0	; () banked
  4489  0104D8  6FE2               	movwf	(_errno+1)& (0+255),b
  4490  0104DA  0E21               	movlw	33
  4491  0104DC  6FE1               	movwf	_errno& (0+255),b
  4492  0104DE                     l932:
  4493                           
  4494                           ; BSR set to: 0
  4495  0104DE  0E00               	movlw	0
  4496  0104E0  0100               	movlb	0	; () banked
  4497  0104E2  6FC6               	movwf	?_pow& (0+255),b
  4498  0104E4  0E00               	movlw	0
  4499  0104E6  0100               	movlb	0	; () banked
  4500  0104E8  6FC7               	movwf	(?_pow+1)& (0+255),b
  4501  0104EA  0E00               	movlw	0
  4502  0104EC  0100               	movlb	0	; () banked
  4503  0104EE  6FC8               	movwf	(?_pow+2)& (0+255),b
  4504                           
  4505                           ; BSR set to: 0
  4506  0104F0  0012               	return	
  4507  0104F2                     l3814:
  4508                           
  4509                           ; BSR set to: 0
  4510  0104F2  0100               	movlb	0	; () banked
  4511  0104F4  51C9               	movf	pow@y& (0+255),w,b
  4512  0104F6  0100               	movlb	0	; () banked
  4513  0104F8  11CA               	iorwf	(pow@y+1)& (0+255),w,b
  4514  0104FA  0100               	movlb	0	; () banked
  4515  0104FC  11CB               	iorwf	(pow@y+2)& (0+255),w,b
  4516  0104FE  A4D8               	btfss	status,2,c
  4517  010500  D00A               	goto	l3820
  4518                           
  4519                           ; BSR set to: 0
  4520  010502  0E00               	movlw	0
  4521  010504  0100               	movlb	0	; () banked
  4522  010506  6FC6               	movwf	?_pow& (0+255),b
  4523  010508  0E80               	movlw	128
  4524  01050A  0100               	movlb	0	; () banked
  4525  01050C  6FC7               	movwf	(?_pow+1)& (0+255),b
  4526  01050E  0E3F               	movlw	63
  4527  010510  0100               	movlb	0	; () banked
  4528  010512  6FC8               	movwf	(?_pow+2)& (0+255),b
  4529                           
  4530                           ; BSR set to: 0
  4531  010514  0012               	return	
  4532  010516                     l3820:
  4533                           
  4534                           ; BSR set to: 0
  4535  010516  0100               	movlb	0	; () banked
  4536  010518  AFC8               	btfss	(pow@x+2)& (0+255),7,b
  4537  01051A  D049               	goto	l3832
  4538                           
  4539                           ; BSR set to: 0
  4540  01051C  C0C9  F09E         	movff	pow@y,___fttol@f1
  4541  010520  C0CA  F09F         	movff	pow@y+1,___fttol@f1+1
  4542  010524  C0CB  F0A0         	movff	pow@y+2,___fttol@f1+2
  4543  010528  ECDD  F083         	call	___fttol	;wreg free
  4544  01052C  C09E  F0D3         	movff	?___fttol,pow@yi
  4545  010530  C09F  F0D4         	movff	?___fttol+1,pow@yi+1
  4546  010534  C0A0  F0D5         	movff	?___fttol+2,pow@yi+2
  4547  010538  C0A1  F0D6         	movff	?___fttol+3,pow@yi+3
  4548  01053C  C0D3  F01A         	movff	pow@yi,___lltoft@c
  4549  010540  C0D4  F01B         	movff	pow@yi+1,___lltoft@c+1
  4550  010544  C0D5  F01C         	movff	pow@yi+2,___lltoft@c+2
  4551  010548  C0D6  F01D         	movff	pow@yi+3,___lltoft@c+3
  4552  01054C  ECEE  F08D         	call	___lltoft	;wreg free
  4553  010550  0100               	movlb	0	; () banked
  4554  010552  51C9               	movf	pow@y& (0+255),w,b
  4555  010554  181A               	xorwf	?___lltoft,w,c
  4556  010556  E109               	bnz	u3670
  4557  010558  0100               	movlb	0	; () banked
  4558  01055A  51CA               	movf	(pow@y+1)& (0+255),w,b
  4559  01055C  181B               	xorwf	?___lltoft+1,w,c
  4560  01055E  E105               	bnz	u3670
  4561  010560  0100               	movlb	0	; () banked
  4562  010562  51CB               	movf	(pow@y+2)& (0+255),w,b
  4563  010564  181C               	xorwf	?___lltoft+2,w,c
  4564  010566  B4D8               	btfsc	status,2,c
  4565  010568  D00F               	goto	l3828
  4566  01056A                     u3670:
  4567                           
  4568                           ; BSR set to: 0
  4569  01056A  0E00               	movlw	0
  4570  01056C  0100               	movlb	0	; () banked
  4571  01056E  6FE2               	movwf	(_errno+1)& (0+255),b
  4572  010570  0E21               	movlw	33
  4573  010572  6FE1               	movwf	_errno& (0+255),b
  4574  010574  0E00               	movlw	0
  4575  010576  0100               	movlb	0	; () banked
  4576  010578  6FC6               	movwf	?_pow& (0+255),b
  4577  01057A  0E00               	movlw	0
  4578  01057C  0100               	movlb	0	; () banked
  4579  01057E  6FC7               	movwf	(?_pow+1)& (0+255),b
  4580  010580  0E00               	movlw	0
  4581  010582  0100               	movlb	0	; () banked
  4582  010584  6FC8               	movwf	(?_pow+2)& (0+255),b
  4583                           
  4584                           ; BSR set to: 0
  4585  010586  0012               	return	
  4586  010588                     l3828:
  4587                           
  4588                           ; BSR set to: 0
  4589  010588  0100               	movlb	0	; () banked
  4590  01058A  51D3               	movf	pow@yi& (0+255),w,b
  4591  01058C  0B01               	andlw	1
  4592  01058E  0100               	movlb	0	; () banked
  4593  010590  6FD2               	movwf	pow@sign& (0+255),b
  4594                           
  4595                           ; BSR set to: 0
  4596  010592  C0C6  F012         	movff	pow@x,___ftneg@f1
  4597  010596  C0C7  F013         	movff	pow@x+1,___ftneg@f1+1
  4598  01059A  C0C8  F014         	movff	pow@x+2,___ftneg@f1+2
  4599  01059E  EC72  F08F         	call	___ftneg	;wreg free
  4600  0105A2  C012  F0C6         	movff	?___ftneg,pow@x
  4601  0105A6  C013  F0C7         	movff	?___ftneg+1,pow@x+1
  4602  0105AA  C014  F0C8         	movff	?___ftneg+2,pow@x+2
  4603  0105AE                     l3832:
  4604  0105AE  C0C6  F0B4         	movff	pow@x,log@x
  4605  0105B2  C0C7  F0B5         	movff	pow@x+1,log@x+1
  4606  0105B6  C0C8  F0B6         	movff	pow@x+2,log@x+2
  4607  0105BA  EC7F  F084         	call	_log	;wreg free
  4608  0105BE  C0B4  F0CC         	movff	?_log,_pow$2561
  4609  0105C2  C0B5  F0CD         	movff	?_log+1,_pow$2561+1
  4610  0105C6  C0B6  F0CE         	movff	?_log+2,_pow$2561+2
  4611  0105CA  C0CC  F02D         	movff	_pow$2561,___ftmul@f1
  4612  0105CE  C0CD  F02E         	movff	_pow$2561+1,___ftmul@f1+1
  4613  0105D2  C0CE  F02F         	movff	_pow$2561+2,___ftmul@f1+2
  4614  0105D6  C0C9  F030         	movff	pow@y,___ftmul@f2
  4615  0105DA  C0CA  F031         	movff	pow@y+1,___ftmul@f2+1
  4616  0105DE  C0CB  F032         	movff	pow@y+2,___ftmul@f2+2
  4617  0105E2  EC73  F088         	call	___ftmul	;wreg free
  4618  0105E6  C02D  F0CF         	movff	?___ftmul,_pow$2562
  4619  0105EA  C02E  F0D0         	movff	?___ftmul+1,_pow$2562+1
  4620  0105EE  C02F  F0D1         	movff	?___ftmul+2,_pow$2562+2
  4621  0105F2  C0CF  F0BD         	movff	_pow$2562,exp@x
  4622  0105F6  C0D0  F0BE         	movff	_pow$2562+1,exp@x+1
  4623  0105FA  C0D1  F0BF         	movff	_pow$2562+2,exp@x+2
  4624  0105FE  EC34  F081         	call	_exp	;wreg free
  4625  010602  C0BD  F0C6         	movff	?_exp,pow@x
  4626  010606  C0BE  F0C7         	movff	?_exp+1,pow@x+1
  4627  01060A  C0BF  F0C8         	movff	?_exp+2,pow@x+2
  4628  01060E  0100               	movlb	0	; () banked
  4629  010610  51D2               	movf	pow@sign& (0+255),w,b
  4630  010612  0100               	movlb	0	; () banked
  4631  010614  B4D8               	btfsc	status,2,c
  4632  010616  D00F               	goto	l937
  4633                           
  4634                           ; BSR set to: 0
  4635  010618  C0C6  F012         	movff	pow@x,___ftneg@f1
  4636  01061C  C0C7  F013         	movff	pow@x+1,___ftneg@f1+1
  4637  010620  C0C8  F014         	movff	pow@x+2,___ftneg@f1+2
  4638  010624  EC72  F08F         	call	___ftneg	;wreg free
  4639  010628  C012  F0C6         	movff	?___ftneg,?_pow
  4640  01062C  C013  F0C7         	movff	?___ftneg+1,?_pow+1
  4641  010630  C014  F0C8         	movff	?___ftneg+2,?_pow+2
  4642  010634  0012               	return	
  4643  010636                     l937:
  4644                           
  4645                           ; BSR set to: 0
  4646  010636  C0C6  F0C6         	movff	pow@x,?_pow
  4647  01063A  C0C7  F0C7         	movff	pow@x+1,?_pow+1
  4648  01063E  C0C8  F0C8         	movff	pow@x+2,?_pow+2
  4649  010642  0012               	return		;funcret
  4650  010644                     __end_of_pow:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           intcon	equ	0xFF2
  4659                           indf0	equ	0xFEF
  4660                           postinc0	equ	0xFEE
  4661                           fsr0h	equ	0xFEA
  4662                           fsr0l	equ	0xFE9
  4663                           wreg	equ	0xFE8
  4664                           indf1	equ	0xFE7
  4665                           postdec1	equ	0xFE5
  4666                           fsr1h	equ	0xFE2
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _log *****************
  4674 ;; Defined at:
  4675 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\log.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  x               3   22[BANK0 ] unsigned char 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  exponent        2   25[BANK0 ] int 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  3   22[BANK0 ] int 
  4682 ;; Registers used:
  4683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4689 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4693 ;;Total ram usage:        5 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    5
  4696 ;; This function calls:
  4697 ;;		___awtoft
  4698 ;;		___ftadd
  4699 ;;		___ftmul
  4700 ;;		_eval_poly
  4701 ;;		_frexp
  4702 ;; This function is called by:
  4703 ;;		_pow
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text24
  4708  0108FE                     __ptext24:
  4709                           	opt stack 0
  4710  0108FE                     _log:
  4711                           	opt stack 23
  4712                           
  4713                           ;incstack = 0
  4714  0108FE  0100               	movlb	0	; () banked
  4715  010900  AFB6               	btfss	(log@x+2)& (0+255),7,b
  4716  010902  D00F               	goto	l3738
  4717                           
  4718                           ; BSR set to: 0
  4719  010904  0E00               	movlw	0
  4720  010906  0100               	movlb	0	; () banked
  4721  010908  6FE2               	movwf	(_errno+1)& (0+255),b
  4722  01090A  0E21               	movlw	33
  4723  01090C  6FE1               	movwf	_errno& (0+255),b
  4724  01090E  0E00               	movlw	0
  4725  010910  0100               	movlb	0	; () banked
  4726  010912  6FB4               	movwf	?_log& (0+255),b
  4727  010914  0E00               	movlw	0
  4728  010916  0100               	movlb	0	; () banked
  4729  010918  6FB5               	movwf	(?_log+1)& (0+255),b
  4730  01091A  0E00               	movlw	0
  4731  01091C  0100               	movlb	0	; () banked
  4732  01091E  6FB6               	movwf	(?_log+2)& (0+255),b
  4733                           
  4734                           ; BSR set to: 0
  4735  010920  0012               	return	
  4736  010922                     l3738:
  4737                           
  4738                           ; BSR set to: 0
  4739  010922  0100               	movlb	0	; () banked
  4740  010924  51B4               	movf	log@x& (0+255),w,b
  4741  010926  0100               	movlb	0	; () banked
  4742  010928  11B5               	iorwf	(log@x+1)& (0+255),w,b
  4743  01092A  0100               	movlb	0	; () banked
  4744  01092C  11B6               	iorwf	(log@x+2)& (0+255),w,b
  4745  01092E  A4D8               	btfss	status,2,c
  4746  010930  D00F               	goto	l3744
  4747                           
  4748                           ; BSR set to: 0
  4749  010932  0E00               	movlw	0
  4750  010934  0100               	movlb	0	; () banked
  4751  010936  6FE2               	movwf	(_errno+1)& (0+255),b
  4752  010938  0E22               	movlw	34
  4753  01093A  6FE1               	movwf	_errno& (0+255),b
  4754  01093C  0E00               	movlw	0
  4755  01093E  0100               	movlb	0	; () banked
  4756  010940  6FB4               	movwf	?_log& (0+255),b
  4757  010942  0E00               	movlw	0
  4758  010944  0100               	movlb	0	; () banked
  4759  010946  6FB5               	movwf	(?_log+1)& (0+255),b
  4760  010948  0E00               	movlw	0
  4761  01094A  0100               	movlb	0	; () banked
  4762  01094C  6FB6               	movwf	(?_log+2)& (0+255),b
  4763                           
  4764                           ; BSR set to: 0
  4765  01094E  0012               	return	
  4766  010950                     l3744:
  4767                           
  4768                           ; BSR set to: 0
  4769  010950  0E00               	movlw	0
  4770  010952  6E30               	movwf	___ftmul@f2,c
  4771  010954  0E00               	movlw	0
  4772  010956  6E31               	movwf	___ftmul@f2+1,c
  4773  010958  0E40               	movlw	64
  4774  01095A  6E32               	movwf	___ftmul@f2+2,c
  4775  01095C  0EB7               	movlw	low log@exponent
  4776  01095E  6E15               	movwf	frexp@eptr,c
  4777  010960  0E00               	movlw	high log@exponent
  4778  010962  6E16               	movwf	frexp@eptr+1,c
  4779  010964  C0B4  F012         	movff	log@x,frexp@value
  4780  010968  C0B5  F013         	movff	log@x+1,frexp@value+1
  4781  01096C  C0B6  F014         	movff	log@x+2,frexp@value+2
  4782  010970  EC48  F08C         	call	_frexp	;wreg free
  4783  010974  C012  F02D         	movff	?_frexp,___ftmul@f1
  4784  010978  C013  F02E         	movff	?_frexp+1,___ftmul@f1+1
  4785  01097C  C014  F02F         	movff	?_frexp+2,___ftmul@f1+2
  4786  010980  EC73  F088         	call	___ftmul	;wreg free
  4787  010984  C02D  F09E         	movff	?___ftmul,___ftadd@f1
  4788  010988  C02E  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  4789  01098C  C02F  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  4790  010990  0E00               	movlw	0
  4791  010992  0100               	movlb	0	; () banked
  4792  010994  6FA1               	movwf	___ftadd@f2& (0+255),b
  4793  010996  0E80               	movlw	128
  4794  010998  0100               	movlb	0	; () banked
  4795  01099A  6FA2               	movwf	(___ftadd@f2+1)& (0+255),b
  4796  01099C  0EBF               	movlw	191
  4797  01099E  0100               	movlb	0	; () banked
  4798  0109A0  6FA3               	movwf	(___ftadd@f2+2)& (0+255),b
  4799  0109A2  EC00  F080         	call	___ftadd	;wreg free
  4800  0109A6  C09E  F0B4         	movff	?___ftadd,log@x
  4801  0109AA  C09F  F0B5         	movff	?___ftadd+1,log@x+1
  4802  0109AE  C0A0  F0B6         	movff	?___ftadd+2,log@x+2
  4803  0109B2  0100               	movlb	0	; () banked
  4804  0109B4  07B7               	decf	log@exponent& (0+255),f,b
  4805  0109B6  A0D8               	btfss	status,0,c
  4806  0109B8  07B8               	decf	(log@exponent+1)& (0+255),f,b
  4807                           
  4808                           ; BSR set to: 0
  4809  0109BA  C0B4  F0AA         	movff	log@x,eval_poly@x
  4810  0109BE  C0B5  F0AB         	movff	log@x+1,eval_poly@x+1
  4811  0109C2  C0B6  F0AC         	movff	log@x+2,eval_poly@x+2
  4812  0109C6  0E8D               	movlw	low log@coeff
  4813  0109C8  0100               	movlb	0	; () banked
  4814  0109CA  6FAD               	movwf	eval_poly@d& (0+255),b
  4815  0109CC  0EFF               	movlw	high log@coeff
  4816  0109CE  0100               	movlb	0	; () banked
  4817  0109D0  6FAE               	movwf	(eval_poly@d+1)& (0+255),b
  4818  0109D2  0E00               	movlw	0
  4819  0109D4  0100               	movlb	0	; () banked
  4820  0109D6  6FB0               	movwf	(eval_poly@n+1)& (0+255),b
  4821  0109D8  0E08               	movlw	8
  4822  0109DA  6FAF               	movwf	eval_poly@n& (0+255),b
  4823  0109DC  ECD5  F089         	call	_eval_poly	;wreg free
  4824  0109E0  C0AA  F0B4         	movff	?_eval_poly,log@x
  4825  0109E4  C0AB  F0B5         	movff	?_eval_poly+1,log@x+1
  4826  0109E8  C0AC  F0B6         	movff	?_eval_poly+2,log@x+2
  4827  0109EC  0E72               	movlw	114
  4828  0109EE  6E30               	movwf	___ftmul@f2,c
  4829  0109F0  0E31               	movlw	49
  4830  0109F2  6E31               	movwf	___ftmul@f2+1,c
  4831  0109F4  0E3F               	movlw	63
  4832  0109F6  6E32               	movwf	___ftmul@f2+2,c
  4833  0109F8  C0B7  F01A         	movff	log@exponent,___awtoft@c
  4834  0109FC  C0B8  F01B         	movff	log@exponent+1,___awtoft@c+1
  4835  010A00  ECD6  F08E         	call	___awtoft	;wreg free
  4836  010A04  C01A  F02D         	movff	?___awtoft,___ftmul@f1
  4837  010A08  C01B  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  4838  010A0C  C01C  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  4839  010A10  EC73  F088         	call	___ftmul	;wreg free
  4840  010A14  C02D  F09E         	movff	?___ftmul,___ftadd@f1
  4841  010A18  C02E  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  4842  010A1C  C02F  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  4843  010A20  C0B4  F0A1         	movff	log@x,___ftadd@f2
  4844  010A24  C0B5  F0A2         	movff	log@x+1,___ftadd@f2+1
  4845  010A28  C0B6  F0A3         	movff	log@x+2,___ftadd@f2+2
  4846  010A2C  EC00  F080         	call	___ftadd	;wreg free
  4847  010A30  C09E  F0B4         	movff	?___ftadd,?_log
  4848  010A34  C09F  F0B5         	movff	?___ftadd+1,?_log+1
  4849  010A38  C0A0  F0B6         	movff	?___ftadd+2,?_log+2
  4850  010A3C  0012               	return	
  4851  010A3E                     __end_of_log:
  4852                           	opt stack 0
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           intcon	equ	0xFF2
  4860                           indf0	equ	0xFEF
  4861                           postinc0	equ	0xFEE
  4862                           fsr0h	equ	0xFEA
  4863                           fsr0l	equ	0xFE9
  4864                           wreg	equ	0xFE8
  4865                           indf1	equ	0xFE7
  4866                           postdec1	equ	0xFE5
  4867                           fsr1h	equ	0xFE2
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           fsr2h	equ	0xFDA
  4871                           fsr2l	equ	0xFD9
  4872                           status	equ	0xFD8
  4873                           
  4874 ;; *************** function _exp *****************
  4875 ;; Defined at:
  4876 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\exp.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  x               3   31[BANK0 ] int 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  exponent        2   37[BANK0 ] int 
  4881 ;;  sign            1   39[BANK0 ] unsigned char 
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  3   31[BANK0 ] unsigned char 
  4884 ;; Registers used:
  4885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4891 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4892 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4894 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4895 ;;Total ram usage:        9 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:    5
  4898 ;; This function calls:
  4899 ;;		___awtoft
  4900 ;;		___ftdiv
  4901 ;;		___ftge
  4902 ;;		___ftmul
  4903 ;;		___ftneg
  4904 ;;		___ftsub
  4905 ;;		___fttol
  4906 ;;		_eval_poly
  4907 ;;		_floor
  4908 ;;		_ldexp
  4909 ;; This function is called by:
  4910 ;;		_pow
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text25
  4915  010268                     __ptext25:
  4916                           	opt stack 0
  4917  010268                     _exp:
  4918                           	opt stack 23
  4919                           
  4920                           ;incstack = 0
  4921  010268  0100               	movlb	0	; () banked
  4922  01026A  51BD               	movf	exp@x& (0+255),w,b
  4923  01026C  0100               	movlb	0	; () banked
  4924  01026E  11BE               	iorwf	(exp@x+1)& (0+255),w,b
  4925  010270  0100               	movlb	0	; () banked
  4926  010272  11BF               	iorwf	(exp@x+2)& (0+255),w,b
  4927  010274  A4D8               	btfss	status,2,c
  4928  010276  D00A               	goto	l3760
  4929                           
  4930                           ; BSR set to: 0
  4931  010278  0E00               	movlw	0
  4932  01027A  0100               	movlb	0	; () banked
  4933  01027C  6FBD               	movwf	?_exp& (0+255),b
  4934  01027E  0E80               	movlw	128
  4935  010280  0100               	movlb	0	; () banked
  4936  010282  6FBE               	movwf	(?_exp+1)& (0+255),b
  4937  010284  0E3F               	movlw	63
  4938  010286  0100               	movlb	0	; () banked
  4939  010288  6FBF               	movwf	(?_exp+2)& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942  01028A  0012               	return	
  4943  01028C                     l3760:
  4944                           
  4945                           ; BSR set to: 0
  4946  01028C  0E72               	movlw	114
  4947  01028E  0100               	movlb	0	; () banked
  4948  010290  6F9E               	movwf	___ftge@ff1& (0+255),b
  4949  010292  0E31               	movlw	49
  4950  010294  0100               	movlb	0	; () banked
  4951  010296  6F9F               	movwf	(___ftge@ff1+1)& (0+255),b
  4952  010298  0E44               	movlw	68
  4953  01029A  0100               	movlb	0	; () banked
  4954  01029C  6FA0               	movwf	(___ftge@ff1+2)& (0+255),b
  4955  01029E  C0BD  F0A1         	movff	exp@x,___ftge@ff2
  4956  0102A2  C0BE  F0A2         	movff	exp@x+1,___ftge@ff2+1
  4957  0102A6  C0BF  F0A3         	movff	exp@x+2,___ftge@ff2+2
  4958  0102AA  EC45  F08A         	call	___ftge	;wreg free
  4959  0102AE  0100               	movlb	0	; () banked
  4960  0102B0  B0D8               	btfsc	status,0,c
  4961  0102B2  D00F               	goto	l3766
  4962                           
  4963                           ; BSR set to: 0
  4964  0102B4  0E00               	movlw	0
  4965  0102B6  0100               	movlb	0	; () banked
  4966  0102B8  6FE2               	movwf	(_errno+1)& (0+255),b
  4967  0102BA  0E22               	movlw	34
  4968  0102BC  6FE1               	movwf	_errno& (0+255),b
  4969  0102BE  0EFF               	movlw	255
  4970  0102C0  0100               	movlb	0	; () banked
  4971  0102C2  6FBD               	movwf	?_exp& (0+255),b
  4972  0102C4  0E7F               	movlw	127
  4973  0102C6  0100               	movlb	0	; () banked
  4974  0102C8  6FBE               	movwf	(?_exp+1)& (0+255),b
  4975  0102CA  0E7F               	movlw	127
  4976  0102CC  0100               	movlb	0	; () banked
  4977  0102CE  6FBF               	movwf	(?_exp+2)& (0+255),b
  4978                           
  4979                           ; BSR set to: 0
  4980  0102D0  0012               	return	
  4981  0102D2                     l3766:
  4982                           
  4983                           ; BSR set to: 0
  4984  0102D2  C0BD  F09E         	movff	exp@x,___ftge@ff1
  4985  0102D6  C0BE  F09F         	movff	exp@x+1,___ftge@ff1+1
  4986  0102DA  C0BF  F0A0         	movff	exp@x+2,___ftge@ff1+2
  4987  0102DE  0E49               	movlw	73
  4988  0102E0  0100               	movlb	0	; () banked
  4989  0102E2  6FA1               	movwf	___ftge@ff2& (0+255),b
  4990  0102E4  0E3A               	movlw	58
  4991  0102E6  0100               	movlb	0	; () banked
  4992  0102E8  6FA2               	movwf	(___ftge@ff2+1)& (0+255),b
  4993  0102EA  0EC4               	movlw	196
  4994  0102EC  0100               	movlb	0	; () banked
  4995  0102EE  6FA3               	movwf	(___ftge@ff2+2)& (0+255),b
  4996  0102F0  EC45  F08A         	call	___ftge	;wreg free
  4997  0102F4  0100               	movlb	0	; () banked
  4998  0102F6  B0D8               	btfsc	status,0,c
  4999  0102F8  D00F               	goto	l3772
  5000                           
  5001                           ; BSR set to: 0
  5002  0102FA  0E00               	movlw	0
  5003  0102FC  0100               	movlb	0	; () banked
  5004  0102FE  6FE2               	movwf	(_errno+1)& (0+255),b
  5005  010300  0E22               	movlw	34
  5006  010302  6FE1               	movwf	_errno& (0+255),b
  5007  010304  0E00               	movlw	0
  5008  010306  0100               	movlb	0	; () banked
  5009  010308  6FBD               	movwf	?_exp& (0+255),b
  5010  01030A  0E00               	movlw	0
  5011  01030C  0100               	movlb	0	; () banked
  5012  01030E  6FBE               	movwf	(?_exp+1)& (0+255),b
  5013  010310  0E00               	movlw	0
  5014  010312  0100               	movlb	0	; () banked
  5015  010314  6FBF               	movwf	(?_exp+2)& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018  010316  0012               	return	
  5019  010318                     l3772:
  5020                           
  5021                           ; BSR set to: 0
  5022  010318  0100               	movlb	0	; () banked
  5023  01031A  AFBF               	btfss	(exp@x+2)& (0+255),7,b
  5024  01031C  D002               	goto	u3570
  5025  01031E  0E01               	movlw	1
  5026  010320  D001               	goto	u3580
  5027  010322                     u3570:
  5028  010322  0E00               	movlw	0
  5029  010324                     u3580:
  5030  010324  0100               	movlb	0	; () banked
  5031  010326  6FC5               	movwf	exp@sign& (0+255),b
  5032                           
  5033                           ; BSR set to: 0
  5034  010328  0100               	movlb	0	; () banked
  5035  01032A  51C5               	movf	exp@sign& (0+255),w,b
  5036  01032C  0100               	movlb	0	; () banked
  5037  01032E  B4D8               	btfsc	status,2,c
  5038  010330  D00E               	goto	l1095
  5039                           
  5040                           ; BSR set to: 0
  5041  010332  C0BD  F012         	movff	exp@x,___ftneg@f1
  5042  010336  C0BE  F013         	movff	exp@x+1,___ftneg@f1+1
  5043  01033A  C0BF  F014         	movff	exp@x+2,___ftneg@f1+2
  5044  01033E  EC72  F08F         	call	___ftneg	;wreg free
  5045  010342  C012  F0BD         	movff	?___ftneg,exp@x
  5046  010346  C013  F0BE         	movff	?___ftneg+1,exp@x+1
  5047  01034A  C014  F0BF         	movff	?___ftneg+2,exp@x+2
  5048  01034E                     l1095:
  5049  01034E  C0BD  F02D         	movff	exp@x,___ftmul@f1
  5050  010352  C0BE  F02E         	movff	exp@x+1,___ftmul@f1+1
  5051  010356  C0BF  F02F         	movff	exp@x+2,___ftmul@f1+2
  5052  01035A  0EAA               	movlw	170
  5053  01035C  6E30               	movwf	___ftmul@f2,c
  5054  01035E  0EB8               	movlw	184
  5055  010360  6E31               	movwf	___ftmul@f2+1,c
  5056  010362  0E3F               	movlw	63
  5057  010364  6E32               	movwf	___ftmul@f2+2,c
  5058  010366  EC73  F088         	call	___ftmul	;wreg free
  5059  01036A  C02D  F0BD         	movff	?___ftmul,exp@x
  5060  01036E  C02E  F0BE         	movff	?___ftmul+1,exp@x+1
  5061  010372  C02F  F0BF         	movff	?___ftmul+2,exp@x+2
  5062  010376  C0BD  F0B5         	movff	exp@x,floor@x
  5063  01037A  C0BE  F0B6         	movff	exp@x+1,floor@x+1
  5064  01037E  C0BF  F0B7         	movff	exp@x+2,floor@x+2
  5065  010382  ECF6  F087         	call	_floor	;wreg free
  5066  010386  C0B5  F0C0         	movff	?_floor,_exp$2563
  5067  01038A  C0B6  F0C1         	movff	?_floor+1,_exp$2563+1
  5068  01038E  C0B7  F0C2         	movff	?_floor+2,_exp$2563+2
  5069  010392  C0C0  F09E         	movff	_exp$2563,___fttol@f1
  5070  010396  C0C1  F09F         	movff	_exp$2563+1,___fttol@f1+1
  5071  01039A  C0C2  F0A0         	movff	_exp$2563+2,___fttol@f1+2
  5072  01039E  ECDD  F083         	call	___fttol	;wreg free
  5073  0103A2  C09E  F0C3         	movff	?___fttol,exp@exponent
  5074  0103A6  C09F  F0C4         	movff	?___fttol+1,exp@exponent+1
  5075  0103AA  C0BD  F0AA         	movff	exp@x,___ftsub@f1
  5076  0103AE  C0BE  F0AB         	movff	exp@x+1,___ftsub@f1+1
  5077  0103B2  C0BF  F0AC         	movff	exp@x+2,___ftsub@f1+2
  5078  0103B6  C0C3  F01A         	movff	exp@exponent,___awtoft@c
  5079  0103BA  C0C4  F01B         	movff	exp@exponent+1,___awtoft@c+1
  5080  0103BE  ECD6  F08E         	call	___awtoft	;wreg free
  5081  0103C2  C01A  F0AD         	movff	?___awtoft,___ftsub@f2
  5082  0103C6  C01B  F0AE         	movff	?___awtoft+1,___ftsub@f2+1
  5083  0103CA  C01C  F0AF         	movff	?___awtoft+2,___ftsub@f2+2
  5084  0103CE  EC70  F08E         	call	___ftsub	;wreg free
  5085  0103D2  C0AA  F0BD         	movff	?___ftsub,exp@x
  5086  0103D6  C0AB  F0BE         	movff	?___ftsub+1,exp@x+1
  5087  0103DA  C0AC  F0BF         	movff	?___ftsub+2,exp@x+2
  5088  0103DE  C0BD  F0AA         	movff	exp@x,eval_poly@x
  5089  0103E2  C0BE  F0AB         	movff	exp@x+1,eval_poly@x+1
  5090  0103E6  C0BF  F0AC         	movff	exp@x+2,eval_poly@x+2
  5091  0103EA  0E6F               	movlw	low exp@coeff
  5092  0103EC  0100               	movlb	0	; () banked
  5093  0103EE  6FAD               	movwf	eval_poly@d& (0+255),b
  5094  0103F0  0EFF               	movlw	high exp@coeff
  5095  0103F2  0100               	movlb	0	; () banked
  5096  0103F4  6FAE               	movwf	(eval_poly@d+1)& (0+255),b
  5097  0103F6  0E00               	movlw	0
  5098  0103F8  0100               	movlb	0	; () banked
  5099  0103FA  6FB0               	movwf	(eval_poly@n+1)& (0+255),b
  5100  0103FC  0E09               	movlw	9
  5101  0103FE  6FAF               	movwf	eval_poly@n& (0+255),b
  5102  010400  ECD5  F089         	call	_eval_poly	;wreg free
  5103  010404  C0AA  F0B4         	movff	?_eval_poly,ldexp@value
  5104  010408  C0AB  F0B5         	movff	?_eval_poly+1,ldexp@value+1
  5105  01040C  C0AC  F0B6         	movff	?_eval_poly+2,ldexp@value+2
  5106  010410  C0C3  F0B7         	movff	exp@exponent,ldexp@newexp
  5107  010414  C0C4  F0B8         	movff	exp@exponent+1,ldexp@newexp+1
  5108  010418  ECE5  F086         	call	_ldexp	;wreg free
  5109  01041C  C0B4  F0BD         	movff	?_ldexp,exp@x
  5110  010420  C0B5  F0BE         	movff	?_ldexp+1,exp@x+1
  5111  010424  C0B6  F0BF         	movff	?_ldexp+2,exp@x+2
  5112  010428  0100               	movlb	0	; () banked
  5113  01042A  51C5               	movf	exp@sign& (0+255),w,b
  5114  01042C  0100               	movlb	0	; () banked
  5115  01042E  B4D8               	btfsc	status,2,c
  5116  010430  D02B               	goto	l1096
  5117                           
  5118                           ; BSR set to: 0
  5119  010432  0100               	movlb	0	; () banked
  5120  010434  29BD               	incf	exp@x& (0+255),w,b
  5121  010436  E113               	bnz	l3794
  5122  010438  0E7F               	movlw	127
  5123  01043A  0100               	movlb	0	; () banked
  5124  01043C  19BE               	xorwf	(exp@x+1)& (0+255),w,b
  5125  01043E  E10F               	bnz	l3794
  5126  010440  0E7F               	movlw	127
  5127  010442  0100               	movlb	0	; () banked
  5128  010444  19BF               	xorwf	(exp@x+2)& (0+255),w,b
  5129  010446  A4D8               	btfss	status,2,c
  5130  010448  D00A               	goto	l3794
  5131                           
  5132                           ; BSR set to: 0
  5133  01044A  0E00               	movlw	0
  5134  01044C  0100               	movlb	0	; () banked
  5135  01044E  6FBD               	movwf	?_exp& (0+255),b
  5136  010450  0E00               	movlw	0
  5137  010452  0100               	movlb	0	; () banked
  5138  010454  6FBE               	movwf	(?_exp+1)& (0+255),b
  5139  010456  0E00               	movlw	0
  5140  010458  0100               	movlb	0	; () banked
  5141  01045A  6FBF               	movwf	(?_exp+2)& (0+255),b
  5142                           
  5143                           ; BSR set to: 0
  5144  01045C  0012               	return	
  5145  01045E                     l3794:
  5146                           
  5147                           ; BSR set to: 0
  5148  01045E  0E00               	movlw	0
  5149  010460  6E1E               	movwf	___ftdiv@f1,c
  5150  010462  0E80               	movlw	128
  5151  010464  6E1F               	movwf	___ftdiv@f1+1,c
  5152  010466  0E3F               	movlw	63
  5153  010468  6E20               	movwf	___ftdiv@f1+2,c
  5154  01046A  C0BD  F021         	movff	exp@x,___ftdiv@f2
  5155  01046E  C0BE  F022         	movff	exp@x+1,___ftdiv@f2+1
  5156  010472  C0BF  F023         	movff	exp@x+2,___ftdiv@f2+2
  5157  010476  EC62  F089         	call	___ftdiv	;wreg free
  5158  01047A  C01E  F0BD         	movff	?___ftdiv,?_exp
  5159  01047E  C01F  F0BE         	movff	?___ftdiv+1,?_exp+1
  5160  010482  C020  F0BF         	movff	?___ftdiv+2,?_exp+2
  5161  010486  0012               	return	
  5162  010488                     l1096:
  5163                           
  5164                           ; BSR set to: 0
  5165  010488  C0BD  F0BD         	movff	exp@x,?_exp
  5166  01048C  C0BE  F0BE         	movff	exp@x+1,?_exp+1
  5167  010490  C0BF  F0BF         	movff	exp@x+2,?_exp+2
  5168  010494  0012               	return		;funcret
  5169  010496                     __end_of_exp:
  5170                           	opt stack 0
  5171                           tblptru	equ	0xFF8
  5172                           tblptrh	equ	0xFF7
  5173                           tblptrl	equ	0xFF6
  5174                           tablat	equ	0xFF5
  5175                           prodh	equ	0xFF4
  5176                           prodl	equ	0xFF3
  5177                           intcon	equ	0xFF2
  5178                           indf0	equ	0xFEF
  5179                           postinc0	equ	0xFEE
  5180                           fsr0h	equ	0xFEA
  5181                           fsr0l	equ	0xFE9
  5182                           wreg	equ	0xFE8
  5183                           indf1	equ	0xFE7
  5184                           postdec1	equ	0xFE5
  5185                           fsr1h	equ	0xFE2
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function _ldexp *****************
  5193 ;; Defined at:
  5194 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\frexp.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  value           3   22[BANK0 ] unsigned char 
  5197 ;;  newexp          2   25[BANK0 ] int 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  3   22[BANK0 ] int 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5209 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5212 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5213 ;;Total ram usage:        7 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    2
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_exp
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text26
  5224  010DCA                     __ptext26:
  5225                           	opt stack 0
  5226  010DCA                     _ldexp:
  5227                           	opt stack 25
  5228                           
  5229                           ;incstack = 0
  5230  010DCA  0100               	movlb	0	; () banked
  5231  010DCC  51B4               	movf	ldexp@value& (0+255),w,b
  5232  010DCE  0100               	movlb	0	; () banked
  5233  010DD0  11B5               	iorwf	(ldexp@value+1)& (0+255),w,b
  5234  010DD2  0100               	movlb	0	; () banked
  5235  010DD4  11B6               	iorwf	(ldexp@value+2)& (0+255),w,b
  5236  010DD6  A4D8               	btfss	status,2,c
  5237  010DD8  D00A               	goto	l3692
  5238                           
  5239                           ; BSR set to: 0
  5240  010DDA  0E00               	movlw	0
  5241  010DDC  0100               	movlb	0	; () banked
  5242  010DDE  6FB4               	movwf	?_ldexp& (0+255),b
  5243  010DE0  0E00               	movlw	0
  5244  010DE2  0100               	movlb	0	; () banked
  5245  010DE4  6FB5               	movwf	(?_ldexp+1)& (0+255),b
  5246  010DE6  0E00               	movlw	0
  5247  010DE8  0100               	movlb	0	; () banked
  5248  010DEA  6FB6               	movwf	(?_ldexp+2)& (0+255),b
  5249                           
  5250                           ; BSR set to: 0
  5251  010DEC  0012               	return	
  5252  010DEE                     l3692:
  5253                           
  5254                           ; BSR set to: 0
  5255  010DEE  0100               	movlb	0	; () banked
  5256  010DF0  51B6               	movf	(ldexp@value+2)& (0+255),w,b
  5257  010DF2  0B7F               	andlw	127
  5258  010DF4  0100               	movlb	0	; () banked
  5259  010DF6  6FB9               	movwf	??_ldexp& (0+255),b
  5260  010DF8  6BBA               	clrf	(??_ldexp+1)& (0+255),b
  5261  010DFA  90D8               	bcf	status,0,c
  5262  010DFC  0100               	movlb	0	; () banked
  5263  010DFE  37B9               	rlcf	??_ldexp& (0+255),f,b
  5264  010E00  37BA               	rlcf	(??_ldexp+1)& (0+255),f,b
  5265  010E02  0100               	movlb	0	; () banked
  5266  010E04  51B9               	movf	??_ldexp& (0+255),w,b
  5267  010E06  0100               	movlb	0	; () banked
  5268  010E08  27B7               	addwf	ldexp@newexp& (0+255),f,b
  5269  010E0A  0100               	movlb	0	; () banked
  5270  010E0C  51BA               	movf	(??_ldexp+1)& (0+255),w,b
  5271  010E0E  0100               	movlb	0	; () banked
  5272  010E10  23B8               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  5273  010E12  0100               	movlb	0	; () banked
  5274  010E14  AFB5               	btfss	(ldexp@value+1)& (0+255),7,b
  5275  010E16  D004               	goto	u3470
  5276  010E18  0100               	movlb	0	; () banked
  5277  010E1A  6BB9               	clrf	??_ldexp& (0+255),b
  5278  010E1C  2BB9               	incf	??_ldexp& (0+255),f,b
  5279  010E1E  D002               	goto	u3478
  5280  010E20                     u3470:
  5281  010E20  0100               	movlb	0	; () banked
  5282  010E22  6BB9               	clrf	??_ldexp& (0+255),b
  5283  010E24                     u3478:
  5284  010E24  0100               	movlb	0	; () banked
  5285  010E26  51B9               	movf	??_ldexp& (0+255),w,b
  5286  010E28  0100               	movlb	0	; () banked
  5287  010E2A  27B7               	addwf	ldexp@newexp& (0+255),f,b
  5288  010E2C  0E00               	movlw	0
  5289  010E2E  23B8               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  5290  010E30  0100               	movlb	0	; () banked
  5291  010E32  AFB8               	btfss	(ldexp@newexp+1)& (0+255),7,b
  5292  010E34  D00F               	goto	l3700
  5293                           
  5294                           ; BSR set to: 0
  5295  010E36  0E00               	movlw	0
  5296  010E38  0100               	movlb	0	; () banked
  5297  010E3A  6FE2               	movwf	(_errno+1)& (0+255),b
  5298  010E3C  0E22               	movlw	34
  5299  010E3E  6FE1               	movwf	_errno& (0+255),b
  5300  010E40  0E00               	movlw	0
  5301  010E42  0100               	movlb	0	; () banked
  5302  010E44  6FB4               	movwf	?_ldexp& (0+255),b
  5303  010E46  0E00               	movlw	0
  5304  010E48  0100               	movlb	0	; () banked
  5305  010E4A  6FB5               	movwf	(?_ldexp+1)& (0+255),b
  5306  010E4C  0E00               	movlw	0
  5307  010E4E                     L3:
  5308  010E4E  0100               	movlb	0	; () banked
  5309  010E50  6FB6               	movwf	(?_ldexp+2)& (0+255),b
  5310                           
  5311                           ; BSR set to: 0
  5312  010E52  0012               	return	
  5313  010E54                     l3700:
  5314                           
  5315                           ; BSR set to: 0
  5316  010E54  0100               	movlb	0	; () banked
  5317  010E56  BFB8               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  5318  010E58  D01C               	goto	l3716
  5319  010E5A  0100               	movlb	0	; () banked
  5320  010E5C  05B8               	decf	(ldexp@newexp+1)& (0+255),w,b
  5321  010E5E  A0D8               	btfss	status,0,c
  5322  010E60  D018               	goto	l3716
  5323                           
  5324                           ; BSR set to: 0
  5325  010E62  0E00               	movlw	0
  5326  010E64  0100               	movlb	0	; () banked
  5327  010E66  6FE2               	movwf	(_errno+1)& (0+255),b
  5328  010E68  0E22               	movlw	34
  5329  010E6A  6FE1               	movwf	_errno& (0+255),b
  5330                           
  5331                           ; BSR set to: 0
  5332  010E6C  0100               	movlb	0	; () banked
  5333  010E6E  AFB6               	btfss	(ldexp@value+2)& (0+255),7,b
  5334  010E70  D008               	goto	l3712
  5335                           
  5336                           ; BSR set to: 0
  5337  010E72  0EFF               	movlw	255
  5338  010E74  0100               	movlb	0	; () banked
  5339  010E76  6FB4               	movwf	?_ldexp& (0+255),b
  5340  010E78  0E7F               	movlw	127
  5341  010E7A  0100               	movlb	0	; () banked
  5342  010E7C  6FB5               	movwf	(?_ldexp+1)& (0+255),b
  5343  010E7E  0EFF               	movlw	255
  5344  010E80  D7E6               	goto	L3
  5345  010E82                     l3712:
  5346                           
  5347                           ; BSR set to: 0
  5348  010E82  0EFF               	movlw	255
  5349  010E84  0100               	movlb	0	; () banked
  5350  010E86  6FB4               	movwf	?_ldexp& (0+255),b
  5351  010E88  0E7F               	movlw	127
  5352  010E8A  0100               	movlb	0	; () banked
  5353  010E8C  6FB5               	movwf	(?_ldexp+1)& (0+255),b
  5354  010E8E  0E7F               	movlw	127
  5355  010E90  D7DE               	goto	L3
  5356  010E92                     l3716:
  5357                           
  5358                           ; BSR set to: 0
  5359  010E92  0100               	movlb	0	; () banked
  5360  010E94  35B8               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  5361  010E96  31B8               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  5362  010E98  0100               	movlb	0	; () banked
  5363  010E9A  6FBA               	movwf	(??_ldexp+1)& (0+255),b
  5364  010E9C  0100               	movlb	0	; () banked
  5365  010E9E  31B7               	rrcf	ldexp@newexp& (0+255),w,b
  5366  010EA0  0100               	movlb	0	; () banked
  5367  010EA2  6FB9               	movwf	??_ldexp& (0+255),b
  5368  010EA4  0100               	movlb	0	; () banked
  5369  010EA6  51B6               	movf	(ldexp@value+2)& (0+255),w,b
  5370  010EA8  0100               	movlb	0	; () banked
  5371  010EAA  19B9               	xorwf	??_ldexp& (0+255),w,b
  5372  010EAC  0B80               	andlw	-128
  5373  010EAE  19B9               	xorwf	??_ldexp& (0+255),w,b
  5374  010EB0  0100               	movlb	0	; () banked
  5375  010EB2  6FB6               	movwf	(ldexp@value+2)& (0+255),b
  5376  010EB4  C0B7  F0B9         	movff	ldexp@newexp,??_ldexp
  5377  010EB8  0E01               	movlw	1
  5378  010EBA  0100               	movlb	0	; () banked
  5379  010EBC  17B9               	andwf	??_ldexp& (0+255),f,b
  5380  010EBE  0100               	movlb	0	; () banked
  5381  010EC0  33B9               	rrcf	??_ldexp& (0+255),f,b
  5382  010EC2  33B9               	rrcf	??_ldexp& (0+255),f,b
  5383  010EC4  0100               	movlb	0	; () banked
  5384  010EC6  51B5               	movf	(ldexp@value+1)& (0+255),w,b
  5385  010EC8  0100               	movlb	0	; () banked
  5386  010ECA  19B9               	xorwf	??_ldexp& (0+255),w,b
  5387  010ECC  0B7F               	andlw	-129
  5388  010ECE  19B9               	xorwf	??_ldexp& (0+255),w,b
  5389  010ED0  0100               	movlb	0	; () banked
  5390  010ED2  6FB5               	movwf	(ldexp@value+1)& (0+255),b
  5391                           
  5392                           ; BSR set to: 0
  5393                           
  5394                           ; BSR set to: 0
  5395                           
  5396                           ; BSR set to: 0
  5397  010ED4  C0B4  F0B4         	movff	ldexp@value,?_ldexp
  5398  010ED8  C0B5  F0B5         	movff	ldexp@value+1,?_ldexp+1
  5399  010EDC  C0B6  F0B6         	movff	ldexp@value+2,?_ldexp+2
  5400  010EE0  0012               	return	
  5401  010EE2                     __end_of_ldexp:
  5402                           	opt stack 0
  5403                           tblptru	equ	0xFF8
  5404                           tblptrh	equ	0xFF7
  5405                           tblptrl	equ	0xFF6
  5406                           tablat	equ	0xFF5
  5407                           prodh	equ	0xFF4
  5408                           prodl	equ	0xFF3
  5409                           intcon	equ	0xFF2
  5410                           indf0	equ	0xFEF
  5411                           postinc0	equ	0xFEE
  5412                           fsr0h	equ	0xFEA
  5413                           fsr0l	equ	0xFE9
  5414                           wreg	equ	0xFE8
  5415                           indf1	equ	0xFE7
  5416                           postdec1	equ	0xFE5
  5417                           fsr1h	equ	0xFE2
  5418                           fsr1l	equ	0xFE1
  5419                           indf2	equ	0xFDF
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           
  5424 ;; *************** function _floor *****************
  5425 ;; Defined at:
  5426 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\floor.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;  x               3   23[BANK0 ] int 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  i               3   26[BANK0 ] int 
  5431 ;;  expon           2   29[BANK0 ] int 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  3   23[BANK0 ] int 
  5434 ;; Registers used:
  5435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5441 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5442 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5444 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5445 ;;Total ram usage:        8 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    4
  5448 ;; This function calls:
  5449 ;;		___altoft
  5450 ;;		___ftadd
  5451 ;;		___ftge
  5452 ;;		___fttol
  5453 ;;		_frexp
  5454 ;; This function is called by:
  5455 ;;		_exp
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text27
  5460  010FEC                     __ptext27:
  5461                           	opt stack 0
  5462  010FEC                     _floor:
  5463                           	opt stack 23
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;incstack = 0
  5467  010FEC  C0B5  F012         	movff	floor@x,frexp@value
  5468  010FF0  C0B6  F013         	movff	floor@x+1,frexp@value+1
  5469  010FF4  C0B7  F014         	movff	floor@x+2,frexp@value+2
  5470  010FF8  0EBB               	movlw	low floor@expon
  5471  010FFA  6E15               	movwf	frexp@eptr,c
  5472  010FFC  0E00               	movlw	high floor@expon
  5473  010FFE  6E16               	movwf	frexp@eptr+1,c
  5474  011000  EC48  F08C         	call	_frexp	;wreg free
  5475  011004  0100               	movlb	0	; () banked
  5476  011006  AFBC               	btfss	(floor@expon+1)& (0+255),7,b
  5477  011008  D017               	goto	l3670
  5478                           
  5479                           ; BSR set to: 0
  5480  01100A  0100               	movlb	0	; () banked
  5481  01100C  AFB7               	btfss	(floor@x+2)& (0+255),7,b
  5482  01100E  D00A               	goto	l3666
  5483                           
  5484                           ; BSR set to: 0
  5485  011010  0E00               	movlw	0
  5486  011012  0100               	movlb	0	; () banked
  5487  011014  6FB5               	movwf	?_floor& (0+255),b
  5488  011016  0E80               	movlw	128
  5489  011018  0100               	movlb	0	; () banked
  5490  01101A  6FB6               	movwf	(?_floor+1)& (0+255),b
  5491  01101C  0EBF               	movlw	191
  5492  01101E  0100               	movlb	0	; () banked
  5493  011020  6FB7               	movwf	(?_floor+2)& (0+255),b
  5494                           
  5495                           ; BSR set to: 0
  5496  011022  0012               	return	
  5497  011024                     l3666:
  5498                           
  5499                           ; BSR set to: 0
  5500  011024  0E00               	movlw	0
  5501  011026  0100               	movlb	0	; () banked
  5502  011028  6FB5               	movwf	?_floor& (0+255),b
  5503  01102A  0E00               	movlw	0
  5504  01102C  0100               	movlb	0	; () banked
  5505  01102E  6FB6               	movwf	(?_floor+1)& (0+255),b
  5506  011030  0E00               	movlw	0
  5507  011032  0100               	movlb	0	; () banked
  5508  011034  6FB7               	movwf	(?_floor+2)& (0+255),b
  5509                           
  5510                           ; BSR set to: 0
  5511  011036  0012               	return	
  5512  011038                     l3670:
  5513                           
  5514                           ; BSR set to: 0
  5515  011038  0100               	movlb	0	; () banked
  5516  01103A  51BC               	movf	(floor@expon+1)& (0+255),w,b
  5517  01103C  E105               	bnz	u3430
  5518  01103E  0E15               	movlw	21
  5519  011040  0100               	movlb	0	; () banked
  5520  011042  5DBB               	subwf	floor@expon& (0+255),w,b
  5521  011044  A0D8               	btfss	status,0,c
  5522  011046  D007               	goto	l3674
  5523  011048                     u3430:
  5524                           
  5525                           ; BSR set to: 0
  5526  011048  C0B5  F0B5         	movff	floor@x,?_floor
  5527  01104C  C0B6  F0B6         	movff	floor@x+1,?_floor+1
  5528  011050  C0B7  F0B7         	movff	floor@x+2,?_floor+2
  5529  011054  0012               	return	
  5530  011056                     l3674:
  5531                           
  5532                           ; BSR set to: 0
  5533  011056  C0B5  F09E         	movff	floor@x,___fttol@f1
  5534  01105A  C0B6  F09F         	movff	floor@x+1,___fttol@f1+1
  5535  01105E  C0B7  F0A0         	movff	floor@x+2,___fttol@f1+2
  5536  011062  ECDD  F083         	call	___fttol	;wreg free
  5537  011066  C09E  F0AD         	movff	?___fttol,___altoft@c
  5538  01106A  C09F  F0AE         	movff	?___fttol+1,___altoft@c+1
  5539  01106E  C0A0  F0AF         	movff	?___fttol+2,___altoft@c+2
  5540  011072  C0A1  F0B0         	movff	?___fttol+3,___altoft@c+3
  5541  011076  ECFD  F08B         	call	___altoft	;wreg free
  5542  01107A  C0AD  F0B8         	movff	?___altoft,floor@i
  5543  01107E  C0AE  F0B9         	movff	?___altoft+1,floor@i+1
  5544  011082  C0AF  F0BA         	movff	?___altoft+2,floor@i+2
  5545  011086  C0B5  F09E         	movff	floor@x,___ftge@ff1
  5546  01108A  C0B6  F09F         	movff	floor@x+1,___ftge@ff1+1
  5547  01108E  C0B7  F0A0         	movff	floor@x+2,___ftge@ff1+2
  5548  011092  C0B8  F0A1         	movff	floor@i,___ftge@ff2
  5549  011096  C0B9  F0A2         	movff	floor@i+1,___ftge@ff2+1
  5550  01109A  C0BA  F0A3         	movff	floor@i+2,___ftge@ff2+2
  5551  01109E  EC45  F08A         	call	___ftge	;wreg free
  5552  0110A2  0100               	movlb	0	; () banked
  5553  0110A4  B0D8               	btfsc	status,0,c
  5554  0110A6  D018               	goto	l1106
  5555                           
  5556                           ; BSR set to: 0
  5557  0110A8  C0B8  F09E         	movff	floor@i,___ftadd@f1
  5558  0110AC  C0B9  F09F         	movff	floor@i+1,___ftadd@f1+1
  5559  0110B0  C0BA  F0A0         	movff	floor@i+2,___ftadd@f1+2
  5560  0110B4  0E00               	movlw	0
  5561  0110B6  0100               	movlb	0	; () banked
  5562  0110B8  6FA1               	movwf	___ftadd@f2& (0+255),b
  5563  0110BA  0E80               	movlw	128
  5564  0110BC  0100               	movlb	0	; () banked
  5565  0110BE  6FA2               	movwf	(___ftadd@f2+1)& (0+255),b
  5566  0110C0  0EBF               	movlw	191
  5567  0110C2  0100               	movlb	0	; () banked
  5568  0110C4  6FA3               	movwf	(___ftadd@f2+2)& (0+255),b
  5569  0110C6  EC00  F080         	call	___ftadd	;wreg free
  5570  0110CA  C09E  F0B5         	movff	?___ftadd,?_floor
  5571  0110CE  C09F  F0B6         	movff	?___ftadd+1,?_floor+1
  5572  0110D2  C0A0  F0B7         	movff	?___ftadd+2,?_floor+2
  5573  0110D6  0012               	return	
  5574  0110D8                     l1106:
  5575                           
  5576                           ; BSR set to: 0
  5577  0110D8  C0B8  F0B5         	movff	floor@i,?_floor
  5578  0110DC  C0B9  F0B6         	movff	floor@i+1,?_floor+1
  5579  0110E0  C0BA  F0B7         	movff	floor@i+2,?_floor+2
  5580  0110E4  0012               	return		;funcret
  5581  0110E6                     __end_of_floor:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           indf0	equ	0xFEF
  5591                           postinc0	equ	0xFEE
  5592                           fsr0h	equ	0xFEA
  5593                           fsr0l	equ	0xFE9
  5594                           wreg	equ	0xFE8
  5595                           indf1	equ	0xFE7
  5596                           postdec1	equ	0xFE5
  5597                           fsr1h	equ	0xFE2
  5598                           fsr1l	equ	0xFE1
  5599                           indf2	equ	0xFDF
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _frexp *****************
  5605 ;; Defined at:
  5606 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\frexp.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  value           3   17[COMRAM] int 
  5609 ;;  eptr            2   20[COMRAM] PTR int 
  5610 ;;		 -> log@exponent(2), floor@expon(2), 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  3   17[COMRAM] PTR int 
  5615 ;; Registers used:
  5616 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5622 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5624 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5625 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5626 ;;Total ram usage:        7 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    2
  5629 ;; This function calls:
  5630 ;;		Nothing
  5631 ;; This function is called by:
  5632 ;;		_floor
  5633 ;;		_log
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text28
  5638  011890                     __ptext28:
  5639                           	opt stack 0
  5640  011890                     _frexp:
  5641                           	opt stack 25
  5642                           
  5643                           ;incstack = 0
  5644  011890  5012               	movf	frexp@value,w,c
  5645  011892  1013               	iorwf	frexp@value+1,w,c
  5646  011894  1014               	iorwf	frexp@value+2,w,c
  5647  011896  A4D8               	btfss	status,2,c
  5648  011898  D00F               	goto	l3574
  5649  01189A  C015  FFD9         	movff	frexp@eptr,fsr2l
  5650  01189E  C016  FFDA         	movff	frexp@eptr+1,fsr2h
  5651  0118A2  0E00               	movlw	0
  5652  0118A4  6EDE               	movwf	postinc2,c
  5653  0118A6  0E00               	movlw	0
  5654  0118A8  6EDD               	movwf	postdec2,c
  5655  0118AA  0E00               	movlw	0
  5656  0118AC  6E12               	movwf	?_frexp,c
  5657  0118AE  0E00               	movlw	0
  5658  0118B0  6E13               	movwf	?_frexp+1,c
  5659  0118B2  0E00               	movlw	0
  5660  0118B4  6E14               	movwf	?_frexp+2,c
  5661  0118B6  0012               	return	
  5662  0118B8                     l3574:
  5663  0118B8  5014               	movf	frexp@value+2,w,c
  5664  0118BA  0B7F               	andlw	127
  5665  0118BC  6E17               	movwf	??_frexp& (0+255),c
  5666  0118BE  6A18               	clrf	(??_frexp+1)& (0+255),c
  5667  0118C0  90D8               	bcf	status,0,c
  5668  0118C2  3617               	rlcf	??_frexp,f,c
  5669  0118C4  3618               	rlcf	??_frexp+1,f,c
  5670  0118C6  C015  FFD9         	movff	frexp@eptr,fsr2l
  5671  0118CA  C016  FFDA         	movff	frexp@eptr+1,fsr2h
  5672  0118CE  C017  FFDE         	movff	??_frexp,postinc2
  5673  0118D2  C018  FFDD         	movff	??_frexp+1,postdec2
  5674  0118D6  AE13               	btfss	frexp@value+1,7,c
  5675  0118D8  D003               	goto	u3320
  5676  0118DA  6A17               	clrf	??_frexp& (0+255),c
  5677  0118DC  2A17               	incf	??_frexp& (0+255),f,c
  5678  0118DE  D001               	goto	u3328
  5679  0118E0                     u3320:
  5680  0118E0  6A17               	clrf	??_frexp& (0+255),c
  5681  0118E2                     u3328:
  5682  0118E2  5017               	movf	??_frexp,w,c
  5683  0118E4  C015  FFD9         	movff	frexp@eptr,fsr2l
  5684  0118E8  C016  FFDA         	movff	frexp@eptr+1,fsr2h
  5685  0118EC  12DE               	iorwf	postinc2,f,c
  5686  0118EE  0E00               	movlw	0
  5687  0118F0  12DD               	iorwf	postdec2,f,c
  5688  0118F2  C015  FFD9         	movff	frexp@eptr,fsr2l
  5689  0118F6  C016  FFDA         	movff	frexp@eptr+1,fsr2h
  5690  0118FA  0E82               	movlw	130
  5691  0118FC  26DE               	addwf	postinc2,f,c
  5692  0118FE  0EFF               	movlw	255
  5693  011900  22DD               	addwfc	postdec2,f,c
  5694  011902  8014               	bsf	frexp@value+2,0,c
  5695  011904  8214               	bsf	frexp@value+2,1,c
  5696  011906  8414               	bsf	frexp@value+2,2,c
  5697  011908  8614               	bsf	frexp@value+2,3,c
  5698  01190A  8814               	bsf	frexp@value+2,4,c
  5699  01190C  8A14               	bsf	frexp@value+2,5,c
  5700  01190E  9C14               	bcf	frexp@value+2,6,c
  5701  011910  9E13               	bcf	frexp@value+1,7,c
  5702  011912  C012  F012         	movff	frexp@value,?_frexp
  5703  011916  C013  F013         	movff	frexp@value+1,?_frexp+1
  5704  01191A  C014  F014         	movff	frexp@value+2,?_frexp+2
  5705  01191E  0012               	return	
  5706  011920                     __end_of_frexp:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           indf0	equ	0xFEF
  5716                           postinc0	equ	0xFEE
  5717                           fsr0h	equ	0xFEA
  5718                           fsr0l	equ	0xFE9
  5719                           wreg	equ	0xFE8
  5720                           indf1	equ	0xFE7
  5721                           postdec1	equ	0xFE5
  5722                           fsr1h	equ	0xFE2
  5723                           fsr1l	equ	0xFE1
  5724                           indf2	equ	0xFDF
  5725                           postinc2	equ	0xFDE
  5726                           postdec2	equ	0xFDD
  5727                           fsr2h	equ	0xFDA
  5728                           fsr2l	equ	0xFD9
  5729                           status	equ	0xFD8
  5730                           
  5731 ;; *************** function ___fttol *****************
  5732 ;; Defined at:
  5733 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  f1              3    0[BANK0 ] float 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  lval            4   10[BANK0 ] unsigned long 
  5738 ;;  exp1            1   14[BANK0 ] unsigned char 
  5739 ;;  sign1           1    9[BANK0 ] unsigned char 
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  4    0[BANK0 ] long 
  5742 ;; Registers used:
  5743 ;;		wreg, status,2, status,0
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5749 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5750 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5751 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5752 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5753 ;;Total ram usage:       15 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    2
  5756 ;; This function calls:
  5757 ;;		Nothing
  5758 ;; This function is called by:
  5759 ;;		_calculateTemp
  5760 ;;		_pow
  5761 ;;		_exp
  5762 ;;		_floor
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           	psect	text29
  5767  0107BA                     __ptext29:
  5768                           	opt stack 0
  5769  0107BA                     ___fttol:
  5770                           	opt stack 26
  5771                           
  5772                           ;incstack = 0
  5773  0107BA  C0A0  F0A2         	movff	___fttol@f1+2,??___fttol
  5774  0107BE  0100               	movlb	0	; () banked
  5775  0107C0  6BA3               	clrf	(??___fttol+1)& (0+255),b
  5776  0107C2  6BA4               	clrf	(??___fttol+2)& (0+255),b
  5777  0107C4  0100               	movlb	0	; () banked
  5778  0107C6  359F               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5779  0107C8  0100               	movlb	0	; () banked
  5780  0107CA  37A2               	rlcf	??___fttol& (0+255),f,b
  5781  0107CC  E301               	bnc	u3231
  5782  0107CE  81A3               	bsf	(??___fttol+1)& (0+255),0,b
  5783  0107D0                     u3231:
  5784  0107D0  0100               	movlb	0	; () banked
  5785  0107D2  51A2               	movf	??___fttol& (0+255),w,b
  5786  0107D4  0100               	movlb	0	; () banked
  5787  0107D6  6FAC               	movwf	___fttol@exp1& (0+255),b
  5788  0107D8  0100               	movlb	0	; () banked
  5789  0107DA  51AC               	movf	___fttol@exp1& (0+255),w,b
  5790  0107DC  A4D8               	btfss	status,2,c
  5791  0107DE  D00A               	goto	l3526
  5792                           
  5793                           ; BSR set to: 0
  5794  0107E0  0E00               	movlw	0
  5795  0107E2  0100               	movlb	0	; () banked
  5796  0107E4  6F9E               	movwf	?___fttol& (0+255),b
  5797  0107E6  0E00               	movlw	0
  5798  0107E8  6F9F               	movwf	(?___fttol+1)& (0+255),b
  5799  0107EA  0E00               	movlw	0
  5800  0107EC  6FA0               	movwf	(?___fttol+2)& (0+255),b
  5801  0107EE  0E00               	movlw	0
  5802  0107F0  6FA1               	movwf	(?___fttol+3)& (0+255),b
  5803                           
  5804                           ; BSR set to: 0
  5805  0107F2  0012               	return	
  5806  0107F4                     l3526:
  5807                           
  5808                           ; BSR set to: 0
  5809  0107F4  0E17               	movlw	23
  5810  0107F6  0100               	movlb	0	; () banked
  5811  0107F8  6FA2               	movwf	??___fttol& (0+255),b
  5812  0107FA  C09E  F0A3         	movff	___fttol@f1,??___fttol+1
  5813  0107FE  C09F  F0A4         	movff	___fttol@f1+1,??___fttol+2
  5814  010802  C0A0  F0A5         	movff	___fttol@f1+2,??___fttol+3
  5815  010806  0100               	movlb	0	; () banked
  5816  010808  29A2               	incf	??___fttol& (0+255),w,b
  5817  01080A  0100               	movlb	0	; () banked
  5818  01080C  6FA6               	movwf	(??___fttol+4)& (0+255),b
  5819  01080E  D005               	goto	u3250
  5820  010810                     u3255:
  5821  010810  0100               	movlb	0	; () banked
  5822  010812  90D8               	bcf	status,0,c
  5823  010814  33A5               	rrcf	(??___fttol+3)& (0+255),f,b
  5824  010816  33A4               	rrcf	(??___fttol+2)& (0+255),f,b
  5825  010818  33A3               	rrcf	(??___fttol+1)& (0+255),f,b
  5826  01081A                     u3250:
  5827  01081A  0100               	movlb	0	; () banked
  5828  01081C  2FA6               	decfsz	(??___fttol+4)& (0+255),f,b
  5829  01081E  D7F8               	goto	u3255
  5830  010820  0100               	movlb	0	; () banked
  5831  010822  51A3               	movf	(??___fttol+1)& (0+255),w,b
  5832  010824  0100               	movlb	0	; () banked
  5833  010826  6FA7               	movwf	___fttol@sign1& (0+255),b
  5834                           
  5835                           ; BSR set to: 0
  5836  010828  0100               	movlb	0	; () banked
  5837  01082A  8F9F               	bsf	(___fttol@f1+1)& (0+255),7,b
  5838                           
  5839                           ; BSR set to: 0
  5840  01082C  0EFF               	movlw	255
  5841  01082E  0100               	movlb	0	; () banked
  5842  010830  179E               	andwf	___fttol@f1& (0+255),f,b
  5843  010832  0EFF               	movlw	255
  5844  010834  0100               	movlb	0	; () banked
  5845  010836  179F               	andwf	(___fttol@f1+1)& (0+255),f,b
  5846  010838  0E00               	movlw	0
  5847  01083A  0100               	movlb	0	; () banked
  5848  01083C  17A0               	andwf	(___fttol@f1+2)& (0+255),f,b
  5849                           
  5850                           ; BSR set to: 0
  5851  01083E  0100               	movlb	0	; () banked
  5852  010840  519E               	movf	___fttol@f1& (0+255),w,b
  5853  010842  0100               	movlb	0	; () banked
  5854  010844  6FA8               	movwf	___fttol@lval& (0+255),b
  5855  010846  0100               	movlb	0	; () banked
  5856  010848  519F               	movf	(___fttol@f1+1)& (0+255),w,b
  5857  01084A  0100               	movlb	0	; () banked
  5858  01084C  6FA9               	movwf	(___fttol@lval+1)& (0+255),b
  5859  01084E  0100               	movlb	0	; () banked
  5860  010850  51A0               	movf	(___fttol@f1+2)& (0+255),w,b
  5861  010852  0100               	movlb	0	; () banked
  5862  010854  6FAA               	movwf	(___fttol@lval+2)& (0+255),b
  5863  010856  0100               	movlb	0	; () banked
  5864  010858  6BAB               	clrf	(___fttol@lval+3)& (0+255),b
  5865                           
  5866                           ; BSR set to: 0
  5867  01085A  0E8E               	movlw	142
  5868  01085C  0100               	movlb	0	; () banked
  5869  01085E  5FAC               	subwf	___fttol@exp1& (0+255),f,b
  5870                           
  5871                           ; BSR set to: 0
  5872  010860  0100               	movlb	0	; () banked
  5873  010862  AFAC               	btfss	___fttol@exp1& (0+255),7,b
  5874  010864  D01A               	goto	l3548
  5875                           
  5876                           ; BSR set to: 0
  5877  010866  0100               	movlb	0	; () banked
  5878  010868  51AC               	movf	___fttol@exp1& (0+255),w,b
  5879  01086A  0A80               	xorlw	128
  5880  01086C  0F8F               	addlw	143
  5881  01086E  B0D8               	btfsc	status,0,c
  5882  010870  D00A               	goto	l3544
  5883                           
  5884                           ; BSR set to: 0
  5885  010872  0E00               	movlw	0
  5886  010874  0100               	movlb	0	; () banked
  5887  010876  6F9E               	movwf	?___fttol& (0+255),b
  5888  010878  0E00               	movlw	0
  5889  01087A  6F9F               	movwf	(?___fttol+1)& (0+255),b
  5890  01087C  0E00               	movlw	0
  5891  01087E  6FA0               	movwf	(?___fttol+2)& (0+255),b
  5892  010880  0E00               	movlw	0
  5893  010882  6FA1               	movwf	(?___fttol+3)& (0+255),b
  5894                           
  5895                           ; BSR set to: 0
  5896  010884  0012               	return	
  5897  010886                     l3544:
  5898                           
  5899                           ; BSR set to: 0
  5900  010886  0100               	movlb	0	; () banked
  5901  010888  90D8               	bcf	status,0,c
  5902  01088A  33AB               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5903  01088C  33AA               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5904  01088E  33A9               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5905  010890  33A8               	rrcf	___fttol@lval& (0+255),f,b
  5906                           
  5907                           ; BSR set to: 0
  5908  010892  0100               	movlb	0	; () banked
  5909  010894  3FAC               	incfsz	___fttol@exp1& (0+255),f,b
  5910  010896  D7F7               	goto	l3544
  5911                           
  5912                           ; BSR set to: 0
  5913  010898  D01B               	goto	l3558
  5914  01089A                     l3548:
  5915                           
  5916                           ; BSR set to: 0
  5917  01089A  0E17               	movlw	23
  5918  01089C  0100               	movlb	0	; () banked
  5919  01089E  65AC               	cpfsgt	___fttol@exp1& (0+255),b
  5920  0108A0  D012               	goto	l3556
  5921                           
  5922                           ; BSR set to: 0
  5923  0108A2  0E00               	movlw	0
  5924  0108A4  0100               	movlb	0	; () banked
  5925  0108A6  6F9E               	movwf	?___fttol& (0+255),b
  5926  0108A8  0E00               	movlw	0
  5927  0108AA  6F9F               	movwf	(?___fttol+1)& (0+255),b
  5928  0108AC  0E00               	movlw	0
  5929  0108AE  6FA0               	movwf	(?___fttol+2)& (0+255),b
  5930  0108B0  0E00               	movlw	0
  5931  0108B2  6FA1               	movwf	(?___fttol+3)& (0+255),b
  5932                           
  5933                           ; BSR set to: 0
  5934  0108B4  0012               	return	
  5935  0108B6                     l3554:
  5936                           
  5937                           ; BSR set to: 0
  5938  0108B6  0100               	movlb	0	; () banked
  5939  0108B8  90D8               	bcf	status,0,c
  5940  0108BA  37A8               	rlcf	___fttol@lval& (0+255),f,b
  5941  0108BC  37A9               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5942  0108BE  37AA               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5943  0108C0  37AB               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5944  0108C2  0100               	movlb	0	; () banked
  5945  0108C4  07AC               	decf	___fttol@exp1& (0+255),f,b
  5946  0108C6                     l3556:
  5947                           
  5948                           ; BSR set to: 0
  5949  0108C6  0100               	movlb	0	; () banked
  5950  0108C8  51AC               	movf	___fttol@exp1& (0+255),w,b
  5951  0108CA  0100               	movlb	0	; () banked
  5952  0108CC  A4D8               	btfss	status,2,c
  5953  0108CE  D7F3               	goto	l3554
  5954  0108D0                     l3558:
  5955                           
  5956                           ; BSR set to: 0
  5957  0108D0  0100               	movlb	0	; () banked
  5958  0108D2  51A7               	movf	___fttol@sign1& (0+255),w,b
  5959  0108D4  0100               	movlb	0	; () banked
  5960  0108D6  B4D8               	btfsc	status,2,c
  5961  0108D8  D009               	goto	l3562
  5962                           
  5963                           ; BSR set to: 0
  5964  0108DA  0100               	movlb	0	; () banked
  5965  0108DC  1FAB               	comf	(___fttol@lval+3)& (0+255),f,b
  5966  0108DE  1FAA               	comf	(___fttol@lval+2)& (0+255),f,b
  5967  0108E0  1FA9               	comf	(___fttol@lval+1)& (0+255),f,b
  5968  0108E2  6DA8               	negf	___fttol@lval& (0+255),b
  5969  0108E4  0E00               	movlw	0
  5970  0108E6  23A9               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5971  0108E8  23AA               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5972  0108EA  23AB               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5973  0108EC                     l3562:
  5974                           
  5975                           ; BSR set to: 0
  5976  0108EC  C0A8  F09E         	movff	___fttol@lval,?___fttol
  5977  0108F0  C0A9  F09F         	movff	___fttol@lval+1,?___fttol+1
  5978  0108F4  C0AA  F0A0         	movff	___fttol@lval+2,?___fttol+2
  5979  0108F8  C0AB  F0A1         	movff	___fttol@lval+3,?___fttol+3
  5980  0108FC  0012               	return	
  5981  0108FE                     __end_of___fttol:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           indf0	equ	0xFEF
  5991                           postinc0	equ	0xFEE
  5992                           fsr0h	equ	0xFEA
  5993                           fsr0l	equ	0xFE9
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postdec1	equ	0xFE5
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function ___ftge *****************
  6007 ;; Defined at:
  6008 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftge.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  ff1             3    0[BANK0 ] float 
  6011 ;;  ff2             3    3[BANK0 ] float 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6023 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6025 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6026 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6027 ;;Total ram usage:        9 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    2
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_digipot
  6034 ;;		_pow
  6035 ;;		_exp
  6036 ;;		_floor
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text30
  6041  01148A                     __ptext30:
  6042                           	opt stack 0
  6043  01148A                     ___ftge:
  6044                           	opt stack 24
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;incstack = 0
  6048  01148A  0100               	movlb	0	; () banked
  6049  01148C  AFA0               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6050  01148E  D01D               	goto	l3506
  6051                           
  6052                           ; BSR set to: 0
  6053  011490  C09E  F0A4         	movff	___ftge@ff1,??___ftge
  6054  011494  C09F  F0A5         	movff	___ftge@ff1+1,??___ftge+1
  6055  011498  C0A0  F0A6         	movff	___ftge@ff1+2,??___ftge+2
  6056  01149C  0100               	movlb	0	; () banked
  6057  01149E  1FA4               	comf	??___ftge& (0+255),f,b
  6058  0114A0  1FA5               	comf	(??___ftge+1)& (0+255),f,b
  6059  0114A2  1FA6               	comf	(??___ftge+2)& (0+255),f,b
  6060  0114A4  2BA4               	incf	??___ftge& (0+255),f,b
  6061  0114A6  0E00               	movlw	0
  6062  0114A8  23A5               	addwfc	(??___ftge+1)& (0+255),f,b
  6063  0114AA  23A6               	addwfc	(??___ftge+2)& (0+255),f,b
  6064  0114AC  0E00               	movlw	0
  6065  0114AE  0100               	movlb	0	; () banked
  6066  0114B0  25A4               	addwf	??___ftge& (0+255),w,b
  6067  0114B2  0100               	movlb	0	; () banked
  6068  0114B4  6F9E               	movwf	___ftge@ff1& (0+255),b
  6069  0114B6  0E00               	movlw	0
  6070  0114B8  0100               	movlb	0	; () banked
  6071  0114BA  21A5               	addwfc	(??___ftge+1)& (0+255),w,b
  6072  0114BC  0100               	movlb	0	; () banked
  6073  0114BE  6F9F               	movwf	(___ftge@ff1+1)& (0+255),b
  6074  0114C0  0E80               	movlw	128
  6075  0114C2  0100               	movlb	0	; () banked
  6076  0114C4  21A6               	addwfc	(??___ftge+2)& (0+255),w,b
  6077  0114C6  0100               	movlb	0	; () banked
  6078  0114C8  6FA0               	movwf	(___ftge@ff1+2)& (0+255),b
  6079  0114CA                     l3506:
  6080                           
  6081                           ; BSR set to: 0
  6082  0114CA  0100               	movlb	0	; () banked
  6083  0114CC  AFA3               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6084  0114CE  D01D               	goto	l3510
  6085                           
  6086                           ; BSR set to: 0
  6087  0114D0  C0A1  F0A4         	movff	___ftge@ff2,??___ftge
  6088  0114D4  C0A2  F0A5         	movff	___ftge@ff2+1,??___ftge+1
  6089  0114D8  C0A3  F0A6         	movff	___ftge@ff2+2,??___ftge+2
  6090  0114DC  0100               	movlb	0	; () banked
  6091  0114DE  1FA4               	comf	??___ftge& (0+255),f,b
  6092  0114E0  1FA5               	comf	(??___ftge+1)& (0+255),f,b
  6093  0114E2  1FA6               	comf	(??___ftge+2)& (0+255),f,b
  6094  0114E4  2BA4               	incf	??___ftge& (0+255),f,b
  6095  0114E6  0E00               	movlw	0
  6096  0114E8  23A5               	addwfc	(??___ftge+1)& (0+255),f,b
  6097  0114EA  23A6               	addwfc	(??___ftge+2)& (0+255),f,b
  6098  0114EC  0E00               	movlw	0
  6099  0114EE  0100               	movlb	0	; () banked
  6100  0114F0  25A4               	addwf	??___ftge& (0+255),w,b
  6101  0114F2  0100               	movlb	0	; () banked
  6102  0114F4  6FA1               	movwf	___ftge@ff2& (0+255),b
  6103  0114F6  0E00               	movlw	0
  6104  0114F8  0100               	movlb	0	; () banked
  6105  0114FA  21A5               	addwfc	(??___ftge+1)& (0+255),w,b
  6106  0114FC  0100               	movlb	0	; () banked
  6107  0114FE  6FA2               	movwf	(___ftge@ff2+1)& (0+255),b
  6108  011500  0E80               	movlw	128
  6109  011502  0100               	movlb	0	; () banked
  6110  011504  21A6               	addwfc	(??___ftge+2)& (0+255),w,b
  6111  011506  0100               	movlb	0	; () banked
  6112  011508  6FA3               	movwf	(___ftge@ff2+2)& (0+255),b
  6113  01150A                     l3510:
  6114                           
  6115                           ; BSR set to: 0
  6116  01150A  0E00               	movlw	0
  6117  01150C  0100               	movlb	0	; () banked
  6118  01150E  1B9E               	xorwf	___ftge@ff1& (0+255),f,b
  6119  011510  0E00               	movlw	0
  6120  011512  0100               	movlb	0	; () banked
  6121  011514  1B9F               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6122  011516  0E80               	movlw	128
  6123  011518  0100               	movlb	0	; () banked
  6124  01151A  1BA0               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6125                           
  6126                           ; BSR set to: 0
  6127  01151C  0E00               	movlw	0
  6128  01151E  0100               	movlb	0	; () banked
  6129  011520  1BA1               	xorwf	___ftge@ff2& (0+255),f,b
  6130  011522  0E00               	movlw	0
  6131  011524  0100               	movlb	0	; () banked
  6132  011526  1BA2               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6133  011528  0E80               	movlw	128
  6134  01152A  0100               	movlb	0	; () banked
  6135  01152C  1BA3               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6136  01152E  0100               	movlb	0	; () banked
  6137  011530  51A1               	movf	___ftge@ff2& (0+255),w,b
  6138  011532  0100               	movlb	0	; () banked
  6139  011534  5D9E               	subwf	___ftge@ff1& (0+255),w,b
  6140  011536  0100               	movlb	0	; () banked
  6141  011538  51A2               	movf	(___ftge@ff2+1)& (0+255),w,b
  6142  01153A  0100               	movlb	0	; () banked
  6143  01153C  599F               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6144  01153E  0100               	movlb	0	; () banked
  6145  011540  51A3               	movf	(___ftge@ff2+2)& (0+255),w,b
  6146  011542  0100               	movlb	0	; () banked
  6147  011544  59A0               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6148  011546  B0D8               	btfsc	status,0,c
  6149  011548  D002               	goto	l3516
  6150                           
  6151                           ; BSR set to: 0
  6152  01154A  90D8               	bcf	status,0,c
  6153  01154C  0012               	return	
  6154  01154E                     l3516:
  6155                           
  6156                           ; BSR set to: 0
  6157  01154E  80D8               	bsf	status,0,c
  6158                           
  6159                           ; BSR set to: 0
  6160  011550  0012               	return	
  6161  011552                     __end_of___ftge:
  6162                           	opt stack 0
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           indf0	equ	0xFEF
  6171                           postinc0	equ	0xFEE
  6172                           fsr0h	equ	0xFEA
  6173                           fsr0l	equ	0xFE9
  6174                           wreg	equ	0xFE8
  6175                           indf1	equ	0xFE7
  6176                           postdec1	equ	0xFE5
  6177                           fsr1h	equ	0xFE2
  6178                           fsr1l	equ	0xFE1
  6179                           indf2	equ	0xFDF
  6180                           postinc2	equ	0xFDE
  6181                           postdec2	equ	0xFDD
  6182                           fsr2h	equ	0xFDA
  6183                           fsr2l	equ	0xFD9
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function ___altoft *****************
  6187 ;; Defined at:
  6188 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\altoft.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  c               4   15[BANK0 ] long 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  sign            1   60[COMRAM] unsigned char 
  6193 ;;  exp             1   59[COMRAM] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  3   15[BANK0 ] float 
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6203 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6205 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6206 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6207 ;;Total ram usage:       10 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    3
  6210 ;; This function calls:
  6211 ;;		___ftpack
  6212 ;; This function is called by:
  6213 ;;		_floor
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text31
  6218  0117FA                     __ptext31:
  6219                           	opt stack 0
  6220  0117FA                     ___altoft:
  6221                           	opt stack 23
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;incstack = 0
  6225  0117FA  0E00               	movlw	0
  6226  0117FC  6E3D               	movwf	___altoft@sign,c
  6227  0117FE  0E8E               	movlw	142
  6228  011800  6E3C               	movwf	___altoft@exp,c
  6229  011802  0100               	movlb	0	; () banked
  6230  011804  AFB0               	btfss	(___altoft@c+3)& (0+255),7,b
  6231  011806  D013               	goto	l3378
  6232                           
  6233                           ; BSR set to: 0
  6234  011808  0100               	movlb	0	; () banked
  6235  01180A  1FB0               	comf	(___altoft@c+3)& (0+255),f,b
  6236  01180C  1FAF               	comf	(___altoft@c+2)& (0+255),f,b
  6237  01180E  1FAE               	comf	(___altoft@c+1)& (0+255),f,b
  6238  011810  6DAD               	negf	___altoft@c& (0+255),b
  6239  011812  0E00               	movlw	0
  6240  011814  23AE               	addwfc	(___altoft@c+1)& (0+255),f,b
  6241  011816  23AF               	addwfc	(___altoft@c+2)& (0+255),f,b
  6242  011818  23B0               	addwfc	(___altoft@c+3)& (0+255),f,b
  6243                           
  6244                           ; BSR set to: 0
  6245  01181A  0E01               	movlw	1
  6246  01181C  6E3D               	movwf	___altoft@sign,c
  6247                           
  6248                           ; BSR set to: 0
  6249  01181E  D007               	goto	l3378
  6250  011820                     l3376:
  6251                           
  6252                           ; BSR set to: 0
  6253  011820  0100               	movlb	0	; () banked
  6254  011822  90D8               	bcf	status,0,c
  6255  011824  33B0               	rrcf	(___altoft@c+3)& (0+255),f,b
  6256  011826  33AF               	rrcf	(___altoft@c+2)& (0+255),f,b
  6257  011828  33AE               	rrcf	(___altoft@c+1)& (0+255),f,b
  6258  01182A  33AD               	rrcf	___altoft@c& (0+255),f,b
  6259  01182C  2A3C               	incf	___altoft@exp,f,c
  6260  01182E                     l3378:
  6261                           
  6262                           ; BSR set to: 0
  6263  01182E  0E00               	movlw	0
  6264  011830  0100               	movlb	0	; () banked
  6265  011832  15AD               	andwf	___altoft@c& (0+255),w,b
  6266  011834  0100               	movlb	0	; () banked
  6267  011836  6FB1               	movwf	??___altoft& (0+255),b
  6268  011838  0E00               	movlw	0
  6269  01183A  0100               	movlb	0	; () banked
  6270  01183C  15AE               	andwf	(___altoft@c+1)& (0+255),w,b
  6271  01183E  0100               	movlb	0	; () banked
  6272  011840  6FB2               	movwf	(??___altoft+1)& (0+255),b
  6273  011842  0E00               	movlw	0
  6274  011844  0100               	movlb	0	; () banked
  6275  011846  15AF               	andwf	(___altoft@c+2)& (0+255),w,b
  6276  011848  0100               	movlb	0	; () banked
  6277  01184A  6FB3               	movwf	(??___altoft+2)& (0+255),b
  6278  01184C  0EFF               	movlw	255
  6279  01184E  0100               	movlb	0	; () banked
  6280  011850  15B0               	andwf	(___altoft@c+3)& (0+255),w,b
  6281  011852  0100               	movlb	0	; () banked
  6282  011854  6FB4               	movwf	(??___altoft+3)& (0+255),b
  6283  011856  0100               	movlb	0	; () banked
  6284  011858  51B1               	movf	??___altoft& (0+255),w,b
  6285  01185A  0100               	movlb	0	; () banked
  6286  01185C  11B2               	iorwf	(??___altoft+1)& (0+255),w,b
  6287  01185E  0100               	movlb	0	; () banked
  6288  011860  11B3               	iorwf	(??___altoft+2)& (0+255),w,b
  6289  011862  0100               	movlb	0	; () banked
  6290  011864  11B4               	iorwf	(??___altoft+3)& (0+255),w,b
  6291  011866  A4D8               	btfss	status,2,c
  6292  011868  D7DB               	goto	l3376
  6293                           
  6294                           ; BSR set to: 0
  6295                           
  6296                           ; BSR set to: 0
  6297  01186A  C0AD  F012         	movff	___altoft@c,___ftpack@arg
  6298  01186E  C0AE  F013         	movff	___altoft@c+1,___ftpack@arg+1
  6299  011872  C0AF  F014         	movff	___altoft@c+2,___ftpack@arg+2
  6300  011876  C03C  F015         	movff	___altoft@exp,___ftpack@exp
  6301  01187A  C03D  F016         	movff	___altoft@sign,___ftpack@sign
  6302  01187E  EC02  F08B         	call	___ftpack	;wreg free
  6303  011882  C012  F0AD         	movff	?___ftpack,?___altoft
  6304  011886  C013  F0AE         	movff	?___ftpack+1,?___altoft+1
  6305  01188A  C014  F0AF         	movff	?___ftpack+2,?___altoft+2
  6306  01188E  0012               	return	
  6307  011890                     __end_of___altoft:
  6308                           	opt stack 0
  6309                           tblptru	equ	0xFF8
  6310                           tblptrh	equ	0xFF7
  6311                           tblptrl	equ	0xFF6
  6312                           tablat	equ	0xFF5
  6313                           prodh	equ	0xFF4
  6314                           prodl	equ	0xFF3
  6315                           intcon	equ	0xFF2
  6316                           indf0	equ	0xFEF
  6317                           postinc0	equ	0xFEE
  6318                           fsr0h	equ	0xFEA
  6319                           fsr0l	equ	0xFE9
  6320                           wreg	equ	0xFE8
  6321                           indf1	equ	0xFE7
  6322                           postdec1	equ	0xFE5
  6323                           fsr1h	equ	0xFE2
  6324                           fsr1l	equ	0xFE1
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _eval_poly *****************
  6333 ;; Defined at:
  6334 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\evalpoly.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  x               3   12[BANK0 ] float 
  6337 ;;  d               2   15[BANK0 ] PTR const 
  6338 ;;		 -> log@coeff(27), exp@coeff(30), 
  6339 ;;  n               2   17[BANK0 ] int 
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;  res             3   19[BANK0 ] int 
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  3   12[BANK0 ] int 
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6351 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6352 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6354 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6355 ;;Total ram usage:       12 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    4
  6358 ;; This function calls:
  6359 ;;		___ftadd
  6360 ;;		___ftmul
  6361 ;;		___wmul
  6362 ;; This function is called by:
  6363 ;;		_exp
  6364 ;;		_log
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text32
  6369  0113AA                     __ptext32:
  6370                           	opt stack 0
  6371  0113AA                     _eval_poly:
  6372                           	opt stack 23
  6373                           
  6374                           ;incstack = 0
  6375  0113AA  C0AF  F012         	movff	eval_poly@n,___wmul@multiplier
  6376  0113AE  C0B0  F013         	movff	eval_poly@n+1,___wmul@multiplier+1
  6377  0113B2  0E00               	movlw	0
  6378  0113B4  6E15               	movwf	___wmul@multiplicand+1,c
  6379  0113B6  0E03               	movlw	3
  6380  0113B8  6E14               	movwf	___wmul@multiplicand,c
  6381  0113BA  EC3A  F08F         	call	___wmul	;wreg free
  6382  0113BE  C0AD  F03C         	movff	eval_poly@d,??_eval_poly
  6383  0113C2  C0AE  F03D         	movff	eval_poly@d+1,??_eval_poly+1
  6384  0113C6  5012               	movf	?___wmul,w,c
  6385  0113C8  263C               	addwf	??_eval_poly,f,c
  6386  0113CA  5013               	movf	?___wmul+1,w,c
  6387  0113CC  223D               	addwfc	??_eval_poly+1,f,c
  6388  0113CE  C03C  FFF6         	movff	??_eval_poly,tblptrl
  6389  0113D2  C03D  FFF7         	movff	??_eval_poly+1,tblptrh
  6390  0113D6                     	if	0	;tblptru may be non-zero
  6391  0113D6                     	endif
  6392  0113D6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6393  0113D6  0E00               	movlw	low (__mediumconst shr (0+16))
  6394  0113D8  6EF8               	movwf	tblptru,c
  6395  0113DA                     	endif
  6396  0113DA  0009               	tblrd		*+
  6397  0113DC  CFF5 F0B1          	movff	tablat,eval_poly@res
  6398  0113E0  0009               	tblrd		*+
  6399  0113E2  CFF5 F0B2          	movff	tablat,eval_poly@res+1
  6400  0113E6  000A               	tblrd		*-
  6401  0113E8  CFF5 F0B3          	movff	tablat,eval_poly@res+2
  6402  0113EC  D041               	goto	l3684
  6403  0113EE                     l3682:
  6404  0113EE  C0B1  F030         	movff	eval_poly@res,___ftmul@f2
  6405  0113F2  C0B2  F031         	movff	eval_poly@res+1,___ftmul@f2+1
  6406  0113F6  C0B3  F032         	movff	eval_poly@res+2,___ftmul@f2+2
  6407  0113FA  C0AA  F02D         	movff	eval_poly@x,___ftmul@f1
  6408  0113FE  C0AB  F02E         	movff	eval_poly@x+1,___ftmul@f1+1
  6409  011402  C0AC  F02F         	movff	eval_poly@x+2,___ftmul@f1+2
  6410  011406  EC73  F088         	call	___ftmul	;wreg free
  6411  01140A  C02D  F09E         	movff	?___ftmul,___ftadd@f1
  6412  01140E  C02E  F09F         	movff	?___ftmul+1,___ftadd@f1+1
  6413  011412  C02F  F0A0         	movff	?___ftmul+2,___ftadd@f1+2
  6414  011416  0E00               	movlw	0
  6415  011418  6E15               	movwf	___wmul@multiplicand+1,c
  6416  01141A  0E03               	movlw	3
  6417  01141C  6E14               	movwf	___wmul@multiplicand,c
  6418  01141E  0100               	movlb	0	; () banked
  6419  011420  07AF               	decf	eval_poly@n& (0+255),f,b
  6420  011422  A0D8               	btfss	status,0,c
  6421  011424  07B0               	decf	(eval_poly@n+1)& (0+255),f,b
  6422  011426  C0AF  F012         	movff	eval_poly@n,___wmul@multiplier
  6423  01142A  C0B0  F013         	movff	eval_poly@n+1,___wmul@multiplier+1
  6424  01142E  EC3A  F08F         	call	___wmul	;wreg free
  6425  011432  C0AD  F03C         	movff	eval_poly@d,??_eval_poly
  6426  011436  C0AE  F03D         	movff	eval_poly@d+1,??_eval_poly+1
  6427  01143A  5012               	movf	?___wmul,w,c
  6428  01143C  263C               	addwf	??_eval_poly,f,c
  6429  01143E  5013               	movf	?___wmul+1,w,c
  6430  011440  223D               	addwfc	??_eval_poly+1,f,c
  6431  011442  C03C  FFF6         	movff	??_eval_poly,tblptrl
  6432  011446  C03D  FFF7         	movff	??_eval_poly+1,tblptrh
  6433  01144A                     	if	0	;tblptru may be non-zero
  6434  01144A                     	endif
  6435  01144A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6436  01144A  0E00               	movlw	low (__mediumconst shr (0+16))
  6437  01144C  6EF8               	movwf	tblptru,c
  6438  01144E                     	endif
  6439  01144E  0009               	tblrd		*+
  6440  011450  CFF5 F0A1          	movff	tablat,___ftadd@f2
  6441  011454  0009               	tblrd		*+
  6442  011456  CFF5 F0A2          	movff	tablat,___ftadd@f2+1
  6443  01145A  000A               	tblrd		*-
  6444  01145C  CFF5 F0A3          	movff	tablat,___ftadd@f2+2
  6445  011460  EC00  F080         	call	___ftadd	;wreg free
  6446  011464  C09E  F0B1         	movff	?___ftadd,eval_poly@res
  6447  011468  C09F  F0B2         	movff	?___ftadd+1,eval_poly@res+1
  6448  01146C  C0A0  F0B3         	movff	?___ftadd+2,eval_poly@res+2
  6449  011470                     l3684:
  6450  011470  0100               	movlb	0	; () banked
  6451  011472  51AF               	movf	eval_poly@n& (0+255),w,b
  6452  011474  0100               	movlb	0	; () banked
  6453  011476  11B0               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6454  011478  A4D8               	btfss	status,2,c
  6455  01147A  D7B9               	goto	l3682
  6456                           
  6457                           ; BSR set to: 0
  6458  01147C  C0B1  F0AA         	movff	eval_poly@res,?_eval_poly
  6459  011480  C0B2  F0AB         	movff	eval_poly@res+1,?_eval_poly+1
  6460  011484  C0B3  F0AC         	movff	eval_poly@res+2,?_eval_poly+2
  6461                           
  6462                           ; BSR set to: 0
  6463  011488  0012               	return		;funcret
  6464  01148A                     __end_of_eval_poly:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           indf0	equ	0xFEF
  6474                           postinc0	equ	0xFEE
  6475                           fsr0h	equ	0xFEA
  6476                           fsr0l	equ	0xFE9
  6477                           wreg	equ	0xFE8
  6478                           indf1	equ	0xFE7
  6479                           postdec1	equ	0xFE5
  6480                           fsr1h	equ	0xFE2
  6481                           fsr1l	equ	0xFE1
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           postdec2	equ	0xFDD
  6485                           fsr2h	equ	0xFDA
  6486                           fsr2l	equ	0xFD9
  6487                           status	equ	0xFD8
  6488                           
  6489 ;; *************** function ___wmul *****************
  6490 ;; Defined at:
  6491 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;  multiplier      2   17[COMRAM] unsigned int 
  6494 ;;  multiplicand    2   19[COMRAM] unsigned int 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  product         2   21[COMRAM] unsigned int 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  2   17[COMRAM] unsigned int 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, prodl, prodh
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6506 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6507 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6509 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6510 ;;Total ram usage:        6 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    2
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_main
  6517 ;;		_eval_poly
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text33
  6522  011E74                     __ptext33:
  6523                           	opt stack 0
  6524  011E74                     ___wmul:
  6525                           	opt stack 24
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;incstack = 0
  6529  011E74  5012               	movf	___wmul@multiplier,w,c
  6530  011E76  0214               	mulwf	___wmul@multiplicand,c
  6531  011E78  CFF3 F016          	movff	prodl,___wmul@product
  6532  011E7C  CFF4 F017          	movff	prodh,___wmul@product+1
  6533  011E80  5012               	movf	___wmul@multiplier,w,c
  6534  011E82  0215               	mulwf	___wmul@multiplicand+1,c
  6535  011E84  50F3               	movf	prodl,w,c
  6536  011E86  2617               	addwf	___wmul@product+1,f,c
  6537  011E88  5013               	movf	___wmul@multiplier+1,w,c
  6538  011E8A  0214               	mulwf	___wmul@multiplicand,c
  6539  011E8C  50F3               	movf	prodl,w,c
  6540  011E8E  2617               	addwf	___wmul@product+1,f,c
  6541  011E90  C016  F012         	movff	___wmul@product,?___wmul
  6542  011E94  C017  F013         	movff	___wmul@product+1,?___wmul+1
  6543  011E98  0012               	return	
  6544  011E9A                     __end_of___wmul:
  6545                           	opt stack 0
  6546                           tblptru	equ	0xFF8
  6547                           tblptrh	equ	0xFF7
  6548                           tblptrl	equ	0xFF6
  6549                           tablat	equ	0xFF5
  6550                           prodh	equ	0xFF4
  6551                           prodl	equ	0xFF3
  6552                           intcon	equ	0xFF2
  6553                           indf0	equ	0xFEF
  6554                           postinc0	equ	0xFEE
  6555                           fsr0h	equ	0xFEA
  6556                           fsr0l	equ	0xFE9
  6557                           wreg	equ	0xFE8
  6558                           indf1	equ	0xFE7
  6559                           postdec1	equ	0xFE5
  6560                           fsr1h	equ	0xFE2
  6561                           fsr1l	equ	0xFE1
  6562                           indf2	equ	0xFDF
  6563                           postinc2	equ	0xFDE
  6564                           postdec2	equ	0xFDD
  6565                           fsr2h	equ	0xFDA
  6566                           fsr2l	equ	0xFD9
  6567                           status	equ	0xFD8
  6568                           
  6569 ;; *************** function ___ftmul *****************
  6570 ;; Defined at:
  6571 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  f1              3   44[COMRAM] float 
  6574 ;;  f2              3   47[COMRAM] float 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;  f3_as_produc    3   54[COMRAM] unsigned um
  6577 ;;  sign            1   58[COMRAM] unsigned char 
  6578 ;;  cntr            1   57[COMRAM] unsigned char 
  6579 ;;  exp             1   53[COMRAM] unsigned char 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  3   44[COMRAM] float 
  6582 ;; Registers used:
  6583 ;;		wreg, status,2, status,0, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6589 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6592 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6593 ;;Total ram usage:       15 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    3
  6596 ;; This function calls:
  6597 ;;		___ftpack
  6598 ;; This function is called by:
  6599 ;;		_calculateTemp
  6600 ;;		_initSPI
  6601 ;;		_digipot
  6602 ;;		_adjustDigipot
  6603 ;;		_pow
  6604 ;;		_exp
  6605 ;;		_log
  6606 ;;		_eval_poly
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text34
  6611  0110E6                     __ptext34:
  6612                           	opt stack 0
  6613  0110E6                     ___ftmul:
  6614                           	opt stack 25
  6615                           
  6616                           ;incstack = 0
  6617  0110E6  C02F  F033         	movff	___ftmul@f1+2,??___ftmul
  6618  0110EA  6A34               	clrf	(??___ftmul+1)& (0+255),c
  6619  0110EC  6A35               	clrf	(??___ftmul+2)& (0+255),c
  6620  0110EE  342E               	rlcf	___ftmul@f1+1,w,c
  6621  0110F0  3633               	rlcf	??___ftmul& (0+255),f,c
  6622  0110F2  E301               	bnc	u3141
  6623  0110F4  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  6624  0110F6                     u3141:
  6625  0110F6  5033               	movf	??___ftmul,w,c
  6626  0110F8  6E36               	movwf	___ftmul@exp,c
  6627  0110FA  5036               	movf	___ftmul@exp,w,c
  6628  0110FC  A4D8               	btfss	status,2,c
  6629  0110FE  D007               	goto	l3460
  6630  011100  0E00               	movlw	0
  6631  011102  6E2D               	movwf	?___ftmul,c
  6632  011104  0E00               	movlw	0
  6633  011106  6E2E               	movwf	?___ftmul+1,c
  6634  011108  0E00               	movlw	0
  6635  01110A  6E2F               	movwf	?___ftmul+2,c
  6636  01110C  0012               	return	
  6637  01110E                     l3460:
  6638  01110E  C032  F033         	movff	___ftmul@f2+2,??___ftmul
  6639  011112  6A34               	clrf	(??___ftmul+1)& (0+255),c
  6640  011114  6A35               	clrf	(??___ftmul+2)& (0+255),c
  6641  011116  3431               	rlcf	___ftmul@f2+1,w,c
  6642  011118  3633               	rlcf	??___ftmul& (0+255),f,c
  6643  01111A  E301               	bnc	u3161
  6644  01111C  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  6645  01111E                     u3161:
  6646  01111E  5033               	movf	??___ftmul,w,c
  6647  011120  6E3B               	movwf	___ftmul@sign,c
  6648  011122  503B               	movf	___ftmul@sign,w,c
  6649  011124  A4D8               	btfss	status,2,c
  6650  011126  D007               	goto	l3466
  6651  011128  0E00               	movlw	0
  6652  01112A  6E2D               	movwf	?___ftmul,c
  6653  01112C  0E00               	movlw	0
  6654  01112E  6E2E               	movwf	?___ftmul+1,c
  6655  011130  0E00               	movlw	0
  6656  011132  6E2F               	movwf	?___ftmul+2,c
  6657  011134  0012               	return	
  6658  011136                     l3466:
  6659  011136  503B               	movf	___ftmul@sign,w,c
  6660  011138  0F7B               	addlw	123
  6661  01113A  2636               	addwf	___ftmul@exp,f,c
  6662  01113C  C02F  F03B         	movff	___ftmul@f1+2,___ftmul@sign
  6663  011140  5032               	movf	___ftmul@f2+2,w,c
  6664  011142  1A3B               	xorwf	___ftmul@sign,f,c
  6665  011144  0E80               	movlw	128
  6666  011146  163B               	andwf	___ftmul@sign,f,c
  6667  011148  8E2E               	bsf	___ftmul@f1+1,7,c
  6668  01114A  8E31               	bsf	___ftmul@f2+1,7,c
  6669  01114C  0EFF               	movlw	255
  6670  01114E  1630               	andwf	___ftmul@f2,f,c
  6671  011150  0EFF               	movlw	255
  6672  011152  1631               	andwf	___ftmul@f2+1,f,c
  6673  011154  0E00               	movlw	0
  6674  011156  1632               	andwf	___ftmul@f2+2,f,c
  6675  011158  0E00               	movlw	0
  6676  01115A  6E37               	movwf	___ftmul@f3_as_product,c
  6677  01115C  0E00               	movlw	0
  6678  01115E  6E38               	movwf	___ftmul@f3_as_product+1,c
  6679  011160  0E00               	movlw	0
  6680  011162  6E39               	movwf	___ftmul@f3_as_product+2,c
  6681  011164  0E07               	movlw	7
  6682  011166  6E3A               	movwf	___ftmul@cntr,c
  6683  011168                     l3480:
  6684  011168  A02D               	btfss	___ftmul@f1,0,c
  6685  01116A  D006               	goto	l3484
  6686  01116C  5030               	movf	___ftmul@f2,w,c
  6687  01116E  2637               	addwf	___ftmul@f3_as_product,f,c
  6688  011170  5031               	movf	___ftmul@f2+1,w,c
  6689  011172  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  6690  011174  5032               	movf	___ftmul@f2+2,w,c
  6691  011176  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  6692  011178                     l3484:
  6693  011178  90D8               	bcf	status,0,c
  6694  01117A  322F               	rrcf	___ftmul@f1+2,f,c
  6695  01117C  322E               	rrcf	___ftmul@f1+1,f,c
  6696  01117E  322D               	rrcf	___ftmul@f1,f,c
  6697  011180  90D8               	bcf	status,0,c
  6698  011182  3630               	rlcf	___ftmul@f2,f,c
  6699  011184  3631               	rlcf	___ftmul@f2+1,f,c
  6700  011186  3632               	rlcf	___ftmul@f2+2,f,c
  6701  011188  2E3A               	decfsz	___ftmul@cntr,f,c
  6702  01118A  D7EE               	goto	l3480
  6703  01118C  0E09               	movlw	9
  6704  01118E  6E3A               	movwf	___ftmul@cntr,c
  6705  011190                     l3490:
  6706  011190  A02D               	btfss	___ftmul@f1,0,c
  6707  011192  D006               	goto	l3494
  6708  011194  5030               	movf	___ftmul@f2,w,c
  6709  011196  2637               	addwf	___ftmul@f3_as_product,f,c
  6710  011198  5031               	movf	___ftmul@f2+1,w,c
  6711  01119A  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  6712  01119C  5032               	movf	___ftmul@f2+2,w,c
  6713  01119E  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  6714  0111A0                     l3494:
  6715  0111A0  90D8               	bcf	status,0,c
  6716  0111A2  322F               	rrcf	___ftmul@f1+2,f,c
  6717  0111A4  322E               	rrcf	___ftmul@f1+1,f,c
  6718  0111A6  322D               	rrcf	___ftmul@f1,f,c
  6719  0111A8  90D8               	bcf	status,0,c
  6720  0111AA  3239               	rrcf	___ftmul@f3_as_product+2,f,c
  6721  0111AC  3238               	rrcf	___ftmul@f3_as_product+1,f,c
  6722  0111AE  3237               	rrcf	___ftmul@f3_as_product,f,c
  6723  0111B0  2E3A               	decfsz	___ftmul@cntr,f,c
  6724  0111B2  D7EE               	goto	l3490
  6725  0111B4  C037  F012         	movff	___ftmul@f3_as_product,___ftpack@arg
  6726  0111B8  C038  F013         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6727  0111BC  C039  F014         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6728  0111C0  C036  F015         	movff	___ftmul@exp,___ftpack@exp
  6729  0111C4  C03B  F016         	movff	___ftmul@sign,___ftpack@sign
  6730  0111C8  EC02  F08B         	call	___ftpack	;wreg free
  6731  0111CC  C012  F02D         	movff	?___ftpack,?___ftmul
  6732  0111D0  C013  F02E         	movff	?___ftpack+1,?___ftmul+1
  6733  0111D4  C014  F02F         	movff	?___ftpack+2,?___ftmul+2
  6734  0111D8  0012               	return	
  6735  0111DA                     __end_of___ftmul:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           indf0	equ	0xFEF
  6745                           postinc0	equ	0xFEE
  6746                           fsr0h	equ	0xFEA
  6747                           fsr0l	equ	0xFE9
  6748                           wreg	equ	0xFE8
  6749                           indf1	equ	0xFE7
  6750                           postdec1	equ	0xFE5
  6751                           fsr1h	equ	0xFE2
  6752                           fsr1l	equ	0xFE1
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           fsr2h	equ	0xFDA
  6757                           fsr2l	equ	0xFD9
  6758                           status	equ	0xFD8
  6759                           
  6760 ;; *************** function ___ftsub *****************
  6761 ;; Defined at:
  6762 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftsub.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  f1              3   12[BANK0 ] float 
  6765 ;;  f2              3   15[BANK0 ] float 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  3   12[BANK0 ] float 
  6770 ;; Registers used:
  6771 ;;		wreg, status,2, status,0, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;Total ram usage:        6 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    4
  6784 ;; This function calls:
  6785 ;;		___ftadd
  6786 ;; This function is called by:
  6787 ;;		_exp
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           	psect	text35
  6792  011CE0                     __ptext35:
  6793                           	opt stack 0
  6794  011CE0                     ___ftsub:
  6795                           	opt stack 23
  6796                           
  6797                           ;incstack = 0
  6798  011CE0  0100               	movlb	0	; () banked
  6799  011CE2  51AD               	movf	___ftsub@f2& (0+255),w,b
  6800  011CE4  0100               	movlb	0	; () banked
  6801  011CE6  11AE               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6802  011CE8  0100               	movlb	0	; () banked
  6803  011CEA  11AF               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6804  011CEC  B4D8               	btfsc	status,2,c
  6805  011CEE  D009               	goto	l3636
  6806                           
  6807                           ; BSR set to: 0
  6808  011CF0  0E00               	movlw	0
  6809  011CF2  0100               	movlb	0	; () banked
  6810  011CF4  1BAD               	xorwf	___ftsub@f2& (0+255),f,b
  6811  011CF6  0E00               	movlw	0
  6812  011CF8  0100               	movlb	0	; () banked
  6813  011CFA  1BAE               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6814  011CFC  0E80               	movlw	128
  6815  011CFE  0100               	movlb	0	; () banked
  6816  011D00  1BAF               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6817  011D02                     l3636:
  6818                           
  6819                           ; BSR set to: 0
  6820  011D02  C0AA  F09E         	movff	___ftsub@f1,___ftadd@f1
  6821  011D06  C0AB  F09F         	movff	___ftsub@f1+1,___ftadd@f1+1
  6822  011D0A  C0AC  F0A0         	movff	___ftsub@f1+2,___ftadd@f1+2
  6823  011D0E  C0AD  F0A1         	movff	___ftsub@f2,___ftadd@f2
  6824  011D12  C0AE  F0A2         	movff	___ftsub@f2+1,___ftadd@f2+1
  6825  011D16  C0AF  F0A3         	movff	___ftsub@f2+2,___ftadd@f2+2
  6826  011D1A  EC00  F080         	call	___ftadd	;wreg free
  6827  011D1E  C09E  F0AA         	movff	?___ftadd,?___ftsub
  6828  011D22  C09F  F0AB         	movff	?___ftadd+1,?___ftsub+1
  6829  011D26  C0A0  F0AC         	movff	?___ftadd+2,?___ftsub+2
  6830  011D2A  0012               	return	
  6831  011D2C                     __end_of___ftsub:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           intcon	equ	0xFF2
  6840                           indf0	equ	0xFEF
  6841                           postinc0	equ	0xFEE
  6842                           fsr0h	equ	0xFEA
  6843                           fsr0l	equ	0xFE9
  6844                           wreg	equ	0xFE8
  6845                           indf1	equ	0xFE7
  6846                           postdec1	equ	0xFE5
  6847                           fsr1h	equ	0xFE2
  6848                           fsr1l	equ	0xFE1
  6849                           indf2	equ	0xFDF
  6850                           postinc2	equ	0xFDE
  6851                           postdec2	equ	0xFDD
  6852                           fsr2h	equ	0xFDA
  6853                           fsr2l	equ	0xFD9
  6854                           status	equ	0xFD8
  6855                           
  6856 ;; *************** function ___ftadd *****************
  6857 ;; Defined at:
  6858 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  f1              3    0[BANK0 ] float 
  6861 ;;  f2              3    3[BANK0 ] float 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  exp1            1   11[BANK0 ] unsigned char 
  6864 ;;  exp2            1   10[BANK0 ] unsigned char 
  6865 ;;  sign            1    9[BANK0 ] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  3    0[BANK0 ] float 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6875 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6876 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6877 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6878 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6879 ;;Total ram usage:       12 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    3
  6882 ;; This function calls:
  6883 ;;		___ftpack
  6884 ;; This function is called by:
  6885 ;;		_initSPI
  6886 ;;		_adjustDigipot
  6887 ;;		___ftsub
  6888 ;;		_floor
  6889 ;;		_log
  6890 ;;		_eval_poly
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text36
  6895  010000                     __ptext36:
  6896                           	opt stack 0
  6897  010000                     ___ftadd:
  6898                           	opt stack 23
  6899                           
  6900                           ;incstack = 0
  6901  010000  C0A0  F0A4         	movff	___ftadd@f1+2,??___ftadd
  6902  010004  0100               	movlb	0	; () banked
  6903  010006  6BA5               	clrf	(??___ftadd+1)& (0+255),b
  6904  010008  6BA6               	clrf	(??___ftadd+2)& (0+255),b
  6905  01000A  0100               	movlb	0	; () banked
  6906  01000C  359F               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6907  01000E  0100               	movlb	0	; () banked
  6908  010010  37A4               	rlcf	??___ftadd& (0+255),f,b
  6909  010012  E301               	bnc	u2931
  6910  010014  81A5               	bsf	(??___ftadd+1)& (0+255),0,b
  6911  010016                     u2931:
  6912  010016  0100               	movlb	0	; () banked
  6913  010018  51A4               	movf	??___ftadd& (0+255),w,b
  6914  01001A  0100               	movlb	0	; () banked
  6915  01001C  6FA9               	movwf	___ftadd@exp1& (0+255),b
  6916  01001E  C0A3  F0A4         	movff	___ftadd@f2+2,??___ftadd
  6917  010022  0100               	movlb	0	; () banked
  6918  010024  6BA5               	clrf	(??___ftadd+1)& (0+255),b
  6919  010026  6BA6               	clrf	(??___ftadd+2)& (0+255),b
  6920  010028  0100               	movlb	0	; () banked
  6921  01002A  35A2               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6922  01002C  0100               	movlb	0	; () banked
  6923  01002E  37A4               	rlcf	??___ftadd& (0+255),f,b
  6924  010030  E301               	bnc	u2941
  6925  010032  81A5               	bsf	(??___ftadd+1)& (0+255),0,b
  6926  010034                     u2941:
  6927  010034  0100               	movlb	0	; () banked
  6928  010036  51A4               	movf	??___ftadd& (0+255),w,b
  6929  010038  0100               	movlb	0	; () banked
  6930  01003A  6FA8               	movwf	___ftadd@exp2& (0+255),b
  6931                           
  6932                           ; BSR set to: 0
  6933  01003C  0100               	movlb	0	; () banked
  6934  01003E  51A9               	movf	___ftadd@exp1& (0+255),w,b
  6935  010040  0100               	movlb	0	; () banked
  6936  010042  B4D8               	btfsc	status,2,c
  6937  010044  D011               	goto	l745
  6938                           
  6939                           ; BSR set to: 0
  6940  010046  0100               	movlb	0	; () banked
  6941  010048  51A8               	movf	___ftadd@exp2& (0+255),w,b
  6942  01004A  0100               	movlb	0	; () banked
  6943  01004C  5DA9               	subwf	___ftadd@exp1& (0+255),w,b
  6944  01004E  B0D8               	btfsc	status,0,c
  6945  010050  D012               	goto	l3392
  6946                           
  6947                           ; BSR set to: 0
  6948  010052  0100               	movlb	0	; () banked
  6949  010054  51A9               	movf	___ftadd@exp1& (0+255),w,b
  6950  010056  0800               	sublw	0
  6951  010058  0100               	movlb	0	; () banked
  6952  01005A  25A8               	addwf	___ftadd@exp2& (0+255),w,b
  6953  01005C  0100               	movlb	0	; () banked
  6954  01005E  6FA4               	movwf	??___ftadd& (0+255),b
  6955  010060  0E18               	movlw	24
  6956  010062  0100               	movlb	0	; () banked
  6957  010064  65A4               	cpfsgt	??___ftadd& (0+255),b
  6958  010066  D007               	goto	l3392
  6959  010068                     l745:
  6960                           
  6961                           ; BSR set to: 0
  6962  010068  C0A1  F09E         	movff	___ftadd@f2,?___ftadd
  6963  01006C  C0A2  F09F         	movff	___ftadd@f2+1,?___ftadd+1
  6964  010070  C0A3  F0A0         	movff	___ftadd@f2+2,?___ftadd+2
  6965  010074  0012               	return	
  6966  010076                     l3392:
  6967                           
  6968                           ; BSR set to: 0
  6969  010076  0100               	movlb	0	; () banked
  6970  010078  51A8               	movf	___ftadd@exp2& (0+255),w,b
  6971  01007A  0100               	movlb	0	; () banked
  6972  01007C  B4D8               	btfsc	status,2,c
  6973  01007E  D011               	goto	l749
  6974                           
  6975                           ; BSR set to: 0
  6976  010080  0100               	movlb	0	; () banked
  6977  010082  51A9               	movf	___ftadd@exp1& (0+255),w,b
  6978  010084  0100               	movlb	0	; () banked
  6979  010086  5DA8               	subwf	___ftadd@exp2& (0+255),w,b
  6980  010088  B0D8               	btfsc	status,0,c
  6981  01008A  D012               	goto	l3398
  6982                           
  6983                           ; BSR set to: 0
  6984  01008C  0100               	movlb	0	; () banked
  6985  01008E  51A8               	movf	___ftadd@exp2& (0+255),w,b
  6986  010090  0800               	sublw	0
  6987  010092  0100               	movlb	0	; () banked
  6988  010094  25A9               	addwf	___ftadd@exp1& (0+255),w,b
  6989  010096  0100               	movlb	0	; () banked
  6990  010098  6FA4               	movwf	??___ftadd& (0+255),b
  6991  01009A  0E18               	movlw	24
  6992  01009C  0100               	movlb	0	; () banked
  6993  01009E  65A4               	cpfsgt	??___ftadd& (0+255),b
  6994  0100A0  D007               	goto	l3398
  6995  0100A2                     l749:
  6996                           
  6997                           ; BSR set to: 0
  6998  0100A2  C09E  F09E         	movff	___ftadd@f1,?___ftadd
  6999  0100A6  C09F  F09F         	movff	___ftadd@f1+1,?___ftadd+1
  7000  0100AA  C0A0  F0A0         	movff	___ftadd@f1+2,?___ftadd+2
  7001  0100AE  0012               	return	
  7002  0100B0                     l3398:
  7003                           
  7004                           ; BSR set to: 0
  7005  0100B0  0E06               	movlw	6
  7006  0100B2  0100               	movlb	0	; () banked
  7007  0100B4  6FA7               	movwf	___ftadd@sign& (0+255),b
  7008                           
  7009                           ; BSR set to: 0
  7010  0100B6  0100               	movlb	0	; () banked
  7011  0100B8  AFA0               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7012  0100BA  D002               	goto	l3404
  7013                           
  7014                           ; BSR set to: 0
  7015  0100BC  0100               	movlb	0	; () banked
  7016  0100BE  8FA7               	bsf	___ftadd@sign& (0+255),7,b
  7017  0100C0                     l3404:
  7018                           
  7019                           ; BSR set to: 0
  7020  0100C0  0100               	movlb	0	; () banked
  7021  0100C2  AFA3               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7022  0100C4  D002               	goto	l751
  7023                           
  7024                           ; BSR set to: 0
  7025  0100C6  0100               	movlb	0	; () banked
  7026  0100C8  8DA7               	bsf	___ftadd@sign& (0+255),6,b
  7027  0100CA                     l751:
  7028                           
  7029                           ; BSR set to: 0
  7030  0100CA  0100               	movlb	0	; () banked
  7031  0100CC  8F9F               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7032                           
  7033                           ; BSR set to: 0
  7034  0100CE  0EFF               	movlw	255
  7035  0100D0  0100               	movlb	0	; () banked
  7036  0100D2  179E               	andwf	___ftadd@f1& (0+255),f,b
  7037  0100D4  0EFF               	movlw	255
  7038  0100D6  0100               	movlb	0	; () banked
  7039  0100D8  179F               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7040  0100DA  0E00               	movlw	0
  7041  0100DC  0100               	movlb	0	; () banked
  7042  0100DE  17A0               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7043  0100E0  0100               	movlb	0	; () banked
  7044  0100E2  8FA2               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7045                           
  7046                           ; BSR set to: 0
  7047  0100E4  0EFF               	movlw	255
  7048  0100E6  0100               	movlb	0	; () banked
  7049  0100E8  17A1               	andwf	___ftadd@f2& (0+255),f,b
  7050  0100EA  0EFF               	movlw	255
  7051  0100EC  0100               	movlb	0	; () banked
  7052  0100EE  17A2               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7053  0100F0  0E00               	movlw	0
  7054  0100F2  0100               	movlb	0	; () banked
  7055  0100F4  17A3               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 0
  7058  0100F6  0100               	movlb	0	; () banked
  7059  0100F8  51A8               	movf	___ftadd@exp2& (0+255),w,b
  7060  0100FA  0100               	movlb	0	; () banked
  7061  0100FC  5DA9               	subwf	___ftadd@exp1& (0+255),w,b
  7062  0100FE  B0D8               	btfsc	status,0,c
  7063  010100  D025               	goto	l3424
  7064  010102                     l3414:
  7065                           
  7066                           ; BSR set to: 0
  7067  010102  0100               	movlb	0	; () banked
  7068  010104  90D8               	bcf	status,0,c
  7069  010106  37A1               	rlcf	___ftadd@f2& (0+255),f,b
  7070  010108  37A2               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7071  01010A  37A3               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7072  01010C  0100               	movlb	0	; () banked
  7073  01010E  07A8               	decf	___ftadd@exp2& (0+255),f,b
  7074                           
  7075                           ; BSR set to: 0
  7076  010110  0100               	movlb	0	; () banked
  7077  010112  51A9               	movf	___ftadd@exp1& (0+255),w,b
  7078  010114  0100               	movlb	0	; () banked
  7079  010116  19A8               	xorwf	___ftadd@exp2& (0+255),w,b
  7080  010118  B4D8               	btfsc	status,2,c
  7081  01011A  D011               	goto	l3422
  7082                           
  7083                           ; BSR set to: 0
  7084  01011C  0100               	movlb	0	; () banked
  7085  01011E  07A7               	decf	___ftadd@sign& (0+255),f,b
  7086  010120  C0A7  F0A4         	movff	___ftadd@sign,??___ftadd
  7087  010124  0E07               	movlw	7
  7088  010126  0100               	movlb	0	; () banked
  7089  010128  17A4               	andwf	??___ftadd& (0+255),f,b
  7090  01012A  B4D8               	btfsc	status,2,c
  7091  01012C  D008               	goto	l3422
  7092  01012E  D7E9               	goto	l3414
  7093  010130                     l3420:
  7094                           
  7095                           ; BSR set to: 0
  7096  010130  0100               	movlb	0	; () banked
  7097  010132  90D8               	bcf	status,0,c
  7098  010134  33A0               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7099  010136  339F               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7100  010138  339E               	rrcf	___ftadd@f1& (0+255),f,b
  7101  01013A  0100               	movlb	0	; () banked
  7102  01013C  2BA9               	incf	___ftadd@exp1& (0+255),f,b
  7103  01013E                     l3422:
  7104                           
  7105                           ; BSR set to: 0
  7106  01013E  0100               	movlb	0	; () banked
  7107  010140  51A8               	movf	___ftadd@exp2& (0+255),w,b
  7108  010142  0100               	movlb	0	; () banked
  7109  010144  19A9               	xorwf	___ftadd@exp1& (0+255),w,b
  7110  010146  B4D8               	btfsc	status,2,c
  7111  010148  D02B               	goto	l760
  7112  01014A  D7F2               	goto	l3420
  7113  01014C                     l3424:
  7114                           
  7115                           ; BSR set to: 0
  7116  01014C  0100               	movlb	0	; () banked
  7117  01014E  51A9               	movf	___ftadd@exp1& (0+255),w,b
  7118  010150  0100               	movlb	0	; () banked
  7119  010152  5DA8               	subwf	___ftadd@exp2& (0+255),w,b
  7120  010154  B0D8               	btfsc	status,0,c
  7121  010156  D024               	goto	l760
  7122  010158                     l3426:
  7123                           
  7124                           ; BSR set to: 0
  7125  010158  0100               	movlb	0	; () banked
  7126  01015A  90D8               	bcf	status,0,c
  7127  01015C  379E               	rlcf	___ftadd@f1& (0+255),f,b
  7128  01015E  379F               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7129  010160  37A0               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7130  010162  0100               	movlb	0	; () banked
  7131  010164  07A9               	decf	___ftadd@exp1& (0+255),f,b
  7132                           
  7133                           ; BSR set to: 0
  7134  010166  0100               	movlb	0	; () banked
  7135  010168  51A9               	movf	___ftadd@exp1& (0+255),w,b
  7136  01016A  0100               	movlb	0	; () banked
  7137  01016C  19A8               	xorwf	___ftadd@exp2& (0+255),w,b
  7138  01016E  B4D8               	btfsc	status,2,c
  7139  010170  D011               	goto	l3434
  7140                           
  7141                           ; BSR set to: 0
  7142  010172  0100               	movlb	0	; () banked
  7143  010174  07A7               	decf	___ftadd@sign& (0+255),f,b
  7144  010176  C0A7  F0A4         	movff	___ftadd@sign,??___ftadd
  7145  01017A  0E07               	movlw	7
  7146  01017C  0100               	movlb	0	; () banked
  7147  01017E  17A4               	andwf	??___ftadd& (0+255),f,b
  7148  010180  B4D8               	btfsc	status,2,c
  7149  010182  D008               	goto	l3434
  7150  010184  D7E9               	goto	l3426
  7151  010186                     l3432:
  7152                           
  7153                           ; BSR set to: 0
  7154  010186  0100               	movlb	0	; () banked
  7155  010188  90D8               	bcf	status,0,c
  7156  01018A  33A3               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7157  01018C  33A2               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7158  01018E  33A1               	rrcf	___ftadd@f2& (0+255),f,b
  7159  010190  0100               	movlb	0	; () banked
  7160  010192  2BA8               	incf	___ftadd@exp2& (0+255),f,b
  7161  010194                     l3434:
  7162                           
  7163                           ; BSR set to: 0
  7164  010194  0100               	movlb	0	; () banked
  7165  010196  51A8               	movf	___ftadd@exp2& (0+255),w,b
  7166  010198  0100               	movlb	0	; () banked
  7167  01019A  19A9               	xorwf	___ftadd@exp1& (0+255),w,b
  7168  01019C  A4D8               	btfss	status,2,c
  7169  01019E  D7F3               	goto	l3432
  7170  0101A0                     l760:
  7171                           
  7172                           ; BSR set to: 0
  7173  0101A0  0100               	movlb	0	; () banked
  7174  0101A2  AFA7               	btfss	___ftadd@sign& (0+255),7,b
  7175  0101A4  D012               	goto	l769
  7176                           
  7177                           ; BSR set to: 0
  7178  0101A6  0EFF               	movlw	255
  7179  0101A8  0100               	movlb	0	; () banked
  7180  0101AA  1B9E               	xorwf	___ftadd@f1& (0+255),f,b
  7181  0101AC  0EFF               	movlw	255
  7182  0101AE  0100               	movlb	0	; () banked
  7183  0101B0  1B9F               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7184  0101B2  0EFF               	movlw	255
  7185  0101B4  0100               	movlb	0	; () banked
  7186  0101B6  1BA0               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7187  0101B8  0E01               	movlw	1
  7188  0101BA  0100               	movlb	0	; () banked
  7189  0101BC  279E               	addwf	___ftadd@f1& (0+255),f,b
  7190  0101BE  0E00               	movlw	0
  7191  0101C0  0100               	movlb	0	; () banked
  7192  0101C2  239F               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7193  0101C4  0E00               	movlw	0
  7194  0101C6  0100               	movlb	0	; () banked
  7195  0101C8  23A0               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7196  0101CA                     l769:
  7197                           
  7198                           ; BSR set to: 0
  7199  0101CA  0100               	movlb	0	; () banked
  7200  0101CC  ADA7               	btfss	___ftadd@sign& (0+255),6,b
  7201  0101CE  D012               	goto	l3440
  7202                           
  7203                           ; BSR set to: 0
  7204  0101D0  0EFF               	movlw	255
  7205  0101D2  0100               	movlb	0	; () banked
  7206  0101D4  1BA1               	xorwf	___ftadd@f2& (0+255),f,b
  7207  0101D6  0EFF               	movlw	255
  7208  0101D8  0100               	movlb	0	; () banked
  7209  0101DA  1BA2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7210  0101DC  0EFF               	movlw	255
  7211  0101DE  0100               	movlb	0	; () banked
  7212  0101E0  1BA3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7213  0101E2  0E01               	movlw	1
  7214  0101E4  0100               	movlb	0	; () banked
  7215  0101E6  27A1               	addwf	___ftadd@f2& (0+255),f,b
  7216  0101E8  0E00               	movlw	0
  7217  0101EA  0100               	movlb	0	; () banked
  7218  0101EC  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7219  0101EE  0E00               	movlw	0
  7220  0101F0  0100               	movlb	0	; () banked
  7221  0101F2  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7222  0101F4                     l3440:
  7223                           
  7224                           ; BSR set to: 0
  7225  0101F4  0E00               	movlw	0
  7226  0101F6  0100               	movlb	0	; () banked
  7227  0101F8  6FA7               	movwf	___ftadd@sign& (0+255),b
  7228                           
  7229                           ; BSR set to: 0
  7230  0101FA  0100               	movlb	0	; () banked
  7231  0101FC  519E               	movf	___ftadd@f1& (0+255),w,b
  7232  0101FE  0100               	movlb	0	; () banked
  7233  010200  27A1               	addwf	___ftadd@f2& (0+255),f,b
  7234  010202  0100               	movlb	0	; () banked
  7235  010204  519F               	movf	(___ftadd@f1+1)& (0+255),w,b
  7236  010206  0100               	movlb	0	; () banked
  7237  010208  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7238  01020A  0100               	movlb	0	; () banked
  7239  01020C  51A0               	movf	(___ftadd@f1+2)& (0+255),w,b
  7240  01020E  0100               	movlb	0	; () banked
  7241  010210  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7242                           
  7243                           ; BSR set to: 0
  7244  010212  0100               	movlb	0	; () banked
  7245  010214  AFA3               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7246  010216  D015               	goto	l3450
  7247                           
  7248                           ; BSR set to: 0
  7249  010218  0EFF               	movlw	255
  7250  01021A  0100               	movlb	0	; () banked
  7251  01021C  1BA1               	xorwf	___ftadd@f2& (0+255),f,b
  7252  01021E  0EFF               	movlw	255
  7253  010220  0100               	movlb	0	; () banked
  7254  010222  1BA2               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7255  010224  0EFF               	movlw	255
  7256  010226  0100               	movlb	0	; () banked
  7257  010228  1BA3               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7258  01022A  0E01               	movlw	1
  7259  01022C  0100               	movlb	0	; () banked
  7260  01022E  27A1               	addwf	___ftadd@f2& (0+255),f,b
  7261  010230  0E00               	movlw	0
  7262  010232  0100               	movlb	0	; () banked
  7263  010234  23A2               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7264  010236  0E00               	movlw	0
  7265  010238  0100               	movlb	0	; () banked
  7266  01023A  23A3               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7267                           
  7268                           ; BSR set to: 0
  7269  01023C  0E01               	movlw	1
  7270  01023E  0100               	movlb	0	; () banked
  7271  010240  6FA7               	movwf	___ftadd@sign& (0+255),b
  7272  010242                     l3450:
  7273                           
  7274                           ; BSR set to: 0
  7275  010242  C0A1  F012         	movff	___ftadd@f2,___ftpack@arg
  7276  010246  C0A2  F013         	movff	___ftadd@f2+1,___ftpack@arg+1
  7277  01024A  C0A3  F014         	movff	___ftadd@f2+2,___ftpack@arg+2
  7278  01024E  C0A9  F015         	movff	___ftadd@exp1,___ftpack@exp
  7279  010252  C0A7  F016         	movff	___ftadd@sign,___ftpack@sign
  7280  010256  EC02  F08B         	call	___ftpack	;wreg free
  7281  01025A  C012  F09E         	movff	?___ftpack,?___ftadd
  7282  01025E  C013  F09F         	movff	?___ftpack+1,?___ftadd+1
  7283  010262  C014  F0A0         	movff	?___ftpack+2,?___ftadd+2
  7284  010266  0012               	return	
  7285  010268                     __end_of___ftadd:
  7286                           	opt stack 0
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           indf0	equ	0xFEF
  7295                           postinc0	equ	0xFEE
  7296                           fsr0h	equ	0xFEA
  7297                           fsr0l	equ	0xFE9
  7298                           wreg	equ	0xFE8
  7299                           indf1	equ	0xFE7
  7300                           postdec1	equ	0xFE5
  7301                           fsr1h	equ	0xFE2
  7302                           fsr1l	equ	0xFE1
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function ___ftneg *****************
  7311 ;; Defined at:
  7312 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftneg.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  f1              3   17[COMRAM] float 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;		None
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  3   17[COMRAM] float 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7326 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7329 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7330 ;;Total ram usage:        3 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    2
  7333 ;; This function calls:
  7334 ;;		Nothing
  7335 ;; This function is called by:
  7336 ;;		_pow
  7337 ;;		_exp
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           	psect	text37
  7342  011EE4                     __ptext37:
  7343                           	opt stack 0
  7344  011EE4                     ___ftneg:
  7345                           	opt stack 25
  7346                           
  7347                           ;incstack = 0
  7348  011EE4  5012               	movf	___ftneg@f1,w,c
  7349  011EE6  1013               	iorwf	___ftneg@f1+1,w,c
  7350  011EE8  1014               	iorwf	___ftneg@f1+2,w,c
  7351  011EEA  B4D8               	btfsc	status,2,c
  7352  011EEC  D006               	goto	l802
  7353  011EEE  0E00               	movlw	0
  7354  011EF0  1A12               	xorwf	___ftneg@f1,f,c
  7355  011EF2  0E00               	movlw	0
  7356  011EF4  1A13               	xorwf	___ftneg@f1+1,f,c
  7357  011EF6  0E80               	movlw	128
  7358  011EF8  1A14               	xorwf	___ftneg@f1+2,f,c
  7359  011EFA                     l802:
  7360  011EFA  C012  F012         	movff	___ftneg@f1,?___ftneg
  7361  011EFE  C013  F013         	movff	___ftneg@f1+1,?___ftneg+1
  7362  011F02  C014  F014         	movff	___ftneg@f1+2,?___ftneg+2
  7363  011F06  0012               	return		;funcret
  7364  011F08                     __end_of___ftneg:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           indf0	equ	0xFEF
  7374                           postinc0	equ	0xFEE
  7375                           fsr0h	equ	0xFEA
  7376                           fsr0l	equ	0xFE9
  7377                           wreg	equ	0xFE8
  7378                           indf1	equ	0xFE7
  7379                           postdec1	equ	0xFE5
  7380                           fsr1h	equ	0xFE2
  7381                           fsr1l	equ	0xFE1
  7382                           indf2	equ	0xFDF
  7383                           postinc2	equ	0xFDE
  7384                           postdec2	equ	0xFDD
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389 ;; *************** function ___ftdiv *****************
  7390 ;; Defined at:
  7391 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftdiv.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  f1              3   29[COMRAM] float 
  7394 ;;  f2              3   32[COMRAM] float 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  f3              3   39[COMRAM] float 
  7397 ;;  sign            1   43[COMRAM] unsigned char 
  7398 ;;  exp             1   42[COMRAM] unsigned char 
  7399 ;;  cntr            1   38[COMRAM] unsigned char 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  3   29[COMRAM] float 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, status,0, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7409 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7410 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7411 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7412 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7413 ;;Total ram usage:       15 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    3
  7416 ;; This function calls:
  7417 ;;		___ftpack
  7418 ;; This function is called by:
  7419 ;;		_calculateTemp
  7420 ;;		_initSPI
  7421 ;;		_adjustDigipot
  7422 ;;		_exp
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text38
  7427  0112C4                     __ptext38:
  7428                           	opt stack 0
  7429  0112C4                     ___ftdiv:
  7430                           	opt stack 25
  7431                           
  7432                           ;incstack = 0
  7433  0112C4  C020  F024         	movff	___ftdiv@f1+2,??___ftdiv
  7434  0112C8  6A25               	clrf	(??___ftdiv+1)& (0+255),c
  7435  0112CA  6A26               	clrf	(??___ftdiv+2)& (0+255),c
  7436  0112CC  341F               	rlcf	___ftdiv@f1+1,w,c
  7437  0112CE  3624               	rlcf	??___ftdiv& (0+255),f,c
  7438  0112D0  E301               	bnc	u3331
  7439  0112D2  8025               	bsf	(??___ftdiv+1)& (0+255),0,c
  7440  0112D4                     u3331:
  7441  0112D4  5024               	movf	??___ftdiv,w,c
  7442  0112D6  6E2B               	movwf	___ftdiv@exp,c
  7443  0112D8  502B               	movf	___ftdiv@exp,w,c
  7444  0112DA  A4D8               	btfss	status,2,c
  7445  0112DC  D007               	goto	l3592
  7446  0112DE  0E00               	movlw	0
  7447  0112E0  6E1E               	movwf	?___ftdiv,c
  7448  0112E2  0E00               	movlw	0
  7449  0112E4  6E1F               	movwf	?___ftdiv+1,c
  7450  0112E6  0E00               	movlw	0
  7451  0112E8  6E20               	movwf	?___ftdiv+2,c
  7452  0112EA  0012               	return	
  7453  0112EC                     l3592:
  7454  0112EC  C023  F024         	movff	___ftdiv@f2+2,??___ftdiv
  7455  0112F0  6A25               	clrf	(??___ftdiv+1)& (0+255),c
  7456  0112F2  6A26               	clrf	(??___ftdiv+2)& (0+255),c
  7457  0112F4  3422               	rlcf	___ftdiv@f2+1,w,c
  7458  0112F6  3624               	rlcf	??___ftdiv& (0+255),f,c
  7459  0112F8  E301               	bnc	u3351
  7460  0112FA  8025               	bsf	(??___ftdiv+1)& (0+255),0,c
  7461  0112FC                     u3351:
  7462  0112FC  5024               	movf	??___ftdiv,w,c
  7463  0112FE  6E2C               	movwf	___ftdiv@sign,c
  7464  011300  502C               	movf	___ftdiv@sign,w,c
  7465  011302  A4D8               	btfss	status,2,c
  7466  011304  D007               	goto	l3598
  7467  011306  0E00               	movlw	0
  7468  011308  6E1E               	movwf	?___ftdiv,c
  7469  01130A  0E00               	movlw	0
  7470  01130C  6E1F               	movwf	?___ftdiv+1,c
  7471  01130E  0E00               	movlw	0
  7472  011310  6E20               	movwf	?___ftdiv+2,c
  7473  011312  0012               	return	
  7474  011314                     l3598:
  7475  011314  0E00               	movlw	0
  7476  011316  6E28               	movwf	___ftdiv@f3,c
  7477  011318  0E00               	movlw	0
  7478  01131A  6E29               	movwf	___ftdiv@f3+1,c
  7479  01131C  0E00               	movlw	0
  7480  01131E  6E2A               	movwf	___ftdiv@f3+2,c
  7481  011320  502C               	movf	___ftdiv@sign,w,c
  7482  011322  0F89               	addlw	137
  7483  011324  5E2B               	subwf	___ftdiv@exp,f,c
  7484  011326  C020  F02C         	movff	___ftdiv@f1+2,___ftdiv@sign
  7485  01132A  5023               	movf	___ftdiv@f2+2,w,c
  7486  01132C  1A2C               	xorwf	___ftdiv@sign,f,c
  7487  01132E  0E80               	movlw	128
  7488  011330  162C               	andwf	___ftdiv@sign,f,c
  7489  011332  8E1F               	bsf	___ftdiv@f1+1,7,c
  7490  011334  0EFF               	movlw	255
  7491  011336  161E               	andwf	___ftdiv@f1,f,c
  7492  011338  0EFF               	movlw	255
  7493  01133A  161F               	andwf	___ftdiv@f1+1,f,c
  7494  01133C  0E00               	movlw	0
  7495  01133E  1620               	andwf	___ftdiv@f1+2,f,c
  7496  011340  8E22               	bsf	___ftdiv@f2+1,7,c
  7497  011342  0EFF               	movlw	255
  7498  011344  1621               	andwf	___ftdiv@f2,f,c
  7499  011346  0EFF               	movlw	255
  7500  011348  1622               	andwf	___ftdiv@f2+1,f,c
  7501  01134A  0E00               	movlw	0
  7502  01134C  1623               	andwf	___ftdiv@f2+2,f,c
  7503  01134E  0E18               	movlw	24
  7504  011350  6E27               	movwf	___ftdiv@cntr,c
  7505  011352                     l3618:
  7506  011352  90D8               	bcf	status,0,c
  7507  011354  3628               	rlcf	___ftdiv@f3,f,c
  7508  011356  3629               	rlcf	___ftdiv@f3+1,f,c
  7509  011358  362A               	rlcf	___ftdiv@f3+2,f,c
  7510  01135A  5021               	movf	___ftdiv@f2,w,c
  7511  01135C  5C1E               	subwf	___ftdiv@f1,w,c
  7512  01135E  5022               	movf	___ftdiv@f2+1,w,c
  7513  011360  581F               	subwfb	___ftdiv@f1+1,w,c
  7514  011362  5023               	movf	___ftdiv@f2+2,w,c
  7515  011364  5820               	subwfb	___ftdiv@f1+2,w,c
  7516  011366  A0D8               	btfss	status,0,c
  7517  011368  D007               	goto	l780
  7518  01136A  5021               	movf	___ftdiv@f2,w,c
  7519  01136C  5E1E               	subwf	___ftdiv@f1,f,c
  7520  01136E  5022               	movf	___ftdiv@f2+1,w,c
  7521  011370  5A1F               	subwfb	___ftdiv@f1+1,f,c
  7522  011372  5023               	movf	___ftdiv@f2+2,w,c
  7523  011374  5A20               	subwfb	___ftdiv@f1+2,f,c
  7524  011376  8028               	bsf	___ftdiv@f3,0,c
  7525  011378                     l780:
  7526  011378  90D8               	bcf	status,0,c
  7527  01137A  361E               	rlcf	___ftdiv@f1,f,c
  7528  01137C  361F               	rlcf	___ftdiv@f1+1,f,c
  7529  01137E  3620               	rlcf	___ftdiv@f1+2,f,c
  7530  011380  2E27               	decfsz	___ftdiv@cntr,f,c
  7531  011382  D7E7               	goto	l3618
  7532  011384  C028  F012         	movff	___ftdiv@f3,___ftpack@arg
  7533  011388  C029  F013         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7534  01138C  C02A  F014         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7535  011390  C02B  F015         	movff	___ftdiv@exp,___ftpack@exp
  7536  011394  C02C  F016         	movff	___ftdiv@sign,___ftpack@sign
  7537  011398  EC02  F08B         	call	___ftpack	;wreg free
  7538  01139C  C012  F01E         	movff	?___ftpack,?___ftdiv
  7539  0113A0  C013  F01F         	movff	?___ftpack+1,?___ftdiv+1
  7540  0113A4  C014  F020         	movff	?___ftpack+2,?___ftdiv+2
  7541  0113A8  0012               	return	
  7542  0113AA                     __end_of___ftdiv:
  7543                           	opt stack 0
  7544                           tblptru	equ	0xFF8
  7545                           tblptrh	equ	0xFF7
  7546                           tblptrl	equ	0xFF6
  7547                           tablat	equ	0xFF5
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           intcon	equ	0xFF2
  7551                           indf0	equ	0xFEF
  7552                           postinc0	equ	0xFEE
  7553                           fsr0h	equ	0xFEA
  7554                           fsr0l	equ	0xFE9
  7555                           wreg	equ	0xFE8
  7556                           indf1	equ	0xFE7
  7557                           postdec1	equ	0xFE5
  7558                           fsr1h	equ	0xFE2
  7559                           fsr1l	equ	0xFE1
  7560                           indf2	equ	0xFDF
  7561                           postinc2	equ	0xFDE
  7562                           postdec2	equ	0xFDD
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function ___awtoft *****************
  7568 ;; Defined at:
  7569 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awtoft.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  c               2   25[COMRAM] int 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  sign            1   28[COMRAM] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  3   25[COMRAM] float 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7583 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7586 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7587 ;;Total ram usage:        4 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    3
  7590 ;; This function calls:
  7591 ;;		___ftpack
  7592 ;; This function is called by:
  7593 ;;		_calculateTemp
  7594 ;;		_initSPI
  7595 ;;		_adjustDigipot
  7596 ;;		_exp
  7597 ;;		_log
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601                           	psect	text39
  7602  011DAC                     __ptext39:
  7603                           	opt stack 0
  7604  011DAC                     ___awtoft:
  7605                           	opt stack 25
  7606                           
  7607                           ;incstack = 0
  7608  011DAC  0E00               	movlw	0
  7609  011DAE  6E1D               	movwf	___awtoft@sign,c
  7610  011DB0  AE1B               	btfss	___awtoft@c+1,7,c
  7611  011DB2  D006               	goto	l3648
  7612  011DB4  6C1A               	negf	___awtoft@c,c
  7613  011DB6  1E1B               	comf	___awtoft@c+1,f,c
  7614  011DB8  B0D8               	btfsc	status,0,c
  7615  011DBA  2A1B               	incf	___awtoft@c+1,f,c
  7616  011DBC  0E01               	movlw	1
  7617  011DBE  6E1D               	movwf	___awtoft@sign,c
  7618  011DC0                     l3648:
  7619  011DC0  C01A  F012         	movff	___awtoft@c,___ftpack@arg
  7620  011DC4  C01B  F013         	movff	___awtoft@c+1,___ftpack@arg+1
  7621  011DC8  6A14               	clrf	___ftpack@arg+2,c
  7622  011DCA  0E8E               	movlw	142
  7623  011DCC  6E15               	movwf	___ftpack@exp,c
  7624  011DCE  C01D  F016         	movff	___awtoft@sign,___ftpack@sign
  7625  011DD2  EC02  F08B         	call	___ftpack	;wreg free
  7626  011DD6  C012  F01A         	movff	?___ftpack,?___awtoft
  7627  011DDA  C013  F01B         	movff	?___ftpack+1,?___awtoft+1
  7628  011DDE  C014  F01C         	movff	?___ftpack+2,?___awtoft+2
  7629  011DE2  0012               	return	
  7630  011DE4                     __end_of___awtoft:
  7631                           	opt stack 0
  7632                           tblptru	equ	0xFF8
  7633                           tblptrh	equ	0xFF7
  7634                           tblptrl	equ	0xFF6
  7635                           tablat	equ	0xFF5
  7636                           prodh	equ	0xFF4
  7637                           prodl	equ	0xFF3
  7638                           intcon	equ	0xFF2
  7639                           indf0	equ	0xFEF
  7640                           postinc0	equ	0xFEE
  7641                           fsr0h	equ	0xFEA
  7642                           fsr0l	equ	0xFE9
  7643                           wreg	equ	0xFE8
  7644                           indf1	equ	0xFE7
  7645                           postdec1	equ	0xFE5
  7646                           fsr1h	equ	0xFE2
  7647                           fsr1l	equ	0xFE1
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function ___lltoft *****************
  7656 ;; Defined at:
  7657 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lltoft.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  c               4   25[COMRAM] unsigned long 
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;  exp             1   33[COMRAM] unsigned char 
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  3   25[COMRAM] float 
  7664 ;; Registers used:
  7665 ;;		wreg, status,2, status,0, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7673 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7674 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7675 ;;Total ram usage:        9 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    3
  7678 ;; This function calls:
  7679 ;;		___ftpack
  7680 ;; This function is called by:
  7681 ;;		_pow
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           	psect	text40
  7686  011BDC                     __ptext40:
  7687                           	opt stack 0
  7688  011BDC                     ___lltoft:
  7689                           	opt stack 25
  7690                           
  7691                           ;incstack = 0
  7692  011BDC  0E8E               	movlw	142
  7693  011BDE  6E22               	movwf	___lltoft@exp,c
  7694  011BE0  D006               	goto	l3726
  7695  011BE2                     l3724:
  7696  011BE2  90D8               	bcf	status,0,c
  7697  011BE4  321D               	rrcf	___lltoft@c+3,f,c
  7698  011BE6  321C               	rrcf	___lltoft@c+2,f,c
  7699  011BE8  321B               	rrcf	___lltoft@c+1,f,c
  7700  011BEA  321A               	rrcf	___lltoft@c,f,c
  7701  011BEC  2A22               	incf	___lltoft@exp,f,c
  7702  011BEE                     l3726:
  7703  011BEE  0E00               	movlw	0
  7704  011BF0  141A               	andwf	___lltoft@c,w,c
  7705  011BF2  6E1E               	movwf	??___lltoft& (0+255),c
  7706  011BF4  0E00               	movlw	0
  7707  011BF6  141B               	andwf	___lltoft@c+1,w,c
  7708  011BF8  6E1F               	movwf	(??___lltoft+1)& (0+255),c
  7709  011BFA  0E00               	movlw	0
  7710  011BFC  141C               	andwf	___lltoft@c+2,w,c
  7711  011BFE  6E20               	movwf	(??___lltoft+2)& (0+255),c
  7712  011C00  0EFF               	movlw	255
  7713  011C02  141D               	andwf	___lltoft@c+3,w,c
  7714  011C04  6E21               	movwf	(??___lltoft+3)& (0+255),c
  7715  011C06  501E               	movf	??___lltoft,w,c
  7716  011C08  101F               	iorwf	??___lltoft+1,w,c
  7717  011C0A  1020               	iorwf	??___lltoft+2,w,c
  7718  011C0C  1021               	iorwf	??___lltoft+3,w,c
  7719  011C0E  A4D8               	btfss	status,2,c
  7720  011C10  D7E8               	goto	l3724
  7721  011C12  C01A  F012         	movff	___lltoft@c,___ftpack@arg
  7722  011C16  C01B  F013         	movff	___lltoft@c+1,___ftpack@arg+1
  7723  011C1A  C01C  F014         	movff	___lltoft@c+2,___ftpack@arg+2
  7724  011C1E  C022  F015         	movff	___lltoft@exp,___ftpack@exp
  7725  011C22  0E00               	movlw	0
  7726  011C24  6E16               	movwf	___ftpack@sign,c
  7727  011C26  EC02  F08B         	call	___ftpack	;wreg free
  7728  011C2A  C012  F01A         	movff	?___ftpack,?___lltoft
  7729  011C2E  C013  F01B         	movff	?___ftpack+1,?___lltoft+1
  7730  011C32  C014  F01C         	movff	?___ftpack+2,?___lltoft+2
  7731  011C36  0012               	return	
  7732  011C38                     __end_of___lltoft:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           indf0	equ	0xFEF
  7742                           postinc0	equ	0xFEE
  7743                           fsr0h	equ	0xFEA
  7744                           fsr0l	equ	0xFE9
  7745                           wreg	equ	0xFE8
  7746                           indf1	equ	0xFE7
  7747                           postdec1	equ	0xFE5
  7748                           fsr1h	equ	0xFE2
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function ___lbtoft *****************
  7758 ;; Defined at:
  7759 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lbtoft.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  c               1    wreg     unsigned char 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  c               1   28[COMRAM] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  3   25[COMRAM] float 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7773 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7776 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7777 ;;Total ram usage:        4 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    3
  7780 ;; This function calls:
  7781 ;;		___ftpack
  7782 ;; This function is called by:
  7783 ;;		_initSPI
  7784 ;;		_adjustDigipot
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           	psect	text41
  7789  011F08                     __ptext41:
  7790                           	opt stack 0
  7791  011F08                     ___lbtoft:
  7792                           	opt stack 26
  7793                           
  7794                           ;incstack = 0
  7795                           ;___lbtoft@c stored from wreg
  7796  011F08  6E1D               	movwf	___lbtoft@c,c
  7797  011F0A  501D               	movf	___lbtoft@c,w,c
  7798  011F0C  6E12               	movwf	___ftpack@arg,c
  7799  011F0E  6A13               	clrf	___ftpack@arg+1,c
  7800  011F10  6A14               	clrf	___ftpack@arg+2,c
  7801  011F12  0E8E               	movlw	142
  7802  011F14  6E15               	movwf	___ftpack@exp,c
  7803  011F16  0E00               	movlw	0
  7804  011F18  6E16               	movwf	___ftpack@sign,c
  7805  011F1A  EC02  F08B         	call	___ftpack	;wreg free
  7806  011F1E  C012  F01A         	movff	?___ftpack,?___lbtoft
  7807  011F22  C013  F01B         	movff	?___ftpack+1,?___lbtoft+1
  7808  011F26  C014  F01C         	movff	?___ftpack+2,?___lbtoft+2
  7809  011F2A  0012               	return	
  7810  011F2C                     __end_of___lbtoft:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           indf0	equ	0xFEF
  7820                           postinc0	equ	0xFEE
  7821                           fsr0h	equ	0xFEA
  7822                           fsr0l	equ	0xFE9
  7823                           wreg	equ	0xFE8
  7824                           indf1	equ	0xFE7
  7825                           postdec1	equ	0xFE5
  7826                           fsr1h	equ	0xFE2
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function ___ftpack *****************
  7836 ;; Defined at:
  7837 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  arg             3   17[COMRAM] unsigned um
  7840 ;;  exp             1   20[COMRAM] unsigned char 
  7841 ;;  sign            1   21[COMRAM] unsigned char 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  3   17[COMRAM] float 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7853 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7855 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7856 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7857 ;;Total ram usage:        8 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    2
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		___altoft
  7864 ;;		___awtoft
  7865 ;;		___ftadd
  7866 ;;		___ftdiv
  7867 ;;		___ftmul
  7868 ;;		___lbtoft
  7869 ;;		___lltoft
  7870 ;;		___lwtoft
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text42
  7875  011604                     __ptext42:
  7876                           	opt stack 0
  7877  011604                     ___ftpack:
  7878                           	opt stack 25
  7879                           
  7880                           ;incstack = 0
  7881  011604  5015               	movf	___ftpack@exp,w,c
  7882  011606  B4D8               	btfsc	status,2,c
  7883  011608  D005               	goto	l3330
  7884  01160A  5012               	movf	___ftpack@arg,w,c
  7885  01160C  1013               	iorwf	___ftpack@arg+1,w,c
  7886  01160E  1014               	iorwf	___ftpack@arg+2,w,c
  7887  011610  A4D8               	btfss	status,2,c
  7888  011612  D00C               	goto	l3336
  7889  011614                     l3330:
  7890  011614  0E00               	movlw	0
  7891  011616  6E12               	movwf	?___ftpack,c
  7892  011618  0E00               	movlw	0
  7893  01161A  6E13               	movwf	?___ftpack+1,c
  7894  01161C  0E00               	movlw	0
  7895  01161E  6E14               	movwf	?___ftpack+2,c
  7896  011620  0012               	return	
  7897  011622                     l3334:
  7898  011622  2A15               	incf	___ftpack@exp,f,c
  7899  011624  90D8               	bcf	status,0,c
  7900  011626  3214               	rrcf	___ftpack@arg+2,f,c
  7901  011628  3213               	rrcf	___ftpack@arg+1,f,c
  7902  01162A  3212               	rrcf	___ftpack@arg,f,c
  7903  01162C                     l3336:
  7904  01162C  0E00               	movlw	0
  7905  01162E  1412               	andwf	___ftpack@arg,w,c
  7906  011630  6E17               	movwf	??___ftpack& (0+255),c
  7907  011632  0E00               	movlw	0
  7908  011634  1413               	andwf	___ftpack@arg+1,w,c
  7909  011636  6E18               	movwf	(??___ftpack+1)& (0+255),c
  7910  011638  0EFE               	movlw	254
  7911  01163A  1414               	andwf	___ftpack@arg+2,w,c
  7912  01163C  6E19               	movwf	(??___ftpack+2)& (0+255),c
  7913  01163E  5017               	movf	??___ftpack,w,c
  7914  011640  1018               	iorwf	??___ftpack+1,w,c
  7915  011642  1019               	iorwf	??___ftpack+2,w,c
  7916  011644  B4D8               	btfsc	status,2,c
  7917  011646  D00C               	goto	l3342
  7918  011648  D7EC               	goto	l3334
  7919  01164A                     l3338:
  7920  01164A  2A15               	incf	___ftpack@exp,f,c
  7921  01164C  0E01               	movlw	1
  7922  01164E  2612               	addwf	___ftpack@arg,f,c
  7923  011650  0E00               	movlw	0
  7924  011652  2213               	addwfc	___ftpack@arg+1,f,c
  7925  011654  0E00               	movlw	0
  7926  011656  2214               	addwfc	___ftpack@arg+2,f,c
  7927  011658  90D8               	bcf	status,0,c
  7928  01165A  3214               	rrcf	___ftpack@arg+2,f,c
  7929  01165C  3213               	rrcf	___ftpack@arg+1,f,c
  7930  01165E  3212               	rrcf	___ftpack@arg,f,c
  7931  011660                     l3342:
  7932  011660  0E00               	movlw	0
  7933  011662  1412               	andwf	___ftpack@arg,w,c
  7934  011664  6E17               	movwf	??___ftpack& (0+255),c
  7935  011666  0E00               	movlw	0
  7936  011668  1413               	andwf	___ftpack@arg+1,w,c
  7937  01166A  6E18               	movwf	(??___ftpack+1)& (0+255),c
  7938  01166C  0EFF               	movlw	255
  7939  01166E  1414               	andwf	___ftpack@arg+2,w,c
  7940  011670  6E19               	movwf	(??___ftpack+2)& (0+255),c
  7941  011672  5017               	movf	??___ftpack,w,c
  7942  011674  1018               	iorwf	??___ftpack+1,w,c
  7943  011676  1019               	iorwf	??___ftpack+2,w,c
  7944  011678  B4D8               	btfsc	status,2,c
  7945  01167A  D006               	goto	l3346
  7946  01167C  D7E6               	goto	l3338
  7947  01167E                     l3344:
  7948  01167E  0615               	decf	___ftpack@exp,f,c
  7949  011680  90D8               	bcf	status,0,c
  7950  011682  3612               	rlcf	___ftpack@arg,f,c
  7951  011684  3613               	rlcf	___ftpack@arg+1,f,c
  7952  011686  3614               	rlcf	___ftpack@arg+2,f,c
  7953  011688                     l3346:
  7954  011688  BE13               	btfsc	___ftpack@arg+1,7,c
  7955  01168A  D003               	goto	l722
  7956  01168C  0E02               	movlw	2
  7957  01168E  6015               	cpfslt	___ftpack@exp,c
  7958  011690  D7F6               	goto	l3344
  7959  011692                     l722:
  7960  011692  A015               	btfss	___ftpack@exp,0,c
  7961  011694  9E13               	bcf	___ftpack@arg+1,7,c
  7962  011696  90D8               	bcf	status,0,c
  7963  011698  3215               	rrcf	___ftpack@exp,f,c
  7964  01169A  5015               	movf	___ftpack@exp,w,c
  7965  01169C  1214               	iorwf	___ftpack@arg+2,f,c
  7966  01169E  5016               	movf	___ftpack@sign,w,c
  7967  0116A0  A4D8               	btfss	status,2,c
  7968  0116A2  8E14               	bsf	___ftpack@arg+2,7,c
  7969  0116A4  C012  F012         	movff	___ftpack@arg,?___ftpack
  7970  0116A8  C013  F013         	movff	___ftpack@arg+1,?___ftpack+1
  7971  0116AC  C014  F014         	movff	___ftpack@arg+2,?___ftpack+2
  7972  0116B0  0012               	return	
  7973  0116B2                     __end_of___ftpack:
  7974                           	opt stack 0
  7975                           tblptru	equ	0xFF8
  7976                           tblptrh	equ	0xFF7
  7977                           tblptrl	equ	0xFF6
  7978                           tablat	equ	0xFF5
  7979                           prodh	equ	0xFF4
  7980                           prodl	equ	0xFF3
  7981                           intcon	equ	0xFF2
  7982                           indf0	equ	0xFEF
  7983                           postinc0	equ	0xFEE
  7984                           fsr0h	equ	0xFEA
  7985                           fsr0l	equ	0xFE9
  7986                           wreg	equ	0xFE8
  7987                           indf1	equ	0xFE7
  7988                           postdec1	equ	0xFE5
  7989                           fsr1h	equ	0xFE2
  7990                           fsr1l	equ	0xFE1
  7991                           indf2	equ	0xFDF
  7992                           postinc2	equ	0xFDE
  7993                           postdec2	equ	0xFDD
  7994                           fsr2h	equ	0xFDA
  7995                           fsr2l	equ	0xFD9
  7996                           status	equ	0xFD8
  7997                           
  7998 ;; *************** function _UARTReceive *****************
  7999 ;; Defined at:
  8000 ;;		line 54 in file "uart.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;  on_or_off       1    wreg     unsigned char 
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  on_or_off       1   17[COMRAM] unsigned char 
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      void 
  8007 ;; Registers used:
  8008 ;;		wreg, status,2, status,0
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8018 ;;Total ram usage:        1 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:    2
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		_main
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text43
  8029  011F82                     __ptext43:
  8030                           	opt stack 0
  8031  011F82                     _UARTReceive:
  8032                           	opt stack 28
  8033                           
  8034                           ;incstack = 0
  8035                           ;UARTReceive@on_or_off stored from wreg
  8036  011F82  6E12               	movwf	UARTReceive@on_or_off,c
  8037                           
  8038                           ;uart.c: 55: if(on_or_off == 1){
  8039  011F84  0412               	decf	UARTReceive@on_or_off,w,c
  8040  011F86  A4D8               	btfss	status,2,c
  8041  011F88  D002               	goto	l146
  8042                           
  8043                           ;uart.c: 56: RCSTA1bits.CREN = 1;
  8044  011F8A  88AC               	bsf	4012,4,c	;volatile
  8045                           
  8046                           ;uart.c: 57: }
  8047  011F8C  0012               	return	
  8048  011F8E                     l146:
  8049                           
  8050                           ;uart.c: 58: else{
  8051                           ;uart.c: 59: RCSTA1bits.CREN = 0;
  8052  011F8E  98AC               	bcf	4012,4,c	;volatile
  8053  011F90  0012               	return	
  8054  011F92                     __end_of_UARTReceive:
  8055                           	opt stack 0
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           intcon	equ	0xFF2
  8063                           indf0	equ	0xFEF
  8064                           postinc0	equ	0xFEE
  8065                           fsr0h	equ	0xFEA
  8066                           fsr0l	equ	0xFE9
  8067                           wreg	equ	0xFE8
  8068                           indf1	equ	0xFE7
  8069                           postdec1	equ	0xFE5
  8070                           fsr1h	equ	0xFE2
  8071                           fsr1l	equ	0xFE1
  8072                           indf2	equ	0xFDF
  8073                           postinc2	equ	0xFDE
  8074                           postdec2	equ	0xFDD
  8075                           fsr2h	equ	0xFDA
  8076                           fsr2l	equ	0xFD9
  8077                           status	equ	0xFD8
  8078                           
  8079 ;; *************** function _high_ISR *****************
  8080 ;; Defined at:
  8081 ;;		line 64 in file "main.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8097 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8098 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8099 ;;Total ram usage:       14 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    1
  8102 ;; This function calls:
  8103 ;;		_frequency_interrupt
  8104 ;;		_temperature_interrupt
  8105 ;;		_uart_interrupt
  8106 ;; This function is called by:
  8107 ;;		Interrupt level 2
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	intcode
  8112  000008                     __pintcode:
  8113                           	opt stack 0
  8114  000008                     _high_ISR:
  8115                           	opt stack 22
  8116                           
  8117                           ;incstack = 0
  8118  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8119  00000A  CFFA F004          	movff	pclath,??_high_ISR
  8120  00000E  CFFB F005          	movff	pclatu,??_high_ISR+1
  8121  000012  CFE9 F006          	movff	fsr0l,??_high_ISR+2
  8122  000016  CFEA F007          	movff	fsr0h,??_high_ISR+3
  8123  00001A  CFE1 F008          	movff	fsr1l,??_high_ISR+4
  8124  00001E  CFE2 F009          	movff	fsr1h,??_high_ISR+5
  8125  000022  CFD9 F00A          	movff	fsr2l,??_high_ISR+6
  8126  000026  CFDA F00B          	movff	fsr2h,??_high_ISR+7
  8127  00002A  CFF3 F00C          	movff	prodl,??_high_ISR+8
  8128  00002E  CFF4 F00D          	movff	prodh,??_high_ISR+9
  8129  000032  CFF6 F00E          	movff	tblptrl,??_high_ISR+10
  8130  000036  CFF7 F00F          	movff	tblptrh,??_high_ISR+11
  8131  00003A  CFF8 F010          	movff	tblptru,??_high_ISR+12
  8132  00003E  CFF5 F011          	movff	tablat,??_high_ISR+13
  8133                           
  8134                           ;main.c: 65: temperature_interrupt();
  8135  000042  ECAD  F08B         	call	_temperature_interrupt	;wreg free
  8136                           
  8137                           ;main.c: 66: uart_interrupt();
  8138  000046  EC0B  F08F         	call	_uart_interrupt	;wreg free
  8139                           
  8140                           ;main.c: 67: frequency_interrupt();
  8141  00004A  EC71  F087         	call	_frequency_interrupt	;wreg free
  8142  00004E  C011  FFF5         	movff	??_high_ISR+13,tablat
  8143  000052  C010  FFF8         	movff	??_high_ISR+12,tblptru
  8144  000056  C00F  FFF7         	movff	??_high_ISR+11,tblptrh
  8145  00005A  C00E  FFF6         	movff	??_high_ISR+10,tblptrl
  8146  00005E  C00D  FFF4         	movff	??_high_ISR+9,prodh
  8147  000062  C00C  FFF3         	movff	??_high_ISR+8,prodl
  8148  000066  C00B  FFDA         	movff	??_high_ISR+7,fsr2h
  8149  00006A  C00A  FFD9         	movff	??_high_ISR+6,fsr2l
  8150  00006E  C009  FFE2         	movff	??_high_ISR+5,fsr1h
  8151  000072  C008  FFE1         	movff	??_high_ISR+4,fsr1l
  8152  000076  C007  FFEA         	movff	??_high_ISR+3,fsr0h
  8153  00007A  C006  FFE9         	movff	??_high_ISR+2,fsr0l
  8154  00007E  C005  FFFB         	movff	??_high_ISR+1,pclatu
  8155  000082  C004  FFFA         	movff	??_high_ISR,pclath
  8156  000086  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8157  000088  0011               	retfie		f
  8158  00008A                     __end_of_high_ISR:
  8159                           	opt stack 0
  8160                           pclatu	equ	0xFFB
  8161                           pclath	equ	0xFFA
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           indf0	equ	0xFEF
  8170                           postinc0	equ	0xFEE
  8171                           fsr0h	equ	0xFEA
  8172                           fsr0l	equ	0xFE9
  8173                           wreg	equ	0xFE8
  8174                           indf1	equ	0xFE7
  8175                           postdec1	equ	0xFE5
  8176                           fsr1h	equ	0xFE2
  8177                           fsr1l	equ	0xFE1
  8178                           indf2	equ	0xFDF
  8179                           postinc2	equ	0xFDE
  8180                           postdec2	equ	0xFDD
  8181                           fsr2h	equ	0xFDA
  8182                           fsr2l	equ	0xFD9
  8183                           status	equ	0xFD8
  8184                           
  8185 ;; *************** function _uart_interrupt *****************
  8186 ;; Defined at:
  8187 ;;		line 103 in file "uart.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;		None
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;		None
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8205 ;;Total ram usage:        0 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; This function calls:
  8208 ;;		Nothing
  8209 ;; This function is called by:
  8210 ;;		_high_ISR
  8211 ;; This function uses a non-reentrant model
  8212 ;;
  8213                           
  8214                           	psect	text45
  8215  011E16                     __ptext45:
  8216                           	opt stack 0
  8217  011E16                     _uart_interrupt:
  8218                           	opt stack 22
  8219                           
  8220                           ;uart.c: 105: if(PIR1bits.RC1IF == 1){
  8221                           
  8222                           ;incstack = 0
  8223  011E16  AA9E               	btfss	3998,5,c	;volatile
  8224  011E18  0012               	return	
  8225                           
  8226                           ;uart.c: 106: PIR1bits.RC1IF = 0;
  8227  011E1A  9A9E               	bcf	3998,5,c	;volatile
  8228                           
  8229                           ;uart.c: 108: uart_receive_buffer[uart_receive_buffer_index] = RCREG1;
  8230  011E1C  0E00               	movlw	low _uart_receive_buffer
  8231  011E1E  244C               	addwf	_uart_receive_buffer_index,w,c
  8232  011E20  6ED9               	movwf	fsr2l,c
  8233  011E22  0E01               	movlw	high _uart_receive_buffer
  8234  011E24  204D               	addwfc	_uart_receive_buffer_index+1,w,c
  8235  011E26  6EDA               	movwf	fsr2h,c
  8236  011E28  CFAF FFDF          	movff	4015,indf2	;volatile
  8237                           
  8238                           ;uart.c: 109: uart_receive_buffer_index += 1;
  8239  011E2C  4A4C               	infsnz	_uart_receive_buffer_index,f,c
  8240  011E2E  2A4D               	incf	_uart_receive_buffer_index+1,f,c
  8241                           
  8242                           ;uart.c: 113: if(uart_receive_buffer_index > 100){
  8243  011E30  504D               	movf	_uart_receive_buffer_index+1,w,c
  8244  011E32  E104               	bnz	i2u270_40
  8245  011E34  0E65               	movlw	101
  8246  011E36  5C4C               	subwf	_uart_receive_buffer_index,w,c
  8247  011E38  A0D8               	btfss	status,0,c
  8248  011E3A  0012               	return	
  8249  011E3C                     i2u270_40:
  8250                           
  8251                           ;uart.c: 114: uart_receive_buffer_index = 0;
  8252  011E3C  0E00               	movlw	0
  8253  011E3E  6E4D               	movwf	_uart_receive_buffer_index+1,c
  8254  011E40  0E00               	movlw	0
  8255  011E42  6E4C               	movwf	_uart_receive_buffer_index,c
  8256  011E44  0012               	return	
  8257  011E46                     __end_of_uart_interrupt:
  8258                           	opt stack 0
  8259                           pclatu	equ	0xFFB
  8260                           pclath	equ	0xFFA
  8261                           tblptru	equ	0xFF8
  8262                           tblptrh	equ	0xFF7
  8263                           tblptrl	equ	0xFF6
  8264                           tablat	equ	0xFF5
  8265                           prodh	equ	0xFF4
  8266                           prodl	equ	0xFF3
  8267                           intcon	equ	0xFF2
  8268                           indf0	equ	0xFEF
  8269                           postinc0	equ	0xFEE
  8270                           fsr0h	equ	0xFEA
  8271                           fsr0l	equ	0xFE9
  8272                           wreg	equ	0xFE8
  8273                           indf1	equ	0xFE7
  8274                           postdec1	equ	0xFE5
  8275                           fsr1h	equ	0xFE2
  8276                           fsr1l	equ	0xFE1
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           fsr2h	equ	0xFDA
  8281                           fsr2l	equ	0xFD9
  8282                           status	equ	0xFD8
  8283                           
  8284 ;; *************** function _temperature_interrupt *****************
  8285 ;; Defined at:
  8286 ;;		line 113 in file "temperature.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;		None
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;		None
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      void 
  8293 ;; Registers used:
  8294 ;;		wreg, status,2, status,0
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8302 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8303 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;Total ram usage:        2 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_high_ISR
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	text46
  8314  01175A                     __ptext46:
  8315                           	opt stack 0
  8316  01175A                     _temperature_interrupt:
  8317                           	opt stack 22
  8318                           
  8319                           ;temperature.c: 115: if(PIR1bits.ADIF == 1)
  8320                           
  8321                           ;incstack = 0
  8322  01175A  AC9E               	btfss	3998,6,c	;volatile
  8323  01175C  0012               	return	
  8324                           
  8325                           ;temperature.c: 116: {
  8326                           ;temperature.c: 117: PIR1bits.ADIF = 0;
  8327  01175E  9C9E               	bcf	3998,6,c	;volatile
  8328                           
  8329                           ;temperature.c: 118: switch(currentChannel){
  8330  011760  D035               	goto	i2l3170
  8331  011762                     i2l247:
  8332                           
  8333                           ;temperature.c: 120: plus_pipe = ADRES;
  8334  011762  CFC3 F0E9          	movff	4035,_plus_pipe	;volatile
  8335  011766  CFC4 F0EA          	movff	4036,_plus_pipe+1	;volatile
  8336                           
  8337                           ;temperature.c: 121: ADCON0bits.CHS = 0b1000;
  8338  01176A  50C2               	movf	4034,w,c	;volatile
  8339  01176C  0BC3               	andlw	-61
  8340  01176E  0920               	iorlw	32
  8341  011770  6EC2               	movwf	4034,c	;volatile
  8342                           
  8343                           ;temperature.c: 122: currentChannel = 1;
  8344  011772  0E00               	movlw	0
  8345  011774  0100               	movlb	0	; () banked
  8346  011776  6FE0               	movwf	(_currentChannel+1)& (0+255),b
  8347  011778  0E01               	movlw	1
  8348  01177A  D026               	goto	L6
  8349  01177C                     i2l249:
  8350                           
  8351                           ;temperature.c: 125: minus_pipe = ADRES;
  8352  01177C  CFC3 F0E5          	movff	4035,_minus_pipe	;volatile
  8353  011780  CFC4 F0E6          	movff	4036,_minus_pipe+1	;volatile
  8354                           
  8355                           ;temperature.c: 126: ADCON0bits.CHS = 0b0001;
  8356  011784  50C2               	movf	4034,w,c	;volatile
  8357  011786  0BC3               	andlw	-61
  8358  011788  0904               	iorlw	4
  8359  01178A  6EC2               	movwf	4034,c	;volatile
  8360                           
  8361                           ;temperature.c: 127: currentChannel = 2;
  8362  01178C  0E00               	movlw	0
  8363  01178E  0100               	movlb	0	; () banked
  8364  011790  6FE0               	movwf	(_currentChannel+1)& (0+255),b
  8365  011792  0E02               	movlw	2
  8366  011794  D019               	goto	L6
  8367  011796                     i2l250:
  8368                           
  8369                           ;temperature.c: 130: plus_ambient = ADRES;
  8370  011796  CFC3 F0E7          	movff	4035,_plus_ambient	;volatile
  8371  01179A  CFC4 F0E8          	movff	4036,_plus_ambient+1	;volatile
  8372                           
  8373                           ;temperature.c: 131: ADCON0bits.CHS = 0b0000;
  8374  01179E  94C2               	bcf	4034,2,c	;volatile
  8375  0117A0  96C2               	bcf	4034,3,c	;volatile
  8376  0117A2  98C2               	bcf	4034,4,c	;volatile
  8377  0117A4  9AC2               	bcf	4034,5,c	;volatile
  8378                           
  8379                           ;temperature.c: 132: currentChannel = 3;
  8380  0117A6  0E00               	movlw	0
  8381  0117A8  0100               	movlb	0	; () banked
  8382  0117AA  6FE0               	movwf	(_currentChannel+1)& (0+255),b
  8383  0117AC  0E03               	movlw	3
  8384  0117AE  D00C               	goto	L6
  8385  0117B0                     i2l251:
  8386                           
  8387                           ;temperature.c: 135: minus_ambient = ADRES;
  8388  0117B0  CFC3 F0E3          	movff	4035,_minus_ambient	;volatile
  8389  0117B4  CFC4 F0E4          	movff	4036,_minus_ambient+1	;volatile
  8390                           
  8391                           ;temperature.c: 136: ADCON0bits.CHS = 0b1001;
  8392  0117B8  50C2               	movf	4034,w,c	;volatile
  8393  0117BA  0BC3               	andlw	-61
  8394  0117BC  0924               	iorlw	36
  8395  0117BE  6EC2               	movwf	4034,c	;volatile
  8396                           
  8397                           ;temperature.c: 137: currentChannel = 0;
  8398  0117C0  0E00               	movlw	0
  8399  0117C2  0100               	movlb	0	; () banked
  8400  0117C4  6FE0               	movwf	(_currentChannel+1)& (0+255),b
  8401  0117C6  0E00               	movlw	0
  8402  0117C8                     L6:
  8403  0117C8  6FDF               	movwf	_currentChannel& (0+255),b
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;temperature.c: 139: }
  8407                           
  8408                           ;temperature.c: 138: break;
  8409  0117CA  D015               	goto	i2l248
  8410  0117CC                     i2l3170:
  8411  0117CC  C0DF  F001         	movff	_currentChannel,??_temperature_interrupt
  8412  0117D0  C0E0  F002         	movff	_currentChannel+1,??_temperature_interrupt+1
  8413                           
  8414                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8415                           ; Switch size 1, requested type "space"
  8416                           ; Number of cases is 1, Range of values is 0 to 0
  8417                           ; switch strategies available:
  8418                           ; Name         Instructions Cycles
  8419                           ; simple_byte            4     3 (average)
  8420                           ;	Chosen strategy is simple_byte
  8421  0117D4  5002               	movf	??_temperature_interrupt+1,w,c
  8422  0117D6  0A00               	xorlw	0	; case 0
  8423  0117D8  A4D8               	btfss	status,2,c
  8424  0117DA  D00D               	goto	i2l248
  8425                           
  8426                           ; Switch size 1, requested type "space"
  8427                           ; Number of cases is 4, Range of values is 0 to 3
  8428                           ; switch strategies available:
  8429                           ; Name         Instructions Cycles
  8430                           ; simple_byte           13     7 (average)
  8431                           ;	Chosen strategy is simple_byte
  8432  0117DC  5001               	movf	??_temperature_interrupt,w,c
  8433  0117DE  0A00               	xorlw	0	; case 0
  8434  0117E0  B4D8               	btfsc	status,2,c
  8435  0117E2  D7BF               	goto	i2l247
  8436  0117E4  0A01               	xorlw	1	; case 1
  8437  0117E6  B4D8               	btfsc	status,2,c
  8438  0117E8  D7C9               	goto	i2l249
  8439  0117EA  0A03               	xorlw	3	; case 2
  8440  0117EC  B4D8               	btfsc	status,2,c
  8441  0117EE  D7D3               	goto	i2l250
  8442  0117F0  0A01               	xorlw	1	; case 3
  8443  0117F2  B4D8               	btfsc	status,2,c
  8444  0117F4  D7DD               	goto	i2l251
  8445  0117F6                     i2l248:
  8446                           
  8447                           ;temperature.c: 140: ADCON0bits.GO_DONE = 1;
  8448  0117F6  82C2               	bsf	4034,1,c	;volatile
  8449  0117F8  0012               	return	
  8450  0117FA                     __end_of_temperature_interrupt:
  8451                           	opt stack 0
  8452                           pclatu	equ	0xFFB
  8453                           pclath	equ	0xFFA
  8454                           tblptru	equ	0xFF8
  8455                           tblptrh	equ	0xFF7
  8456                           tblptrl	equ	0xFF6
  8457                           tablat	equ	0xFF5
  8458                           prodh	equ	0xFF4
  8459                           prodl	equ	0xFF3
  8460                           intcon	equ	0xFF2
  8461                           indf0	equ	0xFEF
  8462                           postinc0	equ	0xFEE
  8463                           fsr0h	equ	0xFEA
  8464                           fsr0l	equ	0xFE9
  8465                           wreg	equ	0xFE8
  8466                           indf1	equ	0xFE7
  8467                           postdec1	equ	0xFE5
  8468                           fsr1h	equ	0xFE2
  8469                           fsr1l	equ	0xFE1
  8470                           indf2	equ	0xFDF
  8471                           postinc2	equ	0xFDE
  8472                           postdec2	equ	0xFDD
  8473                           fsr2h	equ	0xFDA
  8474                           fsr2l	equ	0xFD9
  8475                           status	equ	0xFD8
  8476                           
  8477 ;; *************** function _frequency_interrupt *****************
  8478 ;; Defined at:
  8479 ;;		line 43 in file "frequency.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;		None
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;		None
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  1    wreg      void 
  8486 ;; Registers used:
  8487 ;;		wreg, status,2, status,0
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8495 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8496 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8497 ;;Total ram usage:        3 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_high_ISR
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           	psect	text47
  8507  010EE2                     __ptext47:
  8508                           	opt stack 0
  8509  010EE2                     _frequency_interrupt:
  8510                           	opt stack 22
  8511                           
  8512                           ;frequency.c: 45: if(PIR4bits.CCP8IF == 1)
  8513                           
  8514                           ;incstack = 0
  8515  010EE2  AA8F               	btfss	3983,5,c	;volatile
  8516  010EE4  D040               	goto	i2l3198
  8517                           
  8518                           ;frequency.c: 46: {
  8519                           ;frequency.c: 48: ind_measurement1 = ind_measurement2;
  8520  010EE6  C046  F044         	movff	_ind_measurement2,_ind_measurement1
  8521  010EEA  C047  F045         	movff	_ind_measurement2+1,_ind_measurement1+1
  8522                           
  8523                           ;frequency.c: 49: ind_measurement2 = CCPR8L + 256*CCPR8H;
  8524  010EEE  010F               	movlb	15	; () banked
  8525  010EF0  5108               	movf	8,w,b	;volatile
  8526  010EF2  6E02               	movwf	(??_frequency_interrupt+1)& (0+255),c
  8527  010EF4  6A01               	clrf	??_frequency_interrupt& (0+255),c
  8528  010EF6  010F               	movlb	15	; () banked
  8529  010EF8  5107               	movf	7,w,b	;volatile
  8530  010EFA  2401               	addwf	??_frequency_interrupt,w,c
  8531  010EFC  6E46               	movwf	_ind_measurement2,c
  8532  010EFE  0E00               	movlw	0
  8533  010F00  2002               	addwfc	??_frequency_interrupt+1,w,c
  8534  010F02  6E47               	movwf	_ind_measurement2+1,c
  8535                           
  8536                           ;frequency.c: 50: if((ind_measurement2 - ind_measurement1)/16 < 1600){
  8537  010F04  C044  F001         	movff	_ind_measurement1,??_frequency_interrupt
  8538  010F08  C045  F002         	movff	_ind_measurement1+1,??_frequency_interrupt+1
  8539  010F0C  1E01               	comf	??_frequency_interrupt,f,c
  8540  010F0E  1E02               	comf	??_frequency_interrupt+1,f,c
  8541  010F10  4A01               	infsnz	??_frequency_interrupt,f,c
  8542  010F12  2A02               	incf	??_frequency_interrupt+1,f,c
  8543  010F14  5046               	movf	_ind_measurement2,w,c
  8544  010F16  2601               	addwf	??_frequency_interrupt,f,c
  8545  010F18  5047               	movf	_ind_measurement2+1,w,c
  8546  010F1A  2202               	addwfc	??_frequency_interrupt+1,f,c
  8547  010F1C  0E04               	movlw	4
  8548  010F1E  6E03               	movwf	(??_frequency_interrupt+2)& (0+255),c
  8549  010F20                     i2u272_45:
  8550  010F20  90D8               	bcf	status,0,c
  8551  010F22  3202               	rrcf	??_frequency_interrupt+1,f,c
  8552  010F24  3201               	rrcf	??_frequency_interrupt,f,c
  8553  010F26  2E03               	decfsz	(??_frequency_interrupt+2)& (0+255),f,c
  8554  010F28  D7FB               	goto	i2u272_45
  8555  010F2A  0E40               	movlw	64
  8556  010F2C  5C01               	subwf	??_frequency_interrupt,w,c
  8557  010F2E  0E06               	movlw	6
  8558  010F30  5802               	subwfb	??_frequency_interrupt+1,w,c
  8559  010F32  B0D8               	btfsc	status,0,c
  8560  010F34  D017               	goto	i2l3196
  8561                           
  8562                           ; BSR set to: 15
  8563                           ;frequency.c: 51: ind_value = (ind_measurement2 - ind_measurement1)/16;
  8564  010F36  C044  F001         	movff	_ind_measurement1,??_frequency_interrupt
  8565  010F3A  C045  F002         	movff	_ind_measurement1+1,??_frequency_interrupt+1
  8566  010F3E  1E01               	comf	??_frequency_interrupt,f,c
  8567  010F40  1E02               	comf	??_frequency_interrupt+1,f,c
  8568  010F42  4A01               	infsnz	??_frequency_interrupt,f,c
  8569  010F44  2A02               	incf	??_frequency_interrupt+1,f,c
  8570  010F46  5046               	movf	_ind_measurement2,w,c
  8571  010F48  2601               	addwf	??_frequency_interrupt,f,c
  8572  010F4A  5047               	movf	_ind_measurement2+1,w,c
  8573  010F4C  2202               	addwfc	??_frequency_interrupt+1,f,c
  8574  010F4E  0E04               	movlw	4
  8575  010F50  6E03               	movwf	(??_frequency_interrupt+2)& (0+255),c
  8576  010F52                     i2u274_45:
  8577  010F52  90D8               	bcf	status,0,c
  8578  010F54  3202               	rrcf	??_frequency_interrupt+1,f,c
  8579  010F56  3201               	rrcf	??_frequency_interrupt,f,c
  8580  010F58  2E03               	decfsz	(??_frequency_interrupt+2)& (0+255),f,c
  8581  010F5A  D7FB               	goto	i2u274_45
  8582  010F5C  C001  F048         	movff	??_frequency_interrupt,_ind_value
  8583  010F60  C002  F049         	movff	??_frequency_interrupt+1,_ind_value+1
  8584  010F64                     i2l3196:
  8585                           
  8586                           ; BSR set to: 15
  8587                           ;frequency.c: 52: }
  8588                           ;frequency.c: 57: PIR4bits.CCP8IF=0;
  8589  010F64  9A8F               	bcf	3983,5,c	;volatile
  8590  010F66                     i2l3198:
  8591                           
  8592                           ;frequency.c: 58: }
  8593                           ;frequency.c: 59: if(PIR4bits.CCP7IF == 1)
  8594  010F66  A88F               	btfss	3983,4,c	;volatile
  8595  010F68  0012               	return	
  8596                           
  8597                           ;frequency.c: 60: {
  8598                           ;frequency.c: 62: cap_measurement1 = cap_measurement2;
  8599  010F6A  C03E  F0DD         	movff	_cap_measurement2,_cap_measurement1
  8600  010F6E  C03F  F0DE         	movff	_cap_measurement2+1,_cap_measurement1+1
  8601                           
  8602                           ;frequency.c: 63: cap_measurement2 = CCPR7L + 256*CCPR7H;
  8603  010F72  010F               	movlb	15	; () banked
  8604  010F74  510B               	movf	11,w,b	;volatile
  8605  010F76  6E02               	movwf	(??_frequency_interrupt+1)& (0+255),c
  8606  010F78  6A01               	clrf	??_frequency_interrupt& (0+255),c
  8607  010F7A  010F               	movlb	15	; () banked
  8608  010F7C  510A               	movf	10,w,b	;volatile
  8609  010F7E  2401               	addwf	??_frequency_interrupt,w,c
  8610  010F80  6E3E               	movwf	_cap_measurement2,c
  8611  010F82  0E00               	movlw	0
  8612  010F84  2002               	addwfc	??_frequency_interrupt+1,w,c
  8613  010F86  6E3F               	movwf	_cap_measurement2+1,c
  8614                           
  8615                           ;frequency.c: 64: if((cap_measurement2 - cap_measurement1)/16 < 1600){
  8616  010F88  C0DD  F001         	movff	_cap_measurement1,??_frequency_interrupt
  8617  010F8C  C0DE  F002         	movff	_cap_measurement1+1,??_frequency_interrupt+1
  8618  010F90  1E01               	comf	??_frequency_interrupt,f,c
  8619  010F92  1E02               	comf	??_frequency_interrupt+1,f,c
  8620  010F94  4A01               	infsnz	??_frequency_interrupt,f,c
  8621  010F96  2A02               	incf	??_frequency_interrupt+1,f,c
  8622  010F98  503E               	movf	_cap_measurement2,w,c
  8623  010F9A  2601               	addwf	??_frequency_interrupt,f,c
  8624  010F9C  503F               	movf	_cap_measurement2+1,w,c
  8625  010F9E  2202               	addwfc	??_frequency_interrupt+1,f,c
  8626  010FA0  0E04               	movlw	4
  8627  010FA2  6E03               	movwf	(??_frequency_interrupt+2)& (0+255),c
  8628  010FA4                     i2u276_45:
  8629  010FA4  90D8               	bcf	status,0,c
  8630  010FA6  3202               	rrcf	??_frequency_interrupt+1,f,c
  8631  010FA8  3201               	rrcf	??_frequency_interrupt,f,c
  8632  010FAA  2E03               	decfsz	(??_frequency_interrupt+2)& (0+255),f,c
  8633  010FAC  D7FB               	goto	i2u276_45
  8634  010FAE  0E40               	movlw	64
  8635  010FB0  5C01               	subwf	??_frequency_interrupt,w,c
  8636  010FB2  0E06               	movlw	6
  8637  010FB4  5802               	subwfb	??_frequency_interrupt+1,w,c
  8638  010FB6  B0D8               	btfsc	status,0,c
  8639  010FB8  D017               	goto	i2l3206
  8640                           
  8641                           ; BSR set to: 15
  8642                           ;frequency.c: 65: cap_value = (cap_measurement2 - cap_measurement1)/16;
  8643  010FBA  C0DD  F001         	movff	_cap_measurement1,??_frequency_interrupt
  8644  010FBE  C0DE  F002         	movff	_cap_measurement1+1,??_frequency_interrupt+1
  8645  010FC2  1E01               	comf	??_frequency_interrupt,f,c
  8646  010FC4  1E02               	comf	??_frequency_interrupt+1,f,c
  8647  010FC6  4A01               	infsnz	??_frequency_interrupt,f,c
  8648  010FC8  2A02               	incf	??_frequency_interrupt+1,f,c
  8649  010FCA  503E               	movf	_cap_measurement2,w,c
  8650  010FCC  2601               	addwf	??_frequency_interrupt,f,c
  8651  010FCE  503F               	movf	_cap_measurement2+1,w,c
  8652  010FD0  2202               	addwfc	??_frequency_interrupt+1,f,c
  8653  010FD2  0E04               	movlw	4
  8654  010FD4  6E03               	movwf	(??_frequency_interrupt+2)& (0+255),c
  8655  010FD6                     i2u278_45:
  8656  010FD6  90D8               	bcf	status,0,c
  8657  010FD8  3202               	rrcf	??_frequency_interrupt+1,f,c
  8658  010FDA  3201               	rrcf	??_frequency_interrupt,f,c
  8659  010FDC  2E03               	decfsz	(??_frequency_interrupt+2)& (0+255),f,c
  8660  010FDE  D7FB               	goto	i2u278_45
  8661  010FE0  C001  F040         	movff	??_frequency_interrupt,_cap_value
  8662  010FE4  C002  F041         	movff	??_frequency_interrupt+1,_cap_value+1
  8663  010FE8                     i2l3206:
  8664                           
  8665                           ; BSR set to: 15
  8666                           ;frequency.c: 66: }
  8667                           ;frequency.c: 71: PIR4bits.CCP7IF=0;
  8668  010FE8  988F               	bcf	3983,4,c	;volatile
  8669  010FEA  0012               	return	
  8670  010FEC                     __end_of_frequency_interrupt:
  8671                           	opt stack 0
  8672                           pclatu	equ	0xFFB
  8673                           pclath	equ	0xFFA
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           intcon	equ	0xFF2
  8681                           indf0	equ	0xFEF
  8682                           postinc0	equ	0xFEE
  8683                           fsr0h	equ	0xFEA
  8684                           fsr0l	equ	0xFE9
  8685                           wreg	equ	0xFE8
  8686                           indf1	equ	0xFE7
  8687                           postdec1	equ	0xFE5
  8688                           fsr1h	equ	0xFE2
  8689                           fsr1l	equ	0xFE1
  8690                           indf2	equ	0xFDF
  8691                           postinc2	equ	0xFDE
  8692                           postdec2	equ	0xFDD
  8693                           fsr2h	equ	0xFDA
  8694                           fsr2l	equ	0xFD9
  8695                           status	equ	0xFD8
  8696                           pclatu	equ	0xFFB
  8697                           pclath	equ	0xFFA
  8698                           tblptru	equ	0xFF8
  8699                           tblptrh	equ	0xFF7
  8700                           tblptrl	equ	0xFF6
  8701                           tablat	equ	0xFF5
  8702                           prodh	equ	0xFF4
  8703                           prodl	equ	0xFF3
  8704                           intcon	equ	0xFF2
  8705                           indf0	equ	0xFEF
  8706                           postinc0	equ	0xFEE
  8707                           fsr0h	equ	0xFEA
  8708                           fsr0l	equ	0xFE9
  8709                           wreg	equ	0xFE8
  8710                           indf1	equ	0xFE7
  8711                           postdec1	equ	0xFE5
  8712                           fsr1h	equ	0xFE2
  8713                           fsr1l	equ	0xFE1
  8714                           indf2	equ	0xFDF
  8715                           postinc2	equ	0xFDE
  8716                           postdec2	equ	0xFDD
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           
  8721                           	psect	rparam
  8722  0000                     pclatu	equ	0xFFB
  8723                           pclath	equ	0xFFA
  8724                           tblptru	equ	0xFF8
  8725                           tblptrh	equ	0xFF7
  8726                           tblptrl	equ	0xFF6
  8727                           tablat	equ	0xFF5
  8728                           prodh	equ	0xFF4
  8729                           prodl	equ	0xFF3
  8730                           intcon	equ	0xFF2
  8731                           indf0	equ	0xFEF
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           indf1	equ	0xFE7
  8737                           postdec1	equ	0xFE5
  8738                           fsr1h	equ	0xFE2
  8739                           fsr1l	equ	0xFE1
  8740                           indf2	equ	0xFDF
  8741                           postinc2	equ	0xFDE
  8742                           postdec2	equ	0xFDD
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747                           	psect	temp
  8748  00004E                     btemp:
  8749                           	opt stack 0
  8750  00004E                     	ds	1
  8751  0000                     int$flags	set	btemp
  8752                           pclatu	equ	0xFFB
  8753                           pclath	equ	0xFFA
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           indf0	equ	0xFEF
  8762                           postinc0	equ	0xFEE
  8763                           fsr0h	equ	0xFEA
  8764                           fsr0l	equ	0xFE9
  8765                           wreg	equ	0xFE8
  8766                           indf1	equ	0xFE7
  8767                           postdec1	equ	0xFE5
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    241
    Data        99
    BSS         181
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      77
    BANK0           160     57     159
    BANK1           256     11     178
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    sendUARTMessage@newMessagePointer	PTR unsigned char  size(2) Largest target is 200
		 -> sendData@message(BANK1[200]), join_network(CODE[16]), set_app_key(CODE[50]), set_app_eui(CODE[34]), 
		 -> set_dev_eui(CODE[34]), temp_display_message(BANK0[20]), cap_frequency_message(BANK1[37]), ind_frequency_message(BANK0[36]), 

    currentMessagePointer	PTR unsigned char  size(2) Largest target is 200
		 -> NULL(NULL[0]), sendData@message(BANK1[200]), join_network(CODE[16]), set_app_key(CODE[50]), 
		 -> set_app_eui(CODE[34]), set_dev_eui(CODE[34]), temp_display_message(BANK0[20]), cap_frequency_message(BANK1[37]), 
		 -> ind_frequency_message(BANK0[36]), 


Critical Paths under _main in COMRAM

    _make_frequency_message->___lwdiv
    ___lwdiv->___lwmod
    _makeTempMessage->_calculateTemp
    _fillInTemp->___awdiv
    ___awdiv->___awmod
    _calculateTemp->___ftmul
    _initLoRa->_sendUARTMessage
    _sendUARTMessage->_delay_ms
    _checkFrequency->___lwtoft
    ___lwtoft->___ftpack
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___ftge->___ftmul
    _eval_poly->___ftmul
    ___ftmul->___ftdiv
    ___ftadd->___ftmul
    ___ftdiv->___awtoft
    ___ftdiv->___lbtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _high_ISR in COMRAM

    _high_ISR->_frequency_interrupt

Critical Paths under _main in BANK0

    _makeTempMessage->_calculateTemp
    _calculateTemp->___fttol
    _initSPI->_pow
    _adjustDigipot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd

Critical Paths under _high_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_initSPI
    _digipot->_adjustDigipot

Critical Paths under _high_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  242249
                                              9 BANK1      2     2      0
                        _UARTReceive
                             ___wmul
                           _delay_ms
                            _digipot
                            _initADC
                     _initInterrupts
                           _initLoRa
                            _initSPI
                          _initUART1
                     _init_frequency
                    _makeTempMessage
             _make_frequency_message
                    _sendUARTMessage
 ---------------------------------------------------------------------------------
 (1) _make_frequency_message                               0     0      0    2435
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1156
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1279
                                             22 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _makeTempMessage                                      1     1      0   16067
                                             24 BANK0      1     1      0
                      _calculateTemp
                         _fillInTemp
 ---------------------------------------------------------------------------------
 (2) _fillInTemp                                          12    12      0    2079
                                             31 COMRAM    12    12      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     741
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     753
                                             23 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _calculateTemp                                       11     7      4   13957
                                             59 COMRAM     2     2      0
                                             15 BANK0      9     5      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _init_frequency                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUART1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSPI                                              9     9      0  104108
                                              0 BANK1      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                                _pow
                         _remappings
 ---------------------------------------------------------------------------------
 (2) _remappings                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLoRa                                             0     0      0    2554
                           _delay_ms
                    _sendUARTMessage
 ---------------------------------------------------------------------------------
 (1) _sendUARTMessage                                      2     0      2    1639
                                             22 COMRAM     2     0      2
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     915
                                             17 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _digipot                                              0     0      0  113618
                             ___ftge
                            ___ftmul
                      _adjustDigipot
                     _checkFrequency
                           _unselect
 ---------------------------------------------------------------------------------
 (2) _unselect                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkFrequency                                       0     0      0    2812
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2812
                                             25 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _adjustDigipot                                        9     9      0  104108
                                              0 BANK1      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83344
                                             40 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   27194
                                             22 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44769
                                             31 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     513
                                             22 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   10982
                                             23 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     630
                                             17 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     679
                                              0 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6    1122
                                              0 BANK0      9     3      6
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2985
                                             59 COMRAM     2     2      0
                                             15 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   12261
                                             59 COMRAM     2     2      0
                                             12 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     848
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5576
                                             44 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5485
                                             12 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5121
                                              0 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     296
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4008
                                             29 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3222
                                             25 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2883
                                             25 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2735
                                             25 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2704
                                             17 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _UARTReceive                                          1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_ISR                                            14    14      0       0
                                              3 COMRAM    14    14      0
                _frequency_interrupt
              _temperature_interrupt
                     _uart_interrupt
 ---------------------------------------------------------------------------------
 (9) _uart_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _temperature_interrupt                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _frequency_interrupt                                  3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTReceive
   ___wmul
   _delay_ms
   _digipot
     ___ftge
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _frexp (ARG)
     _adjustDigipot
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft
         ___ftpack
       _pow
         ___ftge
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
     _checkFrequency
       ___lwtoft
         ___ftpack
     _unselect
   _initADC
   _initInterrupts
   _initLoRa
     _delay_ms
     _sendUARTMessage
       _delay_ms
   _initSPI
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lbtoft
       ___ftpack
     _pow
       ___ftge
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _exp (ARG)
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftge
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _remappings
   _initUART1
   _init_frequency
   _makeTempMessage
     _calculateTemp
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
     _fillInTemp
       ___awdiv
         ___awmod (ARG)
       ___awmod
   _make_frequency_message
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _sendUARTMessage
     _delay_ms

 _high_ISR (ROOT)
   _frequency_interrupt
   _temperature_interrupt
   _uart_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      B      B2       8       69.5%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     39      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      4D       1       81.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19E       6        0.0%
DATA                 0      0     19E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed Apr 19 11:10:52 2017

                    ___altoft@exp 003C                     ___altoft@sign 003D  
                    ___awdiv@sign 001D               ___wmul@multiplicand 0014  
                    ___ftadd@exp1 00A9                      ___ftadd@exp2 00A8  
                    ___ftadd@sign 00A7                               l152 1A3A  
                             l146 1F8E                               l226 0696  
                             l229 06EA                               l293 1E00  
                             l454 1750                               l722 1692  
                             l802 1EFA                               l900 1CD6  
                             l910 1D64                               l751 00CA  
                             l760 01A0                               l745 0068  
                             l780 1378                               l932 04DE  
                             l749 00A2                               l769 01CA  
                             l937 0636            ?_temperature_interrupt 0001  
                             _exp 0268                               _log 08FE  
                             _pow 0496                      ___awmod@sign 0017  
                             prod 000FF3                               wreg 000FE8  
                      _TXSTA1bits 000FAD             ??_frequency_interrupt 0001  
                    ___ftdiv@cntr 0027                      ___ftdiv@sign 002C  
                            l1106 10D8                              l1095 034E  
                            l1096 0488                              l4022 0A52  
                            l4032 0A70                              l3330 1614  
                            l3420 0130                              l3404 00C0  
                            l4028 0A62                              l4052 1CA4  
                            l3342 1660                              l3334 1622  
                            l3422 013E                              l3414 0102  
                            l3510 150A                              l4206 16FE  
                            l4054 1CAC                              l4230 11FA  
                            l3344 167E                              l3336 162C  
                            l3440 01F4                              l3432 0186  
                            l3424 014C                              l4064 1CCC  
                            l4056 1CB0                              l4080 1D5A  
                            l4072 1D3A                              l3346 1688  
                            l3338 164A                              l3450 0242  
                            l3434 0194                              l3426 0158  
                            l3506 14CA                              l4074 1D42  
                            l3460 110E                              l3516 154E  
                            l3700 0E54                              l4076 1D46  
                            l3526 07F4                              l3392 0076  
                            l3480 1168                              l3376 1820  
                            l3544 0886                              l3712 0E82  
                            l3800 1DEE                              l3618 1352  
                            l3490 1190                              l3466 1136  
                            l3378 182E                              l3562 08EC  
                            l3554 08B6                              l3724 1BE2  
                            l3636 1D02                              l3484 1178  
                            l3556 08C6                              l3548 089A  
                            l3716 0E92                              l3820 0516  
                            l3900 1ABC                              l4196 1C6A  
                            l3726 1BEE                              l3398 00B0  
                            l3494 11A0                              l3558 08D0  
                            l3574 18B8                              l3670 1038  
                            l3814 04F2                              l3648 1DC0  
                            l3592 12EC                              l3760 028C  
                            l3744 0950                              l3832 05AE  
                            l3920 1B02                              l3912 1AEA  
                            l3904 1ACA                              l3682 13EE  
                            l3674 1056                              l3666 1024  
                            l3738 0922                              l3906 1AD2  
                            l3684 1470                              l3692 0DEE  
                            l3772 0318                              l3828 0588  
                            l3852 1934                              l3908 1AD6  
                            l3916 1AF4                              l3598 1314  
                            l3766 02D2                              l3944 1A72  
                            l3864 195A                              l3880 198C  
                            l3960 06A0                              l3794 045E  
                            l3866 1962                              l3858 1944  
                            l3954 0664                              l3884 199A  
                            l3876 1982                              l3868 1966  
                            l3980 070C                              l3972 06F2  
                            ?_exp 00BD                              ?_log 00B4  
                            l3966 06B8                              l3896 1AB0  
                            l3992 0780                              l3978 0706  
                            l3988 0778                              ?_pow 00C6  
                            STR_1 FFE8                              STR_2 FFD3  
                            STR_3 FFFD                              STR_4 FFB8  
                            STR_5 FFF6                              STR_6 FFD7  
                            u3141 10F6                              u3231 07D0  
                            u3320 18E0                              u3161 111E  
                            u3250 081A                              u3331 12D4  
                            u3430 1048                              u3351 12FC  
                            u3255 0810                              u3328 18E2  
                            u3470 0E20                              u4097 1DF4  
                            u3570 0322                              u2931 0016  
                            u3580 0324                              u3820 1A60  
                            u2941 0034                              u3478 0E24  
                            u3670 056A                              u3830 1A94  
                            u3827 1A56                              u3837 1A8A  
                            u3870 0696                              u3890 06EA  
           __end_of_adjustDigipot 0B7A           ?_make_frequency_message 0001  
                            _main 11DA                      ___ftpack@arg 0012  
                    ___ftpack@exp 0015                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            indf1 000FE7                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _step 00F9                              btemp 004E  
                            exp@x 00BD                              log@x 00B4  
                            pclat 000FFA                              pow@x 00C6  
                            pow@y 00C9                              prodh 000FF4  
                            prodl 000FF3                              start 008A  
                fillInTemp@i_1156 0027                  fillInTemp@i_1157 0029  
                ??_uart_interrupt 0001                      ___ftmul@cntr 003A  
         __end_of_makeTempMessage 1C8E                   ?_checkFrequency 0001  
                    ___param_bank 000010                      ___ftmul@sign 003B  
                    ___fttol@exp1 00AC                             ??_exp 003E  
                           ??_log 003E                      ___fttol@lval 00A8  
                ?_sendUARTMessage 0017                             ??_pow 003E  
                    _BAUDCON1bits 000F7E                             ?_main 0001  
                 __end_of___awdiv 19A4                             _ADRES 000FC3  
                 __end_of___ftadd 0268             __end_of_ambient_ascii FEF1  
                 __end_of___awmod 1B0C                   __end_of___ftdiv 13AA  
                 __end_of___ftneg 1F08                   __end_of___ftmul 11DA  
                 ___awdiv@divisor 001A                   __end_of___ftsub 1D2C  
                 __end_of___fttol 08FE                   __end_of___lwdiv 1CE0  
                 __end_of___lwmod 1D6E                             i2l250 1796  
                           i2l251 17B0                             i2l247 1762  
                           i2l248 17F6                             i2l249 177C  
                 ___awdiv@counter 001C                             _TMR1H 000FCF  
                           _TMR1L 000FCE                             _TMR5H 000F24  
                           _TMR5L 000F23                             _RPOR7 000EC7  
                           _RPOR9 000EC9                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                    ___lltoft@exp 0022                   __end_of_digipot 175A  
                 __end_of_initADC 1E74                     ___awtoft@sign 001D  
                 __end_of_initSPI 0DCA                             _floor 0FEC  
                           _ldexp 0DCA                             _frexp 1890  
                           _errno 00E1    __end_of_make_frequency_message 0CAC  
                   ___ftpack@sign 0016                             _value 00F7  
                           _timer 00EF          __end_of_send_data_part_1 FEF9  
                           _state 00F6                             tablat 000FF5  
                           pow@yi 00D3                             status 000FD8  
                     exp@exponent 00C3                       ldexp@newexp 00B7  
                 __initialization 1B0C             __end_of_send_data_EOL FEF8  
                     log@exponent 00B7                      __end_of_main 12C4  
                          ??_main 003E                     ___fttol@sign1 00A7  
                   __activetblptr 000003                 _last_uart_message 0164  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          ?_floor 00B5                            ?_ldexp 00B4  
                          ?_frexp 0012                  __end_of___altoft 1890  
                          _CCPR7H 000F0B                            _CCPR8H 000F08  
                          _EECON2 000FA7                            _CCPR7L 000F0A  
                          _CCPR8L 000F07                            _ANCON0 000F48  
                          _ANCON1 000F49                  ___awdiv@dividend 0018  
                __end_of___awtoft 1DE4                  __end_of___ftpack 16B2  
                __end_of___lbtoft 1F2C                  __end_of___lltoft 1C38  
                          i2l3206 0FE8                            i2l3170 17CC  
                          _IOLOCK 0075F8                    __CFG_WDTEN$OFF 000000  
                          i2l3196 0F64                            i2l3198 0F66  
                          _INTCON 000FF2                            _RCREG1 000FAF  
                __end_of___lwtoft 1EE4                            _SPBRG1 000FB0  
                          _SSPBUF 000FC9                            _TXREG1 000FAE  
                    ?_UARTReceive 0001                  __end_of_delay_ms 1E16  
                  __CFG_XINST$OFF 000000                  __end_of_high_ISR 008A  
            _temp_display_message 008A                      _CCPTMRS1bits 000F51  
                    _CCPTMRS2bits 000F50                  ?_makeTempMessage 0001  
                          ___ftge 148A                            ___wmul 1E74  
                       ??___awdiv 001C                         ??___ftadd 00A4  
                       ??___awmod 0016                         ??___ftdiv 0024  
                       ??___ftneg 0015                         ??___ftmul 0033  
                       ??___ftsub 003C                         ??___fttol 00A2  
                       ??___lwdiv 001B                         ??___lwmod 0016  
                __end_of_initLoRa 1BDC                            clear_0 1B12  
                          clear_1 1B1E                            clear_2 1B2A  
                ___awdiv@quotient 001E                   ___awmod@divisor 0014  
                          _valueH 00F1                            _valueL 00F3  
                       ??_digipot 003E                   ___awmod@counter 0016  
                          floor@i 00B8                            floor@x 00B5  
                       ??_initADC 0012             ___ftmul@f3_as_product 0037  
           __end_of_set_data_rate FED6                         ??_initSPI 003E  
                    __mediumconst FEC6                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                __end_of_unselect 1F9E                  __end_ofexp@coeff FF8D  
                __end_oflog@coeff FFA8                        __accesstop 0060  
         __end_of__initialization 1B70                        ___altoft@c 00AD  
           _cap_frequency_message 0182                        ___ftadd@f1 009E  
                      ___ftadd@f2 00A1                        ___ftge@ff1 009E  
                      ___ftge@ff2 00A1                      eval_poly@res 00B1  
                   ___rparam_used 000001                        ___ftdiv@f1 001E  
                      ___ftdiv@f2 0021                        ___ftdiv@f3 0028  
                      ___ftneg@f1 0012                        ___awtoft@c 001A  
                      ___lbtoft@c 001D                        ___ftmul@f1 002D  
                      ___ftmul@f2 0030                        ___ftsub@f1 00AA  
                      ___ftsub@f2 00AD                        ___fttol@f1 009E  
                  __pcstackCOMRAM 0001                      __pidataBANK0 1D6E  
                    __pidataBANK1 1E9A                        ___lltoft@c 001A  
         __size_of_initInterrupts 0008                     __end_of_floor 10E6  
                   __end_of_ldexp 0EE2                     __end_of_frexp 1920  
         ??_temperature_interrupt 0001                        ___lwtoft@c 001A  
                         ??_floor 003E                           ??_ldexp 00B9  
                         ??_frexp 0017                        __pbssBANK0 00D7  
                      __pbssBANK1 0100                __size_of_initUART1 001C  
              __size_of_eval_poly 00E0                  ??_checkFrequency 001D  
           __end_of_getVerCommand FEE4                        _bigorsmall 00F5  
                         ?___ftge 009E                           ?___wmul 0012  
                         _CCP7CON 000F09                           _CCP8CON 000F06  
                       ?___altoft 00AD                         ?___awtoft 001A  
                       ?___ftpack 0012                         ?___lbtoft 001A  
                      _fillInTemp 0644                         ?___lltoft 001A  
     __end_of_frequency_interrupt 0FEC                         ?___lwtoft 001A  
          __size_of_calculateTemp 00B2                __CFG_OSC$INTOSCPLL 000000  
                       ?_delay_ms 0012                           _SPBRGH1 000F7F  
                         _RPINR21 000EFC                         ?_high_ISR 0001  
                __CFG_CFGPLLEN$ON 000000                         ?_initLoRa 0001  
            UARTReceive@on_or_off 0012                 __end_of_delimiter FEF7  
                         __Hparam 0000                           __Lparam 0000  
            __size_of_UARTReceive 0010                   __size_of___ftge 00C8  
                         ___awdiv 1920                           ___ftadd 0000  
                         ___awmod 1A9C                           ___ftdiv 12C4  
                         ___ftneg 1EE4                   __size_of___wmul 0026  
                         ___ftmul 10E6                           ___ftsub 1CE0  
                         ___fttol 07BA                           ___lwdiv 1C8E  
                         ___lwmod 1D2C                        ??___altoft 00B1  
                       ?_unselect 0001                           __pcinit 1B0C  
                      ??___awtoft 001D                        ??___ftpack 0017  
                      ??___lbtoft 001D                 __end_of_initUART1 1F68  
               __end_of_eval_poly 148A                           __ramtop 0F00  
                         _digipot 16B2                        ??___lltoft 001E  
                         __ptext0 11DA                           __ptext1 0B7A  
                         __ptext2 1D2C                           __ptext3 1C8E  
                         __ptext4 1C38                           __ptext5 0644  
                         __ptext6 1A9C                           __ptext7 1920  
                         __ptext8 1552                           __ptext9 19A4  
          __size_of_adjustDigipot 013C           __size_of_init_frequency 0082  
                      ??___lwtoft 001D                           _initADC 1E46  
               __end_of_hexpowers FEEC                         _T1CONbits 000FCD  
                         _initSPI 0CAC                      __size_of_exp 022E  
                    __size_of_log 0140                      __size_of_pow 01AE  
                ___awmod@dividend 0012                           _percent 00DA  
        __size_of_sendUARTMessage 0076                         _T5CONbits 000F22  
                      ??_delay_ms 0014                        ??_high_ISR 0004  
                      delay_ms@ms 0012              end_of_initialization 1B70  
                         exp@sign 00C5                        _minus_pipe 00E5  
                      _pipe_ascii FEF1                        ??_initLoRa 0019  
                      _remappings 1F2C              __end_of_join_network FFB8  
                   _calculateTemp 1552                           pow@sign 00D2  
                         postdec1 000FE5                           postdec2 000FDD  
                  _initInterrupts 1F92                           postinc0 000FEE  
                         postinc2 000FDE                        ??_unselect 0012  
                     ?_fillInTemp 0001         _uart_receive_buffer_index 004C  
         __size_of_uart_interrupt 0030                         _PORTAbits 000F80  
                       _PORTBbits 000F81                  __CFG_CPUDIV$OSC1 000000  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94                     _adjustDigipot 0A3E  
                  ?_calculateTemp 00AD                       ___ftdiv@exp 002B  
          __end_of_initInterrupts 1F9A                       ___ftmul@exp 0036  
                  __end_of___ftge 1552                    __end_of___wmul 1E9A  
                    _initSPI$2555 01A7                      _initSPI$2556 01AA  
                    _initSPI$2557 01AD    __size_of_temperature_interrupt 00A0  
   __end_of_temperature_interrupt 17FA                     _minus_ambient 00E3  
        __size_of_makeTempMessage 0056                        floor@expon 00BB  
              _adjustDigipot$2560 01AD                _adjustDigipot$2558 01A7  
              _adjustDigipot$2559 01AA                     _ambient_ascii FEEC  
        ??_make_frequency_message 001E               start_initialization 1B0C  
                      eval_poly@d 00AD                        eval_poly@n 00AF  
                      eval_poly@x 00AA                        ldexp@value 00B4  
                     __end_of_exp 0496                       __end_of_log 0A3E  
                     __end_of_pow 0644  sendUARTMessage@newMessagePointer 0017  
               ??_sendUARTMessage 0019                    ?_adjustDigipot 0001  
                      frexp@value 0012                       ?_remappings 0001  
             __size_of_fillInTemp 0176                    _currentChannel 00DF  
                 ?_initInterrupts 0001                  _cap_measurement1 00DD  
                _cap_measurement2 003E                          ??___ftge 00A4  
                   _send_data_EOL FEF7                          ??___wmul 0016  
                     __pdataBANK0 0060                       __pdataBANK1 0182  
              _calculateTemp$2554 00B1                  _nominalfrequency 00FA  
                  _init_frequency 19A4                 __size_of___altoft 0096  
               __size_of___awtoft 0038                 __size_of___ftpack 00AE  
               __size_of___lbtoft 0024                 __size_of___lltoft 005C  
                     __pbssCOMRAM 003E                 __size_of___lwtoft 0024  
                   __pcstackBANK0 009E                     __pcstackBANK1 01A7  
               __size_of_delay_ms 0032                   ??_calculateTemp 003C  
               __size_of_high_ISR 0082                         _cap_value 0040  
                       __pnvBANK0 00FA                 __size_of_initLoRa 0062  
                       _main$2553 01B0                  ___lwdiv@dividend 0017  
                       _delimiter FEF6                         __pintcode 0008  
                       _asciiTemp 0060                     __pmediumconst FEC6  
                        ?___awdiv 0018                          ?___ftadd 009E  
                        ?___awmod 0012                          ?___ftdiv 001E  
                        ?___ftneg 0012                          ?___ftmul 002D  
                        ?___ftsub 00AA                          ?___fttol 009E  
          __end_of_init_frequency 1A26                          ?___lwdiv 0017  
                        ?___lwmod 0012                    _uart_interrupt 1E16  
                        ?_digipot 0001                      _join_network FFA8  
             __size_of_remappings 0020                          ?_initADC 0001  
               __size_of_unselect 0004                          ?_initSPI 0001  
                   _set_data_rate FEC7                         _initUART1 1F4C  
                       _eval_poly 13AA   __size_of_make_frequency_message 0132  
                       _ind_value 0048                         _frequency 00D7  
                       _hexpowers FEE4                         _inductive 00FD  
                ___lwdiv@quotient 001C      __size_of_frequency_interrupt 010A  
               ??_makeTempMessage 003E                    __size_of_floor 00FA  
                 ??_adjustDigipot 003E                    __size_of_ldexp 0118  
                  __size_of_frexp 0090                    ___wmul@product 0016  
                   ??_UARTReceive 0012                         delay_ms@i 0015  
                        _PIE1bits 000F9D                          _PIE4bits 000F8E  
           _currentMessagePointer 0042                          i2u270_40 1E3C  
                        i2u272_45 0F20                          _PIR1bits 000F9E  
                        i2u274_45 0F52                          i2u276_45 0FA4  
                        i2u278_45 0FD6                          _PIR4bits 000F8F  
                        _RCONbits 000FD0                         _temp_pipe 00ED  
                        _SSP2CON1 000F72            __end_of_uart_interrupt 1E46  
                        _SSP2STAT 000F73                   ?_init_frequency 0001  
         __size_of_checkFrequency 001A                         _plus_pipe 00E9  
                _ind_measurement1 0044                  _ind_measurement2 0046  
                    ??_fillInTemp 0020                        _ADCON0bits 000FC2  
               ___wmul@multiplier 0012                        ?_initUART1 0001  
                      ?_eval_poly 00AA               _uart_receive_buffer 0100  
                  fillInTemp@temp 002A                         copy_data0 1B44  
                       copy_data1 1B64        fillInTemp@pipe_or_ambience 0024  
                       frexp@eptr 0015                __end_of_fillInTemp 07BA  
          _make_frequency_message 0B7A                          __Hrparam 0000  
                        __Lrparam 0000                     _getVerCommand FED6  
             __end_of_UARTReceive 1F92                   ?_uart_interrupt 0001  
             __end_of_set_dev_eui FF6F               __end_of_set_app_eui FF4D  
             __end_of_set_app_key FF2B                  __size_of___awdiv 0084  
                __size_of___ftadd 0268                  __size_of___awmod 0070  
                __size_of___ftdiv 00E6                  __size_of___ftneg 0024  
                        ___altoft 17FA                  __size_of___ftmul 00F4  
                __size_of___ftsub 004C                  __size_of___fttol 0144  
                __size_of___lwdiv 0052       _last_received_message_index 004A  
                __size_of___lwmod 0042                          ___awtoft 1DAC  
                        ___ftpack 1604                          ___lbtoft 1F08  
                        ___lltoft 1BDC                          ___lwtoft 1EC0  
                __size_of_digipot 00A8                   _sendUARTMessage 1A26  
                        _exp$2563 00C0                  __size_of_initADC 002E  
                __size_of_initSPI 011E                          _delay_ms 1DE4  
                 ___lwdiv@divisor 0019                   ___lwdiv@counter 001B  
                        __ptext10 1F4C                          __ptext11 0CAC  
                        __ptext20 1F68                          __ptext12 1F2C  
                        __ptext21 1EC0                          __ptext13 1B7A  
                        __ptext30 148A                          __ptext22 0A3E  
                        __ptext14 1A26                          __ptext31 17FA  
                        __ptext23 0496                          __ptext15 1DE4  
                        __ptext40 1BDC                          __ptext32 13AA  
                        __ptext24 08FE                          __ptext16 1F92  
                        __ptext41 1F08                          __ptext33 1E74  
                        __ptext25 0268                          __ptext17 1E46  
                        __ptext42 1604                          __ptext34 10E6  
                        __ptext26 0DCA                          __ptext18 16B2  
                        __ptext43 1F82                          __ptext35 1CE0  
                        __ptext27 0FEC                          __ptext19 1F9A  
                        __ptext36 0000                          __ptext28 1890  
                        __ptext45 1E16                          __ptext37 1EE4  
                        __ptext29 07BA                          __ptext46 175A  
                        __ptext38 12C4                          __ptext47 0EE2  
                        __ptext39 1DAC                          _high_ISR 0008  
                        _pow$2561 00CC                          _pow$2562 00CF  
                   _isCommandSent 0065                      ??_remappings 0012  
                ??_initInterrupts 0012                          _initLoRa 1B7A  
                   __size_of_main 00EA                          int$flags 004E  
                _send_data_part_1 FEF8    makeTempMessage@pipe_or_ambient 00B6  
                    _temp_ambient 00EB                          _unselect 1F9A  
                    _SSP2STATbits 000F73                          exp@coeff FF6F  
                        log@coeff FF8D                __end_of_pipe_ascii FEF6  
              __end_of_remappings 1F4C                        _INTCONbits 000FF2  
                     ??_initUART1 0012                       ??_eval_poly 003C  
           _temperature_interrupt 175A                          intlevel2 0000  
              calculateTemp@minus 00AF                  ___lwmod@dividend 0012  
                     _UARTReceive 1F82             _ind_frequency_message 0066  
                      _RCSTA1bits 000FAC                       _set_dev_eui FF4D  
                     _set_app_eui FF2B                       _set_app_key FEF9  
                      _OSCCONbits 000FD3               _frequency_interrupt 0EE2  
                  _checkFrequency 1F68           __end_of_sendUARTMessage 1A9C  
                    _plus_ambient 00E7                   _makeTempMessage 1C38  
               calculateTemp@temp 00B4                 calculateTemp@plus 00AD  
                 ___lwmod@divisor 0014                   ___lwmod@counter 0016  
            ?_frequency_interrupt 0001                       fillInTemp@i 0025  
           __end_of_calculateTemp 1604                  ??_init_frequency 0012  
          __end_of_checkFrequency 1F82  
