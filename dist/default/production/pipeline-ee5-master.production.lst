

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Apr 20 15:42:25 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18LF27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           	psect	idataBANK0
    83  013902                     __pidataBANK0:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _asciiTemp
    87  013902  20                 	db	32
    88  013903  20                 	db	32
    89  013904  20                 	db	32
    90  013905  20                 	db	32
    91  013906  20                 	db	32
    92                           
    93                           ;initializer for _isCommandSent
    94  013907  01                 	db	1
    95                           
    96                           	psect	idataBANK1
    97  0138C2                     __pidataBANK1:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _temp_display_message
   101  0138C2  50                 	db	80
   102  0138C3  69                 	db	105
   103  0138C4  70                 	db	112
   104  0138C5  65                 	db	101
   105  0138C6  20                 	db	32
   106  0138C7  74                 	db	116
   107  0138C8  65                 	db	101
   108  0138C9  6D                 	db	109
   109  0138CA  70                 	db	112
   110  0138CB  20                 	db	32
   111  0138CC  3D                 	db	61
   112  0138CD  20                 	db	32
   113  0138CE  20                 	db	32
   114  0138CF  20                 	db	32
   115  0138D0  20                 	db	32
   116  0138D1  20                 	db	32
   117  0138D2  20                 	db	32
   118  0138D3  0D                 	db	13
   119  0138D4  0A                 	db	10
   120  0138D5  00                 	db	0
   121                           
   122                           	psect	mediumconst
   123  00FDDE                     __pmediumconst:
   124                           	opt stack 0
   125  00FDDE  00                 	db	0
   126  00FDDF                     _dpowers:
   127                           	opt stack 0
   128  00FDDF  0001               	dw	1
   129  00FDE1  0000               	dw	0
   130  00FDE3  000A               	dw	10
   131  00FDE5  0000               	dw	0
   132  00FDE7  0064               	dw	100
   133  00FDE9  0000               	dw	0
   134  00FDEB  03E8               	dw	1000
   135  00FDED  0000               	dw	0
   136  00FDEF  2710               	dw	10000
   137  00FDF1  0000               	dw	0
   138  00FDF3  86A0               	dw	34464
   139  00FDF5  0001               	dw	1
   140  00FDF7  4240               	dw	16960
   141  00FDF9  000F               	dw	15
   142  00FDFB  9680               	dw	38528
   143  00FDFD  0098               	dw	152
   144  00FDFF  E100               	dw	57600
   145  00FE01  05F5               	dw	1525
   146  00FE03  CA00               	dw	51712
   147  00FE05  3B9A               	dw	15258
   148  00FE07                     __end_of_dpowers:
   149                           	opt stack 0
   150  00FE07                     __npowers_:
   151                           	opt stack 0
   152  00FE07  00                 	db	0
   153  00FE08  80                 	db	128
   154  00FE09  3F                 	db	63
   155  00FE0A  CD                 	db	205
   156  00FE0B  CC                 	db	204
   157  00FE0C  3D                 	db	61
   158  00FE0D  D7                 	db	215
   159  00FE0E  23                 	db	35
   160  00FE0F  3C                 	db	60
   161  00FE10  12                 	db	18
   162  00FE11  83                 	db	131
   163  00FE12  3A                 	db	58
   164  00FE13  B7                 	db	183
   165  00FE14  D1                 	db	209
   166  00FE15  38                 	db	56
   167  00FE16  C6                 	db	198
   168  00FE17  27                 	db	39
   169  00FE18  37                 	db	55
   170  00FE19  38                 	db	56
   171  00FE1A  86                 	db	134
   172  00FE1B  35                 	db	53
   173  00FE1C  C0                 	db	192
   174  00FE1D  D6                 	db	214
   175  00FE1E  33                 	db	51
   176  00FE1F  CC                 	db	204
   177  00FE20  2B                 	db	43
   178  00FE21  32                 	db	50
   179  00FE22  70                 	db	112
   180  00FE23  89                 	db	137
   181  00FE24  30                 	db	48
   182  00FE25  E7                 	db	231
   183  00FE26  DB                 	db	219
   184  00FE27  2E                 	db	46
   185  00FE28  E5                 	db	229
   186  00FE29  3C                 	db	60
   187  00FE2A  1E                 	db	30
   188  00FE2B  42                 	db	66
   189  00FE2C  A2                 	db	162
   190  00FE2D  0D                 	db	13
   191  00FE2E                     __end_of__npowers_:
   192                           	opt stack 0
   193  00FE2E                     __powers_:
   194                           	opt stack 0
   195  00FE2E  00                 	db	0
   196  00FE2F  80                 	db	128
   197  00FE30  3F                 	db	63
   198  00FE31  00                 	db	0
   199  00FE32  20                 	db	32
   200  00FE33  41                 	db	65
   201  00FE34  00                 	db	0
   202  00FE35  C8                 	db	200
   203  00FE36  42                 	db	66
   204  00FE37  00                 	db	0
   205  00FE38  7A                 	db	122
   206  00FE39  44                 	db	68
   207  00FE3A  40                 	db	64
   208  00FE3B  1C                 	db	28
   209  00FE3C  46                 	db	70
   210  00FE3D  50                 	db	80
   211  00FE3E  C3                 	db	195
   212  00FE3F  47                 	db	71
   213  00FE40  24                 	db	36
   214  00FE41  74                 	db	116
   215  00FE42  49                 	db	73
   216  00FE43  97                 	db	151
   217  00FE44  18                 	db	24
   218  00FE45  4B                 	db	75
   219  00FE46  BC                 	db	188
   220  00FE47  BE                 	db	190
   221  00FE48  4C                 	db	76
   222  00FE49  6B                 	db	107
   223  00FE4A  6E                 	db	110
   224  00FE4B  4E                 	db	78
   225  00FE4C  03                 	db	3
   226  00FE4D  15                 	db	21
   227  00FE4E  50                 	db	80
   228  00FE4F  79                 	db	121
   229  00FE50  AD                 	db	173
   230  00FE51  60                 	db	96
   231  00FE52  F3                 	db	243
   232  00FE53  49                 	db	73
   233  00FE54  71                 	db	113
   234  00FE55                     __end_of__powers_:
   235                           	opt stack 0
   236  00FE55                     _hexpowers:
   237                           	opt stack 0
   238  00FE55  0001               	dw	1
   239  00FE57  0000               	dw	0
   240  00FE59  0010               	dw	16
   241  00FE5B  0000               	dw	0
   242  00FE5D  0100               	dw	256
   243  00FE5F  0000               	dw	0
   244  00FE61  1000               	dw	4096
   245  00FE63  0000               	dw	0
   246  00FE65  0000               	dw	0
   247  00FE67  0001               	dw	1
   248  00FE69  0000               	dw	0
   249  00FE6B  0010               	dw	16
   250  00FE6D  0000               	dw	0
   251  00FE6F  0100               	dw	256
   252  00FE71  0000               	dw	0
   253  00FE73  1000               	dw	4096
   254  00FE75                     __end_of_hexpowers:
   255                           	opt stack 0
   256  00FE75                     _set_data_rate:
   257                           	opt stack 0
   258  00FE75  6D                 	db	109
   259  00FE76  61                 	db	97
   260  00FE77  63                 	db	99
   261  00FE78  20                 	db	32
   262  00FE79  73                 	db	115
   263  00FE7A  65                 	db	101
   264  00FE7B  74                 	db	116
   265  00FE7C  20                 	db	32
   266  00FE7D  64                 	db	100
   267  00FE7E  72                 	db	114
   268  00FE7F  20                 	db	32
   269  00FE80  78                 	db	120
   270  00FE81  0D                 	db	13
   271  00FE82  0A                 	db	10
   272  00FE83  00                 	db	0
   273  00FE84                     __end_of_set_data_rate:
   274                           	opt stack 0
   275  00FE84                     _getVerCommand:
   276                           	opt stack 0
   277  00FE84  73                 	db	115
   278  00FE85  79                 	db	121
   279  00FE86  73                 	db	115
   280  00FE87  20                 	db	32
   281  00FE88  67                 	db	103
   282  00FE89  65                 	db	101
   283  00FE8A  74                 	db	116
   284  00FE8B  20                 	db	32
   285  00FE8C  76                 	db	118
   286  00FE8D  65                 	db	101
   287  00FE8E  72                 	db	114
   288  00FE8F  0D                 	db	13
   289  00FE90  0A                 	db	10
   290  00FE91  00                 	db	0
   291  00FE92                     __end_of_getVerCommand:
   292                           	opt stack 0
   293  00FE92                     _ambient_ascii:
   294                           	opt stack 0
   295  00FE92  41                 	db	65
   296  00FE93  6D                 	db	109
   297  00FE94  62                 	db	98
   298  00FE95  2E                 	db	46
   299  00FE96  00                 	db	0
   300  00FE97                     __end_of_ambient_ascii:
   301                           	opt stack 0
   302  00FE97                     _pipe_ascii:
   303                           	opt stack 0
   304  00FE97  50                 	db	80
   305  00FE98  69                 	db	105
   306  00FE99  70                 	db	112
   307  00FE9A  65                 	db	101
   308  00FE9B  00                 	db	0
   309  00FE9C                     __end_of_pipe_ascii:
   310                           	opt stack 0
   311  00FE9C                     _delimiter:
   312                           	opt stack 0
   313  00FE9C  FD                 	db	low STR_3
   314  00FE9D                     __end_of_delimiter:
   315                           	opt stack 0
   316  00FE9D                     _send_data_EOL:
   317                           	opt stack 0
   318  00FE9D  C2                 	db	low (STR_7+23)
   319  00FE9E                     __end_of_send_data_EOL:
   320                           	opt stack 0
   321  00FE9E                     _send_data_part_1:
   322                           	opt stack 0
   323  00FE9E  EF                 	db	low STR_1
   324  00FE9F                     __end_of_send_data_part_1:
   325                           	opt stack 0
   326  00FE9F                     _set_app_key:
   327                           	opt stack 0
   328  00FE9F  6D                 	db	109
   329  00FEA0  61                 	db	97
   330  00FEA1  63                 	db	99
   331  00FEA2  20                 	db	32
   332  00FEA3  73                 	db	115
   333  00FEA4  65                 	db	101
   334  00FEA5  74                 	db	116
   335  00FEA6  20                 	db	32
   336  00FEA7  61                 	db	97
   337  00FEA8  70                 	db	112
   338  00FEA9  70                 	db	112
   339  00FEAA  6B                 	db	107
   340  00FEAB  65                 	db	101
   341  00FEAC  79                 	db	121
   342  00FEAD  20                 	db	32
   343  00FEAE  32                 	db	50
   344  00FEAF  45                 	db	69
   345  00FEB0  31                 	db	49
   346  00FEB1  35                 	db	53
   347  00FEB2  41                 	db	65
   348  00FEB3  46                 	db	70
   349  00FEB4  43                 	db	67
   350  00FEB5  39                 	db	57
   351  00FEB6  34                 	db	52
   352  00FEB7  41                 	db	65
   353  00FEB8  37                 	db	55
   354  00FEB9  45                 	db	69
   355  00FEBA  46                 	db	70
   356  00FEBB  36                 	db	54
   357  00FEBC  39                 	db	57
   358  00FEBD  41                 	db	65
   359  00FEBE  45                 	db	69
   360  00FEBF  36                 	db	54
   361  00FEC0  31                 	db	49
   362  00FEC1  41                 	db	65
   363  00FEC2  38                 	db	56
   364  00FEC3  31                 	db	49
   365  00FEC4  34                 	db	52
   366  00FEC5  37                 	db	55
   367  00FEC6  33                 	db	51
   368  00FEC7  37                 	db	55
   369  00FEC8  43                 	db	67
   370  00FEC9  33                 	db	51
   371  00FECA  38                 	db	56
   372  00FECB  36                 	db	54
   373  00FECC  39                 	db	57
   374  00FECD  39                 	db	57
   375  00FECE  0D                 	db	13
   376  00FECF  0A                 	db	10
   377  00FED0  00                 	db	0
   378  00FED1                     __end_of_set_app_key:
   379                           	opt stack 0
   380  00FED1                     _set_app_eui:
   381                           	opt stack 0
   382  00FED1  6D                 	db	109
   383  00FED2  61                 	db	97
   384  00FED3  63                 	db	99
   385  00FED4  20                 	db	32
   386  00FED5  73                 	db	115
   387  00FED6  65                 	db	101
   388  00FED7  74                 	db	116
   389  00FED8  20                 	db	32
   390  00FED9  61                 	db	97
   391  00FEDA  70                 	db	112
   392  00FEDB  70                 	db	112
   393  00FEDC  65                 	db	101
   394  00FEDD  75                 	db	117
   395  00FEDE  69                 	db	105
   396  00FEDF  20                 	db	32
   397  00FEE0  37                 	db	55
   398  00FEE1  34                 	db	52
   399  00FEE2  43                 	db	67
   400  00FEE3  35                 	db	53
   401  00FEE4  34                 	db	52
   402  00FEE5  32                 	db	50
   403  00FEE6  34                 	db	52
   404  00FEE7  35                 	db	53
   405  00FEE8  33                 	db	51
   406  00FEE9  38                 	db	56
   407  00FEEA  35                 	db	53
   408  00FEEB  37                 	db	55
   409  00FEEC  39                 	db	57
   410  00FEED  37                 	db	55
   411  00FEEE  34                 	db	52
   412  00FEEF  41                 	db	65
   413  00FEF0  0D                 	db	13
   414  00FEF1  0A                 	db	10
   415  00FEF2  00                 	db	0
   416  00FEF3                     __end_of_set_app_eui:
   417                           	opt stack 0
   418  00FEF3                     _set_dev_eui:
   419                           	opt stack 0
   420  00FEF3  6D                 	db	109
   421  00FEF4  61                 	db	97
   422  00FEF5  63                 	db	99
   423  00FEF6  20                 	db	32
   424  00FEF7  73                 	db	115
   425  00FEF8  65                 	db	101
   426  00FEF9  74                 	db	116
   427  00FEFA  20                 	db	32
   428  00FEFB  64                 	db	100
   429  00FEFC  65                 	db	101
   430  00FEFD  76                 	db	118
   431  00FEFE  65                 	db	101
   432  00FEFF  75                 	db	117
   433  00FF00  69                 	db	105
   434  00FF01  20                 	db	32
   435  00FF02  30                 	db	48
   436  00FF03  30                 	db	48
   437  00FF04  30                 	db	48
   438  00FF05  34                 	db	52
   439  00FF06  41                 	db	65
   440  00FF07  33                 	db	51
   441  00FF08  30                 	db	48
   442  00FF09  42                 	db	66
   443  00FF0A  30                 	db	48
   444  00FF0B  30                 	db	48
   445  00FF0C  31                 	db	49
   446  00FF0D  41                 	db	65
   447  00FF0E  43                 	db	67
   448  00FF0F  46                 	db	70
   449  00FF10  37                 	db	55
   450  00FF11  44                 	db	68
   451  00FF12  0D                 	db	13
   452  00FF13  0A                 	db	10
   453  00FF14  00                 	db	0
   454  00FF15                     __end_of_set_dev_eui:
   455                           	opt stack 0
   456  00FF15                     exp@coeff:
   457                           	opt stack 0
   458  00FF15  00                 	db	0
   459  00FF16  80                 	db	128
   460  00FF17  3F                 	db	63
   461  00FF18  72                 	db	114
   462  00FF19  31                 	db	49
   463  00FF1A  3F                 	db	63
   464  00FF1B  FE                 	db	254
   465  00FF1C  75                 	db	117
   466  00FF1D  3E                 	db	62
   467  00FF1E  58                 	db	88
   468  00FF1F  63                 	db	99
   469  00FF20  3D                 	db	61
   470  00FF21  95                 	db	149
   471  00FF22  1D                 	db	29
   472  00FF23  3C                 	db	60
   473  00FF24  C5                 	db	197
   474  00FF25  AE                 	db	174
   475  00FF26  3A                 	db	58
   476  00FF27  79                 	db	121
   477  00FF28  21                 	db	33
   478  00FF29  39                 	db	57
   479  00FF2A  94                 	db	148
   480  00FF2B  80                 	db	128
   481  00FF2C  37                 	db	55
   482  00FF2D  93                 	db	147
   483  00FF2E  A7                 	db	167
   484  00FF2F  35                 	db	53
   485  00FF30  56                 	db	86
   486  00FF31  15                 	db	21
   487  00FF32  34                 	db	52
   488  00FF33                     __end_ofexp@coeff:
   489                           	opt stack 0
   490  00FF33                     log@coeff:
   491                           	opt stack 0
   492  00FF33  00                 	db	0
   493  00FF34  00                 	db	0
   494  00FF35  00                 	db	0
   495  00FF36  00                 	db	0
   496  00FF37  80                 	db	128
   497  00FF38  3F                 	db	63
   498  00FF39  F0                 	db	240
   499  00FF3A  FF                 	db	255
   500  00FF3B  BE                 	db	190
   501  00FF3C  E2                 	db	226
   502  00FF3D  A9                 	db	169
   503  00FF3E  3E                 	db	62
   504  00FF3F  83                 	db	131
   505  00FF40  76                 	db	118
   506  00FF41  BE                 	db	190
   507  00FF42  AE                 	db	174
   508  00FF43  2B                 	db	43
   509  00FF44  3E                 	db	62
   510  00FF45  3C                 	db	60
   511  00FF46  C3                 	db	195
   512  00FF47  BD                 	db	189
   513  00FF48  D2                 	db	210
   514  00FF49  13                 	db	19
   515  00FF4A  3D                 	db	61
   516  00FF4B  78                 	db	120
   517  00FF4C  D3                 	db	211
   518  00FF4D  BB                 	db	187
   519  00FF4E                     __end_oflog@coeff:
   520                           	opt stack 0
   521  00FF4E                     _join_network:
   522                           	opt stack 0
   523  00FF4E  6D                 	db	109
   524  00FF4F  61                 	db	97
   525  00FF50  63                 	db	99
   526  00FF51  20                 	db	32
   527  00FF52  6A                 	db	106
   528  00FF53  6F                 	db	111
   529  00FF54  69                 	db	105
   530  00FF55  6E                 	db	110
   531  00FF56  20                 	db	32
   532  00FF57  6F                 	db	111
   533  00FF58  74                 	db	116
   534  00FF59  61                 	db	97
   535  00FF5A  61                 	db	97
   536  00FF5B  0D                 	db	13
   537  00FF5C  0A                 	db	10
   538  00FF5D  00                 	db	0
   539  00FF5E                     __end_of_join_network:
   540                           	opt stack 0
   541  00FF5E                     STR_5:
   542  00FF5E  54                 	db	84	;'T'
   543  00FF5F  68                 	db	104	;'h'
   544  00FF60  65                 	db	101	;'e'
   545  00FF61  20                 	db	32
   546  00FF62  69                 	db	105	;'i'
   547  00FF63  6E                 	db	110	;'n'
   548  00FF64  64                 	db	100	;'d'
   549  00FF65  75                 	db	117	;'u'
   550  00FF66  63                 	db	99	;'c'
   551  00FF67  74                 	db	116	;'t'
   552  00FF68  69                 	db	105	;'i'
   553  00FF69  76                 	db	118	;'v'
   554  00FF6A  65                 	db	101	;'e'
   555  00FF6B  20                 	db	32
   556  00FF6C  66                 	db	102	;'f'
   557  00FF6D  72                 	db	114	;'r'
   558  00FF6E  65                 	db	101	;'e'
   559  00FF6F  71                 	db	113	;'q'
   560  00FF70  75                 	db	117	;'u'
   561  00FF71  65                 	db	101	;'e'
   562  00FF72  6E                 	db	110	;'n'
   563  00FF73  63                 	db	99	;'c'
   564  00FF74  79                 	db	121	;'y'
   565  00FF75  20                 	db	32
   566  00FF76  69                 	db	105	;'i'
   567  00FF77  73                 	db	115	;'s'
   568  00FF78  3A                 	db	58	;':'
   569  00FF79  20                 	db	32
   570  00FF7A  25                 	db	37
   571  00FF7B  66                 	db	102	;'f'
   572  00FF7C  2C                 	db	44
   573  00FF7D  20                 	db	32
   574  00FF7E  25                 	db	37
   575  00FF7F  66                 	db	102	;'f'
   576  00FF80  2C                 	db	44
   577  00FF81  20                 	db	32
   578  00FF82  25                 	db	37
   579  00FF83  6C                 	db	108	;'l'
   580  00FF84  75                 	db	117	;'u'
   581  00FF85  20                 	db	32
   582  00FF86  0D                 	db	13
   583  00FF87  0A                 	db	10
   584  00FF88  00                 	db	0
   585  00FF89                     STR_6:
   586  00FF89  54                 	db	84	;'T'
   587  00FF8A  68                 	db	104	;'h'
   588  00FF8B  65                 	db	101	;'e'
   589  00FF8C  20                 	db	32
   590  00FF8D  63                 	db	99	;'c'
   591  00FF8E  61                 	db	97	;'a'
   592  00FF8F  70                 	db	112	;'p'
   593  00FF90  61                 	db	97	;'a'
   594  00FF91  63                 	db	99	;'c'
   595  00FF92  69                 	db	105	;'i'
   596  00FF93  74                 	db	116	;'t'
   597  00FF94  69                 	db	105	;'i'
   598  00FF95  76                 	db	118	;'v'
   599  00FF96  65                 	db	101	;'e'
   600  00FF97  20                 	db	32
   601  00FF98  66                 	db	102	;'f'
   602  00FF99  72                 	db	114	;'r'
   603  00FF9A  65                 	db	101	;'e'
   604  00FF9B  71                 	db	113	;'q'
   605  00FF9C  75                 	db	117	;'u'
   606  00FF9D  65                 	db	101	;'e'
   607  00FF9E  6E                 	db	110	;'n'
   608  00FF9F  63                 	db	99	;'c'
   609  00FFA0  79                 	db	121	;'y'
   610  00FFA1  20                 	db	32
   611  00FFA2  69                 	db	105	;'i'
   612  00FFA3  73                 	db	115	;'s'
   613  00FFA4  3A                 	db	58	;':'
   614  00FFA5  20                 	db	32
   615  00FFA6  25                 	db	37
   616  00FFA7  66                 	db	102	;'f'
   617  00FFA8  0D                 	db	13
   618  00FFA9  0A                 	db	10
   619  00FFAA  00                 	db	0
   620  00FFAB                     STR_7:
   621  00FFAB  54                 	db	84	;'T'
   622  00FFAC  68                 	db	104	;'h'
   623  00FFAD  65                 	db	101	;'e'
   624  00FFAE  20                 	db	32
   625  00FFAF  64                 	db	100	;'d'
   626  00FFB0  69                 	db	105	;'i'
   627  00FFB1  67                 	db	103	;'g'
   628  00FFB2  69                 	db	105	;'i'
   629  00FFB3  70                 	db	112	;'p'
   630  00FFB4  6F                 	db	111	;'o'
   631  00FFB5  74                 	db	116	;'t'
   632  00FFB6  20                 	db	32
   633  00FFB7  73                 	db	115	;'s'
   634  00FFB8  74                 	db	116	;'t'
   635  00FFB9  65                 	db	101	;'e'
   636  00FFBA  70                 	db	112	;'p'
   637  00FFBB  20                 	db	32
   638  00FFBC  69                 	db	105	;'i'
   639  00FFBD  73                 	db	115	;'s'
   640  00FFBE  3A                 	db	58	;':'
   641  00FFBF  20                 	db	32
   642  00FFC0  25                 	db	37
   643  00FFC1  75                 	db	117	;'u'
   644  00FFC2  20                 	db	32
   645  00FFC3  0D                 	db	13
   646  00FFC4  0A                 	db	10
   647  00FFC5  00                 	db	0
   648  00FFC6                     STR_4:
   649  00FFC6  6D                 	db	109	;'m'
   650  00FFC7  61                 	db	97	;'a'
   651  00FFC8  63                 	db	99	;'c'
   652  00FFC9  20                 	db	32
   653  00FFCA  74                 	db	116	;'t'
   654  00FFCB  78                 	db	120	;'x'
   655  00FFCC  20                 	db	32
   656  00FFCD  63                 	db	99	;'c'
   657  00FFCE  6E                 	db	110	;'n'
   658  00FFCF  66                 	db	102	;'f'
   659  00FFD0  20                 	db	32
   660  00FFD1  31                 	db	49	;'1'
   661  00FFD2  20                 	db	32
   662  00FFD3  25                 	db	37
   663  00FFD4  78                 	db	120	;'x'
   664  00FFD5  25                 	db	37
   665  00FFD6  78                 	db	120	;'x'
   666  00FFD7  25                 	db	37
   667  00FFD8  78                 	db	120	;'x'
   668  00FFD9  25                 	db	37
   669  00FFDA  78                 	db	120	;'x'
   670  00FFDB  0D                 	db	13
   671  00FFDC  0A                 	db	10
   672  00FFDD  00                 	db	0
   673  00FFDE                     STR_8:
   674  00FFDE  30                 	db	48	;'0'
   675  00FFDF  31                 	db	49	;'1'
   676  00FFE0  32                 	db	50	;'2'
   677  00FFE1  33                 	db	51	;'3'
   678  00FFE2  34                 	db	52	;'4'
   679  00FFE3  35                 	db	53	;'5'
   680  00FFE4  36                 	db	54	;'6'
   681  00FFE5  37                 	db	55	;'7'
   682  00FFE6  38                 	db	56	;'8'
   683  00FFE7  39                 	db	57	;'9'
   684  00FFE8  61                 	db	97	;'a'
   685  00FFE9  62                 	db	98	;'b'
   686  00FFEA  63                 	db	99	;'c'
   687  00FFEB  64                 	db	100	;'d'
   688  00FFEC  65                 	db	101	;'e'
   689  00FFED  66                 	db	102	;'f'
   690  00FFEE  00                 	db	0
   691  00FFEF                     STR_1:
   692  00FFEF  6D                 	db	109	;'m'
   693  00FFF0  61                 	db	97	;'a'
   694  00FFF1  63                 	db	99	;'c'
   695  00FFF2  20                 	db	32
   696  00FFF3  74                 	db	116	;'t'
   697  00FFF4  78                 	db	120	;'x'
   698  00FFF5  20                 	db	32
   699  00FFF6  63                 	db	99	;'c'
   700  00FFF7  6E                 	db	110	;'n'
   701  00FFF8  66                 	db	102	;'f'
   702  00FFF9  20                 	db	32
   703  00FFFA  31                 	db	49	;'1'
   704  00FFFB  20                 	db	32
   705  00FFFC  00                 	db	0
   706  00FFFD                     STR_3:
   707  00FFFD  5F                 	db	95	;'_'
   708  00FFFE  00                 	db	0
   709  0000                     
   710                           ; #config settings
   711  00FFFF  00                 	db	0	; dummy byte at the end
   712  0000                     
   713                           	psect	nvCOMRAM
   714  00005D                     __pnvCOMRAM:
   715                           	opt stack 0
   716  00005D                     _last_received_message_index:
   717                           	opt stack 0
   718  00005D                     	ds	2
   719                           
   720                           	psect	nvBANK0
   721  0000F9                     __pnvBANK0:
   722                           	opt stack 0
   723  0000F9                     _nominalfrequency:
   724                           	opt stack 0
   725  0000F9                     	ds	3
   726  0000FC                     _currentMessagePointer:
   727                           	opt stack 0
   728  0000FC                     	ds	2
   729  0000                     _RPINR21	set	3836
   730  0000                     _RPOR2	set	3778
   731  0000                     _RPOR5	set	3781
   732  0000                     _IOLOCK	set	30200
   733  0000                     _ANCON0	set	3912
   734  0000                     _ANCON1	set	3913
   735  0000                     _CCP4CON	set	3858
   736  0000                     _CCP8CON	set	3846
   737  0000                     _CCPR4H	set	3860
   738  0000                     _CCPR4L	set	3859
   739  0000                     _CCPR8H	set	3848
   740  0000                     _CCPR8L	set	3847
   741  0000                     _CCPTMRS1bits	set	3921
   742  0000                     _CCPTMRS2bits	set	3920
   743  0000                     _ADRES	set	4035
   744  0000                     _ADCON0	set	4034
   745  0000                     _ADCON0bits	set	4034
   746  0000                     _ADCON1	set	4033
   747  0000                     _BAUDCON1bits	set	3966
   748  0000                     _EECON2	set	4007
   749  0000                     _INTCON	set	4082
   750  0000                     _INTCONbits	set	4082
   751  0000                     _OSCCONbits	set	4051
   752  0000                     _PIE1bits	set	3997
   753  0000                     _PIE4bits	set	3982
   754  0000                     _PIR1bits	set	3998
   755  0000                     _PIR4bits	set	3983
   756  0000                     _PORTAbits	set	3968
   757  0000                     _PORTBbits	set	3969
   758  0000                     _RCONbits	set	4048
   759  0000                     _RCREG1	set	4015
   760  0000                     _RCSTA1bits	set	4012
   761  0000                     _SPBRG1	set	4016
   762  0000                     _SPBRGH1	set	3967
   763  0000                     _SSP2CON1	set	3954
   764  0000                     _SSP2STAT	set	3955
   765  0000                     _SSP2STATbits	set	3955
   766  0000                     _SSPBUF	set	4041
   767  0000                     _T1CONbits	set	4045
   768  0000                     _TMR1H	set	4047
   769  0000                     _TMR1L	set	4046
   770  0000                     _TRISAbits	set	3986
   771  0000                     _TRISBbits	set	3987
   772  0000                     _TRISCbits	set	3988
   773  0000                     _TXREG1	set	4014
   774  0000                     _TXSTA1bits	set	4013
   775                           
   776                           	psect	cinit
   777  013030                     __pcinit:
   778                           	opt stack 0
   779  013030                     start_initialization:
   780                           	opt stack 0
   781  013030                     __initialization:
   782                           	opt stack 0
   783                           
   784                           ; Clear objects allocated to BANK5 (200 bytes)
   785  013030  EE05  F000         	lfsr	0,__pbssBANK5
   786  013034  0EC8               	movlw	200
   787  013036                     clear_0:
   788  013036  6AEE               	clrf	postinc0,c
   789  013038  06E8               	decf	wreg,f,c
   790  01303A  E1FD               	bnz	clear_0
   791                           
   792                           ; Clear objects allocated to BANK4 (200 bytes)
   793  01303C  EE04  F000         	lfsr	0,__pbssBANK4
   794  013040  0EC8               	movlw	200
   795  013042                     clear_1:
   796  013042  6AEE               	clrf	postinc0,c
   797  013044  06E8               	decf	wreg,f,c
   798  013046  E1FD               	bnz	clear_1
   799                           
   800                           ; Clear objects allocated to BANK3 (200 bytes)
   801  013048  EE03  F000         	lfsr	0,__pbssBANK3
   802  01304C  0EC8               	movlw	200
   803  01304E                     clear_2:
   804  01304E  6AEE               	clrf	postinc0,c
   805  013050  06E8               	decf	wreg,f,c
   806  013052  E1FD               	bnz	clear_2
   807                           
   808                           ; Clear objects allocated to BANK2 (200 bytes)
   809  013054  EE02  F000         	lfsr	0,__pbssBANK2
   810  013058  0EC8               	movlw	200
   811  01305A                     clear_3:
   812  01305A  6AEE               	clrf	postinc0,c
   813  01305C  06E8               	decf	wreg,f,c
   814  01305E  E1FD               	bnz	clear_3
   815                           
   816                           ; Clear objects allocated to BANK1 (130 bytes)
   817  013060  EE01  F000         	lfsr	0,__pbssBANK1
   818  013064  0E82               	movlw	130
   819  013066                     clear_4:
   820  013066  6AEE               	clrf	postinc0,c
   821  013068  06E8               	decf	wreg,f,c
   822  01306A  E1FD               	bnz	clear_4
   823                           
   824                           ; Clear objects allocated to BANK0 (26 bytes)
   825  01306C  EE00  F0D9         	lfsr	0,__pbssBANK0
   826  013070  0E1A               	movlw	26
   827  013072                     clear_5:
   828  013072  6AEE               	clrf	postinc0,c
   829  013074  06E8               	decf	wreg,f,c
   830  013076  E1FD               	bnz	clear_5
   831                           
   832                           ; Clear objects allocated to COMRAM (40 bytes)
   833  013078  EE00  F035         	lfsr	0,__pbssCOMRAM
   834  01307C  0E28               	movlw	40
   835  01307E                     clear_6:
   836  01307E  6AEE               	clrf	postinc0,c
   837  013080  06E8               	decf	wreg,f,c
   838  013082  E1FD               	bnz	clear_6
   839                           
   840                           ; Initialize objects allocated to BANK1 (20 bytes)
   841                           ; load TBLPTR registers with __pidataBANK1
   842  013084  0EC2               	movlw	low __pidataBANK1
   843  013086  6EF6               	movwf	tblptrl,c
   844  013088  0E38               	movlw	high __pidataBANK1
   845  01308A  6EF7               	movwf	tblptrh,c
   846  01308C  0E01               	movlw	low (__pidataBANK1 shr (0+16))
   847  01308E  6EF8               	movwf	tblptru,c
   848  013090  EE01  F082         	lfsr	0,__pdataBANK1
   849  013094  EE10 F014          	lfsr	1,20
   850  013098                     copy_data0:
   851  013098  0009               	tblrd		*+
   852  01309A  CFF5 FFEE          	movff	tablat,postinc0
   853  01309E  50E5               	movf	postdec1,w,c
   854  0130A0  50E1               	movf	fsr1l,w,c
   855  0130A2  E1FA               	bnz	copy_data0
   856                           
   857                           ; Initialize objects allocated to BANK0 (6 bytes)
   858                           ; load TBLPTR registers with __pidataBANK0
   859  0130A4  0E02               	movlw	low __pidataBANK0
   860  0130A6  6EF6               	movwf	tblptrl,c
   861  0130A8  0E39               	movlw	high __pidataBANK0
   862  0130AA  6EF7               	movwf	tblptrh,c
   863  0130AC  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   864  0130AE  6EF8               	movwf	tblptru,c
   865  0130B0  EE00  F0F3         	lfsr	0,__pdataBANK0
   866  0130B4  EE10 F006          	lfsr	1,6
   867  0130B8                     copy_data1:
   868  0130B8  0009               	tblrd		*+
   869  0130BA  CFF5 FFEE          	movff	tablat,postinc0
   870  0130BE  50E5               	movf	postdec1,w,c
   871  0130C0  50E1               	movf	fsr1l,w,c
   872  0130C2  E1FA               	bnz	copy_data1
   873  0130C4                     end_of_initialization:
   874                           	opt stack 0
   875  0130C4                     __end_of__initialization:
   876                           	opt stack 0
   877  0130C4  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   878  0130C6  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   879  0130C8  0100               	movlb	0
   880  0130CA  EF24  F093         	goto	_main	;jump to C main() function
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1l	equ	0xFE1
   889                           
   890                           	psect	bssCOMRAM
   891  000035                     __pbssCOMRAM:
   892                           	opt stack 0
   893  000035                     _cap_measurement_new:
   894                           	opt stack 0
   895  000035                     	ds	2
   896  000037                     _cap_measurement_old:
   897                           	opt stack 0
   898  000037                     	ds	2
   899  000039                     _currentChannel:
   900                           	opt stack 0
   901  000039                     	ds	2
   902  00003B                     _ind_measurement_new:
   903                           	opt stack 0
   904  00003B                     	ds	2
   905  00003D                     _ind_measurement_old:
   906                           	opt stack 0
   907  00003D                     	ds	2
   908  00003F                     _interrupt_count_cap:
   909                           	opt stack 0
   910  00003F                     	ds	2
   911  000041                     _interrupt_count_ind:
   912                           	opt stack 0
   913  000041                     	ds	2
   914  000043                     _minus_ambient:
   915                           	opt stack 0
   916  000043                     	ds	2
   917  000045                     _minus_pipe:
   918                           	opt stack 0
   919  000045                     	ds	2
   920  000047                     _plus_ambient:
   921                           	opt stack 0
   922  000047                     	ds	2
   923  000049                     _plus_pipe:
   924                           	opt stack 0
   925  000049                     	ds	2
   926  00004B                     _temp_ambient:
   927                           	opt stack 0
   928  00004B                     	ds	2
   929  00004D                     _temp_pipe:
   930                           	opt stack 0
   931  00004D                     	ds	2
   932  00004F                     _value:
   933                           	opt stack 0
   934  00004F                     	ds	2
   935  000051                     _valueH:
   936                           	opt stack 0
   937  000051                     	ds	2
   938  000053                     _valueL:
   939                           	opt stack 0
   940  000053                     	ds	2
   941  000055                     _cap_value:
   942                           	opt stack 0
   943  000055                     	ds	4
   944  000059                     _ind_value:
   945                           	opt stack 0
   946  000059                     	ds	4
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1l	equ	0xFE1
   955                           
   956                           	psect	bssBANK0
   957  0000D9                     __pbssBANK0:
   958                           	opt stack 0
   959  0000D9                     _cap_freq:
   960                           	opt stack 0
   961  0000D9                     	ds	3
   962  0000DC                     _frequency:
   963                           	opt stack 0
   964  0000DC                     	ds	3
   965  0000DF                     _ind_freq:
   966                           	opt stack 0
   967  0000DF                     	ds	3
   968  0000E2                     _ind_freq2:
   969                           	opt stack 0
   970  0000E2                     	ds	3
   971  0000E5                     _percent:
   972                           	opt stack 0
   973  0000E5                     	ds	3
   974  0000E8                     _errno:
   975                           	opt stack 0
   976  0000E8                     	ds	2
   977  0000EA                     _inductive:
   978                           	opt stack 0
   979  0000EA                     	ds	2
   980  0000EC                     _timer:
   981                           	opt stack 0
   982  0000EC                     	ds	2
   983  0000EE                     _uart_receive_buffer_index:
   984                           	opt stack 0
   985  0000EE                     	ds	2
   986  0000F0                     _bigorsmall:
   987                           	opt stack 0
   988  0000F0                     	ds	1
   989  0000F1                     _state:
   990                           	opt stack 0
   991  0000F1                     	ds	1
   992  0000F2                     _step:
   993                           	opt stack 0
   994  0000F2                     	ds	1
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           
  1004                           	psect	dataBANK0
  1005  0000F3                     __pdataBANK0:
  1006                           	opt stack 0
  1007  0000F3                     _asciiTemp:
  1008                           	opt stack 0
  1009  0000F3                     	ds	5
  1010  0000F8                     _isCommandSent:
  1011                           	opt stack 0
  1012  0000F8                     	ds	1
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022                           	psect	bssBANK1
  1023  000100                     __pbssBANK1:
  1024                           	opt stack 0
  1025  000100                     _uart_receive_buffer:
  1026                           	opt stack 0
  1027  000100                     	ds	100
  1028  000164                     _last_uart_message:
  1029                           	opt stack 0
  1030  000164                     	ds	30
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           fsr1l	equ	0xFE1
  1039                           
  1040                           	psect	dataBANK1
  1041  000182                     __pdataBANK1:
  1042                           	opt stack 0
  1043  000182                     _temp_display_message:
  1044                           	opt stack 0
  1045  000182                     	ds	20
  1046                           tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055                           	psect	bssBANK2
  1056  000200                     __pbssBANK2:
  1057                           	opt stack 0
  1058  000200                     _ind_frequency_message:
  1059                           	opt stack 0
  1060  000200                     	ds	200
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           postdec1	equ	0xFE5
  1068                           fsr1l	equ	0xFE1
  1069                           
  1070                           	psect	bssBANK3
  1071  000300                     __pbssBANK3:
  1072                           	opt stack 0
  1073  000300                     _cap_frequency_message:
  1074                           	opt stack 0
  1075  000300                     	ds	200
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           postdec1	equ	0xFE5
  1083                           fsr1l	equ	0xFE1
  1084                           
  1085                           	psect	bssBANK4
  1086  000400                     __pbssBANK4:
  1087                           	opt stack 0
  1088  000400                     _lora_message:
  1089                           	opt stack 0
  1090  000400                     	ds	200
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           postinc0	equ	0xFEE
  1096                           wreg	equ	0xFE8
  1097                           postdec1	equ	0xFE5
  1098                           fsr1l	equ	0xFE1
  1099                           
  1100                           	psect	bssBANK5
  1101  000500                     __pbssBANK5:
  1102                           	opt stack 0
  1103  000500                     _cap_step_message:
  1104                           	opt stack 0
  1105  000500                     	ds	200
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postdec1	equ	0xFE5
  1113                           fsr1l	equ	0xFE1
  1114                           
  1115                           	psect	cstackBANK0
  1116  000060                     __pcstackBANK0:
  1117                           	opt stack 0
  1118  000060                     ?___awmod:
  1119                           	opt stack 0
  1120  000060                     ?___ftpack:
  1121                           	opt stack 0
  1122  000060                     ?_frexp:
  1123                           	opt stack 0
  1124  000060                     ?___ftneg:
  1125                           	opt stack 0
  1126  000060                     ?__tdiv_to_l_:
  1127                           	opt stack 0
  1128  000060                     ?__div_to_l_:
  1129                           	opt stack 0
  1130  000060                     ?___lldiv:
  1131                           	opt stack 0
  1132  000060                     UARTReceive@on_or_off:
  1133                           	opt stack 0
  1134  000060                     delay_ms@ms:
  1135                           	opt stack 0
  1136  000060                     ___awmod@dividend:
  1137                           	opt stack 0
  1138  000060                     __div_to_l_@f1:
  1139                           	opt stack 0
  1140  000060                     ___ftpack@arg:
  1141                           	opt stack 0
  1142  000060                     __tdiv_to_l_@f1:
  1143                           	opt stack 0
  1144  000060                     ___ftneg@f1:
  1145                           	opt stack 0
  1146  000060                     frexp@value:
  1147                           	opt stack 0
  1148  000060                     ___lldiv@dividend:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x0
  1152  000060                     	ds	2
  1153  000062                     ??_delay_ms:
  1154  000062                     ___awmod@divisor:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x2
  1158  000062                     	ds	1
  1159  000063                     ___ftpack@exp:
  1160                           	opt stack 0
  1161  000063                     delay_ms@i:
  1162                           	opt stack 0
  1163  000063                     frexp@eptr:
  1164                           	opt stack 0
  1165  000063                     __div_to_l_@f2:
  1166                           	opt stack 0
  1167  000063                     __tdiv_to_l_@f2:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x3
  1171  000063                     	ds	1
  1172  000064                     ___awmod@counter:
  1173                           	opt stack 0
  1174  000064                     ___ftpack@sign:
  1175                           	opt stack 0
  1176  000064                     ___lldiv@divisor:
  1177                           	opt stack 0
  1178                           
  1179                           ; 4 bytes @ 0x4
  1180  000064                     	ds	1
  1181  000065                     ??___ftpack:
  1182  000065                     ??_frexp:
  1183  000065                     ___awmod@sign:
  1184                           	opt stack 0
  1185  000065                     sendUARTMessage@newMessagePointer:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x5
  1189  000065                     	ds	1
  1190  000066                     ??__tdiv_to_l_:
  1191  000066                     ?___awdiv:
  1192                           	opt stack 0
  1193  000066                     ___awdiv@dividend:
  1194                           	opt stack 0
  1195  000066                     __div_to_l_@quot:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x6
  1199  000066                     	ds	1
  1200  000067                     
  1201                           ; 0 bytes @ 0x7
  1202  000067                     	ds	1
  1203  000068                     ?___awtoft:
  1204                           	opt stack 0
  1205  000068                     ?___lbtoft:
  1206                           	opt stack 0
  1207  000068                     ?___lltoft:
  1208                           	opt stack 0
  1209  000068                     ___awdiv@divisor:
  1210                           	opt stack 0
  1211  000068                     ___awtoft@c:
  1212                           	opt stack 0
  1213  000068                     ___lldiv@quotient:
  1214                           	opt stack 0
  1215  000068                     ___lltoft@c:
  1216                           	opt stack 0
  1217                           
  1218                           ; 4 bytes @ 0x8
  1219  000068                     	ds	1
  1220  000069                     __tdiv_to_l_@quot:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x9
  1224  000069                     	ds	1
  1225  00006A                     ___awdiv@counter:
  1226                           	opt stack 0
  1227  00006A                     __div_to_l_@cntr:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0xA
  1231  00006A                     	ds	1
  1232  00006B                     ___awdiv@sign:
  1233                           	opt stack 0
  1234  00006B                     ___awtoft@sign:
  1235                           	opt stack 0
  1236  00006B                     __div_to_l_@exp1:
  1237                           	opt stack 0
  1238  00006B                     ___lbtoft@c:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0xB
  1242  00006B                     	ds	1
  1243  00006C                     ??___lltoft:
  1244  00006C                     ___lldiv@counter:
  1245                           	opt stack 0
  1246  00006C                     ___awdiv@quotient:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0xC
  1250  00006C                     	ds	1
  1251  00006D                     ?___llmod:
  1252                           	opt stack 0
  1253  00006D                     __tdiv_to_l_@cntr:
  1254                           	opt stack 0
  1255  00006D                     ___llmod@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 4 bytes @ 0xD
  1259  00006D                     	ds	1
  1260  00006E                     ?___wmul:
  1261                           	opt stack 0
  1262  00006E                     __tdiv_to_l_@exp1:
  1263                           	opt stack 0
  1264  00006E                     ___wmul@multiplier:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0xE
  1268  00006E                     	ds	2
  1269  000070                     ___lltoft@exp:
  1270                           	opt stack 0
  1271  000070                     ___wmul@multiplicand:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x10
  1275  000070                     	ds	1
  1276  000071                     ___llmod@divisor:
  1277                           	opt stack 0
  1278                           
  1279                           ; 4 bytes @ 0x11
  1280  000071                     	ds	1
  1281  000072                     ___wmul@product:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x12
  1285  000072                     	ds	2
  1286  000074                     ?___ftmul:
  1287                           	opt stack 0
  1288  000074                     ___ftmul@f1:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x14
  1292  000074                     	ds	1
  1293  000075                     ___llmod@counter:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x15
  1297  000075                     	ds	2
  1298  000077                     ___ftmul@f2:
  1299                           	opt stack 0
  1300                           
  1301                           ; 3 bytes @ 0x17
  1302  000077                     	ds	3
  1303  00007A                     ??___ftmul:
  1304                           
  1305                           ; 0 bytes @ 0x1A
  1306  00007A                     	ds	3
  1307  00007D                     ___ftmul@exp:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x1D
  1311  00007D                     	ds	1
  1312  00007E                     ___ftmul@f3_as_product:
  1313                           	opt stack 0
  1314                           
  1315                           ; 3 bytes @ 0x1E
  1316  00007E                     	ds	3
  1317  000081                     ___ftmul@cntr:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x21
  1321  000081                     	ds	1
  1322  000082                     ___ftmul@sign:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x22
  1326  000082                     	ds	1
  1327  000083                     ?_fround:
  1328                           	opt stack 0
  1329  000083                     ?_scale:
  1330                           	opt stack 0
  1331  000083                     ___ftge@ff1:
  1332                           	opt stack 0
  1333                           
  1334                           ; 3 bytes @ 0x23
  1335  000083                     	ds	3
  1336  000086                     ___ftge@ff2:
  1337                           	opt stack 0
  1338  000086                     _fround$2668:
  1339                           	opt stack 0
  1340  000086                     _scale$2669:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x26
  1344  000086                     	ds	3
  1345  000089                     ??___ftge:
  1346  000089                     scale@scl:
  1347                           	opt stack 0
  1348  000089                     _fround$2667:
  1349                           	opt stack 0
  1350                           
  1351                           ; 3 bytes @ 0x29
  1352  000089                     	ds	1
  1353  00008A                     ?___fttol:
  1354                           	opt stack 0
  1355  00008A                     ___fttol@f1:
  1356                           	opt stack 0
  1357                           
  1358                           ; 3 bytes @ 0x2A
  1359  00008A                     	ds	2
  1360  00008C                     fround@prec:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x2C
  1364  00008C                     	ds	1
  1365  00008D                     ?___ftadd:
  1366                           	opt stack 0
  1367  00008D                     ___ftadd@f1:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x2D
  1371  00008D                     	ds	1
  1372  00008E                     ??___fttol:
  1373                           
  1374                           ; 0 bytes @ 0x2E
  1375  00008E                     	ds	2
  1376  000090                     ___ftadd@f2:
  1377                           	opt stack 0
  1378                           
  1379                           ; 3 bytes @ 0x30
  1380  000090                     	ds	3
  1381  000093                     ??___ftadd:
  1382  000093                     ___fttol@sign1:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x33
  1386  000093                     	ds	1
  1387  000094                     ___fttol@lval:
  1388                           	opt stack 0
  1389                           
  1390                           ; 4 bytes @ 0x34
  1391  000094                     	ds	2
  1392  000096                     ___ftadd@sign:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x36
  1396  000096                     	ds	1
  1397  000097                     ___ftadd@exp2:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x37
  1401  000097                     	ds	1
  1402  000098                     ___ftadd@exp1:
  1403                           	opt stack 0
  1404  000098                     ___fttol@exp1:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x38
  1408  000098                     	ds	1
  1409  000099                     ?___ftdiv:
  1410                           	opt stack 0
  1411  000099                     ?___ftsub:
  1412                           	opt stack 0
  1413  000099                     ?_eval_poly:
  1414                           	opt stack 0
  1415  000099                     ?___altoft:
  1416                           	opt stack 0
  1417  000099                     ___ftdiv@f1:
  1418                           	opt stack 0
  1419  000099                     ___ftsub@f1:
  1420                           	opt stack 0
  1421  000099                     eval_poly@x:
  1422                           	opt stack 0
  1423  000099                     ___altoft@c:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x39
  1427  000099                     	ds	3
  1428  00009C                     eval_poly@d:
  1429                           	opt stack 0
  1430  00009C                     ___ftdiv@f2:
  1431                           	opt stack 0
  1432  00009C                     ___ftsub@f2:
  1433                           	opt stack 0
  1434                           
  1435                           ; 3 bytes @ 0x3C
  1436  00009C                     	ds	1
  1437  00009D                     ??___altoft:
  1438                           
  1439                           ; 0 bytes @ 0x3D
  1440  00009D                     	ds	1
  1441  00009E                     eval_poly@n:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x3E
  1445  00009E                     	ds	1
  1446  00009F                     ??___ftdiv:
  1447  00009F                     ?_sprintf:
  1448                           	opt stack 0
  1449  00009F                     sprintf@sp:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x3F
  1453  00009F                     	ds	1
  1454  0000A0                     ??_eval_poly:
  1455                           
  1456                           ; 0 bytes @ 0x40
  1457  0000A0                     	ds	1
  1458  0000A1                     ___altoft@exp:
  1459                           	opt stack 0
  1460  0000A1                     sprintf@f:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x41
  1464  0000A1                     	ds	1
  1465  0000A2                     ___altoft@sign:
  1466                           	opt stack 0
  1467  0000A2                     ___ftdiv@cntr:
  1468                           	opt stack 0
  1469  0000A2                     eval_poly@res:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x42
  1473  0000A2                     	ds	1
  1474  0000A3                     ?_floor:
  1475                           	opt stack 0
  1476  0000A3                     ___ftdiv@f3:
  1477                           	opt stack 0
  1478  0000A3                     floor@x:
  1479                           	opt stack 0
  1480                           
  1481                           ; 3 bytes @ 0x43
  1482  0000A3                     	ds	2
  1483  0000A5                     ?_log:
  1484                           	opt stack 0
  1485  0000A5                     ?_ldexp:
  1486                           	opt stack 0
  1487  0000A5                     ldexp@value:
  1488                           	opt stack 0
  1489  0000A5                     log@x:
  1490                           	opt stack 0
  1491                           
  1492                           ; 3 bytes @ 0x45
  1493  0000A5                     	ds	1
  1494  0000A6                     ___ftdiv@exp:
  1495                           	opt stack 0
  1496  0000A6                     floor@i:
  1497                           	opt stack 0
  1498                           
  1499                           ; 3 bytes @ 0x46
  1500  0000A6                     	ds	1
  1501  0000A7                     ___ftdiv@sign:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x47
  1505  0000A7                     	ds	1
  1506  0000A8                     ldexp@newexp:
  1507                           	opt stack 0
  1508  0000A8                     log@exponent:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x48
  1512  0000A8                     	ds	1
  1513  0000A9                     floor@expon:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x49
  1517  0000A9                     	ds	1
  1518  0000AA                     ??_ldexp:
  1519                           
  1520                           ; 0 bytes @ 0x4A
  1521  0000AA                     	ds	2
  1522  0000AC                     ?_exp:
  1523                           	opt stack 0
  1524  0000AC                     exp@x:
  1525                           	opt stack 0
  1526                           
  1527                           ; 3 bytes @ 0x4C
  1528  0000AC                     	ds	3
  1529  0000AF                     ??_sprintf:
  1530  0000AF                     _exp$2673:
  1531                           	opt stack 0
  1532                           
  1533                           ; 3 bytes @ 0x4F
  1534  0000AF                     	ds	3
  1535  0000B2                     exp@exponent:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x52
  1539  0000B2                     	ds	2
  1540  0000B4                     exp@sign:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x54
  1544  0000B4                     	ds	1
  1545  0000B5                     ?_pow:
  1546                           	opt stack 0
  1547  0000B5                     pow@x:
  1548                           	opt stack 0
  1549  0000B5                     _sprintf$2670:
  1550                           	opt stack 0
  1551                           
  1552                           ; 3 bytes @ 0x55
  1553  0000B5                     	ds	3
  1554  0000B8                     sprintf@idx:
  1555                           	opt stack 0
  1556  0000B8                     pow@y:
  1557                           	opt stack 0
  1558                           
  1559                           ; 3 bytes @ 0x58
  1560  0000B8                     	ds	1
  1561  0000B9                     sprintf@ap:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x59
  1565  0000B9                     	ds	2
  1566  0000BB                     sprintf@flag:
  1567                           	opt stack 0
  1568  0000BB                     _pow$2671:
  1569                           	opt stack 0
  1570                           
  1571                           ; 3 bytes @ 0x5B
  1572  0000BB                     	ds	2
  1573  0000BD                     sprintf@prec:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x5D
  1577  0000BD                     	ds	1
  1578  0000BE                     _pow$2672:
  1579                           	opt stack 0
  1580                           
  1581                           ; 3 bytes @ 0x5E
  1582  0000BE                     	ds	1
  1583  0000BF                     sprintf@val:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x5F
  1587  0000BF                     	ds	2
  1588  0000C1                     pow@sign:
  1589                           	opt stack 0
  1590                           
  1591                           ; 1 bytes @ 0x61
  1592  0000C1                     	ds	1
  1593  0000C2                     pow@yi:
  1594                           	opt stack 0
  1595                           
  1596                           ; 4 bytes @ 0x62
  1597  0000C2                     	ds	1
  1598  0000C3                     sprintf@exp:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x63
  1602  0000C3                     	ds	2
  1603  0000C5                     sprintf@tmpval:
  1604                           	opt stack 0
  1605                           
  1606                           ; 4 bytes @ 0x65
  1607  0000C5                     	ds	1
  1608  0000C6                     _initSPI$2661:
  1609                           	opt stack 0
  1610  0000C6                     _adjustDigipot$2664:
  1611                           	opt stack 0
  1612                           
  1613                           ; 3 bytes @ 0x66
  1614  0000C6                     	ds	3
  1615  0000C9                     sprintf@fval:
  1616                           	opt stack 0
  1617  0000C9                     _initSPI$2662:
  1618                           	opt stack 0
  1619  0000C9                     _adjustDigipot$2665:
  1620                           	opt stack 0
  1621                           
  1622                           ; 3 bytes @ 0x69
  1623  0000C9                     	ds	3
  1624  0000CC                     sprintf@c:
  1625                           	opt stack 0
  1626  0000CC                     _initSPI$2663:
  1627                           	opt stack 0
  1628  0000CC                     _adjustDigipot$2666:
  1629                           	opt stack 0
  1630                           
  1631                           ; 3 bytes @ 0x6C
  1632  0000CC                     	ds	1
  1633  0000CD                     sendSensorData@capacitance:
  1634                           	opt stack 0
  1635                           
  1636                           ; 3 bytes @ 0x6D
  1637  0000CD                     	ds	2
  1638  0000CF                     
  1639                           ; 0 bytes @ 0x6F
  1640  0000CF                     	ds	1
  1641  0000D0                     sendSensorData@ambient_temp:
  1642                           	opt stack 0
  1643                           
  1644                           ; 3 bytes @ 0x70
  1645  0000D0                     	ds	3
  1646  0000D3                     sendSensorData@pipe_temp:
  1647                           	opt stack 0
  1648                           
  1649                           ; 3 bytes @ 0x73
  1650  0000D3                     	ds	3
  1651  0000D6                     sendSensorData@inductance:
  1652                           	opt stack 0
  1653                           
  1654                           ; 3 bytes @ 0x76
  1655  0000D6                     	ds	3
  1656  0000D9                     tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           postdec1	equ	0xFE5
  1663                           fsr1l	equ	0xFE1
  1664                           
  1665                           ; 0 bytes @ 0x79
  1666                           
  1667                           	psect	cstackCOMRAM
  1668  000001                     __pcstackCOMRAM:
  1669                           	opt stack 0
  1670  000001                     ??_temperature_interrupt:
  1671  000001                     ?i2___ftpack:
  1672                           	opt stack 0
  1673  000001                     ?___lmul:
  1674                           	opt stack 0
  1675  000001                     ?i2___lldiv:
  1676                           	opt stack 0
  1677  000001                     i2___ftpack@arg:
  1678                           	opt stack 0
  1679  000001                     ___lmul@multiplier:
  1680                           	opt stack 0
  1681  000001                     i2___lldiv@dividend:
  1682                           	opt stack 0
  1683                           
  1684                           ; 4 bytes @ 0x0
  1685  000001                     	ds	3
  1686  000004                     i2___ftpack@exp:
  1687                           	opt stack 0
  1688                           
  1689                           ; 1 bytes @ 0x3
  1690  000004                     	ds	1
  1691  000005                     i2___ftpack@sign:
  1692                           	opt stack 0
  1693  000005                     ___lmul@multiplicand:
  1694                           	opt stack 0
  1695  000005                     i2___lldiv@divisor:
  1696                           	opt stack 0
  1697                           
  1698                           ; 4 bytes @ 0x4
  1699  000005                     	ds	1
  1700  000006                     ??i2___ftpack:
  1701                           
  1702                           ; 0 bytes @ 0x5
  1703  000006                     	ds	3
  1704  000009                     ___lmul@product:
  1705                           	opt stack 0
  1706  000009                     i2___lldiv@quotient:
  1707                           	opt stack 0
  1708                           
  1709                           ; 4 bytes @ 0x8
  1710  000009                     	ds	4
  1711  00000D                     ?___aldiv:
  1712                           	opt stack 0
  1713  00000D                     i2___lldiv@counter:
  1714                           	opt stack 0
  1715  00000D                     ___aldiv@dividend:
  1716                           	opt stack 0
  1717                           
  1718                           ; 4 bytes @ 0xC
  1719  00000D                     	ds	1
  1720  00000E                     ?i2___lltoft:
  1721                           	opt stack 0
  1722  00000E                     i2___lltoft@c:
  1723                           	opt stack 0
  1724                           
  1725                           ; 4 bytes @ 0xD
  1726  00000E                     	ds	3
  1727  000011                     ___aldiv@divisor:
  1728                           	opt stack 0
  1729                           
  1730                           ; 4 bytes @ 0x10
  1731  000011                     	ds	1
  1732  000012                     ??i2___lltoft:
  1733                           
  1734                           ; 0 bytes @ 0x11
  1735  000012                     	ds	3
  1736  000015                     ___aldiv@counter:
  1737                           	opt stack 0
  1738                           
  1739                           ; 1 bytes @ 0x14
  1740  000015                     	ds	1
  1741  000016                     ___aldiv@sign:
  1742                           	opt stack 0
  1743  000016                     i2___lltoft@exp:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x15
  1747  000016                     	ds	1
  1748  000017                     ___aldiv@quotient:
  1749                           	opt stack 0
  1750                           
  1751                           ; 4 bytes @ 0x16
  1752  000017                     	ds	4
  1753  00001B                     ??_frequency_interrupt:
  1754                           
  1755                           ; 0 bytes @ 0x1A
  1756  00001B                     	ds	8
  1757  000023                     _frequency_interrupt$2660:
  1758                           	opt stack 0
  1759                           
  1760                           ; 4 bytes @ 0x22
  1761  000023                     	ds	4
  1762  000027                     ??_high_ISR:
  1763                           
  1764                           ; 0 bytes @ 0x26
  1765  000027                     	ds	14
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           postinc0	equ	0xFEE
  1771                           wreg	equ	0xFE8
  1772                           postdec1	equ	0xFE5
  1773                           fsr1l	equ	0xFE1
  1774                           
  1775 ;;
  1776 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1777 ;;
  1778 ;; *************** function _main *****************
  1779 ;; Defined at:
  1780 ;;		line 26 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels required when called:   11
  1800 ;; This function calls:
  1801 ;;		_UARTReceive
  1802 ;;		_delay_ms
  1803 ;;		_digipot
  1804 ;;		_initADC
  1805 ;;		_initInterrupts
  1806 ;;		_initLoRa
  1807 ;;		_initSPI
  1808 ;;		_initUART1
  1809 ;;		_init_frequency
  1810 ;;		_make_frequency_message
  1811 ;;		_make_step_message
  1812 ;;		_sendSensorData
  1813 ;;		_sendUARTMessage
  1814 ;; This function is called by:
  1815 ;;		Startup code after reset
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text0
  1820  012648                     __ptext0:
  1821                           	opt stack 0
  1822  012648                     _main:
  1823                           	opt stack 20
  1824                           
  1825                           ;main.c: 28: OSCCONbits.IRCF0 = 1;
  1826                           
  1827                           ;incstack = 0
  1828  012648  88D3               	bsf	4051,4,c	;volatile
  1829                           
  1830                           ;main.c: 29: OSCCONbits.SCS0 = 1;
  1831  01264A  80D3               	bsf	4051,0,c	;volatile
  1832                           
  1833                           ;main.c: 30: OSCCONbits.SCS1 = 1;
  1834  01264C  82D3               	bsf	4051,1,c	;volatile
  1835                           
  1836                           ;main.c: 32: isCommandSent = 1;
  1837  01264E  0E01               	movlw	1
  1838  012650  0100               	movlb	0	; () banked
  1839  012652  6FF8               	movwf	_isCommandSent& (0+255),b
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 33: initUART1();
  1843  012654  EC53  F09C         	call	_initUART1	;wreg free
  1844                           
  1845                           ;main.c: 34: initADC();
  1846  012658  EC02  F09C         	call	_initADC	;wreg free
  1847                           
  1848                           ;main.c: 35: initInterrupts();
  1849  01265C  EC7D  F09C         	call	_initInterrupts	;wreg free
  1850                           
  1851                           ;main.c: 36: initSPI();
  1852  012660  EC05  F092         	call	_initSPI	;wreg free
  1853                           
  1854                           ;main.c: 37: init_frequency();
  1855  012664  EC48  F09A         	call	_init_frequency	;wreg free
  1856                           
  1857                           ;main.c: 38: initLoRa();
  1858  012668  ECCE  F099         	call	_initLoRa	;wreg free
  1859  01266C                     l4450:
  1860                           
  1861                           ;main.c: 41: UARTReceive(1);
  1862  01266C  0E01               	movlw	1
  1863  01266E  EC6B  F09C         	call	_UARTReceive
  1864                           
  1865                           ;main.c: 42: sendSensorData(1.1,2.2,3.3,4.4);
  1866  012672  0ECD               	movlw	205
  1867  012674  0100               	movlb	0	; () banked
  1868  012676  6FCD               	movwf	sendSensorData@capacitance& (0+255),b
  1869  012678  0E8C               	movlw	140
  1870  01267A  0100               	movlb	0	; () banked
  1871  01267C  6FCE               	movwf	(sendSensorData@capacitance+1)& (0+255),b
  1872  01267E  0E3F               	movlw	63
  1873  012680  0100               	movlb	0	; () banked
  1874  012682  6FCF               	movwf	(sendSensorData@capacitance+2)& (0+255),b
  1875  012684  0ECD               	movlw	205
  1876  012686  0100               	movlb	0	; () banked
  1877  012688  6FD0               	movwf	sendSensorData@ambient_temp& (0+255),b
  1878  01268A  0E0C               	movlw	12
  1879  01268C  0100               	movlb	0	; () banked
  1880  01268E  6FD1               	movwf	(sendSensorData@ambient_temp+1)& (0+255),b
  1881  012690  0E40               	movlw	64
  1882  012692  0100               	movlb	0	; () banked
  1883  012694  6FD2               	movwf	(sendSensorData@ambient_temp+2)& (0+255),b
  1884  012696  0E33               	movlw	51
  1885  012698  0100               	movlb	0	; () banked
  1886  01269A  6FD3               	movwf	sendSensorData@pipe_temp& (0+255),b
  1887  01269C  0E53               	movlw	83
  1888  01269E  0100               	movlb	0	; () banked
  1889  0126A0  6FD4               	movwf	(sendSensorData@pipe_temp+1)& (0+255),b
  1890  0126A2  0E40               	movlw	64
  1891  0126A4  0100               	movlb	0	; () banked
  1892  0126A6  6FD5               	movwf	(sendSensorData@pipe_temp+2)& (0+255),b
  1893  0126A8  0ECD               	movlw	205
  1894  0126AA  0100               	movlb	0	; () banked
  1895  0126AC  6FD6               	movwf	sendSensorData@inductance& (0+255),b
  1896  0126AE  0E8C               	movlw	140
  1897  0126B0  0100               	movlb	0	; () banked
  1898  0126B2  6FD7               	movwf	(sendSensorData@inductance+1)& (0+255),b
  1899  0126B4  0E40               	movlw	64
  1900  0126B6  0100               	movlb	0	; () banked
  1901  0126B8  6FD8               	movwf	(sendSensorData@inductance+2)& (0+255),b
  1902  0126BA  ECB8  F09A         	call	_sendSensorData	;wreg free
  1903                           
  1904                           ;main.c: 43: UARTReceive(0);
  1905  0126BE  0E00               	movlw	0
  1906  0126C0  EC6B  F09C         	call	_UARTReceive
  1907                           
  1908                           ;main.c: 45: delay_ms(800);
  1909  0126C4  0E03               	movlw	3
  1910  0126C6  0100               	movlb	0	; () banked
  1911  0126C8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1912  0126CA  0E20               	movlw	32
  1913  0126CC  6F60               	movwf	delay_ms@ms& (0+255),b
  1914  0126CE  EC6D  F09B         	call	_delay_ms	;wreg free
  1915                           
  1916                           ;main.c: 46: make_frequency_message();
  1917  0126D2  EC81  F09A         	call	_make_frequency_message	;wreg free
  1918                           
  1919                           ;main.c: 48: make_step_message();
  1920  0126D6  EC30  F09C         	call	_make_step_message	;wreg free
  1921                           
  1922                           ;main.c: 49: sendUARTMessage(ind_frequency_message);
  1923  0126DA  0E00               	movlw	low _ind_frequency_message
  1924  0126DC  0100               	movlb	0	; () banked
  1925  0126DE  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  1926  0126E0  0E02               	movlw	high _ind_frequency_message
  1927  0126E2  0100               	movlb	0	; () banked
  1928  0126E4  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  1929  0126E6  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  1930                           
  1931                           ;main.c: 50: delay_ms(800);
  1932  0126EA  0E03               	movlw	3
  1933  0126EC  0100               	movlb	0	; () banked
  1934  0126EE  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1935  0126F0  0E20               	movlw	32
  1936  0126F2  6F60               	movwf	delay_ms@ms& (0+255),b
  1937  0126F4  EC6D  F09B         	call	_delay_ms	;wreg free
  1938                           
  1939                           ;main.c: 51: sendUARTMessage(cap_frequency_message);
  1940  0126F8  0E00               	movlw	low _cap_frequency_message
  1941  0126FA  0100               	movlb	0	; () banked
  1942  0126FC  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  1943  0126FE  0E03               	movlw	high _cap_frequency_message
  1944  012700  0100               	movlb	0	; () banked
  1945  012702  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  1946  012704  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  1947                           
  1948                           ;main.c: 52: delay_ms(800);
  1949  012708  0E03               	movlw	3
  1950  01270A  0100               	movlb	0	; () banked
  1951  01270C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1952  01270E  0E20               	movlw	32
  1953  012710  6F60               	movwf	delay_ms@ms& (0+255),b
  1954  012712  EC6D  F09B         	call	_delay_ms	;wreg free
  1955                           
  1956                           ;main.c: 53: sendUARTMessage(cap_step_message);
  1957  012716  0E00               	movlw	low _cap_step_message
  1958  012718  0100               	movlb	0	; () banked
  1959  01271A  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  1960  01271C  0E05               	movlw	high _cap_step_message
  1961  01271E  0100               	movlb	0	; () banked
  1962  012720  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  1963  012722  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  1964                           
  1965                           ;main.c: 54: delay_ms(800);
  1966  012726  0E03               	movlw	3
  1967  012728  0100               	movlb	0	; () banked
  1968  01272A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1969  01272C  0E20               	movlw	32
  1970  01272E  6F60               	movwf	delay_ms@ms& (0+255),b
  1971  012730  EC6D  F09B         	call	_delay_ms	;wreg free
  1972                           
  1973                           ;main.c: 58: delay_ms(800);
  1974  012734  0E03               	movlw	3
  1975  012736  0100               	movlb	0	; () banked
  1976  012738  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1977  01273A  0E20               	movlw	32
  1978  01273C  6F60               	movwf	delay_ms@ms& (0+255),b
  1979  01273E  EC6D  F09B         	call	_delay_ms	;wreg free
  1980                           
  1981                           ;main.c: 62: delay_ms(800);
  1982  012742  0E03               	movlw	3
  1983  012744  0100               	movlb	0	; () banked
  1984  012746  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  1985  012748  0E20               	movlw	32
  1986  01274A  6F60               	movwf	delay_ms@ms& (0+255),b
  1987  01274C  EC6D  F09B         	call	_delay_ms	;wreg free
  1988                           
  1989                           ;main.c: 65: digipot();
  1990  012750  EC2A  F095         	call	_digipot	;wreg free
  1991  012754  D78B               	goto	l4450
  1992  012756                     __end_of_main:
  1993                           	opt stack 0
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           
  2003 ;; *************** function _sendSensorData *****************
  2004 ;; Defined at:
  2005 ;;		line 42 in file "lora.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  capacitance     3  109[BANK0 ] PTR unsigned char 
  2008 ;;  ambient_temp    3  112[BANK0 ] PTR unsigned char 
  2009 ;;  pipe_temp       3  115[BANK0 ] PTR unsigned char 
  2010 ;;  inductance      3  118[BANK0 ] PTR unsigned char 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;		None               void
  2015 ;; Registers used:
  2016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2022 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;Total ram usage:       12 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    8
  2029 ;; This function calls:
  2030 ;;		_delay_ms
  2031 ;;		_sendUARTMessage
  2032 ;;		_sprintf
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text1
  2039  013570                     __ptext1:
  2040                           	opt stack 0
  2041  013570                     _sendSensorData:
  2042                           	opt stack 22
  2043                           
  2044                           ;lora.c: 43: sprintf(lora_message,"mac tx cnf 1 %x%x%x%x\r\n",
  2045                           ;lora.c: 44: capacitance, ambient_temp, pipe_temp, inductance);
  2046                           
  2047                           ;incstack = 0
  2048  013570  0E00               	movlw	low _lora_message
  2049  013572  0100               	movlb	0	; () banked
  2050  013574  6F9F               	movwf	sprintf@sp& (0+255),b
  2051  013576  0E04               	movlw	high _lora_message
  2052  013578  0100               	movlb	0	; () banked
  2053  01357A  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  2054  01357C  0EC6               	movlw	low STR_4
  2055  01357E  0100               	movlb	0	; () banked
  2056  013580  6FA1               	movwf	sprintf@f& (0+255),b
  2057  013582  0EFF               	movlw	high STR_4
  2058  013584  0100               	movlb	0	; () banked
  2059  013586  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  2060  013588  C0CD  F0A3         	movff	sendSensorData@capacitance,?_sprintf+4
  2061  01358C  C0CE  F0A4         	movff	sendSensorData@capacitance+1,?_sprintf+5
  2062  013590  C0CF  F0A5         	movff	sendSensorData@capacitance+2,?_sprintf+6
  2063  013594  C0D0  F0A6         	movff	sendSensorData@ambient_temp,?_sprintf+7
  2064  013598  C0D1  F0A7         	movff	sendSensorData@ambient_temp+1,?_sprintf+8
  2065  01359C  C0D2  F0A8         	movff	sendSensorData@ambient_temp+2,?_sprintf+9
  2066  0135A0  C0D3  F0A9         	movff	sendSensorData@pipe_temp,?_sprintf+10
  2067  0135A4  C0D4  F0AA         	movff	sendSensorData@pipe_temp+1,?_sprintf+11
  2068  0135A8  C0D5  F0AB         	movff	sendSensorData@pipe_temp+2,?_sprintf+12
  2069  0135AC  C0D6  F0AC         	movff	sendSensorData@inductance,?_sprintf+13
  2070  0135B0  C0D7  F0AD         	movff	sendSensorData@inductance+1,?_sprintf+14
  2071  0135B4  C0D8  F0AE         	movff	sendSensorData@inductance+2,?_sprintf+15
  2072  0135B8  EC00  F080         	call	_sprintf	;wreg free
  2073                           
  2074                           ;lora.c: 45: sendUARTMessage(lora_message);
  2075  0135BC  0E00               	movlw	low _lora_message
  2076  0135BE  0100               	movlb	0	; () banked
  2077  0135C0  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  2078  0135C2  0E04               	movlw	high _lora_message
  2079  0135C4  0100               	movlb	0	; () banked
  2080  0135C6  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  2081  0135C8  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  2082                           
  2083                           ;lora.c: 46: delay_ms(2000);
  2084  0135CC  0E07               	movlw	7
  2085  0135CE  0100               	movlb	0	; () banked
  2086  0135D0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  2087  0135D2  0ED0               	movlw	208
  2088  0135D4  6F60               	movwf	delay_ms@ms& (0+255),b
  2089  0135D6  EC6D  F09B         	call	_delay_ms	;wreg free
  2090  0135DA  0012               	return		;funcret
  2091  0135DC                     __end_of_sendSensorData:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postdec1	equ	0xFE5
  2100                           fsr1l	equ	0xFE1
  2101                           
  2102 ;; *************** function _make_step_message *****************
  2103 ;; Defined at:
  2104 ;;		line 49 in file "digipot.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;		None               void
  2111 ;; Registers used:
  2112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    8
  2125 ;; This function calls:
  2126 ;;		_sprintf
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text2
  2133  013860                     __ptext2:
  2134                           	opt stack 0
  2135  013860                     _make_step_message:
  2136                           	opt stack 22
  2137                           
  2138                           ;digipot.c: 51: sprintf(cap_step_message,"The digipot step is: %u \r\n",
  2139                           ;digipot.c: 52: step);
  2140                           
  2141                           ;incstack = 0
  2142  013860  0E00               	movlw	low _cap_step_message
  2143  013862  0100               	movlb	0	; () banked
  2144  013864  6F9F               	movwf	sprintf@sp& (0+255),b
  2145  013866  0E05               	movlw	high _cap_step_message
  2146  013868  0100               	movlb	0	; () banked
  2147  01386A  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  2148  01386C  0EAB               	movlw	low STR_7
  2149  01386E  0100               	movlb	0	; () banked
  2150  013870  6FA1               	movwf	sprintf@f& (0+255),b
  2151  013872  0EFF               	movlw	high STR_7
  2152  013874  0100               	movlb	0	; () banked
  2153  013876  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  2154  013878  C0F2  F0A3         	movff	_step,?_sprintf+4
  2155  01387C  0100               	movlb	0	; () banked
  2156  01387E  6BA4               	clrf	(?_sprintf+5)& (0+255),b
  2157  013880  EC00  F080         	call	_sprintf	;wreg free
  2158  013884  0012               	return		;funcret
  2159  013886                     __end_of_make_step_message:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           postdec1	equ	0xFE5
  2168                           fsr1l	equ	0xFE1
  2169                           
  2170 ;; *************** function _make_frequency_message *****************
  2171 ;; Defined at:
  2172 ;;		line 122 in file "frequency.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;		None               void
  2179 ;; Registers used:
  2180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    8
  2193 ;; This function calls:
  2194 ;;		_sprintf
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text3
  2201  013502                     __ptext3:
  2202                           	opt stack 0
  2203  013502                     _make_frequency_message:
  2204                           	opt stack 22
  2205                           
  2206                           ;frequency.c: 123: sprintf(ind_frequency_message,"The inductive frequency is: %f, %f, %l
      +                          u \r\n", ind_freq, ind_freq2, ind_value);
  2207                           
  2208                           ;incstack = 0
  2209  013502  0E00               	movlw	low _ind_frequency_message
  2210  013504  0100               	movlb	0	; () banked
  2211  013506  6F9F               	movwf	sprintf@sp& (0+255),b
  2212  013508  0E02               	movlw	high _ind_frequency_message
  2213  01350A  0100               	movlb	0	; () banked
  2214  01350C  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  2215  01350E  0E5E               	movlw	low STR_5
  2216  013510  0100               	movlb	0	; () banked
  2217  013512  6FA1               	movwf	sprintf@f& (0+255),b
  2218  013514  0EFF               	movlw	high STR_5
  2219  013516  0100               	movlb	0	; () banked
  2220  013518  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  2221  01351A  C0DF  F0A3         	movff	_ind_freq,?_sprintf+4
  2222  01351E  C0E0  F0A4         	movff	_ind_freq+1,?_sprintf+5
  2223  013522  C0E1  F0A5         	movff	_ind_freq+2,?_sprintf+6
  2224  013526  C0E2  F0A6         	movff	_ind_freq2,?_sprintf+7
  2225  01352A  C0E3  F0A7         	movff	_ind_freq2+1,?_sprintf+8
  2226  01352E  C0E4  F0A8         	movff	_ind_freq2+2,?_sprintf+9
  2227  013532  C059  F0A9         	movff	_ind_value,?_sprintf+10
  2228  013536  C05A  F0AA         	movff	_ind_value+1,?_sprintf+11
  2229  01353A  C05B  F0AB         	movff	_ind_value+2,?_sprintf+12
  2230  01353E  C05C  F0AC         	movff	_ind_value+3,?_sprintf+13
  2231  013542  EC00  F080         	call	_sprintf	;wreg free
  2232                           
  2233                           ;frequency.c: 124: sprintf(cap_frequency_message,"The capacitive frequency is: %f\r\n",
  2234                           ;frequency.c: 125: cap_freq);
  2235  013546  0E00               	movlw	low _cap_frequency_message
  2236  013548  0100               	movlb	0	; () banked
  2237  01354A  6F9F               	movwf	sprintf@sp& (0+255),b
  2238  01354C  0E03               	movlw	high _cap_frequency_message
  2239  01354E  0100               	movlb	0	; () banked
  2240  013550  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  2241  013552  0E89               	movlw	low STR_6
  2242  013554  0100               	movlb	0	; () banked
  2243  013556  6FA1               	movwf	sprintf@f& (0+255),b
  2244  013558  0EFF               	movlw	high STR_6
  2245  01355A  0100               	movlb	0	; () banked
  2246  01355C  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  2247  01355E  C0D9  F0A3         	movff	_cap_freq,?_sprintf+4
  2248  013562  C0DA  F0A4         	movff	_cap_freq+1,?_sprintf+5
  2249  013566  C0DB  F0A5         	movff	_cap_freq+2,?_sprintf+6
  2250  01356A  EC00  F080         	call	_sprintf	;wreg free
  2251  01356E  0012               	return		;funcret
  2252  013570                     __end_of_make_frequency_message:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           postdec1	equ	0xFE5
  2261                           fsr1l	equ	0xFE1
  2262                           
  2263 ;; *************** function _sprintf *****************
  2264 ;; Defined at:
  2265 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  2268 ;;		 -> lora_message(200), cap_step_message(200), cap_frequency_message(200), ind_frequency_message(200), 
  2269 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  2270 ;;		 -> STR_7(27), STR_6(34), STR_5(43), STR_4(24), 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  idx             1   88[BANK0 ] unsigned char 
  2273 ;;  tmpval          4  101[BANK0 ] struct .
  2274 ;;  val             4   95[BANK0 ] unsigned long 
  2275 ;;  fval            3  105[BANK0 ] unsigned long 
  2276 ;;  cp              3    0        PTR const unsigned char 
  2277 ;;  exp             2   99[BANK0 ] int 
  2278 ;;  prec            2   93[BANK0 ] int 
  2279 ;;  flag            2   91[BANK0 ] unsigned short 
  2280 ;;  ap              2   89[BANK0 ] PTR void [1]
  2281 ;;		 -> ?_sprintf(2), 
  2282 ;;  len             2    0        unsigned int 
  2283 ;;  width           2    0        int 
  2284 ;;  c               1  108[BANK0 ] char 
  2285 ;;  d               1    0        unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  2   63[BANK0 ] int 
  2288 ;; Registers used:
  2289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2295 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2296 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2297 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2298 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2299 ;;Total ram usage:       46 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    7
  2302 ;; This function calls:
  2303 ;;		___awdiv
  2304 ;;		___ftadd
  2305 ;;		___ftge
  2306 ;;		___ftmul
  2307 ;;		___ftneg
  2308 ;;		___ftsub
  2309 ;;		___fttol
  2310 ;;		___lldiv
  2311 ;;		___llmod
  2312 ;;		___lltoft
  2313 ;;		___wmul
  2314 ;;		__div_to_l_
  2315 ;;		__tdiv_to_l_
  2316 ;;		_fround
  2317 ;;		_scale
  2318 ;; This function is called by:
  2319 ;;		_sendSensorData
  2320 ;;		_make_frequency_message
  2321 ;;		_make_step_message
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text4
  2326  010000                     __ptext4:
  2327                           	opt stack 0
  2328  010000                     _sprintf:
  2329                           	opt stack 22
  2330                           
  2331                           ;doprnt.c: 494: va_list ap;
  2332                           ;doprnt.c: 499: signed char c;
  2333                           ;doprnt.c: 501: int width;
  2334                           ;doprnt.c: 504: int prec;
  2335                           ;doprnt.c: 508: unsigned short flag;
  2336                           ;doprnt.c: 515: char d;
  2337                           ;doprnt.c: 516: double fval;
  2338                           ;doprnt.c: 517: int exp;
  2339                           ;doprnt.c: 523: union {
  2340                           ;doprnt.c: 524: unsigned long vd;
  2341                           ;doprnt.c: 525: double integ;
  2342                           ;doprnt.c: 526: } tmpval;
  2343                           ;doprnt.c: 528: unsigned long val;
  2344                           ;doprnt.c: 529: unsigned len;
  2345                           ;doprnt.c: 530: const char * cp;
  2346                           ;doprnt.c: 533: *ap = __va_start();
  2347                           
  2348                           ;incstack = 0
  2349  010000  0EA3               	movlw	low (?_sprintf+4)
  2350  010002  0100               	movlb	0	; () banked
  2351  010004  6FB9               	movwf	sprintf@ap& (0+255),b
  2352  010006  0E00               	movlw	high (?_sprintf+4)
  2353  010008  0100               	movlb	0	; () banked
  2354  01000A  6FBA               	movwf	(sprintf@ap+1)& (0+255),b
  2355                           
  2356                           ;doprnt.c: 536: while(c = *f++) {
  2357  01000C  EFC7  F084         	goto	l4062
  2358  010010                     l3832:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;doprnt.c: 538: if(c != '%')
  2362  010010  0E25               	movlw	37
  2363  010012  0100               	movlb	0	; () banked
  2364  010014  19CC               	xorwf	sprintf@c& (0+255),w,b
  2365  010016  B4D8               	btfsc	status,2,c
  2366  010018  D00B               	goto	l3838
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 540: {
  2370                           ;doprnt.c: 541: ((*sp++ = (c)));
  2371  01001A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2372  01001E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2373  010022  C0CC  FFDF         	movff	sprintf@c,indf2
  2374                           
  2375                           ; BSR set to: 0
  2376  010026  0100               	movlb	0	; () banked
  2377  010028  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2378  01002A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2379                           
  2380                           ;doprnt.c: 542: continue;
  2381  01002C  EFC7  F084         	goto	l4062
  2382  010030                     l3838:
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;doprnt.c: 543: }
  2386                           ;doprnt.c: 548: flag = 0;
  2387  010030  0E00               	movlw	0
  2388  010032  0100               	movlb	0	; () banked
  2389  010034  6FBC               	movwf	(sprintf@flag+1)& (0+255),b
  2390  010036  0E00               	movlw	0
  2391  010038  6FBB               	movwf	sprintf@flag& (0+255),b
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 635: switch(c = *f++) {
  2395                           
  2396                           ;doprnt.c: 633: loop:
  2397  01003A  D00D               	goto	l3850
  2398  01003C                     l3840:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;doprnt.c: 643: flag |= 0x10;
  2402  01003C  0100               	movlb	0	; () banked
  2403  01003E  89BB               	bsf	sprintf@flag& (0+255),4,b
  2404                           
  2405                           ;doprnt.c: 644: goto loop;
  2406  010040  D00A               	goto	l3850
  2407  010042                     l3842:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;doprnt.c: 663: flag |= 0x400;
  2411  010042  0100               	movlb	0	; () banked
  2412  010044  85BC               	bsf	(sprintf@flag+1)& (0+255),2,b
  2413                           
  2414                           ;doprnt.c: 664: break;
  2415  010046  D027               	goto	l3852
  2416  010048                     l3844:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 721: flag |= 0x80;
  2420  010048  0100               	movlb	0	; () banked
  2421  01004A  8FBB               	bsf	sprintf@flag& (0+255),7,b
  2422                           
  2423                           ;doprnt.c: 723: break;
  2424  01004C  D024               	goto	l3852
  2425  01004E                     l3846:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 818: flag |= 0xC0;
  2429  01004E  0EC0               	movlw	192
  2430  010050  0100               	movlb	0	; () banked
  2431  010052  13BB               	iorwf	sprintf@flag& (0+255),f,b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;doprnt.c: 822: }
  2435                           
  2436                           ;doprnt.c: 819: break;
  2437  010054  D020               	goto	l3852
  2438  010056                     l3850:
  2439                           
  2440                           ; BSR set to: 0
  2441  010056  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2442  01005A  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2443  01005E  0100               	movlb	0	; () banked
  2444  010060  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2445  010062  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2446  010064                     	if	0	;tblptru may be non-zero
  2447  010064                     	endif
  2448  010064                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2449  010064  0E00               	movlw	low (__mediumconst shr (0+16))
  2450  010066  6EF8               	movwf	tblptru,c
  2451  010068                     	endif
  2452  010068  0008               	tblrd		*
  2453  01006A  CFF5 F0CC          	movff	tablat,sprintf@c
  2454  01006E  0100               	movlb	0	; () banked
  2455  010070  51CC               	movf	sprintf@c& (0+255),w,b
  2456                           
  2457                           ; Switch size 1, requested type "space"
  2458                           ; Number of cases is 5, Range of values is 0 to 120
  2459                           ; switch strategies available:
  2460                           ; Name         Instructions Cycles
  2461                           ; simple_byte           16     9 (average)
  2462                           ;	Chosen strategy is simple_byte
  2463  010072  0A00               	xorlw	0	; case 0
  2464  010074  B4D8               	btfsc	status,2,c
  2465  010076  EFD8  F084         	goto	l4064
  2466  01007A  0A66               	xorlw	102	; case 102
  2467  01007C  B4D8               	btfsc	status,2,c
  2468  01007E  D7E1               	goto	l3842
  2469  010080  0A0A               	xorlw	10	; case 108
  2470  010082  B4D8               	btfsc	status,2,c
  2471  010084  D7DB               	goto	l3840
  2472  010086  0A19               	xorlw	25	; case 117
  2473  010088  B4D8               	btfsc	status,2,c
  2474  01008A  D7E1               	goto	l3846
  2475  01008C  0A0D               	xorlw	13	; case 120
  2476  01008E  B4D8               	btfsc	status,2,c
  2477  010090  D7DB               	goto	l3844
  2478  010092  EFC7  F084         	goto	l4062
  2479  010096                     l3852:
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 825: if(flag & (0x700)) {
  2483  010096  0E07               	movlw	7
  2484  010098  0100               	movlb	0	; () banked
  2485  01009A  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2486  01009C  B4D8               	btfsc	status,2,c
  2487  01009E  D332               	goto	l543
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;doprnt.c: 829: prec = 6;
  2491  0100A0  0E00               	movlw	0
  2492  0100A2  0100               	movlb	0	; () banked
  2493  0100A4  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  2494  0100A6  0E06               	movlw	6
  2495  0100A8  6FBD               	movwf	sprintf@prec& (0+255),b
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2499  0100AA  C0B9  FFD9         	movff	sprintf@ap,fsr2l
  2500  0100AE  C0BA  FFDA         	movff	sprintf@ap+1,fsr2h
  2501  0100B2  CFDE F0C9          	movff	postinc2,sprintf@fval
  2502  0100B6  CFDE F0CA          	movff	postinc2,sprintf@fval+1
  2503  0100BA  CFDD F0CB          	movff	postdec2,sprintf@fval+2
  2504                           
  2505                           ; BSR set to: 0
  2506  0100BE  0E03               	movlw	3
  2507  0100C0  0100               	movlb	0	; () banked
  2508  0100C2  27B9               	addwf	sprintf@ap& (0+255),f,b
  2509  0100C4  0E00               	movlw	0
  2510  0100C6  23BA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;doprnt.c: 831: if(fval < 0.0) {
  2514  0100C8  0100               	movlb	0	; () banked
  2515  0100CA  AFCB               	btfss	(sprintf@fval+2)& (0+255),7,b
  2516  0100CC  D011               	goto	l3866
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;doprnt.c: 832: fval = -fval;
  2520  0100CE  C0C9  F060         	movff	sprintf@fval,___ftneg@f1
  2521  0100D2  C0CA  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  2522  0100D6  C0CB  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  2523  0100DA  ECEA  F09B         	call	___ftneg	;wreg free
  2524  0100DE  C060  F0C9         	movff	?___ftneg,sprintf@fval
  2525  0100E2  C061  F0CA         	movff	?___ftneg+1,sprintf@fval+1
  2526  0100E6  C062  F0CB         	movff	?___ftneg+2,sprintf@fval+2
  2527                           
  2528                           ;doprnt.c: 833: flag |= 0x03;
  2529  0100EA  0E03               	movlw	3
  2530  0100EC  0100               	movlb	0	; () banked
  2531  0100EE  13BB               	iorwf	sprintf@flag& (0+255),f,b
  2532  0100F0                     l3866:
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;doprnt.c: 834: }
  2536                           ;doprnt.c: 835: exp = 0;
  2537  0100F0  0E00               	movlw	0
  2538  0100F2  0100               	movlb	0	; () banked
  2539  0100F4  6FC4               	movwf	(sprintf@exp+1)& (0+255),b
  2540  0100F6  0E00               	movlw	0
  2541  0100F8  6FC3               	movwf	sprintf@exp& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;doprnt.c: 836: if( fval!=0) {
  2545  0100FA  0100               	movlb	0	; () banked
  2546  0100FC  51C9               	movf	sprintf@fval& (0+255),w,b
  2547  0100FE  0100               	movlb	0	; () banked
  2548  010100  11CA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2549  010102  0100               	movlb	0	; () banked
  2550  010104  11CB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2551  010106  B4D8               	btfsc	status,2,c
  2552  010108  D09B               	goto	l3894
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2556  01010A  0E82               	movlw	130
  2557  01010C  0100               	movlb	0	; () banked
  2558  01010E  6FAF               	movwf	??_sprintf& (0+255),b
  2559  010110  0EFF               	movlw	255
  2560  010112  0100               	movlb	0	; () banked
  2561  010114  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  2562  010116  C0C9  F0B1         	movff	sprintf@fval,??_sprintf+2
  2563  01011A  C0CA  F0B2         	movff	sprintf@fval+1,??_sprintf+3
  2564  01011E  C0CB  F0B3         	movff	sprintf@fval+2,??_sprintf+4
  2565  010122  C0CC  F0B4         	movff	sprintf@fval+3,??_sprintf+5
  2566  010126  0E10               	movlw	16
  2567  010128  D006               	goto	u3570
  2568  01012A                     u3575:
  2569  01012A  0100               	movlb	0	; () banked
  2570  01012C  90D8               	bcf	status,0,c
  2571  01012E  33B4               	rrcf	(??_sprintf+5)& (0+255),f,b
  2572  010130  33B3               	rrcf	(??_sprintf+4)& (0+255),f,b
  2573  010132  33B2               	rrcf	(??_sprintf+3)& (0+255),f,b
  2574  010134  33B1               	rrcf	(??_sprintf+2)& (0+255),f,b
  2575  010136                     u3570:
  2576  010136  2EE8               	decfsz	wreg,f,c
  2577  010138  D7F8               	goto	u3575
  2578  01013A  0100               	movlb	0	; () banked
  2579  01013C  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  2580  01013E  0100               	movlb	0	; () banked
  2581  010140  25AF               	addwf	??_sprintf& (0+255),w,b
  2582  010142  0100               	movlb	0	; () banked
  2583  010144  6FC3               	movwf	sprintf@exp& (0+255),b
  2584  010146  0E00               	movlw	0
  2585  010148  0100               	movlb	0	; () banked
  2586  01014A  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  2587  01014C  0100               	movlb	0	; () banked
  2588  01014E  6FC4               	movwf	(sprintf@exp+1)& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 838: exp--;
  2592  010150  0100               	movlb	0	; () banked
  2593  010152  07C3               	decf	sprintf@exp& (0+255),f,b
  2594  010154  A0D8               	btfss	status,0,c
  2595  010156  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 839: exp *= 3;
  2599  010158  C0C3  F06E         	movff	sprintf@exp,___wmul@multiplier
  2600  01015C  C0C4  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2601  010160  0E00               	movlw	0
  2602  010162  0100               	movlb	0	; () banked
  2603  010164  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2604  010166  0E03               	movlw	3
  2605  010168  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2606  01016A  ECCF  F09B         	call	___wmul	;wreg free
  2607  01016E  C06E  F0C3         	movff	?___wmul,sprintf@exp
  2608  010172  C06F  F0C4         	movff	?___wmul+1,sprintf@exp+1
  2609                           
  2610                           ;doprnt.c: 840: exp /= 10;
  2611  010176  C0C3  F066         	movff	sprintf@exp,___awdiv@dividend
  2612  01017A  C0C4  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  2613  01017E  0E00               	movlw	0
  2614  010180  0100               	movlb	0	; () banked
  2615  010182  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2616  010184  0E0A               	movlw	10
  2617  010186  6F68               	movwf	___awdiv@divisor& (0+255),b
  2618  010188  EC5C  F096         	call	___awdiv	;wreg free
  2619  01018C  C066  F0C3         	movff	?___awdiv,sprintf@exp
  2620  010190  C067  F0C4         	movff	?___awdiv+1,sprintf@exp+1
  2621                           
  2622                           ;doprnt.c: 841: if(exp < 0)
  2623  010194  0100               	movlb	0	; () banked
  2624  010196  AFC4               	btfss	(sprintf@exp+1)& (0+255),7,b
  2625  010198  D004               	goto	l3882
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;doprnt.c: 842: exp--;
  2629  01019A  0100               	movlb	0	; () banked
  2630  01019C  07C3               	decf	sprintf@exp& (0+255),f,b
  2631  01019E  A0D8               	btfss	status,0,c
  2632  0101A0  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2633  0101A2                     l3882:
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2637  0101A2  0100               	movlb	0	; () banked
  2638  0101A4  51C3               	movf	sprintf@exp& (0+255),w,b
  2639  0101A6  0800               	sublw	0
  2640  0101A8  ECDF  F084         	call	_scale
  2641  0101AC  C083  F0C5         	movff	?_scale,sprintf@tmpval
  2642  0101B0  C084  F0C6         	movff	?_scale+1,sprintf@tmpval+1
  2643  0101B4  C085  F0C7         	movff	?_scale+2,sprintf@tmpval+2
  2644                           
  2645                           ;doprnt.c: 847: tmpval.integ *= fval;
  2646  0101B8  C0C5  F074         	movff	sprintf@tmpval,___ftmul@f1
  2647  0101BC  C0C6  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2648  0101C0  C0C7  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2649  0101C4  C0C9  F077         	movff	sprintf@fval,___ftmul@f2
  2650  0101C8  C0CA  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2651  0101CC  C0CB  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2652  0101D0  ECBF  F08E         	call	___ftmul	;wreg free
  2653  0101D4  C074  F0C5         	movff	?___ftmul,sprintf@tmpval
  2654  0101D8  C075  F0C6         	movff	?___ftmul+1,sprintf@tmpval+1
  2655  0101DC  C076  F0C7         	movff	?___ftmul+2,sprintf@tmpval+2
  2656                           
  2657                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2658  0101E0  C0C5  F083         	movff	sprintf@tmpval,___ftge@ff1
  2659  0101E4  C0C6  F084         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2660  0101E8  C0C7  F085         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2661  0101EC  0E00               	movlw	0
  2662  0101EE  0100               	movlb	0	; () banked
  2663  0101F0  6F86               	movwf	___ftge@ff2& (0+255),b
  2664  0101F2  0E80               	movlw	128
  2665  0101F4  0100               	movlb	0	; () banked
  2666  0101F6  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  2667  0101F8  0E3F               	movlw	63
  2668  0101FA  0100               	movlb	0	; () banked
  2669  0101FC  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  2670  0101FE  ECF8  F095         	call	___ftge	;wreg free
  2671  010202  0100               	movlb	0	; () banked
  2672  010204  B0D8               	btfsc	status,0,c
  2673  010206  D005               	goto	l3890
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;doprnt.c: 849: exp--;
  2677  010208  0100               	movlb	0	; () banked
  2678  01020A  07C3               	decf	sprintf@exp& (0+255),f,b
  2679  01020C  A0D8               	btfss	status,0,c
  2680  01020E  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  2681  010210  D017               	goto	l3894
  2682  010212                     l3890:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2686  010212  C0C5  F083         	movff	sprintf@tmpval,___ftge@ff1
  2687  010216  C0C6  F084         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2688  01021A  C0C7  F085         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2689  01021E  0E00               	movlw	0
  2690  010220  0100               	movlb	0	; () banked
  2691  010222  6F86               	movwf	___ftge@ff2& (0+255),b
  2692  010224  0E20               	movlw	32
  2693  010226  0100               	movlb	0	; () banked
  2694  010228  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  2695  01022A  0E41               	movlw	65
  2696  01022C  0100               	movlb	0	; () banked
  2697  01022E  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  2698  010230  ECF8  F095         	call	___ftge	;wreg free
  2699  010234  0100               	movlb	0	; () banked
  2700  010236  A0D8               	btfss	status,0,c
  2701  010238  D003               	goto	l3894
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;doprnt.c: 851: exp++;
  2705  01023A  0100               	movlb	0	; () banked
  2706  01023C  4BC3               	infsnz	sprintf@exp& (0+255),f,b
  2707  01023E  2BC4               	incf	(sprintf@exp+1)& (0+255),f,b
  2708  010240                     l3894:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;doprnt.c: 852: }
  2712                           ;doprnt.c: 1112: if(prec <= 12)
  2713  010240  0100               	movlb	0	; () banked
  2714  010242  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2715  010244  D008               	goto	l3896
  2716  010246  0100               	movlb	0	; () banked
  2717  010248  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2718  01024A  E11D               	bnz	l3898
  2719  01024C  0E0D               	movlw	13
  2720  01024E  0100               	movlb	0	; () banked
  2721  010250  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2722  010252  B0D8               	btfsc	status,0,c
  2723  010254  D018               	goto	l3898
  2724  010256                     l3896:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1113: fval += fround(prec);
  2728  010256  C0C9  F08D         	movff	sprintf@fval,___ftadd@f1
  2729  01025A  C0CA  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  2730  01025E  C0CB  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  2731  010262  0100               	movlb	0	; () banked
  2732  010264  51BD               	movf	sprintf@prec& (0+255),w,b
  2733  010266  EC5A  F087         	call	_fround
  2734  01026A  C083  F090         	movff	?_fround,___ftadd@f2
  2735  01026E  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  2736  010272  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  2737  010276  EC01  F08A         	call	___ftadd	;wreg free
  2738  01027A  C08D  F0C9         	movff	?___ftadd,sprintf@fval
  2739  01027E  C08E  F0CA         	movff	?___ftadd+1,sprintf@fval+1
  2740  010282  C08F  F0CB         	movff	?___ftadd+2,sprintf@fval+2
  2741  010286                     l3898:
  2742                           
  2743                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2744  010286  0100               	movlb	0	; () banked
  2745  010288  BFC4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2746  01028A  D008               	goto	l3900
  2747  01028C  0100               	movlb	0	; () banked
  2748  01028E  51C4               	movf	(sprintf@exp+1)& (0+255),w,b
  2749  010290  E12A               	bnz	l3906
  2750  010292  0E0A               	movlw	10
  2751  010294  0100               	movlb	0	; () banked
  2752  010296  5DC3               	subwf	sprintf@exp& (0+255),w,b
  2753  010298  B0D8               	btfsc	status,0,c
  2754  01029A  D025               	goto	l3906
  2755  01029C                     l3900:
  2756                           
  2757                           ; BSR set to: 0
  2758  01029C  0100               	movlb	0	; () banked
  2759  01029E  51C9               	movf	sprintf@fval& (0+255),w,b
  2760  0102A0  0100               	movlb	0	; () banked
  2761  0102A2  11CA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2762  0102A4  0100               	movlb	0	; () banked
  2763  0102A6  11CB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2764  0102A8  B4D8               	btfsc	status,2,c
  2765  0102AA  D063               	goto	l3920
  2766                           
  2767                           ; BSR set to: 0
  2768  0102AC  C0C9  F08A         	movff	sprintf@fval,___fttol@f1
  2769  0102B0  C0CA  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2770  0102B4  C0CB  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2771  0102B8  EC63  F091         	call	___fttol	;wreg free
  2772  0102BC  0100               	movlb	0	; () banked
  2773  0102BE  518A               	movf	?___fttol& (0+255),w,b
  2774  0102C0  0100               	movlb	0	; () banked
  2775  0102C2  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  2776  0102C4  0100               	movlb	0	; () banked
  2777  0102C6  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  2778  0102C8  0100               	movlb	0	; () banked
  2779  0102CA  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  2780  0102CC  A4D8               	btfss	status,2,c
  2781  0102CE  D051               	goto	l3920
  2782                           
  2783                           ; BSR set to: 0
  2784  0102D0  0100               	movlb	0	; () banked
  2785  0102D2  BFC4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2786  0102D4  D04E               	goto	l3920
  2787  0102D6  0100               	movlb	0	; () banked
  2788  0102D8  51C4               	movf	(sprintf@exp+1)& (0+255),w,b
  2789  0102DA  E105               	bnz	l3906
  2790  0102DC  0E02               	movlw	2
  2791  0102DE  0100               	movlb	0	; () banked
  2792  0102E0  5DC3               	subwf	sprintf@exp& (0+255),w,b
  2793  0102E2  A0D8               	btfss	status,0,c
  2794  0102E4  D046               	goto	l3920
  2795  0102E6                     l3906:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2799  0102E6  C0C5  F083         	movff	sprintf@tmpval,___ftge@ff1
  2800  0102EA  C0C6  F084         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2801  0102EE  C0C7  F085         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2802  0102F2  0E70               	movlw	112
  2803  0102F4  0100               	movlb	0	; () banked
  2804  0102F6  6F86               	movwf	___ftge@ff2& (0+255),b
  2805  0102F8  0E89               	movlw	137
  2806  0102FA  0100               	movlb	0	; () banked
  2807  0102FC  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  2808  0102FE  0E40               	movlw	64
  2809  010300  0100               	movlb	0	; () banked
  2810  010302  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  2811  010304  ECF8  F095         	call	___ftge	;wreg free
  2812  010308  0100               	movlb	0	; () banked
  2813  01030A  B0D8               	btfsc	status,0,c
  2814  01030C  D003               	goto	l3910
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2818  01030E  0100               	movlb	0	; () banked
  2819  010310  0EF7               	movlw	247
  2820  010312  D002               	goto	L1
  2821  010314                     l3910:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2825  010314  0100               	movlb	0	; () banked
  2826  010316  0EF8               	movlw	248
  2827  010318                     L1:
  2828  010318  27C3               	addwf	sprintf@exp& (0+255),f,b
  2829  01031A  0EFF               	movlw	255
  2830  01031C  23C4               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 1124: }
  2834                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2835                           
  2836                           ; BSR set to: 0
  2837  01031E  0100               	movlb	0	; () banked
  2838  010320  51C3               	movf	sprintf@exp& (0+255),w,b
  2839  010322  ECDF  F084         	call	_scale
  2840  010326  C083  F0C5         	movff	?_scale,sprintf@tmpval
  2841  01032A  C084  F0C6         	movff	?_scale+1,sprintf@tmpval+1
  2842  01032E  C085  F0C7         	movff	?_scale+2,sprintf@tmpval+2
  2843                           
  2844                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2845  010332  C0C9  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  2846  010336  C0CA  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2847  01033A  C0CB  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2848  01033E  C0C5  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2849  010342  C0C6  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2850  010346  C0C7  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2851  01034A  EC2C  F08D         	call	__tdiv_to_l_	;wreg free
  2852  01034E  C060  F0BF         	movff	?__tdiv_to_l_,sprintf@val
  2853  010352  C061  F0C0         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2854  010356  C062  F0C1         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2855  01035A  C063  F0C2         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2856                           
  2857                           ;doprnt.c: 1129: fval = 0.0;
  2858  01035E  0E00               	movlw	0
  2859  010360  0100               	movlb	0	; () banked
  2860  010362  6FC9               	movwf	sprintf@fval& (0+255),b
  2861  010364  0E00               	movlw	0
  2862  010366  0100               	movlb	0	; () banked
  2863  010368  6FCA               	movwf	(sprintf@fval+1)& (0+255),b
  2864  01036A  0E00               	movlw	0
  2865  01036C  0100               	movlb	0	; () banked
  2866  01036E  6FCB               	movwf	(sprintf@fval+2)& (0+255),b
  2867                           
  2868                           ;doprnt.c: 1130: } else {
  2869  010370  D033               	goto	l3924
  2870  010372                     l3920:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2874  010372  C0C9  F08A         	movff	sprintf@fval,___fttol@f1
  2875  010376  C0CA  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2876  01037A  C0CB  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2877  01037E  EC63  F091         	call	___fttol	;wreg free
  2878  010382  C08A  F0BF         	movff	?___fttol,sprintf@val
  2879  010386  C08B  F0C0         	movff	?___fttol+1,sprintf@val+1
  2880  01038A  C08C  F0C1         	movff	?___fttol+2,sprintf@val+2
  2881  01038E  C08D  F0C2         	movff	?___fttol+3,sprintf@val+3
  2882                           
  2883                           ;doprnt.c: 1132: fval -= (double)val;
  2884  010392  C0C9  F099         	movff	sprintf@fval,___ftsub@f1
  2885  010396  C0CA  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  2886  01039A  C0CB  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  2887  01039E  C0BF  F068         	movff	sprintf@val,___lltoft@c
  2888  0103A2  C0C0  F069         	movff	sprintf@val+1,___lltoft@c+1
  2889  0103A6  C0C1  F06A         	movff	sprintf@val+2,___lltoft@c+2
  2890  0103AA  C0C2  F06B         	movff	sprintf@val+3,___lltoft@c+3
  2891  0103AE  EC90  F099         	call	___lltoft	;wreg free
  2892  0103B2  C068  F09C         	movff	?___lltoft,___ftsub@f2
  2893  0103B6  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  2894  0103BA  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  2895  0103BE  EC47  F09B         	call	___ftsub	;wreg free
  2896  0103C2  C099  F0C9         	movff	?___ftsub,sprintf@fval
  2897  0103C6  C09A  F0CA         	movff	?___ftsub+1,sprintf@fval+1
  2898  0103CA  C09B  F0CB         	movff	?___ftsub+2,sprintf@fval+2
  2899                           
  2900                           ;doprnt.c: 1133: exp = 0;
  2901  0103CE  0E00               	movlw	0
  2902  0103D0  0100               	movlb	0	; () banked
  2903  0103D2  6FC4               	movwf	(sprintf@exp+1)& (0+255),b
  2904  0103D4  0E00               	movlw	0
  2905  0103D6  6FC3               	movwf	sprintf@exp& (0+255),b
  2906  0103D8                     l3924:
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;doprnt.c: 1134: }
  2910                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2911  0103D8  0E01               	movlw	1
  2912  0103DA  0100               	movlb	0	; () banked
  2913  0103DC  6FCC               	movwf	sprintf@c& (0+255),b
  2914  0103DE                     l3926:
  2915                           
  2916                           ; BSR set to: 0
  2917  0103DE  0E0A               	movlw	10
  2918  0103E0  0100               	movlb	0	; () banked
  2919  0103E2  19CC               	xorwf	sprintf@c& (0+255),w,b
  2920  0103E4  B4D8               	btfsc	status,2,c
  2921  0103E6  D021               	goto	l3938
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;doprnt.c: 1137: if(val < dpowers[c])
  2925                           
  2926                           ; BSR set to: 0
  2927                           
  2928                           ; BSR set to: 0
  2929  0103E8  0100               	movlb	0	; () banked
  2930  0103EA  51CC               	movf	sprintf@c& (0+255),w,b
  2931  0103EC  0D04               	mullw	4
  2932  0103EE  0EDF               	movlw	low _dpowers
  2933  0103F0  24F3               	addwf	prodl,w,c
  2934  0103F2  6EF6               	movwf	tblptrl,c
  2935  0103F4  0EFD               	movlw	high _dpowers
  2936  0103F6  20F4               	addwfc	prodh,w,c
  2937  0103F8  6EF7               	movwf	tblptrh,c
  2938  0103FA                     	if	1	;There are 3 active tblptr bytes
  2939  0103FA  6AF8               	clrf	tblptru,c
  2940  0103FC  0E00               	movlw	low (__mediumconst shr (0+16))
  2941  0103FE  22F8               	addwfc	tblptru,f,c
  2942  010400                     	endif
  2943  010400  0009               	tblrd		*+
  2944  010402  50F5               	movf	tablat,w,c
  2945  010404  0100               	movlb	0	; () banked
  2946  010406  5DBF               	subwf	sprintf@val& (0+255),w,b
  2947  010408  0009               	tblrd		*+
  2948  01040A  50F5               	movf	tablat,w,c
  2949  01040C  0100               	movlb	0	; () banked
  2950  01040E  59C0               	subwfb	(sprintf@val+1)& (0+255),w,b
  2951  010410  0009               	tblrd		*+
  2952  010412  50F5               	movf	tablat,w,c
  2953  010414  0100               	movlb	0	; () banked
  2954  010416  59C1               	subwfb	(sprintf@val+2)& (0+255),w,b
  2955  010418  0009               	tblrd		*+
  2956  01041A  50F5               	movf	tablat,w,c
  2957  01041C  0100               	movlb	0	; () banked
  2958  01041E  59C2               	subwfb	(sprintf@val+3)& (0+255),w,b
  2959  010420  A0D8               	btfss	status,0,c
  2960  010422  D003               	goto	l3938
  2961                           
  2962                           ; BSR set to: 0
  2963                           
  2964                           ; BSR set to: 0
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;doprnt.c: 1138: break;
  2968  010424  0100               	movlb	0	; () banked
  2969  010426  2BCC               	incf	sprintf@c& (0+255),f,b
  2970  010428  D7DA               	goto	l3926
  2971  01042A                     l3938:
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;doprnt.c: 1175: {
  2975                           ;doprnt.c: 1188: if(flag & 0x03)
  2976  01042A  0E03               	movlw	3
  2977  01042C  0100               	movlb	0	; () banked
  2978  01042E  15BB               	andwf	sprintf@flag& (0+255),w,b
  2979  010430  0100               	movlb	0	; () banked
  2980  010432  6FAF               	movwf	??_sprintf& (0+255),b
  2981  010434  0E00               	movlw	0
  2982  010436  0100               	movlb	0	; () banked
  2983  010438  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2984  01043A  0100               	movlb	0	; () banked
  2985  01043C  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  2986  01043E  0100               	movlb	0	; () banked
  2987  010440  51AF               	movf	??_sprintf& (0+255),w,b
  2988  010442  0100               	movlb	0	; () banked
  2989  010444  11B0               	iorwf	(??_sprintf+1)& (0+255),w,b
  2990  010446  B4D8               	btfsc	status,2,c
  2991  010448  D058               	goto	l3952
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2995  01044A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2996  01044E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2997  010452  0E2D               	movlw	45
  2998  010454  D050               	goto	L2
  2999  010456                     l3942:
  3000                           
  3001                           ; BSR set to: 0
  3002  010456  0100               	movlb	0	; () banked
  3003  010458  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3004  01045A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;doprnt.c: 1195: }
  3008                           ;doprnt.c: 1196: while(c--) {
  3009  01045C  D04E               	goto	l3952
  3010  01045E                     l3944:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;doprnt.c: 1200: {
  3014                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3015  01045E  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3016  010462  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3017  010466  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3018  01046A  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3019  01046E  0100               	movlb	0	; () banked
  3020  010470  51CC               	movf	sprintf@c& (0+255),w,b
  3021  010472  0D04               	mullw	4
  3022  010474  0EDF               	movlw	low _dpowers
  3023  010476  24F3               	addwf	prodl,w,c
  3024  010478  6EF6               	movwf	tblptrl,c
  3025  01047A  0EFD               	movlw	high _dpowers
  3026  01047C  20F4               	addwfc	prodh,w,c
  3027  01047E  6EF7               	movwf	tblptrh,c
  3028  010480                     	if	1	;There are 3 active tblptr bytes
  3029  010480  6AF8               	clrf	tblptru,c
  3030  010482  0E00               	movlw	low (__mediumconst shr (0+16))
  3031  010484  22F8               	addwfc	tblptru,f,c
  3032  010486                     	endif
  3033  010486  0009               	tblrd		*+
  3034  010488  CFF5 F064          	movff	tablat,___lldiv@divisor
  3035  01048C  0009               	tblrd		*+
  3036  01048E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3037  010492  0009               	tblrd		*+
  3038  010494  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3039  010498  000A               	tblrd		*-
  3040  01049A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3041  01049E  ECBB  F096         	call	___lldiv	;wreg free
  3042  0104A2  C060  F0C5         	movff	?___lldiv,sprintf@tmpval
  3043  0104A6  C061  F0C6         	movff	?___lldiv+1,sprintf@tmpval+1
  3044  0104AA  C062  F0C7         	movff	?___lldiv+2,sprintf@tmpval+2
  3045  0104AE  C063  F0C8         	movff	?___lldiv+3,sprintf@tmpval+3
  3046                           
  3047                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3048  0104B2  C0C5  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3049  0104B6  C0C6  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3050  0104BA  C0C7  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3051  0104BE  C0C8  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3052  0104C2  0E0A               	movlw	10
  3053  0104C4  0100               	movlb	0	; () banked
  3054  0104C6  6F71               	movwf	___llmod@divisor& (0+255),b
  3055  0104C8  0E00               	movlw	0
  3056  0104CA  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3057  0104CC  0E00               	movlw	0
  3058  0104CE  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3059  0104D0  0E00               	movlw	0
  3060  0104D2  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3061  0104D4  ECB6  F098         	call	___llmod	;wreg free
  3062  0104D8  C06D  F0C5         	movff	?___llmod,sprintf@tmpval
  3063  0104DC  C06E  F0C6         	movff	?___llmod+1,sprintf@tmpval+1
  3064  0104E0  C06F  F0C7         	movff	?___llmod+2,sprintf@tmpval+2
  3065  0104E4  C070  F0C8         	movff	?___llmod+3,sprintf@tmpval+3
  3066                           
  3067                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3068  0104E8  0100               	movlb	0	; () banked
  3069  0104EA  51C5               	movf	sprintf@tmpval& (0+255),w,b
  3070  0104EC  0F30               	addlw	48
  3071  0104EE  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3072  0104F2  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3073  0104F6                     L2:
  3074  0104F6  6EDF               	movwf	indf2,c
  3075  0104F8  D7AE               	goto	l3942
  3076  0104FA                     l3952:
  3077                           
  3078                           ; BSR set to: 0
  3079  0104FA  0100               	movlb	0	; () banked
  3080  0104FC  07CC               	decf	sprintf@c& (0+255),f,b
  3081  0104FE  0100               	movlb	0	; () banked
  3082  010500  29CC               	incf	sprintf@c& (0+255),w,b
  3083  010502  B4D8               	btfsc	status,2,c
  3084  010504  D00E               	goto	l3960
  3085  010506  D7AB               	goto	l3944
  3086  010508                     l3954:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3090  010508  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3091  01050C  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3092  010510  0E30               	movlw	48
  3093  010512  6EDF               	movwf	indf2,c
  3094                           
  3095                           ; BSR set to: 0
  3096  010514  0100               	movlb	0	; () banked
  3097  010516  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3098  010518  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;doprnt.c: 1209: exp--;
  3102  01051A  0100               	movlb	0	; () banked
  3103  01051C  07C3               	decf	sprintf@exp& (0+255),f,b
  3104  01051E  A0D8               	btfss	status,0,c
  3105  010520  07C4               	decf	(sprintf@exp+1)& (0+255),f,b
  3106  010522                     l3960:
  3107                           
  3108                           ; BSR set to: 0
  3109  010522  0100               	movlb	0	; () banked
  3110  010524  BFC4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3111  010526  D007               	goto	l3962
  3112  010528  0100               	movlb	0	; () banked
  3113  01052A  51C4               	movf	(sprintf@exp+1)& (0+255),w,b
  3114  01052C  E1ED               	bnz	l3954
  3115  01052E  0100               	movlb	0	; () banked
  3116  010530  05C3               	decf	sprintf@exp& (0+255),w,b
  3117  010532  B0D8               	btfsc	status,0,c
  3118  010534  D7E9               	goto	l3954
  3119  010536                     l3962:
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;doprnt.c: 1210: }
  3123                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3124  010536  0100               	movlb	0	; () banked
  3125  010538  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3126  01053A  D00C               	goto	l571
  3127  01053C  0100               	movlb	0	; () banked
  3128  01053E  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  3129  010540  E105               	bnz	u3730
  3130  010542  0E09               	movlw	9
  3131  010544  0100               	movlb	0	; () banked
  3132  010546  5DBD               	subwf	sprintf@prec& (0+255),w,b
  3133  010548  A0D8               	btfss	status,0,c
  3134  01054A  D004               	goto	l571
  3135  01054C                     u3730:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3139  01054C  0E08               	movlw	8
  3140  01054E  0100               	movlb	0	; () banked
  3141  010550  6FCC               	movwf	sprintf@c& (0+255),b
  3142  010552  D002               	goto	l3966
  3143  010554                     l571:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;doprnt.c: 1213: else
  3147                           ;doprnt.c: 1214: c = prec;
  3148  010554  C0BD  F0CC         	movff	sprintf@prec,sprintf@c
  3149  010558                     l3966:
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;doprnt.c: 1215: prec -= c;
  3153  010558  0100               	movlb	0	; () banked
  3154  01055A  51CC               	movf	sprintf@c& (0+255),w,b
  3155  01055C  0100               	movlb	0	; () banked
  3156  01055E  5FBD               	subwf	sprintf@prec& (0+255),f,b
  3157  010560  0E00               	movlw	0
  3158  010562  0100               	movlb	0	; () banked
  3159  010564  BFCC               	btfsc	sprintf@c& (0+255),7,b
  3160  010566  0EFF               	movlw	255
  3161  010568  0100               	movlb	0	; () banked
  3162  01056A  5BBE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;doprnt.c: 1219: if(c)
  3166  01056C  0100               	movlb	0	; () banked
  3167  01056E  51CC               	movf	sprintf@c& (0+255),w,b
  3168  010570  0100               	movlb	0	; () banked
  3169  010572  B4D8               	btfsc	status,2,c
  3170  010574  D009               	goto	l3974
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3174  010576  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3175  01057A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3176  01057E  0E2E               	movlw	46
  3177  010580  6EDF               	movwf	indf2,c
  3178                           
  3179                           ; BSR set to: 0
  3180  010582  0100               	movlb	0	; () banked
  3181  010584  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3182  010586  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3183  010588                     l3974:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3187  010588  0100               	movlb	0	; () banked
  3188  01058A  51CC               	movf	sprintf@c& (0+255),w,b
  3189  01058C  ECDF  F084         	call	_scale
  3190  010590  C083  F0B5         	movff	?_scale,_sprintf$2670
  3191  010594  C084  F0B6         	movff	?_scale+1,_sprintf$2670+1
  3192  010598  C085  F0B7         	movff	?_scale+2,_sprintf$2670+2
  3193                           
  3194                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3195  01059C  C0C9  F077         	movff	sprintf@fval,___ftmul@f2
  3196  0105A0  C0CA  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3197  0105A4  C0CB  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3198  0105A8  C0B5  F074         	movff	_sprintf$2670,___ftmul@f1
  3199  0105AC  C0B6  F075         	movff	_sprintf$2670+1,___ftmul@f1+1
  3200  0105B0  C0B7  F076         	movff	_sprintf$2670+2,___ftmul@f1+2
  3201  0105B4  ECBF  F08E         	call	___ftmul	;wreg free
  3202  0105B8  C074  F08A         	movff	?___ftmul,___fttol@f1
  3203  0105BC  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3204  0105C0  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3205  0105C4  EC63  F091         	call	___fttol	;wreg free
  3206  0105C8  C08A  F0BF         	movff	?___fttol,sprintf@val
  3207  0105CC  C08B  F0C0         	movff	?___fttol+1,sprintf@val+1
  3208  0105D0  C08C  F0C1         	movff	?___fttol+2,sprintf@val+2
  3209  0105D4  C08D  F0C2         	movff	?___fttol+3,sprintf@val+3
  3210                           
  3211                           ;doprnt.c: 1228: while(c--) {
  3212  0105D8  D07A               	goto	l3988
  3213  0105DA                     l3978:
  3214                           
  3215                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3216  0105DA  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3217  0105DE  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3218  0105E2  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3219  0105E6  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3220  0105EA  0100               	movlb	0	; () banked
  3221  0105EC  51CC               	movf	sprintf@c& (0+255),w,b
  3222  0105EE  0D04               	mullw	4
  3223  0105F0  0EDF               	movlw	low _dpowers
  3224  0105F2  24F3               	addwf	prodl,w,c
  3225  0105F4  6EF6               	movwf	tblptrl,c
  3226  0105F6  0EFD               	movlw	high _dpowers
  3227  0105F8  20F4               	addwfc	prodh,w,c
  3228  0105FA  6EF7               	movwf	tblptrh,c
  3229  0105FC                     	if	1	;There are 3 active tblptr bytes
  3230  0105FC  6AF8               	clrf	tblptru,c
  3231  0105FE  0E00               	movlw	low (__mediumconst shr (0+16))
  3232  010600  22F8               	addwfc	tblptru,f,c
  3233  010602                     	endif
  3234  010602  0009               	tblrd		*+
  3235  010604  CFF5 F064          	movff	tablat,___lldiv@divisor
  3236  010608  0009               	tblrd		*+
  3237  01060A  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3238  01060E  0009               	tblrd		*+
  3239  010610  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3240  010614  000A               	tblrd		*-
  3241  010616  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3242  01061A  ECBB  F096         	call	___lldiv	;wreg free
  3243  01061E  C060  F0C5         	movff	?___lldiv,sprintf@tmpval
  3244  010622  C061  F0C6         	movff	?___lldiv+1,sprintf@tmpval+1
  3245  010626  C062  F0C7         	movff	?___lldiv+2,sprintf@tmpval+2
  3246  01062A  C063  F0C8         	movff	?___lldiv+3,sprintf@tmpval+3
  3247                           
  3248                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3249  01062E  C0C5  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3250  010632  C0C6  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3251  010636  C0C7  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3252  01063A  C0C8  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3253  01063E  0E0A               	movlw	10
  3254  010640  0100               	movlb	0	; () banked
  3255  010642  6F71               	movwf	___llmod@divisor& (0+255),b
  3256  010644  0E00               	movlw	0
  3257  010646  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3258  010648  0E00               	movlw	0
  3259  01064A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3260  01064C  0E00               	movlw	0
  3261  01064E  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3262  010650  ECB6  F098         	call	___llmod	;wreg free
  3263  010654  C06D  F0C5         	movff	?___llmod,sprintf@tmpval
  3264  010658  C06E  F0C6         	movff	?___llmod+1,sprintf@tmpval+1
  3265  01065C  C06F  F0C7         	movff	?___llmod+2,sprintf@tmpval+2
  3266  010660  C070  F0C8         	movff	?___llmod+3,sprintf@tmpval+3
  3267                           
  3268                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3269  010664  0100               	movlb	0	; () banked
  3270  010666  51C5               	movf	sprintf@tmpval& (0+255),w,b
  3271  010668  0F30               	addlw	48
  3272  01066A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3273  01066E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3274  010672  6EDF               	movwf	indf2,c
  3275                           
  3276                           ; BSR set to: 0
  3277  010674  0100               	movlb	0	; () banked
  3278  010676  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3279  010678  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;doprnt.c: 1232: val %= dpowers[c];
  3283  01067A  C0BF  F06D         	movff	sprintf@val,___llmod@dividend
  3284  01067E  C0C0  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  3285  010682  C0C1  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  3286  010686  C0C2  F070         	movff	sprintf@val+3,___llmod@dividend+3
  3287  01068A  0100               	movlb	0	; () banked
  3288  01068C  51CC               	movf	sprintf@c& (0+255),w,b
  3289  01068E  0D04               	mullw	4
  3290  010690  0EDF               	movlw	low _dpowers
  3291  010692  24F3               	addwf	prodl,w,c
  3292  010694  6EF6               	movwf	tblptrl,c
  3293  010696  0EFD               	movlw	high _dpowers
  3294  010698  20F4               	addwfc	prodh,w,c
  3295  01069A  6EF7               	movwf	tblptrh,c
  3296  01069C                     	if	1	;There are 3 active tblptr bytes
  3297  01069C  6AF8               	clrf	tblptru,c
  3298  01069E  0E00               	movlw	low (__mediumconst shr (0+16))
  3299  0106A0  22F8               	addwfc	tblptru,f,c
  3300  0106A2                     	endif
  3301  0106A2  0009               	tblrd		*+
  3302  0106A4  CFF5 F071          	movff	tablat,___llmod@divisor
  3303  0106A8  0009               	tblrd		*+
  3304  0106AA  CFF5 F072          	movff	tablat,___llmod@divisor+1
  3305  0106AE  0009               	tblrd		*+
  3306  0106B0  CFF5 F073          	movff	tablat,___llmod@divisor+2
  3307  0106B4  000A               	tblrd		*-
  3308  0106B6  CFF5 F074          	movff	tablat,___llmod@divisor+3
  3309  0106BA  ECB6  F098         	call	___llmod	;wreg free
  3310  0106BE  C06D  F0BF         	movff	?___llmod,sprintf@val
  3311  0106C2  C06E  F0C0         	movff	?___llmod+1,sprintf@val+1
  3312  0106C6  C06F  F0C1         	movff	?___llmod+2,sprintf@val+2
  3313  0106CA  C070  F0C2         	movff	?___llmod+3,sprintf@val+3
  3314  0106CE                     l3988:
  3315  0106CE  0100               	movlb	0	; () banked
  3316  0106D0  07CC               	decf	sprintf@c& (0+255),f,b
  3317  0106D2  0100               	movlb	0	; () banked
  3318  0106D4  29CC               	incf	sprintf@c& (0+255),w,b
  3319  0106D6  B4D8               	btfsc	status,2,c
  3320  0106D8  D00E               	goto	l3996
  3321  0106DA  D77F               	goto	l3978
  3322  0106DC                     l3990:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3326  0106DC  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3327  0106E0  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3328  0106E4  0E30               	movlw	48
  3329  0106E6  6EDF               	movwf	indf2,c
  3330                           
  3331                           ; BSR set to: 0
  3332  0106E8  0100               	movlb	0	; () banked
  3333  0106EA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3334  0106EC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1237: prec--;
  3338  0106EE  0100               	movlb	0	; () banked
  3339  0106F0  07BD               	decf	sprintf@prec& (0+255),f,b
  3340  0106F2  A0D8               	btfss	status,0,c
  3341  0106F4  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  3342  0106F6                     l3996:
  3343                           
  3344                           ; BSR set to: 0
  3345  0106F6  0100               	movlb	0	; () banked
  3346  0106F8  51BD               	movf	sprintf@prec& (0+255),w,b
  3347  0106FA  0100               	movlb	0	; () banked
  3348  0106FC  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3349  0106FE  B4D8               	btfsc	status,2,c
  3350  010700  D146               	goto	l4062
  3351  010702  D7EC               	goto	l3990
  3352  010704                     l543:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;doprnt.c: 1246: }
  3356                           ;doprnt.c: 1273: {
  3357                           ;doprnt.c: 1281: if(flag & 0x10)
  3358  010704  0100               	movlb	0	; () banked
  3359  010706  A9BB               	btfss	sprintf@flag& (0+255),4,b
  3360  010708  D00E               	goto	l4002
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3364  01070A  C0B9  FFD9         	movff	sprintf@ap,fsr2l
  3365  01070E  C0BA  FFDA         	movff	sprintf@ap+1,fsr2h
  3366  010712  CFDE F0BF          	movff	postinc2,sprintf@val
  3367  010716  CFDE F0C0          	movff	postinc2,sprintf@val+1
  3368  01071A  CFDE F0C1          	movff	postinc2,sprintf@val+2
  3369  01071E  CFDE F0C2          	movff	postinc2,sprintf@val+3
  3370                           
  3371                           ; BSR set to: 0
  3372  010722  0E04               	movlw	4
  3373  010724  D010               	goto	L3
  3374  010726                     l4002:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;doprnt.c: 1283: else
  3378                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3379  010726  C0B9  FFD9         	movff	sprintf@ap,fsr2l
  3380  01072A  C0BA  FFDA         	movff	sprintf@ap+1,fsr2h
  3381  01072E  CFDE F0AF          	movff	postinc2,??_sprintf
  3382  010732  CFDD F0B0          	movff	postdec2,??_sprintf+1
  3383  010736  C0AF  F0BF         	movff	??_sprintf,sprintf@val
  3384  01073A  C0B0  F0C0         	movff	??_sprintf+1,sprintf@val+1
  3385  01073E  0100               	movlb	0	; () banked
  3386  010740  6BC1               	clrf	(sprintf@val+2)& (0+255),b
  3387  010742  6BC2               	clrf	(sprintf@val+3)& (0+255),b
  3388                           
  3389                           ; BSR set to: 0
  3390  010744  0E02               	movlw	2
  3391  010746                     L3:
  3392  010746  0100               	movlb	0	; () banked
  3393  010748  27B9               	addwf	sprintf@ap& (0+255),f,b
  3394  01074A  0E00               	movlw	0
  3395  01074C  23BA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;doprnt.c: 1287: }
  3399                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3400  01074E  D052               	goto	l4036
  3401  010750                     l4006:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3405  010750  0E01               	movlw	1
  3406  010752  0100               	movlb	0	; () banked
  3407  010754  6FCC               	movwf	sprintf@c& (0+255),b
  3408  010756                     l4008:
  3409                           
  3410                           ; BSR set to: 0
  3411  010756  0E0A               	movlw	10
  3412  010758  0100               	movlb	0	; () banked
  3413  01075A  19CC               	xorwf	sprintf@c& (0+255),w,b
  3414  01075C  B4D8               	btfsc	status,2,c
  3415  01075E  D053               	goto	l4038
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;doprnt.c: 1306: if(val < dpowers[c])
  3419                           
  3420                           ; BSR set to: 0
  3421                           
  3422                           ; BSR set to: 0
  3423  010760  0100               	movlb	0	; () banked
  3424  010762  51CC               	movf	sprintf@c& (0+255),w,b
  3425  010764  0D04               	mullw	4
  3426  010766  0EDF               	movlw	low _dpowers
  3427  010768  24F3               	addwf	prodl,w,c
  3428  01076A  6EF6               	movwf	tblptrl,c
  3429  01076C  0EFD               	movlw	high _dpowers
  3430  01076E  20F4               	addwfc	prodh,w,c
  3431  010770  6EF7               	movwf	tblptrh,c
  3432  010772                     	if	1	;There are 3 active tblptr bytes
  3433  010772  6AF8               	clrf	tblptru,c
  3434  010774  0E00               	movlw	low (__mediumconst shr (0+16))
  3435  010776  22F8               	addwfc	tblptru,f,c
  3436  010778                     	endif
  3437  010778  0009               	tblrd		*+
  3438  01077A  50F5               	movf	tablat,w,c
  3439  01077C  0100               	movlb	0	; () banked
  3440  01077E  5DBF               	subwf	sprintf@val& (0+255),w,b
  3441  010780  0009               	tblrd		*+
  3442  010782  50F5               	movf	tablat,w,c
  3443  010784  0100               	movlb	0	; () banked
  3444  010786  59C0               	subwfb	(sprintf@val+1)& (0+255),w,b
  3445  010788  0009               	tblrd		*+
  3446  01078A  50F5               	movf	tablat,w,c
  3447  01078C  0100               	movlb	0	; () banked
  3448  01078E  59C1               	subwfb	(sprintf@val+2)& (0+255),w,b
  3449  010790  0009               	tblrd		*+
  3450  010792  50F5               	movf	tablat,w,c
  3451  010794  0100               	movlb	0	; () banked
  3452  010796  59C2               	subwfb	(sprintf@val+3)& (0+255),w,b
  3453  010798  A0D8               	btfss	status,0,c
  3454  01079A  D035               	goto	l4038
  3455                           
  3456                           ; BSR set to: 0
  3457                           
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;doprnt.c: 1307: break;
  3462  01079C  0100               	movlb	0	; () banked
  3463  01079E  2BCC               	incf	sprintf@c& (0+255),f,b
  3464  0107A0  D7DA               	goto	l4008
  3465  0107A2                     l4020:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3469  0107A2  0E01               	movlw	1
  3470  0107A4  0100               	movlb	0	; () banked
  3471  0107A6  6FCC               	movwf	sprintf@c& (0+255),b
  3472  0107A8                     l4022:
  3473                           
  3474                           ; BSR set to: 0
  3475  0107A8  0E08               	movlw	8
  3476  0107AA  0100               	movlb	0	; () banked
  3477  0107AC  19CC               	xorwf	sprintf@c& (0+255),w,b
  3478  0107AE  B4D8               	btfsc	status,2,c
  3479  0107B0  D02A               	goto	l4038
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3483                           
  3484                           ; BSR set to: 0
  3485                           
  3486                           ; BSR set to: 0
  3487  0107B2  0100               	movlb	0	; () banked
  3488  0107B4  51CC               	movf	sprintf@c& (0+255),w,b
  3489  0107B6  0D04               	mullw	4
  3490  0107B8  0E55               	movlw	low _hexpowers
  3491  0107BA  24F3               	addwf	prodl,w,c
  3492  0107BC  6EF6               	movwf	tblptrl,c
  3493  0107BE  0EFE               	movlw	high _hexpowers
  3494  0107C0  20F4               	addwfc	prodh,w,c
  3495  0107C2  6EF7               	movwf	tblptrh,c
  3496  0107C4                     	if	1	;There are 3 active tblptr bytes
  3497  0107C4  6AF8               	clrf	tblptru,c
  3498  0107C6  0E00               	movlw	low (__mediumconst shr (0+16))
  3499  0107C8  22F8               	addwfc	tblptru,f,c
  3500  0107CA                     	endif
  3501  0107CA  0009               	tblrd		*+
  3502  0107CC  50F5               	movf	tablat,w,c
  3503  0107CE  0100               	movlb	0	; () banked
  3504  0107D0  5DBF               	subwf	sprintf@val& (0+255),w,b
  3505  0107D2  0009               	tblrd		*+
  3506  0107D4  50F5               	movf	tablat,w,c
  3507  0107D6  0100               	movlb	0	; () banked
  3508  0107D8  59C0               	subwfb	(sprintf@val+1)& (0+255),w,b
  3509  0107DA  0009               	tblrd		*+
  3510  0107DC  50F5               	movf	tablat,w,c
  3511  0107DE  0100               	movlb	0	; () banked
  3512  0107E0  59C1               	subwfb	(sprintf@val+2)& (0+255),w,b
  3513  0107E2  0009               	tblrd		*+
  3514  0107E4  50F5               	movf	tablat,w,c
  3515  0107E6  0100               	movlb	0	; () banked
  3516  0107E8  59C2               	subwfb	(sprintf@val+3)& (0+255),w,b
  3517  0107EA  A0D8               	btfss	status,0,c
  3518  0107EC  D00C               	goto	l4038
  3519                           
  3520                           ; BSR set to: 0
  3521                           
  3522                           ; BSR set to: 0
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;doprnt.c: 1318: break;
  3526  0107EE  0100               	movlb	0	; () banked
  3527  0107F0  2BCC               	incf	sprintf@c& (0+255),f,b
  3528  0107F2  D7DA               	goto	l4022
  3529  0107F4                     l4036:
  3530                           
  3531                           ; BSR set to: 0
  3532  0107F4  0100               	movlb	0	; () banked
  3533  0107F6  51BB               	movf	sprintf@flag& (0+255),w,b
  3534  0107F8  0BC0               	andlw	192
  3535                           
  3536                           ; Switch size 1, requested type "space"
  3537                           ; Number of cases is 2, Range of values is 128 to 192
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte            7     4 (average)
  3541                           ;	Chosen strategy is simple_byte
  3542  0107FA  0A80               	xorlw	128	; case 128
  3543  0107FC  B4D8               	btfsc	status,2,c
  3544  0107FE  D7D1               	goto	l4020
  3545  010800  0A40               	xorlw	64	; case 192
  3546  010802  B4D8               	btfsc	status,2,c
  3547  010804  D7A5               	goto	l4006
  3548  010806                     l4038:
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;doprnt.c: 1422: {
  3552                           ;doprnt.c: 1438: if(flag & 0x03)
  3553  010806  0E03               	movlw	3
  3554  010808  0100               	movlb	0	; () banked
  3555  01080A  15BB               	andwf	sprintf@flag& (0+255),w,b
  3556  01080C  0100               	movlb	0	; () banked
  3557  01080E  6FAF               	movwf	??_sprintf& (0+255),b
  3558  010810  0E00               	movlw	0
  3559  010812  0100               	movlb	0	; () banked
  3560  010814  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3561  010816  0100               	movlb	0	; () banked
  3562  010818  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  3563  01081A  0100               	movlb	0	; () banked
  3564  01081C  51AF               	movf	??_sprintf& (0+255),w,b
  3565  01081E  0100               	movlb	0	; () banked
  3566  010820  11B0               	iorwf	(??_sprintf+1)& (0+255),w,b
  3567  010822  B4D8               	btfsc	status,2,c
  3568  010824  D009               	goto	l4044
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3572  010826  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3573  01082A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3574  01082E  0E2D               	movlw	45
  3575  010830  6EDF               	movwf	indf2,c
  3576                           
  3577                           ; BSR set to: 0
  3578  010832  0100               	movlb	0	; () banked
  3579  010834  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3580  010836  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3581  010838                     l4044:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;doprnt.c: 1469: }
  3585                           ;doprnt.c: 1472: prec = c;
  3586  010838  0100               	movlb	0	; () banked
  3587  01083A  51CC               	movf	sprintf@c& (0+255),w,b
  3588  01083C  0100               	movlb	0	; () banked
  3589  01083E  6FBD               	movwf	sprintf@prec& (0+255),b
  3590  010840  6BBE               	clrf	(sprintf@prec+1)& (0+255),b
  3591  010842  BFBD               	btfsc	sprintf@prec& (0+255),7,b
  3592  010844  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  3593                           
  3594                           ;doprnt.c: 1474: while(prec--) {
  3595  010846  D098               	goto	l4060
  3596  010848                     l4046:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3600  010848  C0BD  F0AF         	movff	sprintf@prec,??_sprintf
  3601  01084C  C0BE  F0B0         	movff	sprintf@prec+1,??_sprintf+1
  3602  010850  0100               	movlb	0	; () banked
  3603  010852  90D8               	bcf	status,0,c
  3604  010854  37AF               	rlcf	??_sprintf& (0+255),f,b
  3605  010856  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3606  010858  0100               	movlb	0	; () banked
  3607  01085A  90D8               	bcf	status,0,c
  3608  01085C  37AF               	rlcf	??_sprintf& (0+255),f,b
  3609  01085E  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3610  010860  0EDF               	movlw	low _dpowers
  3611  010862  0100               	movlb	0	; () banked
  3612  010864  25AF               	addwf	??_sprintf& (0+255),w,b
  3613  010866  6EF6               	movwf	tblptrl,c
  3614  010868  0EFD               	movlw	high _dpowers
  3615  01086A  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  3616  01086C  6EF7               	movwf	tblptrh,c
  3617  01086E                     	if	1	;There are 3 active tblptr bytes
  3618  01086E  6AF8               	clrf	tblptru,c
  3619  010870  0E00               	movlw	low (__mediumconst shr (0+16))
  3620  010872  22F8               	addwfc	tblptru,f,c
  3621  010874                     	endif
  3622  010874  0009               	tblrd		*+
  3623  010876  CFF5 F064          	movff	tablat,___lldiv@divisor
  3624  01087A  0009               	tblrd		*+
  3625  01087C  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3626  010880  0009               	tblrd		*+
  3627  010882  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3628  010886  000A               	tblrd		*-
  3629  010888  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3630  01088C  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3631  010890  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3632  010894  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3633  010898  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3634  01089C  ECBB  F096         	call	___lldiv	;wreg free
  3635  0108A0  C060  F06D         	movff	?___lldiv,___llmod@dividend
  3636  0108A4  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  3637  0108A8  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  3638  0108AC  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  3639  0108B0  0E0A               	movlw	10
  3640  0108B2  0100               	movlb	0	; () banked
  3641  0108B4  6F71               	movwf	___llmod@divisor& (0+255),b
  3642  0108B6  0E00               	movlw	0
  3643  0108B8  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3644  0108BA  0E00               	movlw	0
  3645  0108BC  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3646  0108BE  0E00               	movlw	0
  3647  0108C0  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3648  0108C2  ECB6  F098         	call	___llmod	;wreg free
  3649  0108C6  0100               	movlb	0	; () banked
  3650  0108C8  516D               	movf	?___llmod& (0+255),w,b
  3651  0108CA  0F30               	addlw	48
  3652  0108CC  0100               	movlb	0	; () banked
  3653  0108CE  6FCC               	movwf	sprintf@c& (0+255),b
  3654                           
  3655                           ;doprnt.c: 1491: break;
  3656  0108D0  D04A               	goto	l4056
  3657  0108D2                     l4048:
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;doprnt.c: 1499: {
  3661                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3662  0108D2  C0BF  F060         	movff	sprintf@val,___lldiv@dividend
  3663  0108D6  C0C0  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3664  0108DA  C0C1  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3665  0108DE  C0C2  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3666  0108E2  C0BD  F0AF         	movff	sprintf@prec,??_sprintf
  3667  0108E6  C0BE  F0B0         	movff	sprintf@prec+1,??_sprintf+1
  3668  0108EA  0100               	movlb	0	; () banked
  3669  0108EC  90D8               	bcf	status,0,c
  3670  0108EE  37AF               	rlcf	??_sprintf& (0+255),f,b
  3671  0108F0  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3672  0108F2  0100               	movlb	0	; () banked
  3673  0108F4  90D8               	bcf	status,0,c
  3674  0108F6  37AF               	rlcf	??_sprintf& (0+255),f,b
  3675  0108F8  37B0               	rlcf	(??_sprintf+1)& (0+255),f,b
  3676  0108FA  0E55               	movlw	low _hexpowers
  3677  0108FC  0100               	movlb	0	; () banked
  3678  0108FE  25AF               	addwf	??_sprintf& (0+255),w,b
  3679  010900  6EF6               	movwf	tblptrl,c
  3680  010902  0EFE               	movlw	high _hexpowers
  3681  010904  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  3682  010906  6EF7               	movwf	tblptrh,c
  3683  010908                     	if	1	;There are 3 active tblptr bytes
  3684  010908  6AF8               	clrf	tblptru,c
  3685  01090A  0E00               	movlw	low (__mediumconst shr (0+16))
  3686  01090C  22F8               	addwfc	tblptru,f,c
  3687  01090E                     	endif
  3688  01090E  0009               	tblrd		*+
  3689  010910  CFF5 F064          	movff	tablat,___lldiv@divisor
  3690  010914  0009               	tblrd		*+
  3691  010916  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3692  01091A  0009               	tblrd		*+
  3693  01091C  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3694  010920  000A               	tblrd		*-
  3695  010922  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3696  010926  ECBB  F096         	call	___lldiv	;wreg free
  3697  01092A  0100               	movlb	0	; () banked
  3698  01092C  5160               	movf	?___lldiv& (0+255),w,b
  3699  01092E  0B0F               	andlw	15
  3700  010930  0100               	movlb	0	; () banked
  3701  010932  6FB8               	movwf	sprintf@idx& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3705  010934  0100               	movlb	0	; () banked
  3706  010936  51B8               	movf	sprintf@idx& (0+255),w,b
  3707  010938  0D01               	mullw	1
  3708  01093A  0EDE               	movlw	low STR_8
  3709  01093C  24F3               	addwf	prodl,w,c
  3710  01093E  6EF6               	movwf	tblptrl,c
  3711  010940  0EFF               	movlw	high STR_8
  3712  010942  20F4               	addwfc	prodh,w,c
  3713  010944  6EF7               	movwf	tblptrh,c
  3714  010946                     	if	1	;There are 3 active tblptr bytes
  3715  010946  6AF8               	clrf	tblptru,c
  3716  010948  0E00               	movlw	low (__mediumconst shr (0+16))
  3717  01094A  22F8               	addwfc	tblptru,f,c
  3718  01094C                     	endif
  3719  01094C  0008               	tblrd		*
  3720  01094E  CFF5 F0CC          	movff	tablat,sprintf@c
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;doprnt.c: 1523: }
  3724                           
  3725                           ;doprnt.c: 1508: }
  3726                           ;doprnt.c: 1510: break;
  3727  010952  D009               	goto	l4056
  3728  010954                     l4054:
  3729                           
  3730                           ; BSR set to: 0
  3731  010954  0100               	movlb	0	; () banked
  3732  010956  51BB               	movf	sprintf@flag& (0+255),w,b
  3733  010958  0BC0               	andlw	192
  3734                           
  3735                           ; Switch size 1, requested type "space"
  3736                           ; Number of cases is 2, Range of values is 128 to 192
  3737                           ; switch strategies available:
  3738                           ; Name         Instructions Cycles
  3739                           ; simple_byte            7     4 (average)
  3740                           ;	Chosen strategy is simple_byte
  3741  01095A  0A80               	xorlw	128	; case 128
  3742  01095C  B4D8               	btfsc	status,2,c
  3743  01095E  D7B9               	goto	l4048
  3744  010960  0A40               	xorlw	64	; case 192
  3745  010962  B4D8               	btfsc	status,2,c
  3746  010964  D771               	goto	l4046
  3747  010966                     l4056:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3751  010966  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3752  01096A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3753  01096E  C0CC  FFDF         	movff	sprintf@c,indf2
  3754                           
  3755                           ; BSR set to: 0
  3756  010972  0100               	movlb	0	; () banked
  3757  010974  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3758  010976  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3759  010978                     l4060:
  3760                           
  3761                           ; BSR set to: 0
  3762  010978  0100               	movlb	0	; () banked
  3763  01097A  07BD               	decf	sprintf@prec& (0+255),f,b
  3764  01097C  A0D8               	btfss	status,0,c
  3765  01097E  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  3766  010980  0100               	movlb	0	; () banked
  3767  010982  29BD               	incf	sprintf@prec& (0+255),w,b
  3768  010984  E1E7               	bnz	l4054
  3769  010986  0100               	movlb	0	; () banked
  3770  010988  29BE               	incf	(sprintf@prec+1)& (0+255),w,b
  3771  01098A  A4D8               	btfss	status,2,c
  3772  01098C  D7E3               	goto	l4054
  3773  01098E                     l4062:
  3774                           
  3775                           ; BSR set to: 0
  3776  01098E  C0A1  FFF6         	movff	sprintf@f,tblptrl
  3777  010992  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  3778  010996  0100               	movlb	0	; () banked
  3779  010998  4BA1               	infsnz	sprintf@f& (0+255),f,b
  3780  01099A  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  3781  01099C                     	if	0	;tblptru may be non-zero
  3782  01099C                     	endif
  3783  01099C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3784  01099C  0E00               	movlw	low (__mediumconst shr (0+16))
  3785  01099E  6EF8               	movwf	tblptru,c
  3786  0109A0                     	endif
  3787  0109A0  0008               	tblrd		*
  3788  0109A2  CFF5 F0CC          	movff	tablat,sprintf@c
  3789  0109A6  0100               	movlb	0	; () banked
  3790  0109A8  51CC               	movf	sprintf@c& (0+255),w,b
  3791  0109AA  A4D8               	btfss	status,2,c
  3792  0109AC  EF08  F080         	goto	l3832
  3793  0109B0                     l4064:
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;doprnt.c: 1538: *sp = 0;
  3797  0109B0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3798  0109B4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3799  0109B8  0E00               	movlw	0
  3800  0109BA  6EDF               	movwf	indf2,c
  3801  0109BC  0012               	return	
  3802  0109BE                     __end_of_sprintf:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           postinc0	equ	0xFEE
  3811                           wreg	equ	0xFE8
  3812                           postdec1	equ	0xFE5
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _scale *****************
  3822 ;; Defined at:
  3823 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  scl             1    wreg     char 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  scl             1   41[BANK0 ] char 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  3   35[BANK0 ] char 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3837 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3838 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3840 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3841 ;;Total ram usage:        7 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    6
  3844 ;; This function calls:
  3845 ;;		___awdiv
  3846 ;;		___awmod
  3847 ;;		___ftmul
  3848 ;;		___wmul
  3849 ;; This function is called by:
  3850 ;;		_sprintf
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text5
  3855  0109BE                     __ptext5:
  3856                           	opt stack 0
  3857  0109BE                     _scale:
  3858                           	opt stack 22
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;incstack = 0
  3862                           ;scale@scl stored from wreg
  3863  0109BE  0100               	movlb	0	; () banked
  3864  0109C0  6F89               	movwf	scale@scl& (0+255),b
  3865                           
  3866                           ;doprnt.c: 428: if(scl < 0) {
  3867  0109C2  0100               	movlb	0	; () banked
  3868  0109C4  AF89               	btfss	scale@scl& (0+255),7,b
  3869  0109C6  D13C               	goto	l3604
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;doprnt.c: 429: scl = -scl;
  3873  0109C8  0100               	movlb	0	; () banked
  3874  0109CA  6D89               	negf	scale@scl& (0+255),b
  3875                           
  3876                           ;doprnt.c: 430: if(scl>=110)
  3877  0109CC  0100               	movlb	0	; () banked
  3878  0109CE  5189               	movf	scale@scl& (0+255),w,b
  3879  0109D0  0A80               	xorlw	128
  3880  0109D2  0F12               	addlw	-238
  3881  0109D4  A0D8               	btfss	status,0,c
  3882  0109D6  D0B5               	goto	l3594
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3886  0109D8  0E00               	movlw	0
  3887  0109DA  0100               	movlb	0	; () banked
  3888  0109DC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3889  0109DE  0E03               	movlw	3
  3890  0109E0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3891  0109E2  0E00               	movlw	0
  3892  0109E4  0100               	movlb	0	; () banked
  3893  0109E6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3894  0109E8  0E0A               	movlw	10
  3895  0109EA  6F68               	movwf	___awdiv@divisor& (0+255),b
  3896  0109EC  0E00               	movlw	0
  3897  0109EE  0100               	movlb	0	; () banked
  3898  0109F0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3899  0109F2  0E64               	movlw	100
  3900  0109F4  6F62               	movwf	___awmod@divisor& (0+255),b
  3901  0109F6  0100               	movlb	0	; () banked
  3902  0109F8  5189               	movf	scale@scl& (0+255),w,b
  3903  0109FA  0100               	movlb	0	; () banked
  3904  0109FC  6F60               	movwf	___awmod@dividend& (0+255),b
  3905  0109FE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3906  010A00  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3907  010A02  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3908  010A04  ECC7  F097         	call	___awmod	;wreg free
  3909  010A08  C060  F066         	movff	?___awmod,___awdiv@dividend
  3910  010A0C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3911  010A10  EC5C  F096         	call	___awdiv	;wreg free
  3912  010A14  0E09               	movlw	9
  3913  010A16  0100               	movlb	0	; () banked
  3914  010A18  2566               	addwf	?___awdiv& (0+255),w,b
  3915  010A1A  0100               	movlb	0	; () banked
  3916  010A1C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3917  010A1E  0E00               	movlw	0
  3918  010A20  0100               	movlb	0	; () banked
  3919  010A22  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3920  010A24  0100               	movlb	0	; () banked
  3921  010A26  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3922  010A28  ECCF  F09B         	call	___wmul	;wreg free
  3923  010A2C  0E07               	movlw	low __npowers_
  3924  010A2E  0100               	movlb	0	; () banked
  3925  010A30  256E               	addwf	?___wmul& (0+255),w,b
  3926  010A32  6EF6               	movwf	tblptrl,c
  3927  010A34  0EFE               	movlw	high __npowers_
  3928  010A36  0100               	movlb	0	; () banked
  3929  010A38  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3930  010A3A  6EF7               	movwf	tblptrh,c
  3931  010A3C                     	if	1	;There are 3 active tblptr bytes
  3932  010A3C  6AF8               	clrf	tblptru,c
  3933  010A3E  0E00               	movlw	low (__mediumconst shr (0+16))
  3934  010A40  22F8               	addwfc	tblptru,f,c
  3935  010A42                     	endif
  3936  010A42  0009               	tblrd		*+
  3937  010A44  CFF5 F077          	movff	tablat,___ftmul@f2
  3938  010A48  0009               	tblrd		*+
  3939  010A4A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3940  010A4E  000A               	tblrd		*-
  3941  010A50  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3942  010A54  0E00               	movlw	0
  3943  010A56  0100               	movlb	0	; () banked
  3944  010A58  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3945  010A5A  0E64               	movlw	100
  3946  010A5C  6F68               	movwf	___awdiv@divisor& (0+255),b
  3947  010A5E  0100               	movlb	0	; () banked
  3948  010A60  5189               	movf	scale@scl& (0+255),w,b
  3949  010A62  0100               	movlb	0	; () banked
  3950  010A64  6F66               	movwf	___awdiv@dividend& (0+255),b
  3951  010A66  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3952  010A68  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3953  010A6A  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3954  010A6C  EC5C  F096         	call	___awdiv	;wreg free
  3955  010A70  0E12               	movlw	18
  3956  010A72  0100               	movlb	0	; () banked
  3957  010A74  2566               	addwf	?___awdiv& (0+255),w,b
  3958  010A76  0100               	movlb	0	; () banked
  3959  010A78  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3960  010A7A  0E00               	movlw	0
  3961  010A7C  0100               	movlb	0	; () banked
  3962  010A7E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3963  010A80  0100               	movlb	0	; () banked
  3964  010A82  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3965  010A84  0E00               	movlw	0
  3966  010A86  0100               	movlb	0	; () banked
  3967  010A88  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3968  010A8A  0E03               	movlw	3
  3969  010A8C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3970  010A8E  ECCF  F09B         	call	___wmul	;wreg free
  3971  010A92  0E07               	movlw	low __npowers_
  3972  010A94  0100               	movlb	0	; () banked
  3973  010A96  256E               	addwf	?___wmul& (0+255),w,b
  3974  010A98  6EF6               	movwf	tblptrl,c
  3975  010A9A  0EFE               	movlw	high __npowers_
  3976  010A9C  0100               	movlb	0	; () banked
  3977  010A9E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3978  010AA0  6EF7               	movwf	tblptrh,c
  3979  010AA2                     	if	1	;There are 3 active tblptr bytes
  3980  010AA2  6AF8               	clrf	tblptru,c
  3981  010AA4  0E00               	movlw	low (__mediumconst shr (0+16))
  3982  010AA6  22F8               	addwfc	tblptru,f,c
  3983  010AA8                     	endif
  3984  010AA8  0009               	tblrd		*+
  3985  010AAA  CFF5 F074          	movff	tablat,___ftmul@f1
  3986  010AAE  0009               	tblrd		*+
  3987  010AB0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3988  010AB4  000A               	tblrd		*-
  3989  010AB6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3990  010ABA  ECBF  F08E         	call	___ftmul	;wreg free
  3991  010ABE  C074  F086         	movff	?___ftmul,_scale$2669
  3992  010AC2  C075  F087         	movff	?___ftmul+1,_scale$2669+1
  3993  010AC6  C076  F088         	movff	?___ftmul+2,_scale$2669+2
  3994                           
  3995                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3996  010ACA  C086  F074         	movff	_scale$2669,___ftmul@f1
  3997  010ACE  C087  F075         	movff	_scale$2669+1,___ftmul@f1+1
  3998  010AD2  C088  F076         	movff	_scale$2669+2,___ftmul@f1+2
  3999  010AD6  0E00               	movlw	0
  4000  010AD8  0100               	movlb	0	; () banked
  4001  010ADA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4002  010ADC  0E03               	movlw	3
  4003  010ADE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4004  010AE0  0E00               	movlw	0
  4005  010AE2  0100               	movlb	0	; () banked
  4006  010AE4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4007  010AE6  0E0A               	movlw	10
  4008  010AE8  6F62               	movwf	___awmod@divisor& (0+255),b
  4009  010AEA  0100               	movlb	0	; () banked
  4010  010AEC  5189               	movf	scale@scl& (0+255),w,b
  4011  010AEE  0100               	movlb	0	; () banked
  4012  010AF0  6F60               	movwf	___awmod@dividend& (0+255),b
  4013  010AF2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4014  010AF4  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4015  010AF6  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4016  010AF8  ECC7  F097         	call	___awmod	;wreg free
  4017  010AFC  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4018  010B00  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4019  010B04  ECCF  F09B         	call	___wmul	;wreg free
  4020  010B08  0E07               	movlw	low __npowers_
  4021  010B0A  0100               	movlb	0	; () banked
  4022  010B0C  256E               	addwf	?___wmul& (0+255),w,b
  4023  010B0E  6EF6               	movwf	tblptrl,c
  4024  010B10  0EFE               	movlw	high __npowers_
  4025  010B12  0100               	movlb	0	; () banked
  4026  010B14  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4027  010B16  6EF7               	movwf	tblptrh,c
  4028  010B18                     	if	1	;There are 3 active tblptr bytes
  4029  010B18  6AF8               	clrf	tblptru,c
  4030  010B1A  0E00               	movlw	low (__mediumconst shr (0+16))
  4031  010B1C  22F8               	addwfc	tblptru,f,c
  4032  010B1E                     	endif
  4033  010B1E  0009               	tblrd		*+
  4034  010B20  CFF5 F077          	movff	tablat,___ftmul@f2
  4035  010B24  0009               	tblrd		*+
  4036  010B26  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4037  010B2A  000A               	tblrd		*-
  4038  010B2C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4039  010B30  ECBF  F08E         	call	___ftmul	;wreg free
  4040  010B34  C074  F083         	movff	?___ftmul,?_scale
  4041  010B38  C075  F084         	movff	?___ftmul+1,?_scale+1
  4042  010B3C  C076  F085         	movff	?___ftmul+2,?_scale+2
  4043  010B40  0012               	return	
  4044  010B42                     l3594:
  4045                           
  4046                           ;doprnt.c: 432: else if(scl > 10)
  4047  010B42  0100               	movlb	0	; () banked
  4048  010B44  5189               	movf	scale@scl& (0+255),w,b
  4049  010B46  0A80               	xorlw	128
  4050  010B48  0F75               	addlw	-139
  4051  010B4A  A0D8               	btfss	status,0,c
  4052  010B4C  D063               	goto	l3600
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4056  010B4E  0E00               	movlw	0
  4057  010B50  0100               	movlb	0	; () banked
  4058  010B52  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4059  010B54  0E0A               	movlw	10
  4060  010B56  6F68               	movwf	___awdiv@divisor& (0+255),b
  4061  010B58  0100               	movlb	0	; () banked
  4062  010B5A  5189               	movf	scale@scl& (0+255),w,b
  4063  010B5C  0100               	movlb	0	; () banked
  4064  010B5E  6F66               	movwf	___awdiv@dividend& (0+255),b
  4065  010B60  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4066  010B62  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4067  010B64  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4068  010B66  EC5C  F096         	call	___awdiv	;wreg free
  4069  010B6A  0E09               	movlw	9
  4070  010B6C  0100               	movlb	0	; () banked
  4071  010B6E  2566               	addwf	?___awdiv& (0+255),w,b
  4072  010B70  0100               	movlb	0	; () banked
  4073  010B72  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4074  010B74  0E00               	movlw	0
  4075  010B76  0100               	movlb	0	; () banked
  4076  010B78  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4077  010B7A  0100               	movlb	0	; () banked
  4078  010B7C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4079  010B7E  0E00               	movlw	0
  4080  010B80  0100               	movlb	0	; () banked
  4081  010B82  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4082  010B84  0E03               	movlw	3
  4083  010B86  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4084  010B88  ECCF  F09B         	call	___wmul	;wreg free
  4085  010B8C  0E07               	movlw	low __npowers_
  4086  010B8E  0100               	movlb	0	; () banked
  4087  010B90  256E               	addwf	?___wmul& (0+255),w,b
  4088  010B92  6EF6               	movwf	tblptrl,c
  4089  010B94  0EFE               	movlw	high __npowers_
  4090  010B96  0100               	movlb	0	; () banked
  4091  010B98  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4092  010B9A  6EF7               	movwf	tblptrh,c
  4093  010B9C                     	if	1	;There are 3 active tblptr bytes
  4094  010B9C  6AF8               	clrf	tblptru,c
  4095  010B9E  0E00               	movlw	low (__mediumconst shr (0+16))
  4096  010BA0  22F8               	addwfc	tblptru,f,c
  4097  010BA2                     	endif
  4098  010BA2  0009               	tblrd		*+
  4099  010BA4  CFF5 F074          	movff	tablat,___ftmul@f1
  4100  010BA8  0009               	tblrd		*+
  4101  010BAA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4102  010BAE  000A               	tblrd		*-
  4103  010BB0  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4104  010BB4  0E00               	movlw	0
  4105  010BB6  0100               	movlb	0	; () banked
  4106  010BB8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4107  010BBA  0E03               	movlw	3
  4108  010BBC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4109  010BBE  0E00               	movlw	0
  4110  010BC0  0100               	movlb	0	; () banked
  4111  010BC2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4112  010BC4  0E0A               	movlw	10
  4113  010BC6  6F62               	movwf	___awmod@divisor& (0+255),b
  4114  010BC8  0100               	movlb	0	; () banked
  4115  010BCA  5189               	movf	scale@scl& (0+255),w,b
  4116  010BCC  0100               	movlb	0	; () banked
  4117  010BCE  6F60               	movwf	___awmod@dividend& (0+255),b
  4118  010BD0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4119  010BD2  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4120  010BD4  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4121  010BD6  ECC7  F097         	call	___awmod	;wreg free
  4122  010BDA  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4123  010BDE  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4124  010BE2  ECCF  F09B         	call	___wmul	;wreg free
  4125  010BE6  0E07               	movlw	low __npowers_
  4126  010BE8  0100               	movlb	0	; () banked
  4127  010BEA  256E               	addwf	?___wmul& (0+255),w,b
  4128  010BEC  6EF6               	movwf	tblptrl,c
  4129  010BEE  0EFE               	movlw	high __npowers_
  4130  010BF0  0100               	movlb	0	; () banked
  4131  010BF2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4132  010BF4  6EF7               	movwf	tblptrh,c
  4133  010BF6                     	if	1	;There are 3 active tblptr bytes
  4134  010BF6  6AF8               	clrf	tblptru,c
  4135  010BF8  0E00               	movlw	low (__mediumconst shr (0+16))
  4136  010BFA  22F8               	addwfc	tblptru,f,c
  4137  010BFC                     	endif
  4138  010BFC  0009               	tblrd		*+
  4139  010BFE  CFF5 F077          	movff	tablat,___ftmul@f2
  4140  010C02  0009               	tblrd		*+
  4141  010C04  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4142  010C08  000A               	tblrd		*-
  4143  010C0A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4144  010C0E  ECBF  F08E         	call	___ftmul	;wreg free
  4145  010C12  D790               	goto	L4
  4146  010C14                     l3600:
  4147                           
  4148                           ;doprnt.c: 434: return _npowers_[scl];
  4149  010C14  0100               	movlb	0	; () banked
  4150  010C16  5189               	movf	scale@scl& (0+255),w,b
  4151  010C18  0D03               	mullw	3
  4152  010C1A  0E07               	movlw	low __npowers_
  4153  010C1C  24F3               	addwf	prodl,w,c
  4154  010C1E  6EF6               	movwf	tblptrl,c
  4155  010C20  0EFE               	movlw	high __npowers_
  4156  010C22  20F4               	addwfc	prodh,w,c
  4157  010C24  6EF7               	movwf	tblptrh,c
  4158  010C26                     	if	1	;There are 3 active tblptr bytes
  4159  010C26  6AF8               	clrf	tblptru,c
  4160  010C28  0E00               	movlw	low (__mediumconst shr (0+16))
  4161  010C2A  22F8               	addwfc	tblptru,f,c
  4162  010C2C                     	endif
  4163  010C2C  0009               	tblrd		*+
  4164  010C2E  CFF5 F083          	movff	tablat,?_scale
  4165  010C32  0009               	tblrd		*+
  4166  010C34  CFF5 F084          	movff	tablat,?_scale+1
  4167  010C38  000A               	tblrd		*-
  4168  010C3A  CFF5 F085          	movff	tablat,?_scale+2
  4169                           
  4170                           ; BSR set to: 0
  4171  010C3E  0012               	return	
  4172  010C40                     l3604:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;doprnt.c: 435: }
  4176                           ;doprnt.c: 436: if(scl>=110)
  4177  010C40  0100               	movlb	0	; () banked
  4178  010C42  5189               	movf	scale@scl& (0+255),w,b
  4179  010C44  0A80               	xorlw	128
  4180  010C46  0F12               	addlw	-238
  4181  010C48  A0D8               	btfss	status,0,c
  4182  010C4A  D0B5               	goto	l3612
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4186  010C4C  0E00               	movlw	0
  4187  010C4E  0100               	movlb	0	; () banked
  4188  010C50  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4189  010C52  0E03               	movlw	3
  4190  010C54  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4191  010C56  0E00               	movlw	0
  4192  010C58  0100               	movlb	0	; () banked
  4193  010C5A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4194  010C5C  0E0A               	movlw	10
  4195  010C5E  6F68               	movwf	___awdiv@divisor& (0+255),b
  4196  010C60  0E00               	movlw	0
  4197  010C62  0100               	movlb	0	; () banked
  4198  010C64  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4199  010C66  0E64               	movlw	100
  4200  010C68  6F62               	movwf	___awmod@divisor& (0+255),b
  4201  010C6A  0100               	movlb	0	; () banked
  4202  010C6C  5189               	movf	scale@scl& (0+255),w,b
  4203  010C6E  0100               	movlb	0	; () banked
  4204  010C70  6F60               	movwf	___awmod@dividend& (0+255),b
  4205  010C72  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4206  010C74  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4207  010C76  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4208  010C78  ECC7  F097         	call	___awmod	;wreg free
  4209  010C7C  C060  F066         	movff	?___awmod,___awdiv@dividend
  4210  010C80  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4211  010C84  EC5C  F096         	call	___awdiv	;wreg free
  4212  010C88  0E09               	movlw	9
  4213  010C8A  0100               	movlb	0	; () banked
  4214  010C8C  2566               	addwf	?___awdiv& (0+255),w,b
  4215  010C8E  0100               	movlb	0	; () banked
  4216  010C90  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4217  010C92  0E00               	movlw	0
  4218  010C94  0100               	movlb	0	; () banked
  4219  010C96  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4220  010C98  0100               	movlb	0	; () banked
  4221  010C9A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4222  010C9C  ECCF  F09B         	call	___wmul	;wreg free
  4223  010CA0  0E2E               	movlw	low __powers_
  4224  010CA2  0100               	movlb	0	; () banked
  4225  010CA4  256E               	addwf	?___wmul& (0+255),w,b
  4226  010CA6  6EF6               	movwf	tblptrl,c
  4227  010CA8  0EFE               	movlw	high __powers_
  4228  010CAA  0100               	movlb	0	; () banked
  4229  010CAC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4230  010CAE  6EF7               	movwf	tblptrh,c
  4231  010CB0                     	if	1	;There are 3 active tblptr bytes
  4232  010CB0  6AF8               	clrf	tblptru,c
  4233  010CB2  0E00               	movlw	low (__mediumconst shr (0+16))
  4234  010CB4  22F8               	addwfc	tblptru,f,c
  4235  010CB6                     	endif
  4236  010CB6  0009               	tblrd		*+
  4237  010CB8  CFF5 F077          	movff	tablat,___ftmul@f2
  4238  010CBC  0009               	tblrd		*+
  4239  010CBE  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4240  010CC2  000A               	tblrd		*-
  4241  010CC4  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4242  010CC8  0E00               	movlw	0
  4243  010CCA  0100               	movlb	0	; () banked
  4244  010CCC  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4245  010CCE  0E64               	movlw	100
  4246  010CD0  6F68               	movwf	___awdiv@divisor& (0+255),b
  4247  010CD2  0100               	movlb	0	; () banked
  4248  010CD4  5189               	movf	scale@scl& (0+255),w,b
  4249  010CD6  0100               	movlb	0	; () banked
  4250  010CD8  6F66               	movwf	___awdiv@dividend& (0+255),b
  4251  010CDA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4252  010CDC  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4253  010CDE  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4254  010CE0  EC5C  F096         	call	___awdiv	;wreg free
  4255  010CE4  0E12               	movlw	18
  4256  010CE6  0100               	movlb	0	; () banked
  4257  010CE8  2566               	addwf	?___awdiv& (0+255),w,b
  4258  010CEA  0100               	movlb	0	; () banked
  4259  010CEC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4260  010CEE  0E00               	movlw	0
  4261  010CF0  0100               	movlb	0	; () banked
  4262  010CF2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4263  010CF4  0100               	movlb	0	; () banked
  4264  010CF6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4265  010CF8  0E00               	movlw	0
  4266  010CFA  0100               	movlb	0	; () banked
  4267  010CFC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4268  010CFE  0E03               	movlw	3
  4269  010D00  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4270  010D02  ECCF  F09B         	call	___wmul	;wreg free
  4271  010D06  0E2E               	movlw	low __powers_
  4272  010D08  0100               	movlb	0	; () banked
  4273  010D0A  256E               	addwf	?___wmul& (0+255),w,b
  4274  010D0C  6EF6               	movwf	tblptrl,c
  4275  010D0E  0EFE               	movlw	high __powers_
  4276  010D10  0100               	movlb	0	; () banked
  4277  010D12  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4278  010D14  6EF7               	movwf	tblptrh,c
  4279  010D16                     	if	1	;There are 3 active tblptr bytes
  4280  010D16  6AF8               	clrf	tblptru,c
  4281  010D18  0E00               	movlw	low (__mediumconst shr (0+16))
  4282  010D1A  22F8               	addwfc	tblptru,f,c
  4283  010D1C                     	endif
  4284  010D1C  0009               	tblrd		*+
  4285  010D1E  CFF5 F074          	movff	tablat,___ftmul@f1
  4286  010D22  0009               	tblrd		*+
  4287  010D24  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4288  010D28  000A               	tblrd		*-
  4289  010D2A  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4290  010D2E  ECBF  F08E         	call	___ftmul	;wreg free
  4291  010D32  C074  F086         	movff	?___ftmul,_scale$2669
  4292  010D36  C075  F087         	movff	?___ftmul+1,_scale$2669+1
  4293  010D3A  C076  F088         	movff	?___ftmul+2,_scale$2669+2
  4294                           
  4295                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4296  010D3E  C086  F074         	movff	_scale$2669,___ftmul@f1
  4297  010D42  C087  F075         	movff	_scale$2669+1,___ftmul@f1+1
  4298  010D46  C088  F076         	movff	_scale$2669+2,___ftmul@f1+2
  4299  010D4A  0E00               	movlw	0
  4300  010D4C  0100               	movlb	0	; () banked
  4301  010D4E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4302  010D50  0E03               	movlw	3
  4303  010D52  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4304  010D54  0E00               	movlw	0
  4305  010D56  0100               	movlb	0	; () banked
  4306  010D58  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4307  010D5A  0E0A               	movlw	10
  4308  010D5C  6F62               	movwf	___awmod@divisor& (0+255),b
  4309  010D5E  0100               	movlb	0	; () banked
  4310  010D60  5189               	movf	scale@scl& (0+255),w,b
  4311  010D62  0100               	movlb	0	; () banked
  4312  010D64  6F60               	movwf	___awmod@dividend& (0+255),b
  4313  010D66  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4314  010D68  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4315  010D6A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4316  010D6C  ECC7  F097         	call	___awmod	;wreg free
  4317  010D70  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4318  010D74  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4319  010D78  ECCF  F09B         	call	___wmul	;wreg free
  4320  010D7C  0E2E               	movlw	low __powers_
  4321  010D7E  0100               	movlb	0	; () banked
  4322  010D80  256E               	addwf	?___wmul& (0+255),w,b
  4323  010D82  6EF6               	movwf	tblptrl,c
  4324  010D84  0EFE               	movlw	high __powers_
  4325  010D86  0100               	movlb	0	; () banked
  4326  010D88  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4327  010D8A  6EF7               	movwf	tblptrh,c
  4328  010D8C                     	if	1	;There are 3 active tblptr bytes
  4329  010D8C  6AF8               	clrf	tblptru,c
  4330  010D8E  0E00               	movlw	low (__mediumconst shr (0+16))
  4331  010D90  22F8               	addwfc	tblptru,f,c
  4332  010D92                     	endif
  4333  010D92  0009               	tblrd		*+
  4334  010D94  CFF5 F077          	movff	tablat,___ftmul@f2
  4335  010D98  0009               	tblrd		*+
  4336  010D9A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4337  010D9E  000A               	tblrd		*-
  4338  010DA0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4339  010DA4  ECBF  F08E         	call	___ftmul	;wreg free
  4340  010DA8  C074  F083         	movff	?___ftmul,?_scale
  4341  010DAC  C075  F084         	movff	?___ftmul+1,?_scale+1
  4342  010DB0  C076  F085         	movff	?___ftmul+2,?_scale+2
  4343  010DB4  0012               	return	
  4344  010DB6                     l3612:
  4345                           
  4346                           ;doprnt.c: 438: else if(scl > 10)
  4347  010DB6  0100               	movlb	0	; () banked
  4348  010DB8  5189               	movf	scale@scl& (0+255),w,b
  4349  010DBA  0A80               	xorlw	128
  4350  010DBC  0F75               	addlw	-139
  4351  010DBE  A0D8               	btfss	status,0,c
  4352  010DC0  D063               	goto	l3618
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4356  010DC2  0E00               	movlw	0
  4357  010DC4  0100               	movlb	0	; () banked
  4358  010DC6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4359  010DC8  0E0A               	movlw	10
  4360  010DCA  6F68               	movwf	___awdiv@divisor& (0+255),b
  4361  010DCC  0100               	movlb	0	; () banked
  4362  010DCE  5189               	movf	scale@scl& (0+255),w,b
  4363  010DD0  0100               	movlb	0	; () banked
  4364  010DD2  6F66               	movwf	___awdiv@dividend& (0+255),b
  4365  010DD4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4366  010DD6  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4367  010DD8  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4368  010DDA  EC5C  F096         	call	___awdiv	;wreg free
  4369  010DDE  0E09               	movlw	9
  4370  010DE0  0100               	movlb	0	; () banked
  4371  010DE2  2566               	addwf	?___awdiv& (0+255),w,b
  4372  010DE4  0100               	movlb	0	; () banked
  4373  010DE6  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4374  010DE8  0E00               	movlw	0
  4375  010DEA  0100               	movlb	0	; () banked
  4376  010DEC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4377  010DEE  0100               	movlb	0	; () banked
  4378  010DF0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4379  010DF2  0E00               	movlw	0
  4380  010DF4  0100               	movlb	0	; () banked
  4381  010DF6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4382  010DF8  0E03               	movlw	3
  4383  010DFA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4384  010DFC  ECCF  F09B         	call	___wmul	;wreg free
  4385  010E00  0E2E               	movlw	low __powers_
  4386  010E02  0100               	movlb	0	; () banked
  4387  010E04  256E               	addwf	?___wmul& (0+255),w,b
  4388  010E06  6EF6               	movwf	tblptrl,c
  4389  010E08  0EFE               	movlw	high __powers_
  4390  010E0A  0100               	movlb	0	; () banked
  4391  010E0C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4392  010E0E  6EF7               	movwf	tblptrh,c
  4393  010E10                     	if	1	;There are 3 active tblptr bytes
  4394  010E10  6AF8               	clrf	tblptru,c
  4395  010E12  0E00               	movlw	low (__mediumconst shr (0+16))
  4396  010E14  22F8               	addwfc	tblptru,f,c
  4397  010E16                     	endif
  4398  010E16  0009               	tblrd		*+
  4399  010E18  CFF5 F074          	movff	tablat,___ftmul@f1
  4400  010E1C  0009               	tblrd		*+
  4401  010E1E  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4402  010E22  000A               	tblrd		*-
  4403  010E24  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4404  010E28  0E00               	movlw	0
  4405  010E2A  0100               	movlb	0	; () banked
  4406  010E2C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4407  010E2E  0E03               	movlw	3
  4408  010E30  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4409  010E32  0E00               	movlw	0
  4410  010E34  0100               	movlb	0	; () banked
  4411  010E36  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4412  010E38  0E0A               	movlw	10
  4413  010E3A  6F62               	movwf	___awmod@divisor& (0+255),b
  4414  010E3C  0100               	movlb	0	; () banked
  4415  010E3E  5189               	movf	scale@scl& (0+255),w,b
  4416  010E40  0100               	movlb	0	; () banked
  4417  010E42  6F60               	movwf	___awmod@dividend& (0+255),b
  4418  010E44  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4419  010E46  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4420  010E48  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4421  010E4A  ECC7  F097         	call	___awmod	;wreg free
  4422  010E4E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4423  010E52  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4424  010E56  ECCF  F09B         	call	___wmul	;wreg free
  4425  010E5A  0E2E               	movlw	low __powers_
  4426  010E5C  0100               	movlb	0	; () banked
  4427  010E5E  256E               	addwf	?___wmul& (0+255),w,b
  4428  010E60  6EF6               	movwf	tblptrl,c
  4429  010E62  0EFE               	movlw	high __powers_
  4430  010E64  0100               	movlb	0	; () banked
  4431  010E66  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4432  010E68  6EF7               	movwf	tblptrh,c
  4433  010E6A                     	if	1	;There are 3 active tblptr bytes
  4434  010E6A  6AF8               	clrf	tblptru,c
  4435  010E6C  0E00               	movlw	low (__mediumconst shr (0+16))
  4436  010E6E  22F8               	addwfc	tblptru,f,c
  4437  010E70                     	endif
  4438  010E70  0009               	tblrd		*+
  4439  010E72  CFF5 F077          	movff	tablat,___ftmul@f2
  4440  010E76  0009               	tblrd		*+
  4441  010E78  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4442  010E7C  000A               	tblrd		*-
  4443  010E7E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4444  010E82  ECBF  F08E         	call	___ftmul	;wreg free
  4445  010E86  D790               	goto	L5
  4446  010E88                     l3618:
  4447                           
  4448                           ;doprnt.c: 440: return _powers_[scl];
  4449  010E88  0100               	movlb	0	; () banked
  4450  010E8A  5189               	movf	scale@scl& (0+255),w,b
  4451  010E8C  0D03               	mullw	3
  4452  010E8E  0E2E               	movlw	low __powers_
  4453  010E90  24F3               	addwf	prodl,w,c
  4454  010E92  6EF6               	movwf	tblptrl,c
  4455  010E94  0EFE               	movlw	high __powers_
  4456  010E96  20F4               	addwfc	prodh,w,c
  4457  010E98  6EF7               	movwf	tblptrh,c
  4458  010E9A                     	if	1	;There are 3 active tblptr bytes
  4459  010E9A  6AF8               	clrf	tblptru,c
  4460  010E9C  0E00               	movlw	low (__mediumconst shr (0+16))
  4461  010E9E  22F8               	addwfc	tblptru,f,c
  4462  010EA0                     	endif
  4463  010EA0  0009               	tblrd		*+
  4464  010EA2  CFF5 F083          	movff	tablat,?_scale
  4465  010EA6  0009               	tblrd		*+
  4466  010EA8  CFF5 F084          	movff	tablat,?_scale+1
  4467  010EAC  000A               	tblrd		*-
  4468  010EAE  CFF5 F085          	movff	tablat,?_scale+2
  4469  010EB2  0012               	return	
  4470  010EB4                     __end_of_scale:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           prodh	equ	0xFF4
  4477                           prodl	equ	0xFF3
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           postdec1	equ	0xFE5
  4481                           fsr1l	equ	0xFE1
  4482                           indf2	equ	0xFDF
  4483                           postinc2	equ	0xFDE
  4484                           postdec2	equ	0xFDD
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _fround *****************
  4490 ;; Defined at:
  4491 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;  prec            1    wreg     unsigned char 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  prec            1   44[BANK0 ] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  3   35[BANK0 ] unsigned char 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4505 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4506 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4508 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4509 ;;Total ram usage:       10 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    6
  4512 ;; This function calls:
  4513 ;;		___awdiv
  4514 ;;		___awmod
  4515 ;;		___ftmul
  4516 ;;		___wmul
  4517 ;; This function is called by:
  4518 ;;		_sprintf
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text6
  4523  010EB4                     __ptext6:
  4524                           	opt stack 0
  4525  010EB4                     _fround:
  4526                           	opt stack 22
  4527                           
  4528                           ;incstack = 0
  4529                           ;fround@prec stored from wreg
  4530  010EB4  0100               	movlb	0	; () banked
  4531  010EB6  6F8C               	movwf	fround@prec& (0+255),b
  4532                           
  4533                           ;doprnt.c: 413: if(prec>=110)
  4534  010EB8  0E6D               	movlw	109
  4535  010EBA  0100               	movlb	0	; () banked
  4536  010EBC  658C               	cpfsgt	fround@prec& (0+255),b
  4537  010EBE  D0C3               	goto	l3572
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4541  010EC0  0E00               	movlw	0
  4542  010EC2  0100               	movlb	0	; () banked
  4543  010EC4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4544  010EC6  0E03               	movlw	3
  4545  010EC8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4546  010ECA  0E00               	movlw	0
  4547  010ECC  0100               	movlb	0	; () banked
  4548  010ECE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4549  010ED0  0E0A               	movlw	10
  4550  010ED2  6F68               	movwf	___awdiv@divisor& (0+255),b
  4551  010ED4  0E00               	movlw	0
  4552  010ED6  0100               	movlb	0	; () banked
  4553  010ED8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4554  010EDA  0E64               	movlw	100
  4555  010EDC  6F62               	movwf	___awmod@divisor& (0+255),b
  4556  010EDE  C08C  F060         	movff	fround@prec,___awmod@dividend
  4557  010EE2  0100               	movlb	0	; () banked
  4558  010EE4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4559  010EE6  ECC7  F097         	call	___awmod	;wreg free
  4560  010EEA  C060  F066         	movff	?___awmod,___awdiv@dividend
  4561  010EEE  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4562  010EF2  EC5C  F096         	call	___awdiv	;wreg free
  4563  010EF6  0E09               	movlw	9
  4564  010EF8  0100               	movlb	0	; () banked
  4565  010EFA  2566               	addwf	?___awdiv& (0+255),w,b
  4566  010EFC  0100               	movlb	0	; () banked
  4567  010EFE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4568  010F00  0E00               	movlw	0
  4569  010F02  0100               	movlb	0	; () banked
  4570  010F04  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4571  010F06  0100               	movlb	0	; () banked
  4572  010F08  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4573  010F0A  ECCF  F09B         	call	___wmul	;wreg free
  4574  010F0E  0E07               	movlw	low __npowers_
  4575  010F10  0100               	movlb	0	; () banked
  4576  010F12  256E               	addwf	?___wmul& (0+255),w,b
  4577  010F14  6EF6               	movwf	tblptrl,c
  4578  010F16  0EFE               	movlw	high __npowers_
  4579  010F18  0100               	movlb	0	; () banked
  4580  010F1A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4581  010F1C  6EF7               	movwf	tblptrh,c
  4582  010F1E                     	if	1	;There are 3 active tblptr bytes
  4583  010F1E  6AF8               	clrf	tblptru,c
  4584  010F20  0E00               	movlw	low (__mediumconst shr (0+16))
  4585  010F22  22F8               	addwfc	tblptru,f,c
  4586  010F24                     	endif
  4587  010F24  0009               	tblrd		*+
  4588  010F26  CFF5 F077          	movff	tablat,___ftmul@f2
  4589  010F2A  0009               	tblrd		*+
  4590  010F2C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4591  010F30  000A               	tblrd		*-
  4592  010F32  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4593  010F36  0E00               	movlw	0
  4594  010F38  0100               	movlb	0	; () banked
  4595  010F3A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4596  010F3C  0E64               	movlw	100
  4597  010F3E  6F68               	movwf	___awdiv@divisor& (0+255),b
  4598  010F40  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4599  010F44  0100               	movlb	0	; () banked
  4600  010F46  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4601  010F48  EC5C  F096         	call	___awdiv	;wreg free
  4602  010F4C  0E12               	movlw	18
  4603  010F4E  0100               	movlb	0	; () banked
  4604  010F50  2566               	addwf	?___awdiv& (0+255),w,b
  4605  010F52  0100               	movlb	0	; () banked
  4606  010F54  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4607  010F56  0E00               	movlw	0
  4608  010F58  0100               	movlb	0	; () banked
  4609  010F5A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4610  010F5C  0100               	movlb	0	; () banked
  4611  010F5E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4612  010F60  0E00               	movlw	0
  4613  010F62  0100               	movlb	0	; () banked
  4614  010F64  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4615  010F66  0E03               	movlw	3
  4616  010F68  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4617  010F6A  ECCF  F09B         	call	___wmul	;wreg free
  4618  010F6E  0E07               	movlw	low __npowers_
  4619  010F70  0100               	movlb	0	; () banked
  4620  010F72  256E               	addwf	?___wmul& (0+255),w,b
  4621  010F74  6EF6               	movwf	tblptrl,c
  4622  010F76  0EFE               	movlw	high __npowers_
  4623  010F78  0100               	movlb	0	; () banked
  4624  010F7A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4625  010F7C  6EF7               	movwf	tblptrh,c
  4626  010F7E                     	if	1	;There are 3 active tblptr bytes
  4627  010F7E  6AF8               	clrf	tblptru,c
  4628  010F80  0E00               	movlw	low (__mediumconst shr (0+16))
  4629  010F82  22F8               	addwfc	tblptru,f,c
  4630  010F84                     	endif
  4631  010F84  0009               	tblrd		*+
  4632  010F86  CFF5 F074          	movff	tablat,___ftmul@f1
  4633  010F8A  0009               	tblrd		*+
  4634  010F8C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4635  010F90  000A               	tblrd		*-
  4636  010F92  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4637  010F96  ECBF  F08E         	call	___ftmul	;wreg free
  4638  010F9A  C074  F089         	movff	?___ftmul,_fround$2667
  4639  010F9E  C075  F08A         	movff	?___ftmul+1,_fround$2667+1
  4640  010FA2  C076  F08B         	movff	?___ftmul+2,_fround$2667+2
  4641                           
  4642                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4643  010FA6  0E00               	movlw	0
  4644  010FA8  0100               	movlb	0	; () banked
  4645  010FAA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4646  010FAC  0E03               	movlw	3
  4647  010FAE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4648  010FB0  0E00               	movlw	0
  4649  010FB2  0100               	movlb	0	; () banked
  4650  010FB4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4651  010FB6  0E0A               	movlw	10
  4652  010FB8  6F62               	movwf	___awmod@divisor& (0+255),b
  4653  010FBA  C08C  F060         	movff	fround@prec,___awmod@dividend
  4654  010FBE  0100               	movlb	0	; () banked
  4655  010FC0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4656  010FC2  ECC7  F097         	call	___awmod	;wreg free
  4657  010FC6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4658  010FCA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4659  010FCE  ECCF  F09B         	call	___wmul	;wreg free
  4660  010FD2  0E07               	movlw	low __npowers_
  4661  010FD4  0100               	movlb	0	; () banked
  4662  010FD6  256E               	addwf	?___wmul& (0+255),w,b
  4663  010FD8  6EF6               	movwf	tblptrl,c
  4664  010FDA  0EFE               	movlw	high __npowers_
  4665  010FDC  0100               	movlb	0	; () banked
  4666  010FDE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4667  010FE0  6EF7               	movwf	tblptrh,c
  4668  010FE2                     	if	1	;There are 3 active tblptr bytes
  4669  010FE2  6AF8               	clrf	tblptru,c
  4670  010FE4  0E00               	movlw	low (__mediumconst shr (0+16))
  4671  010FE6  22F8               	addwfc	tblptru,f,c
  4672  010FE8                     	endif
  4673  010FE8  0009               	tblrd		*+
  4674  010FEA  CFF5 F077          	movff	tablat,___ftmul@f2
  4675  010FEE  0009               	tblrd		*+
  4676  010FF0  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4677  010FF4  000A               	tblrd		*-
  4678  010FF6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4679  010FFA  C089  F074         	movff	_fround$2667,___ftmul@f1
  4680  010FFE  C08A  F075         	movff	_fround$2667+1,___ftmul@f1+1
  4681  011002  C08B  F076         	movff	_fround$2667+2,___ftmul@f1+2
  4682  011006  ECBF  F08E         	call	___ftmul	;wreg free
  4683  01100A  C074  F086         	movff	?___ftmul,_fround$2668
  4684  01100E  C075  F087         	movff	?___ftmul+1,_fround$2668+1
  4685  011012  C076  F088         	movff	?___ftmul+2,_fround$2668+2
  4686                           
  4687                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4688  011016  C086  F074         	movff	_fround$2668,___ftmul@f1
  4689  01101A  C087  F075         	movff	_fround$2668+1,___ftmul@f1+1
  4690  01101E  C088  F076         	movff	_fround$2668+2,___ftmul@f1+2
  4691  011022  0E00               	movlw	0
  4692  011024  0100               	movlb	0	; () banked
  4693  011026  6F77               	movwf	___ftmul@f2& (0+255),b
  4694  011028  0E00               	movlw	0
  4695  01102A  0100               	movlb	0	; () banked
  4696  01102C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4697  01102E  0E3F               	movlw	63
  4698  011030  0100               	movlb	0	; () banked
  4699  011032  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4700  011034  ECBF  F08E         	call	___ftmul	;wreg free
  4701  011038  C074  F083         	movff	?___ftmul,?_fround
  4702  01103C  C075  F084         	movff	?___ftmul+1,?_fround+1
  4703  011040  C076  F085         	movff	?___ftmul+2,?_fround+2
  4704  011044  0012               	return	
  4705  011046                     l3572:
  4706                           
  4707                           ;doprnt.c: 415: else if(prec > 10)
  4708  011046  0E0A               	movlw	10
  4709  011048  0100               	movlb	0	; () banked
  4710  01104A  658C               	cpfsgt	fround@prec& (0+255),b
  4711  01104C  D074               	goto	l3580
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4715  01104E  0E00               	movlw	0
  4716  011050  0100               	movlb	0	; () banked
  4717  011052  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4718  011054  0E03               	movlw	3
  4719  011056  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4720  011058  0E00               	movlw	0
  4721  01105A  0100               	movlb	0	; () banked
  4722  01105C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4723  01105E  0E0A               	movlw	10
  4724  011060  6F62               	movwf	___awmod@divisor& (0+255),b
  4725  011062  C08C  F060         	movff	fround@prec,___awmod@dividend
  4726  011066  0100               	movlb	0	; () banked
  4727  011068  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4728  01106A  ECC7  F097         	call	___awmod	;wreg free
  4729  01106E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4730  011072  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4731  011076  ECCF  F09B         	call	___wmul	;wreg free
  4732  01107A  0E07               	movlw	low __npowers_
  4733  01107C  0100               	movlb	0	; () banked
  4734  01107E  256E               	addwf	?___wmul& (0+255),w,b
  4735  011080  6EF6               	movwf	tblptrl,c
  4736  011082  0EFE               	movlw	high __npowers_
  4737  011084  0100               	movlb	0	; () banked
  4738  011086  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4739  011088  6EF7               	movwf	tblptrh,c
  4740  01108A                     	if	1	;There are 3 active tblptr bytes
  4741  01108A  6AF8               	clrf	tblptru,c
  4742  01108C  0E00               	movlw	low (__mediumconst shr (0+16))
  4743  01108E  22F8               	addwfc	tblptru,f,c
  4744  011090                     	endif
  4745  011090  0009               	tblrd		*+
  4746  011092  CFF5 F077          	movff	tablat,___ftmul@f2
  4747  011096  0009               	tblrd		*+
  4748  011098  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4749  01109C  000A               	tblrd		*-
  4750  01109E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4751  0110A2  0E00               	movlw	0
  4752  0110A4  0100               	movlb	0	; () banked
  4753  0110A6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4754  0110A8  0E0A               	movlw	10
  4755  0110AA  6F68               	movwf	___awdiv@divisor& (0+255),b
  4756  0110AC  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4757  0110B0  0100               	movlb	0	; () banked
  4758  0110B2  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4759  0110B4  EC5C  F096         	call	___awdiv	;wreg free
  4760  0110B8  0E09               	movlw	9
  4761  0110BA  0100               	movlb	0	; () banked
  4762  0110BC  2566               	addwf	?___awdiv& (0+255),w,b
  4763  0110BE  0100               	movlb	0	; () banked
  4764  0110C0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4765  0110C2  0E00               	movlw	0
  4766  0110C4  0100               	movlb	0	; () banked
  4767  0110C6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4768  0110C8  0100               	movlb	0	; () banked
  4769  0110CA  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4770  0110CC  0E00               	movlw	0
  4771  0110CE  0100               	movlb	0	; () banked
  4772  0110D0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4773  0110D2  0E03               	movlw	3
  4774  0110D4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4775  0110D6  ECCF  F09B         	call	___wmul	;wreg free
  4776  0110DA  0E07               	movlw	low __npowers_
  4777  0110DC  0100               	movlb	0	; () banked
  4778  0110DE  256E               	addwf	?___wmul& (0+255),w,b
  4779  0110E0  6EF6               	movwf	tblptrl,c
  4780  0110E2  0EFE               	movlw	high __npowers_
  4781  0110E4  0100               	movlb	0	; () banked
  4782  0110E6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4783  0110E8  6EF7               	movwf	tblptrh,c
  4784  0110EA                     	if	1	;There are 3 active tblptr bytes
  4785  0110EA  6AF8               	clrf	tblptru,c
  4786  0110EC  0E00               	movlw	low (__mediumconst shr (0+16))
  4787  0110EE  22F8               	addwfc	tblptru,f,c
  4788  0110F0                     	endif
  4789  0110F0  0009               	tblrd		*+
  4790  0110F2  CFF5 F074          	movff	tablat,___ftmul@f1
  4791  0110F6  0009               	tblrd		*+
  4792  0110F8  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4793  0110FC  000A               	tblrd		*-
  4794  0110FE  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4795  011102  ECBF  F08E         	call	___ftmul	;wreg free
  4796  011106  C074  F089         	movff	?___ftmul,_fround$2667
  4797  01110A  C075  F08A         	movff	?___ftmul+1,_fround$2667+1
  4798  01110E  C076  F08B         	movff	?___ftmul+2,_fround$2667+2
  4799                           
  4800                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4801  011112  C089  F074         	movff	_fround$2667,___ftmul@f1
  4802  011116  C08A  F075         	movff	_fround$2667+1,___ftmul@f1+1
  4803  01111A  C08B  F076         	movff	_fround$2667+2,___ftmul@f1+2
  4804  01111E  0E00               	movlw	0
  4805  011120  0100               	movlb	0	; () banked
  4806  011122  6F77               	movwf	___ftmul@f2& (0+255),b
  4807  011124  0E00               	movlw	0
  4808  011126  0100               	movlb	0	; () banked
  4809  011128  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4810  01112A  0E3F               	movlw	63
  4811  01112C  0100               	movlb	0	; () banked
  4812  01112E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4813  011130  ECBF  F08E         	call	___ftmul	;wreg free
  4814  011134  D781               	goto	L6
  4815  011136                     l3580:
  4816                           
  4817                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4818  011136  0100               	movlb	0	; () banked
  4819  011138  518C               	movf	fround@prec& (0+255),w,b
  4820  01113A  0D03               	mullw	3
  4821  01113C  0E07               	movlw	low __npowers_
  4822  01113E  24F3               	addwf	prodl,w,c
  4823  011140  6EF6               	movwf	tblptrl,c
  4824  011142  0EFE               	movlw	high __npowers_
  4825  011144  20F4               	addwfc	prodh,w,c
  4826  011146  6EF7               	movwf	tblptrh,c
  4827  011148                     	if	1	;There are 3 active tblptr bytes
  4828  011148  6AF8               	clrf	tblptru,c
  4829  01114A  0E00               	movlw	low (__mediumconst shr (0+16))
  4830  01114C  22F8               	addwfc	tblptru,f,c
  4831  01114E                     	endif
  4832  01114E  0009               	tblrd		*+
  4833  011150  CFF5 F074          	movff	tablat,___ftmul@f1
  4834  011154  0009               	tblrd		*+
  4835  011156  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4836  01115A  000A               	tblrd		*-
  4837  01115C  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4838  011160  0E00               	movlw	0
  4839  011162  0100               	movlb	0	; () banked
  4840  011164  6F77               	movwf	___ftmul@f2& (0+255),b
  4841  011166  0E00               	movlw	0
  4842  011168  0100               	movlb	0	; () banked
  4843  01116A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4844  01116C  0E3F               	movlw	63
  4845  01116E  0100               	movlb	0	; () banked
  4846  011170  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4847  011172  ECBF  F08E         	call	___ftmul	;wreg free
  4848  011176  C074  F083         	movff	?___ftmul,?_fround
  4849  01117A  C075  F084         	movff	?___ftmul+1,?_fround+1
  4850  01117E  C076  F085         	movff	?___ftmul+2,?_fround+2
  4851  011182  0012               	return	
  4852  011184                     __end_of_fround:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           postdec1	equ	0xFE5
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           fsr2h	equ	0xFDA
  4868                           fsr2l	equ	0xFD9
  4869                           status	equ	0xFD8
  4870                           
  4871 ;; *************** function ___awmod *****************
  4872 ;; Defined at:
  4873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  dividend        2    0[BANK0 ] int 
  4876 ;;  divisor         2    2[BANK0 ] int 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  sign            1    5[BANK0 ] unsigned char 
  4879 ;;  counter         1    4[BANK0 ] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    0[BANK0 ] int 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4889 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4892 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4893 ;;Total ram usage:        6 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    4
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_fround
  4900 ;;		_scale
  4901 ;;		_fillInTemp
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text7
  4906  012F8E                     __ptext7:
  4907                           	opt stack 0
  4908  012F8E                     ___awmod:
  4909                           	opt stack 23
  4910                           
  4911                           ;incstack = 0
  4912  012F8E  0E00               	movlw	0
  4913  012F90  0100               	movlb	0	; () banked
  4914  012F92  6F65               	movwf	___awmod@sign& (0+255),b
  4915                           
  4916                           ; BSR set to: 0
  4917  012F94  0100               	movlb	0	; () banked
  4918  012F96  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4919  012F98  D008               	goto	l3412
  4920                           
  4921                           ; BSR set to: 0
  4922  012F9A  0100               	movlb	0	; () banked
  4923  012F9C  6D60               	negf	___awmod@dividend& (0+255),b
  4924  012F9E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4925  012FA0  B0D8               	btfsc	status,0,c
  4926  012FA2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4927                           
  4928                           ; BSR set to: 0
  4929  012FA4  0E01               	movlw	1
  4930  012FA6  0100               	movlb	0	; () banked
  4931  012FA8  6F65               	movwf	___awmod@sign& (0+255),b
  4932  012FAA                     l3412:
  4933                           
  4934                           ; BSR set to: 0
  4935  012FAA  0100               	movlb	0	; () banked
  4936  012FAC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4937  012FAE  D005               	goto	l3416
  4938                           
  4939                           ; BSR set to: 0
  4940  012FB0  0100               	movlb	0	; () banked
  4941  012FB2  6D62               	negf	___awmod@divisor& (0+255),b
  4942  012FB4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  4943  012FB6  B0D8               	btfsc	status,0,c
  4944  012FB8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  4945  012FBA                     l3416:
  4946                           
  4947                           ; BSR set to: 0
  4948  012FBA  0100               	movlb	0	; () banked
  4949  012FBC  5162               	movf	___awmod@divisor& (0+255),w,b
  4950  012FBE  0100               	movlb	0	; () banked
  4951  012FC0  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4952  012FC2  B4D8               	btfsc	status,2,c
  4953  012FC4  D026               	goto	l3432
  4954                           
  4955                           ; BSR set to: 0
  4956  012FC6  0E01               	movlw	1
  4957  012FC8  0100               	movlb	0	; () banked
  4958  012FCA  6F64               	movwf	___awmod@counter& (0+255),b
  4959  012FCC  D006               	goto	l3422
  4960  012FCE                     l3420:
  4961                           
  4962                           ; BSR set to: 0
  4963  012FCE  0100               	movlb	0	; () banked
  4964  012FD0  90D8               	bcf	status,0,c
  4965  012FD2  3762               	rlcf	___awmod@divisor& (0+255),f,b
  4966  012FD4  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4967  012FD6  0100               	movlb	0	; () banked
  4968  012FD8  2B64               	incf	___awmod@counter& (0+255),f,b
  4969  012FDA                     l3422:
  4970                           
  4971                           ; BSR set to: 0
  4972  012FDA  0100               	movlb	0	; () banked
  4973  012FDC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4974  012FDE  D7F7               	goto	l3420
  4975  012FE0                     l3424:
  4976                           
  4977                           ; BSR set to: 0
  4978  012FE0  0100               	movlb	0	; () banked
  4979  012FE2  5162               	movf	___awmod@divisor& (0+255),w,b
  4980  012FE4  0100               	movlb	0	; () banked
  4981  012FE6  5D60               	subwf	___awmod@dividend& (0+255),w,b
  4982  012FE8  0100               	movlb	0	; () banked
  4983  012FEA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4984  012FEC  0100               	movlb	0	; () banked
  4985  012FEE  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4986  012FF0  A0D8               	btfss	status,0,c
  4987  012FF2  D008               	goto	l3428
  4988                           
  4989                           ; BSR set to: 0
  4990  012FF4  0100               	movlb	0	; () banked
  4991  012FF6  5162               	movf	___awmod@divisor& (0+255),w,b
  4992  012FF8  0100               	movlb	0	; () banked
  4993  012FFA  5F60               	subwf	___awmod@dividend& (0+255),f,b
  4994  012FFC  0100               	movlb	0	; () banked
  4995  012FFE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4996  013000  0100               	movlb	0	; () banked
  4997  013002  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4998  013004                     l3428:
  4999                           
  5000                           ; BSR set to: 0
  5001  013004  0100               	movlb	0	; () banked
  5002  013006  90D8               	bcf	status,0,c
  5003  013008  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5004  01300A  3362               	rrcf	___awmod@divisor& (0+255),f,b
  5005                           
  5006                           ; BSR set to: 0
  5007  01300C  0100               	movlb	0	; () banked
  5008  01300E  2F64               	decfsz	___awmod@counter& (0+255),f,b
  5009  013010  D7E7               	goto	l3424
  5010  013012                     l3432:
  5011                           
  5012                           ; BSR set to: 0
  5013  013012  0100               	movlb	0	; () banked
  5014  013014  5165               	movf	___awmod@sign& (0+255),w,b
  5015  013016  0100               	movlb	0	; () banked
  5016  013018  B4D8               	btfsc	status,2,c
  5017  01301A  D005               	goto	l3436
  5018                           
  5019                           ; BSR set to: 0
  5020  01301C  0100               	movlb	0	; () banked
  5021  01301E  6D60               	negf	___awmod@dividend& (0+255),b
  5022  013020  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5023  013022  B0D8               	btfsc	status,0,c
  5024  013024  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5025  013026                     l3436:
  5026                           
  5027                           ; BSR set to: 0
  5028  013026  C060  F060         	movff	___awmod@dividend,?___awmod
  5029  01302A  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  5030  01302E  0012               	return	
  5031  013030                     __end_of___awmod:
  5032                           	opt stack 0
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postdec1	equ	0xFE5
  5042                           fsr1l	equ	0xFE1
  5043                           indf2	equ	0xFDF
  5044                           postinc2	equ	0xFDE
  5045                           postdec2	equ	0xFDD
  5046                           fsr2h	equ	0xFDA
  5047                           fsr2l	equ	0xFD9
  5048                           status	equ	0xFD8
  5049                           
  5050 ;; *************** function ___awdiv *****************
  5051 ;; Defined at:
  5052 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  dividend        2    6[BANK0 ] int 
  5055 ;;  divisor         2    8[BANK0 ] int 
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;  quotient        2   12[BANK0 ] int 
  5058 ;;  sign            1   11[BANK0 ] unsigned char 
  5059 ;;  counter         1   10[BANK0 ] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  2    6[BANK0 ] int 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5070 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5072 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5073 ;;Total ram usage:        8 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    4
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_fround
  5080 ;;		_scale
  5081 ;;		_sprintf
  5082 ;;		_fillInTemp
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text8
  5087  012CB8                     __ptext8:
  5088                           	opt stack 0
  5089  012CB8                     ___awdiv:
  5090                           	opt stack 23
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;incstack = 0
  5094  012CB8  0E00               	movlw	0
  5095  012CBA  0100               	movlb	0	; () banked
  5096  012CBC  6F6B               	movwf	___awdiv@sign& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099  012CBE  0100               	movlb	0	; () banked
  5100  012CC0  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5101  012CC2  D008               	goto	l3368
  5102                           
  5103                           ; BSR set to: 0
  5104  012CC4  0100               	movlb	0	; () banked
  5105  012CC6  6D68               	negf	___awdiv@divisor& (0+255),b
  5106  012CC8  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5107  012CCA  B0D8               	btfsc	status,0,c
  5108  012CCC  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5109                           
  5110                           ; BSR set to: 0
  5111  012CCE  0E01               	movlw	1
  5112  012CD0  0100               	movlb	0	; () banked
  5113  012CD2  6F6B               	movwf	___awdiv@sign& (0+255),b
  5114  012CD4                     l3368:
  5115                           
  5116                           ; BSR set to: 0
  5117  012CD4  0100               	movlb	0	; () banked
  5118  012CD6  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5119  012CD8  D008               	goto	l3374
  5120                           
  5121                           ; BSR set to: 0
  5122  012CDA  0100               	movlb	0	; () banked
  5123  012CDC  6D66               	negf	___awdiv@dividend& (0+255),b
  5124  012CDE  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5125  012CE0  B0D8               	btfsc	status,0,c
  5126  012CE2  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129  012CE4  0E01               	movlw	1
  5130  012CE6  0100               	movlb	0	; () banked
  5131  012CE8  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5132  012CEA                     l3374:
  5133                           
  5134                           ; BSR set to: 0
  5135  012CEA  0E00               	movlw	0
  5136  012CEC  0100               	movlb	0	; () banked
  5137  012CEE  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  5138  012CF0  0E00               	movlw	0
  5139  012CF2  6F6C               	movwf	___awdiv@quotient& (0+255),b
  5140                           
  5141                           ; BSR set to: 0
  5142  012CF4  0100               	movlb	0	; () banked
  5143  012CF6  5168               	movf	___awdiv@divisor& (0+255),w,b
  5144  012CF8  0100               	movlb	0	; () banked
  5145  012CFA  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5146  012CFC  B4D8               	btfsc	status,2,c
  5147  012CFE  D02C               	goto	l3396
  5148                           
  5149                           ; BSR set to: 0
  5150  012D00  0E01               	movlw	1
  5151  012D02  0100               	movlb	0	; () banked
  5152  012D04  6F6A               	movwf	___awdiv@counter& (0+255),b
  5153  012D06  D006               	goto	l3382
  5154  012D08                     l3380:
  5155                           
  5156                           ; BSR set to: 0
  5157  012D08  0100               	movlb	0	; () banked
  5158  012D0A  90D8               	bcf	status,0,c
  5159  012D0C  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5160  012D0E  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5161  012D10  0100               	movlb	0	; () banked
  5162  012D12  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5163  012D14                     l3382:
  5164                           
  5165                           ; BSR set to: 0
  5166  012D14  0100               	movlb	0	; () banked
  5167  012D16  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5168  012D18  D7F7               	goto	l3380
  5169  012D1A                     l3384:
  5170                           
  5171                           ; BSR set to: 0
  5172  012D1A  0100               	movlb	0	; () banked
  5173  012D1C  90D8               	bcf	status,0,c
  5174  012D1E  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5175  012D20  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5176                           
  5177                           ; BSR set to: 0
  5178  012D22  0100               	movlb	0	; () banked
  5179  012D24  5168               	movf	___awdiv@divisor& (0+255),w,b
  5180  012D26  0100               	movlb	0	; () banked
  5181  012D28  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5182  012D2A  0100               	movlb	0	; () banked
  5183  012D2C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5184  012D2E  0100               	movlb	0	; () banked
  5185  012D30  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5186  012D32  A0D8               	btfss	status,0,c
  5187  012D34  D00A               	goto	l3392
  5188                           
  5189                           ; BSR set to: 0
  5190  012D36  0100               	movlb	0	; () banked
  5191  012D38  5168               	movf	___awdiv@divisor& (0+255),w,b
  5192  012D3A  0100               	movlb	0	; () banked
  5193  012D3C  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5194  012D3E  0100               	movlb	0	; () banked
  5195  012D40  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5196  012D42  0100               	movlb	0	; () banked
  5197  012D44  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5198                           
  5199                           ; BSR set to: 0
  5200  012D46  0100               	movlb	0	; () banked
  5201  012D48  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5202  012D4A                     l3392:
  5203                           
  5204                           ; BSR set to: 0
  5205  012D4A  0100               	movlb	0	; () banked
  5206  012D4C  90D8               	bcf	status,0,c
  5207  012D4E  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5208  012D50  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5209                           
  5210                           ; BSR set to: 0
  5211  012D52  0100               	movlb	0	; () banked
  5212  012D54  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5213  012D56  D7E1               	goto	l3384
  5214  012D58                     l3396:
  5215                           
  5216                           ; BSR set to: 0
  5217  012D58  0100               	movlb	0	; () banked
  5218  012D5A  516B               	movf	___awdiv@sign& (0+255),w,b
  5219  012D5C  0100               	movlb	0	; () banked
  5220  012D5E  B4D8               	btfsc	status,2,c
  5221  012D60  D005               	goto	l3400
  5222                           
  5223                           ; BSR set to: 0
  5224  012D62  0100               	movlb	0	; () banked
  5225  012D64  6D6C               	negf	___awdiv@quotient& (0+255),b
  5226  012D66  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5227  012D68  B0D8               	btfsc	status,0,c
  5228  012D6A  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5229  012D6C                     l3400:
  5230                           
  5231                           ; BSR set to: 0
  5232  012D6C  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5233  012D70  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5234  012D74  0012               	return	
  5235  012D76                     __end_of___awdiv:
  5236                           	opt stack 0
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           prodh	equ	0xFF4
  5242                           prodl	equ	0xFF3
  5243                           postinc0	equ	0xFEE
  5244                           wreg	equ	0xFE8
  5245                           postdec1	equ	0xFE5
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function __tdiv_to_l_ *****************
  5255 ;; Defined at:
  5256 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  f1              3    0[BANK0 ] float 
  5259 ;;  f2              3    3[BANK0 ] float 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  quot            4    9[BANK0 ] unsigned long 
  5262 ;;  exp1            1   14[BANK0 ] unsigned char 
  5263 ;;  cntr            1   13[BANK0 ] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  4    0[BANK0 ] unsigned long 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5273 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5274 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5275 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5276 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5277 ;;Total ram usage:       15 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    4
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_sprintf
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text9
  5288  011A58                     __ptext9:
  5289                           	opt stack 0
  5290  011A58                     __tdiv_to_l_:
  5291                           	opt stack 24
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;incstack = 0
  5295  011A58  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5296  011A5C  0100               	movlb	0	; () banked
  5297  011A5E  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5298  011A60  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5299  011A62  0100               	movlb	0	; () banked
  5300  011A64  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5301  011A66  0100               	movlb	0	; () banked
  5302  011A68  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5303  011A6A  E301               	bnc	u3191
  5304  011A6C  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5305  011A6E                     u3191:
  5306  011A6E  0100               	movlb	0	; () banked
  5307  011A70  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5308  011A72  0100               	movlb	0	; () banked
  5309  011A74  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5310  011A76  0100               	movlb	0	; () banked
  5311  011A78  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5312  011A7A  A4D8               	btfss	status,2,c
  5313  011A7C  D00A               	goto	l3628
  5314                           
  5315                           ; BSR set to: 0
  5316  011A7E  0E00               	movlw	0
  5317  011A80  0100               	movlb	0	; () banked
  5318  011A82  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5319  011A84  0E00               	movlw	0
  5320  011A86  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5321  011A88  0E00               	movlw	0
  5322  011A8A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5323  011A8C  0E00               	movlw	0
  5324  011A8E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5325                           
  5326                           ; BSR set to: 0
  5327  011A90  0012               	return	
  5328  011A92                     l3628:
  5329                           
  5330                           ; BSR set to: 0
  5331  011A92  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5332  011A96  0100               	movlb	0	; () banked
  5333  011A98  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5334  011A9A  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5335  011A9C  0100               	movlb	0	; () banked
  5336  011A9E  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5337  011AA0  0100               	movlb	0	; () banked
  5338  011AA2  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5339  011AA4  E301               	bnc	u3211
  5340  011AA6  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5341  011AA8                     u3211:
  5342  011AA8  0100               	movlb	0	; () banked
  5343  011AAA  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5344  011AAC  0100               	movlb	0	; () banked
  5345  011AAE  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5346  011AB0  0100               	movlb	0	; () banked
  5347  011AB2  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5348  011AB4  A4D8               	btfss	status,2,c
  5349  011AB6  D00A               	goto	l3634
  5350                           
  5351                           ; BSR set to: 0
  5352  011AB8  0E00               	movlw	0
  5353  011ABA  0100               	movlb	0	; () banked
  5354  011ABC  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5355  011ABE  0E00               	movlw	0
  5356  011AC0  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5357  011AC2  0E00               	movlw	0
  5358  011AC4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5359  011AC6  0E00               	movlw	0
  5360  011AC8  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5361                           
  5362                           ; BSR set to: 0
  5363  011ACA  0012               	return	
  5364  011ACC                     l3634:
  5365                           
  5366                           ; BSR set to: 0
  5367  011ACC  0100               	movlb	0	; () banked
  5368  011ACE  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5369                           
  5370                           ; BSR set to: 0
  5371  011AD0  0EFF               	movlw	255
  5372  011AD2  0100               	movlb	0	; () banked
  5373  011AD4  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5374  011AD6  0EFF               	movlw	255
  5375  011AD8  0100               	movlb	0	; () banked
  5376  011ADA  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5377  011ADC  0E00               	movlw	0
  5378  011ADE  0100               	movlb	0	; () banked
  5379  011AE0  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5380  011AE2  0100               	movlb	0	; () banked
  5381  011AE4  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5382                           
  5383                           ; BSR set to: 0
  5384  011AE6  0EFF               	movlw	255
  5385  011AE8  0100               	movlb	0	; () banked
  5386  011AEA  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5387  011AEC  0EFF               	movlw	255
  5388  011AEE  0100               	movlb	0	; () banked
  5389  011AF0  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5390  011AF2  0E00               	movlw	0
  5391  011AF4  0100               	movlb	0	; () banked
  5392  011AF6  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5393                           
  5394                           ; BSR set to: 0
  5395  011AF8  0E00               	movlw	0
  5396  011AFA  0100               	movlb	0	; () banked
  5397  011AFC  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  5398  011AFE  0E00               	movlw	0
  5399  011B00  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5400  011B02  0E00               	movlw	0
  5401  011B04  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5402  011B06  0E00               	movlw	0
  5403  011B08  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5404                           
  5405                           ; BSR set to: 0
  5406  011B0A  0E7F               	movlw	127
  5407  011B0C  0100               	movlb	0	; () banked
  5408  011B0E  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5409                           
  5410                           ; BSR set to: 0
  5411  011B10  0100               	movlb	0	; () banked
  5412  011B12  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5413  011B14  0F98               	addlw	152
  5414  011B16  0100               	movlb	0	; () banked
  5415  011B18  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5416                           
  5417                           ; BSR set to: 0
  5418  011B1A  0E18               	movlw	24
  5419  011B1C  0100               	movlb	0	; () banked
  5420  011B1E  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5421  011B20                     l908:
  5422                           
  5423                           ; BSR set to: 0
  5424  011B20  0100               	movlb	0	; () banked
  5425  011B22  90D8               	bcf	status,0,c
  5426  011B24  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5427  011B26  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5428  011B28  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5429  011B2A  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5430                           
  5431                           ; BSR set to: 0
  5432  011B2C  0100               	movlb	0	; () banked
  5433  011B2E  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5434  011B30  0100               	movlb	0	; () banked
  5435  011B32  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5436  011B34  0100               	movlb	0	; () banked
  5437  011B36  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5438  011B38  0100               	movlb	0	; () banked
  5439  011B3A  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5440  011B3C  0100               	movlb	0	; () banked
  5441  011B3E  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5442  011B40  0100               	movlb	0	; () banked
  5443  011B42  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5444  011B44  A0D8               	btfss	status,0,c
  5445  011B46  D00E               	goto	l909
  5446                           
  5447                           ; BSR set to: 0
  5448  011B48  0100               	movlb	0	; () banked
  5449  011B4A  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5450  011B4C  0100               	movlb	0	; () banked
  5451  011B4E  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5452  011B50  0100               	movlb	0	; () banked
  5453  011B52  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5454  011B54  0100               	movlb	0	; () banked
  5455  011B56  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5456  011B58  0100               	movlb	0	; () banked
  5457  011B5A  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5458  011B5C  0100               	movlb	0	; () banked
  5459  011B5E  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5460                           
  5461                           ; BSR set to: 0
  5462  011B60  0100               	movlb	0	; () banked
  5463  011B62  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5464  011B64                     l909:
  5465                           
  5466                           ; BSR set to: 0
  5467  011B64  0100               	movlb	0	; () banked
  5468  011B66  90D8               	bcf	status,0,c
  5469  011B68  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5470  011B6A  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5471  011B6C  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5472                           
  5473                           ; BSR set to: 0
  5474  011B6E  0100               	movlb	0	; () banked
  5475  011B70  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5476  011B72  D7D6               	goto	l908
  5477                           
  5478                           ; BSR set to: 0
  5479                           
  5480                           ; BSR set to: 0
  5481  011B74  0100               	movlb	0	; () banked
  5482  011B76  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5483  011B78  D01A               	goto	l3668
  5484                           
  5485                           ; BSR set to: 0
  5486  011B7A  0100               	movlb	0	; () banked
  5487  011B7C  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5488  011B7E  0A80               	xorlw	128
  5489  011B80  0F97               	addlw	151
  5490  011B82  B0D8               	btfsc	status,0,c
  5491  011B84  D00A               	goto	l3664
  5492                           
  5493                           ; BSR set to: 0
  5494  011B86  0E00               	movlw	0
  5495  011B88  0100               	movlb	0	; () banked
  5496  011B8A  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5497  011B8C  0E00               	movlw	0
  5498  011B8E  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5499  011B90  0E00               	movlw	0
  5500  011B92  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5501  011B94  0E00               	movlw	0
  5502  011B96  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5503                           
  5504                           ; BSR set to: 0
  5505  011B98  0012               	return	
  5506  011B9A                     l3664:
  5507                           
  5508                           ; BSR set to: 0
  5509  011B9A  0100               	movlb	0	; () banked
  5510  011B9C  90D8               	bcf	status,0,c
  5511  011B9E  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5512  011BA0  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5513  011BA2  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5514  011BA4  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5515                           
  5516                           ; BSR set to: 0
  5517  011BA6  0100               	movlb	0	; () banked
  5518  011BA8  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5519  011BAA  D7F7               	goto	l3664
  5520                           
  5521                           ; BSR set to: 0
  5522  011BAC  D01B               	goto	l915
  5523  011BAE                     l3668:
  5524                           
  5525                           ; BSR set to: 0
  5526  011BAE  0E17               	movlw	23
  5527  011BB0  0100               	movlb	0	; () banked
  5528  011BB2  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5529  011BB4  D012               	goto	l3676
  5530                           
  5531                           ; BSR set to: 0
  5532  011BB6  0E00               	movlw	0
  5533  011BB8  0100               	movlb	0	; () banked
  5534  011BBA  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5535  011BBC  0E00               	movlw	0
  5536  011BBE  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5537  011BC0  0E00               	movlw	0
  5538  011BC2  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5539  011BC4  0E00               	movlw	0
  5540  011BC6  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5541                           
  5542                           ; BSR set to: 0
  5543  011BC8  0012               	return	
  5544  011BCA                     l3674:
  5545                           
  5546                           ; BSR set to: 0
  5547  011BCA  0100               	movlb	0	; () banked
  5548  011BCC  90D8               	bcf	status,0,c
  5549  011BCE  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5550  011BD0  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5551  011BD2  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5552  011BD4  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5553  011BD6  0100               	movlb	0	; () banked
  5554  011BD8  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5555  011BDA                     l3676:
  5556                           
  5557                           ; BSR set to: 0
  5558  011BDA  0100               	movlb	0	; () banked
  5559  011BDC  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5560  011BDE  0100               	movlb	0	; () banked
  5561  011BE0  A4D8               	btfss	status,2,c
  5562  011BE2  D7F3               	goto	l3674
  5563  011BE4                     l915:
  5564                           
  5565                           ; BSR set to: 0
  5566  011BE4  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5567  011BE8  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5568  011BEC  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5569  011BF0  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5570                           
  5571                           ; BSR set to: 0
  5572  011BF4  0012               	return		;funcret
  5573  011BF6                     __end_of__tdiv_to_l_:
  5574                           	opt stack 0
  5575                           tblptru	equ	0xFF8
  5576                           tblptrh	equ	0xFF7
  5577                           tblptrl	equ	0xFF6
  5578                           tablat	equ	0xFF5
  5579                           prodh	equ	0xFF4
  5580                           prodl	equ	0xFF3
  5581                           postinc0	equ	0xFEE
  5582                           wreg	equ	0xFE8
  5583                           postdec1	equ	0xFE5
  5584                           fsr1l	equ	0xFE1
  5585                           indf2	equ	0xFDF
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function __div_to_l_ *****************
  5593 ;; Defined at:
  5594 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  f1              3    0[BANK0 ] unsigned long 
  5597 ;;  f2              3    3[BANK0 ] unsigned long 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  quot            4    6[BANK0 ] unsigned long 
  5600 ;;  exp1            1   11[BANK0 ] unsigned char 
  5601 ;;  cntr            1   10[BANK0 ] unsigned char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  4    0[BANK0 ] unsigned long 
  5604 ;; Registers used:
  5605 ;;		wreg, status,2, status,0
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5611 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5612 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5615 ;;Total ram usage:       12 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    4
  5618 ;; This function calls:
  5619 ;;		Nothing
  5620 ;; This function is called by:
  5621 ;;		_sprintf
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text10
  5626  011BF6                     __ptext10:
  5627                           	opt stack 0
  5628  011BF6                     __div_to_l_:
  5629                           	opt stack 24
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;incstack = 0
  5633  011BF6  0100               	movlb	0	; () banked
  5634  011BF8  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5635  011BFA  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5636  011BFC  0100               	movlb	0	; () banked
  5637  011BFE  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  5638  011C00  0100               	movlb	0	; () banked
  5639  011C02  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5640  011C04  A4D8               	btfss	status,2,c
  5641  011C06  D00A               	goto	l3684
  5642                           
  5643                           ; BSR set to: 0
  5644  011C08  0E00               	movlw	0
  5645  011C0A  0100               	movlb	0	; () banked
  5646  011C0C  6F60               	movwf	?__div_to_l_& (0+255),b
  5647  011C0E  0E00               	movlw	0
  5648  011C10  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5649  011C12  0E00               	movlw	0
  5650  011C14  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5651  011C16  0E00               	movlw	0
  5652  011C18  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5653                           
  5654                           ; BSR set to: 0
  5655  011C1A  0012               	return	
  5656  011C1C                     l3684:
  5657                           
  5658                           ; BSR set to: 0
  5659  011C1C  0100               	movlb	0	; () banked
  5660  011C1E  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  5661  011C20  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  5662  011C22  0100               	movlb	0	; () banked
  5663  011C24  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5664  011C26  0100               	movlb	0	; () banked
  5665  011C28  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5666  011C2A  A4D8               	btfss	status,2,c
  5667  011C2C  D00A               	goto	l3690
  5668                           
  5669                           ; BSR set to: 0
  5670  011C2E  0E00               	movlw	0
  5671  011C30  0100               	movlb	0	; () banked
  5672  011C32  6F60               	movwf	?__div_to_l_& (0+255),b
  5673  011C34  0E00               	movlw	0
  5674  011C36  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5675  011C38  0E00               	movlw	0
  5676  011C3A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5677  011C3C  0E00               	movlw	0
  5678  011C3E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5679                           
  5680                           ; BSR set to: 0
  5681  011C40  0012               	return	
  5682  011C42                     l3690:
  5683                           
  5684                           ; BSR set to: 0
  5685  011C42  0100               	movlb	0	; () banked
  5686  011C44  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  5687                           
  5688                           ; BSR set to: 0
  5689  011C46  0EFF               	movlw	255
  5690  011C48  0100               	movlb	0	; () banked
  5691  011C4A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  5692  011C4C  0EFF               	movlw	255
  5693  011C4E  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  5694  011C50  0EFF               	movlw	255
  5695  011C52  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  5696  011C54  0E00               	movlw	0
  5697  011C56  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700  011C58  0100               	movlb	0	; () banked
  5701  011C5A  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  5702  011C5C  0EFF               	movlw	255
  5703  011C5E  0100               	movlb	0	; () banked
  5704  011C60  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  5705  011C62  0EFF               	movlw	255
  5706  011C64  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  5707  011C66  0EFF               	movlw	255
  5708  011C68  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  5709  011C6A  0E00               	movlw	0
  5710  011C6C  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  5711                           
  5712                           ; BSR set to: 0
  5713  011C6E  0E00               	movlw	0
  5714  011C70  0100               	movlb	0	; () banked
  5715  011C72  6F66               	movwf	__div_to_l_@quot& (0+255),b
  5716  011C74  0E00               	movlw	0
  5717  011C76  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5718  011C78  0E00               	movlw	0
  5719  011C7A  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5720  011C7C  0E00               	movlw	0
  5721  011C7E  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5722                           
  5723                           ; BSR set to: 0
  5724  011C80  0E7F               	movlw	127
  5725  011C82  0100               	movlb	0	; () banked
  5726  011C84  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5727                           
  5728                           ; BSR set to: 0
  5729  011C86  0100               	movlb	0	; () banked
  5730  011C88  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5731  011C8A  0FA0               	addlw	160
  5732  011C8C  0100               	movlb	0	; () banked
  5733  011C8E  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5734                           
  5735                           ; BSR set to: 0
  5736  011C90  0E20               	movlw	32
  5737  011C92  0100               	movlb	0	; () banked
  5738  011C94  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5739  011C96                     l3704:
  5740                           
  5741                           ; BSR set to: 0
  5742  011C96  0100               	movlb	0	; () banked
  5743  011C98  90D8               	bcf	status,0,c
  5744  011C9A  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5745  011C9C  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5746  011C9E  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5747  011CA0  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5748                           
  5749                           ; BSR set to: 0
  5750  011CA2  0100               	movlb	0	; () banked
  5751  011CA4  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5752  011CA6  0100               	movlb	0	; () banked
  5753  011CA8  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  5754  011CAA  0100               	movlb	0	; () banked
  5755  011CAC  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5756  011CAE  0100               	movlb	0	; () banked
  5757  011CB0  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  5758  011CB2  0100               	movlb	0	; () banked
  5759  011CB4  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5760  011CB6  0100               	movlb	0	; () banked
  5761  011CB8  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  5762  011CBA  0100               	movlb	0	; () banked
  5763  011CBC  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5764  011CBE  0100               	movlb	0	; () banked
  5765  011CC0  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5766  011CC2  A0D8               	btfss	status,0,c
  5767  011CC4  D012               	goto	l3712
  5768                           
  5769                           ; BSR set to: 0
  5770  011CC6  0100               	movlb	0	; () banked
  5771  011CC8  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5772  011CCA  0100               	movlb	0	; () banked
  5773  011CCC  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  5774  011CCE  0100               	movlb	0	; () banked
  5775  011CD0  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5776  011CD2  0100               	movlb	0	; () banked
  5777  011CD4  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5778  011CD6  0100               	movlb	0	; () banked
  5779  011CD8  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5780  011CDA  0100               	movlb	0	; () banked
  5781  011CDC  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5782  011CDE  0100               	movlb	0	; () banked
  5783  011CE0  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5784  011CE2  0100               	movlb	0	; () banked
  5785  011CE4  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5786                           
  5787                           ; BSR set to: 0
  5788  011CE6  0100               	movlb	0	; () banked
  5789  011CE8  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  5790  011CEA                     l3712:
  5791                           
  5792                           ; BSR set to: 0
  5793  011CEA  0100               	movlb	0	; () banked
  5794  011CEC  90D8               	bcf	status,0,c
  5795  011CEE  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  5796  011CF0  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5797  011CF2  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5798  011CF4  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5799                           
  5800                           ; BSR set to: 0
  5801  011CF6  0100               	movlb	0	; () banked
  5802  011CF8  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5803  011CFA  D7CD               	goto	l3704
  5804                           
  5805                           ; BSR set to: 0
  5806                           
  5807                           ; BSR set to: 0
  5808  011CFC  0100               	movlb	0	; () banked
  5809  011CFE  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  5810  011D00  D01A               	goto	l3728
  5811                           
  5812                           ; BSR set to: 0
  5813  011D02  0100               	movlb	0	; () banked
  5814  011D04  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5815  011D06  0A80               	xorlw	128
  5816  011D08  0F9F               	addlw	159
  5817  011D0A  B0D8               	btfsc	status,0,c
  5818  011D0C  D00A               	goto	l3724
  5819                           
  5820                           ; BSR set to: 0
  5821  011D0E  0E00               	movlw	0
  5822  011D10  0100               	movlb	0	; () banked
  5823  011D12  6F60               	movwf	?__div_to_l_& (0+255),b
  5824  011D14  0E00               	movlw	0
  5825  011D16  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5826  011D18  0E00               	movlw	0
  5827  011D1A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5828  011D1C  0E00               	movlw	0
  5829  011D1E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5830                           
  5831                           ; BSR set to: 0
  5832  011D20  0012               	return	
  5833  011D22                     l3724:
  5834                           
  5835                           ; BSR set to: 0
  5836  011D22  0100               	movlb	0	; () banked
  5837  011D24  90D8               	bcf	status,0,c
  5838  011D26  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5839  011D28  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5840  011D2A  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5841  011D2C  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  5842                           
  5843                           ; BSR set to: 0
  5844  011D2E  0100               	movlb	0	; () banked
  5845  011D30  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5846  011D32  D7F7               	goto	l3724
  5847                           
  5848                           ; BSR set to: 0
  5849  011D34  D01B               	goto	l811
  5850  011D36                     l3728:
  5851                           
  5852                           ; BSR set to: 0
  5853  011D36  0E1F               	movlw	31
  5854  011D38  0100               	movlb	0	; () banked
  5855  011D3A  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5856  011D3C  D012               	goto	l3736
  5857                           
  5858                           ; BSR set to: 0
  5859  011D3E  0E00               	movlw	0
  5860  011D40  0100               	movlb	0	; () banked
  5861  011D42  6F60               	movwf	?__div_to_l_& (0+255),b
  5862  011D44  0E00               	movlw	0
  5863  011D46  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5864  011D48  0E00               	movlw	0
  5865  011D4A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5866  011D4C  0E00               	movlw	0
  5867  011D4E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5868                           
  5869                           ; BSR set to: 0
  5870  011D50  0012               	return	
  5871  011D52                     l3734:
  5872                           
  5873                           ; BSR set to: 0
  5874  011D52  0100               	movlb	0	; () banked
  5875  011D54  90D8               	bcf	status,0,c
  5876  011D56  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5877  011D58  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5878  011D5A  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5879  011D5C  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5880  011D5E  0100               	movlb	0	; () banked
  5881  011D60  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  5882  011D62                     l3736:
  5883                           
  5884                           ; BSR set to: 0
  5885  011D62  0100               	movlb	0	; () banked
  5886  011D64  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5887  011D66  0100               	movlb	0	; () banked
  5888  011D68  A4D8               	btfss	status,2,c
  5889  011D6A  D7F3               	goto	l3734
  5890  011D6C                     l811:
  5891                           
  5892                           ; BSR set to: 0
  5893  011D6C  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  5894  011D70  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5895  011D74  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5896  011D78  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5897                           
  5898                           ; BSR set to: 0
  5899  011D7C  0012               	return		;funcret
  5900  011D7E                     __end_of__div_to_l_:
  5901                           	opt stack 0
  5902                           tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           postinc0	equ	0xFEE
  5909                           wreg	equ	0xFE8
  5910                           postdec1	equ	0xFE5
  5911                           fsr1l	equ	0xFE1
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function ___llmod *****************
  5920 ;; Defined at:
  5921 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  dividend        4   13[BANK0 ] unsigned long 
  5924 ;;  divisor         4   17[BANK0 ] unsigned long 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  counter         1   21[BANK0 ] unsigned char 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  4   13[BANK0 ] unsigned long 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5936 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5939 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5940 ;;Total ram usage:        9 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    4
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_sprintf
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text11
  5951  01316C                     __ptext11:
  5952                           	opt stack 0
  5953  01316C                     ___llmod:
  5954                           	opt stack 24
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;incstack = 0
  5958  01316C  0100               	movlb	0	; () banked
  5959  01316E  5171               	movf	___llmod@divisor& (0+255),w,b
  5960  013170  0100               	movlb	0	; () banked
  5961  013172  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5962  013174  0100               	movlb	0	; () banked
  5963  013176  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5964  013178  0100               	movlb	0	; () banked
  5965  01317A  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5966  01317C  B4D8               	btfsc	status,2,c
  5967  01317E  D03A               	goto	l995
  5968                           
  5969                           ; BSR set to: 0
  5970  013180  0E01               	movlw	1
  5971  013182  0100               	movlb	0	; () banked
  5972  013184  6F75               	movwf	___llmod@counter& (0+255),b
  5973  013186  D008               	goto	l3770
  5974  013188                     l3768:
  5975                           
  5976                           ; BSR set to: 0
  5977  013188  0100               	movlb	0	; () banked
  5978  01318A  90D8               	bcf	status,0,c
  5979  01318C  3771               	rlcf	___llmod@divisor& (0+255),f,b
  5980  01318E  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5981  013190  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5982  013192  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5983  013194  0100               	movlb	0	; () banked
  5984  013196  2B75               	incf	___llmod@counter& (0+255),f,b
  5985  013198                     l3770:
  5986                           
  5987                           ; BSR set to: 0
  5988  013198  0100               	movlb	0	; () banked
  5989  01319A  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5990  01319C  D7F5               	goto	l3768
  5991  01319E                     l3772:
  5992                           
  5993                           ; BSR set to: 0
  5994  01319E  0100               	movlb	0	; () banked
  5995  0131A0  5171               	movf	___llmod@divisor& (0+255),w,b
  5996  0131A2  0100               	movlb	0	; () banked
  5997  0131A4  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  5998  0131A6  0100               	movlb	0	; () banked
  5999  0131A8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6000  0131AA  0100               	movlb	0	; () banked
  6001  0131AC  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6002  0131AE  0100               	movlb	0	; () banked
  6003  0131B0  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6004  0131B2  0100               	movlb	0	; () banked
  6005  0131B4  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6006  0131B6  0100               	movlb	0	; () banked
  6007  0131B8  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6008  0131BA  0100               	movlb	0	; () banked
  6009  0131BC  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6010  0131BE  A0D8               	btfss	status,0,c
  6011  0131C0  D010               	goto	l3776
  6012                           
  6013                           ; BSR set to: 0
  6014  0131C2  0100               	movlb	0	; () banked
  6015  0131C4  5171               	movf	___llmod@divisor& (0+255),w,b
  6016  0131C6  0100               	movlb	0	; () banked
  6017  0131C8  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  6018  0131CA  0100               	movlb	0	; () banked
  6019  0131CC  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6020  0131CE  0100               	movlb	0	; () banked
  6021  0131D0  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6022  0131D2  0100               	movlb	0	; () banked
  6023  0131D4  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6024  0131D6  0100               	movlb	0	; () banked
  6025  0131D8  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6026  0131DA  0100               	movlb	0	; () banked
  6027  0131DC  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6028  0131DE  0100               	movlb	0	; () banked
  6029  0131E0  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6030  0131E2                     l3776:
  6031                           
  6032                           ; BSR set to: 0
  6033  0131E2  0100               	movlb	0	; () banked
  6034  0131E4  90D8               	bcf	status,0,c
  6035  0131E6  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6036  0131E8  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6037  0131EA  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6038  0131EC  3371               	rrcf	___llmod@divisor& (0+255),f,b
  6039                           
  6040                           ; BSR set to: 0
  6041  0131EE  0100               	movlb	0	; () banked
  6042  0131F0  2F75               	decfsz	___llmod@counter& (0+255),f,b
  6043  0131F2  D7D5               	goto	l3772
  6044  0131F4                     l995:
  6045                           
  6046                           ; BSR set to: 0
  6047  0131F4  C06D  F06D         	movff	___llmod@dividend,?___llmod
  6048  0131F8  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  6049  0131FC  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  6050  013200  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  6051                           
  6052                           ; BSR set to: 0
  6053  013204  0012               	return		;funcret
  6054  013206                     __end_of___llmod:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function ___lldiv *****************
  6074 ;; Defined at:
  6075 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  dividend        4    0[BANK0 ] unsigned long 
  6078 ;;  divisor         4    4[BANK0 ] unsigned long 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  quotient        4    8[BANK0 ] unsigned long 
  6081 ;;  counter         1   12[BANK0 ] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  4    0[BANK0 ] unsigned long 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, status,0
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6091 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6092 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6095 ;;Total ram usage:       13 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    4
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_sprintf
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text12
  6106  012D76                     __ptext12:
  6107                           	opt stack 0
  6108  012D76                     ___lldiv:
  6109                           	opt stack 24
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;incstack = 0
  6113  012D76  0E00               	movlw	0
  6114  012D78  0100               	movlb	0	; () banked
  6115  012D7A  6F68               	movwf	___lldiv@quotient& (0+255),b
  6116  012D7C  0E00               	movlw	0
  6117  012D7E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  6118  012D80  0E00               	movlw	0
  6119  012D82  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6120  012D84  0E00               	movlw	0
  6121  012D86  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6122                           
  6123                           ; BSR set to: 0
  6124  012D88  0100               	movlb	0	; () banked
  6125  012D8A  5164               	movf	___lldiv@divisor& (0+255),w,b
  6126  012D8C  0100               	movlb	0	; () banked
  6127  012D8E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6128  012D90  0100               	movlb	0	; () banked
  6129  012D92  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6130  012D94  0100               	movlb	0	; () banked
  6131  012D96  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6132  012D98  B4D8               	btfsc	status,2,c
  6133  012D9A  D042               	goto	l985
  6134                           
  6135                           ; BSR set to: 0
  6136  012D9C  0E01               	movlw	1
  6137  012D9E  0100               	movlb	0	; () banked
  6138  012DA0  6F6C               	movwf	___lldiv@counter& (0+255),b
  6139  012DA2  D008               	goto	l3750
  6140  012DA4                     l3748:
  6141                           
  6142                           ; BSR set to: 0
  6143  012DA4  0100               	movlb	0	; () banked
  6144  012DA6  90D8               	bcf	status,0,c
  6145  012DA8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  6146  012DAA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6147  012DAC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6148  012DAE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6149  012DB0  0100               	movlb	0	; () banked
  6150  012DB2  2B6C               	incf	___lldiv@counter& (0+255),f,b
  6151  012DB4                     l3750:
  6152                           
  6153                           ; BSR set to: 0
  6154  012DB4  0100               	movlb	0	; () banked
  6155  012DB6  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6156  012DB8  D7F5               	goto	l3748
  6157  012DBA                     l3752:
  6158                           
  6159                           ; BSR set to: 0
  6160  012DBA  0100               	movlb	0	; () banked
  6161  012DBC  90D8               	bcf	status,0,c
  6162  012DBE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  6163  012DC0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6164  012DC2  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6165  012DC4  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6166                           
  6167                           ; BSR set to: 0
  6168  012DC6  0100               	movlb	0	; () banked
  6169  012DC8  5164               	movf	___lldiv@divisor& (0+255),w,b
  6170  012DCA  0100               	movlb	0	; () banked
  6171  012DCC  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  6172  012DCE  0100               	movlb	0	; () banked
  6173  012DD0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6174  012DD2  0100               	movlb	0	; () banked
  6175  012DD4  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6176  012DD6  0100               	movlb	0	; () banked
  6177  012DD8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6178  012DDA  0100               	movlb	0	; () banked
  6179  012DDC  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6180  012DDE  0100               	movlb	0	; () banked
  6181  012DE0  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6182  012DE2  0100               	movlb	0	; () banked
  6183  012DE4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6184  012DE6  A0D8               	btfss	status,0,c
  6185  012DE8  D012               	goto	l3760
  6186                           
  6187                           ; BSR set to: 0
  6188  012DEA  0100               	movlb	0	; () banked
  6189  012DEC  5164               	movf	___lldiv@divisor& (0+255),w,b
  6190  012DEE  0100               	movlb	0	; () banked
  6191  012DF0  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  6192  012DF2  0100               	movlb	0	; () banked
  6193  012DF4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6194  012DF6  0100               	movlb	0	; () banked
  6195  012DF8  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6196  012DFA  0100               	movlb	0	; () banked
  6197  012DFC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6198  012DFE  0100               	movlb	0	; () banked
  6199  012E00  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6200  012E02  0100               	movlb	0	; () banked
  6201  012E04  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6202  012E06  0100               	movlb	0	; () banked
  6203  012E08  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6204                           
  6205                           ; BSR set to: 0
  6206  012E0A  0100               	movlb	0	; () banked
  6207  012E0C  8168               	bsf	___lldiv@quotient& (0+255),0,b
  6208  012E0E                     l3760:
  6209                           
  6210                           ; BSR set to: 0
  6211  012E0E  0100               	movlb	0	; () banked
  6212  012E10  90D8               	bcf	status,0,c
  6213  012E12  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6214  012E14  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6215  012E16  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6216  012E18  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  6217                           
  6218                           ; BSR set to: 0
  6219  012E1A  0100               	movlb	0	; () banked
  6220  012E1C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  6221  012E1E  D7CD               	goto	l3752
  6222  012E20                     l985:
  6223                           
  6224                           ; BSR set to: 0
  6225  012E20  C068  F060         	movff	___lldiv@quotient,?___lldiv
  6226  012E24  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  6227  012E28  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  6228  012E2C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  6229                           
  6230                           ; BSR set to: 0
  6231  012E30  0012               	return		;funcret
  6232  012E32                     __end_of___lldiv:
  6233                           	opt stack 0
  6234                           tblptru	equ	0xFF8
  6235                           tblptrh	equ	0xFF7
  6236                           tblptrl	equ	0xFF6
  6237                           tablat	equ	0xFF5
  6238                           prodh	equ	0xFF4
  6239                           prodl	equ	0xFF3
  6240                           postinc0	equ	0xFEE
  6241                           wreg	equ	0xFE8
  6242                           postdec1	equ	0xFE5
  6243                           fsr1l	equ	0xFE1
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _init_frequency *****************
  6252 ;; Defined at:
  6253 ;;		line 131 in file "frequency.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;		None               void
  6260 ;; Registers used:
  6261 ;;		wreg, status,2
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    4
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text13
  6282  013490                     __ptext13:
  6283                           	opt stack 0
  6284  013490                     _init_frequency:
  6285                           	opt stack 26
  6286                           
  6287                           ;frequency.c: 135: TRISCbits.TRISC1 = 1;
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;incstack = 0
  6291  013490  8294               	bsf	3988,1,c	;volatile
  6292                           
  6293                           ;frequency.c: 137: CCPTMRS2bits.C8TSEL1=0;
  6294  013492  010F               	movlb	15	; () banked
  6295  013494  9350               	bcf	80,1,b	;volatile
  6296                           
  6297                           ;frequency.c: 138: CCPTMRS2bits.C8TSEL0=0;
  6298  013496  010F               	movlb	15	; () banked
  6299  013498  9150               	bcf	80,0,b	;volatile
  6300                           
  6301                           ;frequency.c: 140: PIE4bits.CCP8IE=1;
  6302  01349A  8A8E               	bsf	3982,5,c	;volatile
  6303                           
  6304                           ;frequency.c: 141: PIR4bits.CCP8IF=0;
  6305  01349C  9A8F               	bcf	3983,5,c	;volatile
  6306                           
  6307                           ; BSR set to: 15
  6308                           ;frequency.c: 142: CCP8CON=0x07;
  6309  01349E  0E07               	movlw	7
  6310  0134A0  010F               	movlb	15	; () banked
  6311  0134A2  6F06               	movwf	6,b	;volatile
  6312                           
  6313                           ; BSR set to: 15
  6314                           ;frequency.c: 144: INTCONbits.GIE = 1;
  6315  0134A4  8EF2               	bsf	intcon,7,c	;volatile
  6316                           
  6317                           ; BSR set to: 15
  6318                           ;frequency.c: 146: T1CONbits.RD16=1;
  6319  0134A6  82CD               	bsf	4045,1,c	;volatile
  6320                           
  6321                           ; BSR set to: 15
  6322                           ;frequency.c: 147: T1CONbits.TMR1ON=1;
  6323  0134A8  80CD               	bsf	4045,0,c	;volatile
  6324                           
  6325                           ; BSR set to: 15
  6326                           ;frequency.c: 148: T1CONbits.TMR1CS0=0;
  6327  0134AA  9CCD               	bcf	4045,6,c	;volatile
  6328                           
  6329                           ; BSR set to: 15
  6330                           ;frequency.c: 149: T1CONbits.TMR1CS1=0;
  6331  0134AC  9ECD               	bcf	4045,7,c	;volatile
  6332                           
  6333                           ; BSR set to: 15
  6334                           ;frequency.c: 150: T1CONbits.T1CKPS1=0;
  6335  0134AE  9ACD               	bcf	4045,5,c	;volatile
  6336                           
  6337                           ; BSR set to: 15
  6338                           ;frequency.c: 151: T1CONbits.T1CKPS0=0;
  6339  0134B0  98CD               	bcf	4045,4,c	;volatile
  6340                           
  6341                           ; BSR set to: 15
  6342                           ;frequency.c: 152: T1CONbits.T1OSCEN=0;
  6343  0134B2  96CD               	bcf	4045,3,c	;volatile
  6344                           
  6345                           ;frequency.c: 153: TMR1L=0X00;
  6346  0134B4  0E00               	movlw	0
  6347  0134B6  6ECE               	movwf	4046,c	;volatile
  6348                           
  6349                           ;frequency.c: 154: TMR1H=0X00;
  6350  0134B8  0E00               	movlw	0
  6351  0134BA  6ECF               	movwf	4047,c	;volatile
  6352                           
  6353                           ;frequency.c: 155: CCPR8H=0x00;
  6354  0134BC  0E00               	movlw	0
  6355  0134BE  010F               	movlb	15	; () banked
  6356  0134C0  6F08               	movwf	8,b	;volatile
  6357                           
  6358                           ;frequency.c: 156: CCPR8L=0x00;
  6359  0134C2  0E00               	movlw	0
  6360  0134C4  010F               	movlb	15	; () banked
  6361  0134C6  6F07               	movwf	7,b	;volatile
  6362                           
  6363                           ; BSR set to: 15
  6364                           ;frequency.c: 161: TRISBbits.TRISB4 = 1;
  6365  0134C8  8893               	bsf	3987,4,c	;volatile
  6366                           
  6367                           ; BSR set to: 15
  6368                           ;frequency.c: 163: CCPTMRS1bits.C4TSEL0=0;
  6369  0134CA  010F               	movlb	15	; () banked
  6370  0134CC  9151               	bcf	81,0,b	;volatile
  6371                           
  6372                           ; BSR set to: 15
  6373                           ;frequency.c: 164: CCPTMRS1bits.C4TSEL1=0;
  6374  0134CE  010F               	movlb	15	; () banked
  6375  0134D0  9351               	bcf	81,1,b	;volatile
  6376                           
  6377                           ; BSR set to: 15
  6378                           ;frequency.c: 165: PIE4bits.CCP4IE=1;
  6379  0134D2  828E               	bsf	3982,1,c	;volatile
  6380                           
  6381                           ; BSR set to: 15
  6382                           ;frequency.c: 166: PIR4bits.CCP4IF=0;
  6383  0134D4  928F               	bcf	3983,1,c	;volatile
  6384                           
  6385                           ;frequency.c: 167: CCP4CON=0x07;
  6386  0134D6  0E07               	movlw	7
  6387  0134D8  010F               	movlb	15	; () banked
  6388  0134DA  6F12               	movwf	18,b	;volatile
  6389                           
  6390                           ; BSR set to: 15
  6391                           ;frequency.c: 168: PIE1bits.TMR1IE = 1;
  6392  0134DC  809D               	bsf	3997,0,c	;volatile
  6393                           
  6394                           ; BSR set to: 15
  6395                           ;frequency.c: 170: T1CONbits.RD16=1;
  6396  0134DE  82CD               	bsf	4045,1,c	;volatile
  6397                           
  6398                           ; BSR set to: 15
  6399                           ;frequency.c: 171: T1CONbits.TMR1ON=1;
  6400  0134E0  80CD               	bsf	4045,0,c	;volatile
  6401                           
  6402                           ; BSR set to: 15
  6403                           ;frequency.c: 172: T1CONbits.TMR1CS0=0;
  6404  0134E2  9CCD               	bcf	4045,6,c	;volatile
  6405                           
  6406                           ; BSR set to: 15
  6407                           ;frequency.c: 173: T1CONbits.TMR1CS1=0;
  6408  0134E4  9ECD               	bcf	4045,7,c	;volatile
  6409                           
  6410                           ; BSR set to: 15
  6411                           ;frequency.c: 174: T1CONbits.T1CKPS1=0;
  6412  0134E6  9ACD               	bcf	4045,5,c	;volatile
  6413                           
  6414                           ; BSR set to: 15
  6415                           ;frequency.c: 175: T1CONbits.T1CKPS0=0;
  6416  0134E8  98CD               	bcf	4045,4,c	;volatile
  6417                           
  6418                           ; BSR set to: 15
  6419                           ;frequency.c: 176: T1CONbits.T1OSCEN=0;
  6420  0134EA  96CD               	bcf	4045,3,c	;volatile
  6421                           
  6422                           ;frequency.c: 177: TMR1L=0X00;
  6423  0134EC  0E00               	movlw	0
  6424  0134EE  6ECE               	movwf	4046,c	;volatile
  6425                           
  6426                           ;frequency.c: 178: TMR1H=0X00;
  6427  0134F0  0E00               	movlw	0
  6428  0134F2  6ECF               	movwf	4047,c	;volatile
  6429                           
  6430                           ;frequency.c: 180: CCPR4H=0x00;
  6431  0134F4  0E00               	movlw	0
  6432  0134F6  010F               	movlb	15	; () banked
  6433  0134F8  6F14               	movwf	20,b	;volatile
  6434                           
  6435                           ;frequency.c: 181: CCPR4L=0x00;
  6436  0134FA  0E00               	movlw	0
  6437  0134FC  010F               	movlb	15	; () banked
  6438  0134FE  6F13               	movwf	19,b	;volatile
  6439                           
  6440                           ; BSR set to: 15
  6441  013500  0012               	return		;funcret
  6442  013502                     __end_of_init_frequency:
  6443                           	opt stack 0
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           postdec1	equ	0xFE5
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _initUART1 *****************
  6463 ;; Defined at:
  6464 ;;		line 21 in file "uart.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;		None               void
  6471 ;; Registers used:
  6472 ;;		wreg, status,2
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    4
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_main
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text14
  6493  0138A6                     __ptext14:
  6494                           	opt stack 0
  6495  0138A6                     _initUART1:
  6496                           	opt stack 26
  6497                           
  6498                           ;uart.c: 24: TRISCbits.TRISC7 = 1;
  6499                           
  6500                           ; BSR set to: 15
  6501                           ;incstack = 0
  6502  0138A6  8E94               	bsf	3988,7,c	;volatile
  6503                           
  6504                           ;uart.c: 25: TRISCbits.TRISC6 = 0;
  6505  0138A8  9C94               	bcf	3988,6,c	;volatile
  6506                           
  6507                           ;uart.c: 27: TXSTA1bits.BRGH = 1;
  6508  0138AA  84AD               	bsf	4013,2,c	;volatile
  6509                           
  6510                           ;uart.c: 28: BAUDCON1bits.BRG16 = 1;
  6511  0138AC  867E               	bsf	3966,3,c	;volatile
  6512                           
  6513                           ;uart.c: 36: SPBRGH1 = 0;
  6514  0138AE  0E00               	movlw	0
  6515  0138B0  6E7F               	movwf	3967,c	;volatile
  6516                           
  6517                           ;uart.c: 37: SPBRG1 = 34;
  6518  0138B2  0E22               	movlw	34
  6519  0138B4  6EB0               	movwf	4016,c	;volatile
  6520                           
  6521                           ;uart.c: 41: TXSTA1bits.SYNC = 0;
  6522  0138B6  98AD               	bcf	4013,4,c	;volatile
  6523                           
  6524                           ;uart.c: 42: RCSTA1bits.SPEN = 1;
  6525  0138B8  8EAC               	bsf	4012,7,c	;volatile
  6526                           
  6527                           ;uart.c: 46: PIE1bits.TXIE = 0;
  6528  0138BA  989D               	bcf	3997,4,c	;volatile
  6529                           
  6530                           ;uart.c: 47: PIE1bits.RC1IE = 1;
  6531  0138BC  8A9D               	bsf	3997,5,c	;volatile
  6532                           
  6533                           ;uart.c: 52: RCSTA1bits.CREN = 1;
  6534  0138BE  88AC               	bsf	4012,4,c	;volatile
  6535  0138C0  0012               	return		;funcret
  6536  0138C2                     __end_of_initUART1:
  6537                           	opt stack 0
  6538                           tblptru	equ	0xFF8
  6539                           tblptrh	equ	0xFF7
  6540                           tblptrl	equ	0xFF6
  6541                           tablat	equ	0xFF5
  6542                           prodh	equ	0xFF4
  6543                           prodl	equ	0xFF3
  6544                           intcon	equ	0xFF2
  6545                           postinc0	equ	0xFEE
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _initSPI *****************
  6557 ;; Defined at:
  6558 ;;		line 28 in file "digipot.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;		None               void
  6565 ;; Registers used:
  6566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6573 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6575 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6576 ;;Total ram usage:        9 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    9
  6579 ;; This function calls:
  6580 ;;		___awtoft
  6581 ;;		___ftadd
  6582 ;;		___ftdiv
  6583 ;;		___ftmul
  6584 ;;		___lbtoft
  6585 ;;		_pow
  6586 ;;		_remappings
  6587 ;; This function is called by:
  6588 ;;		_main
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text15
  6593  01240A                     __ptext15:
  6594                           	opt stack 0
  6595  01240A                     _initSPI:
  6596                           	opt stack 21
  6597                           
  6598                           ;digipot.c: 29: SSP2STAT = 0b00000000;
  6599                           
  6600                           ;incstack = 0
  6601  01240A  0E00               	movlw	0
  6602  01240C  6E73               	movwf	3955,c	;volatile
  6603                           
  6604                           ;digipot.c: 30: SSP2CON1 = 0b00110010;
  6605  01240E  0E32               	movlw	50
  6606  012410  6E72               	movwf	3954,c	;volatile
  6607                           
  6608                           ;digipot.c: 31: TRISBbits.TRISB2 = 0;
  6609  012412  9493               	bcf	3987,2,c	;volatile
  6610                           
  6611                           ;digipot.c: 32: TRISAbits.TRISA5 = 0;
  6612  012414  9A92               	bcf	3986,5,c	;volatile
  6613                           
  6614                           ;digipot.c: 33: TRISBbits.TRISB5 = 1;
  6615  012416  8A93               	bsf	3987,5,c	;volatile
  6616                           
  6617                           ;digipot.c: 34: TRISAbits.TRISA2 = 0;
  6618  012418  9492               	bcf	3986,2,c	;volatile
  6619                           
  6620                           ;digipot.c: 35: remappings();
  6621  01241A  EC43  F09C         	call	_remappings	;wreg free
  6622                           
  6623                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6624  01241E  0100               	movlb	0	; () banked
  6625  012420  51F2               	movf	_step& (0+255),w,b
  6626  012422  EC19  F09C         	call	___lbtoft
  6627  012426  C068  F0B8         	movff	?___lbtoft,pow@y
  6628  01242A  C069  F0B9         	movff	?___lbtoft+1,pow@y+1
  6629  01242E  C06A  F0BA         	movff	?___lbtoft+2,pow@y+2
  6630  012432  0E3B               	movlw	59
  6631  012434  0100               	movlb	0	; () banked
  6632  012436  6FB5               	movwf	pow@x& (0+255),b
  6633  012438  0E70               	movlw	112
  6634  01243A  0100               	movlb	0	; () banked
  6635  01243C  6FB6               	movwf	(pow@x+1)& (0+255),b
  6636  01243E  0E3F               	movlw	63
  6637  012440  0100               	movlb	0	; () banked
  6638  012442  6FB7               	movwf	(pow@x+2)& (0+255),b
  6639  012444  EC52  F08C         	call	_pow	;wreg free
  6640  012448  C0B5  F0C6         	movff	?_pow,_initSPI$2661
  6641  01244C  C0B6  F0C7         	movff	?_pow+1,_initSPI$2661+1
  6642  012450  C0B7  F0C8         	movff	?_pow+2,_initSPI$2661+2
  6643                           
  6644                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6645  012454  0E00               	movlw	0
  6646  012456  0100               	movlb	0	; () banked
  6647  012458  6F90               	movwf	___ftadd@f2& (0+255),b
  6648  01245A  0E7A               	movlw	122
  6649  01245C  0100               	movlb	0	; () banked
  6650  01245E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6651  012460  0E44               	movlw	68
  6652  012462  0100               	movlb	0	; () banked
  6653  012464  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6654  012466  0E51               	movlw	81
  6655  012468  0100               	movlb	0	; () banked
  6656  01246A  6F77               	movwf	___ftmul@f2& (0+255),b
  6657  01246C  0EC3               	movlw	195
  6658  01246E  0100               	movlb	0	; () banked
  6659  012470  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6660  012472  0E43               	movlw	67
  6661  012474  0100               	movlb	0	; () banked
  6662  012476  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6663  012478  0100               	movlb	0	; () banked
  6664  01247A  51F2               	movf	_step& (0+255),w,b
  6665  01247C  0D02               	mullw	2
  6666  01247E  CFF3 F068          	movff	prodl,___awtoft@c
  6667  012482  CFF4 F069          	movff	prodh,___awtoft@c+1
  6668  012486  EC8F  F09B         	call	___awtoft	;wreg free
  6669  01248A  C068  F074         	movff	?___awtoft,___ftmul@f1
  6670  01248E  C069  F075         	movff	?___awtoft+1,___ftmul@f1+1
  6671  012492  C06A  F076         	movff	?___awtoft+2,___ftmul@f1+2
  6672  012496  ECBF  F08E         	call	___ftmul	;wreg free
  6673  01249A  C074  F08D         	movff	?___ftmul,___ftadd@f1
  6674  01249E  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  6675  0124A2  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  6676  0124A6  EC01  F08A         	call	___ftadd	;wreg free
  6677  0124AA  C08D  F0C9         	movff	?___ftadd,_initSPI$2662
  6678  0124AE  C08E  F0CA         	movff	?___ftadd+1,_initSPI$2662+1
  6679  0124B2  C08F  F0CB         	movff	?___ftadd+2,_initSPI$2662+2
  6680                           
  6681                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6682  0124B6  C0C6  F077         	movff	_initSPI$2661,___ftmul@f2
  6683  0124BA  C0C7  F078         	movff	_initSPI$2661+1,___ftmul@f2+1
  6684  0124BE  C0C8  F079         	movff	_initSPI$2661+2,___ftmul@f2+2
  6685  0124C2  C0C9  F074         	movff	_initSPI$2662,___ftmul@f1
  6686  0124C6  C0CA  F075         	movff	_initSPI$2662+1,___ftmul@f1+1
  6687  0124CA  C0CB  F076         	movff	_initSPI$2662+2,___ftmul@f1+2
  6688  0124CE  ECBF  F08E         	call	___ftmul	;wreg free
  6689  0124D2  C074  F0CC         	movff	?___ftmul,_initSPI$2663
  6690  0124D6  C075  F0CD         	movff	?___ftmul+1,_initSPI$2663+1
  6691  0124DA  C076  F0CE         	movff	?___ftmul+2,_initSPI$2663+2
  6692                           
  6693                           ;digipot.c: 36: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  6694  0124DE  0E52               	movlw	82
  6695  0124E0  0100               	movlb	0	; () banked
  6696  0124E2  6F99               	movwf	___ftdiv@f1& (0+255),b
  6697  0124E4  0EB8               	movlw	184
  6698  0124E6  0100               	movlb	0	; () banked
  6699  0124E8  6F9A               	movwf	(___ftdiv@f1+1)& (0+255),b
  6700  0124EA  0E3F               	movlw	63
  6701  0124EC  0100               	movlb	0	; () banked
  6702  0124EE  6F9B               	movwf	(___ftdiv@f1+2)& (0+255),b
  6703  0124F0  0EFF               	movlw	255
  6704  0124F2  0100               	movlb	0	; () banked
  6705  0124F4  6F77               	movwf	___ftmul@f2& (0+255),b
  6706  0124F6  0E96               	movlw	150
  6707  0124F8  0100               	movlb	0	; () banked
  6708  0124FA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6709  0124FC  0E39               	movlw	57
  6710  0124FE  0100               	movlb	0	; () banked
  6711  012500  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6712  012502  C0CC  F074         	movff	_initSPI$2663,___ftmul@f1
  6713  012506  C0CD  F075         	movff	_initSPI$2663+1,___ftmul@f1+1
  6714  01250A  C0CE  F076         	movff	_initSPI$2663+2,___ftmul@f1+2
  6715  01250E  ECBF  F08E         	call	___ftmul	;wreg free
  6716  012512  C074  F09C         	movff	?___ftmul,___ftdiv@f2
  6717  012516  C075  F09D         	movff	?___ftmul+1,___ftdiv@f2+1
  6718  01251A  C076  F09E         	movff	?___ftmul+2,___ftdiv@f2+2
  6719  01251E  ECBD  F090         	call	___ftdiv	;wreg free
  6720  012522  C099  F0F9         	movff	?___ftdiv,_nominalfrequency
  6721  012526  C09A  F0FA         	movff	?___ftdiv+1,_nominalfrequency+1
  6722  01252A  C09B  F0FB         	movff	?___ftdiv+2,_nominalfrequency+2
  6723  01252E  0012               	return		;funcret
  6724  012530                     __end_of_initSPI:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           postdec1	equ	0xFE5
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _remappings *****************
  6745 ;; Defined at:
  6746 ;;		line 39 in file "digipot.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		wreg, status,2
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6764 ;;Total ram usage:        0 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    4
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_initSPI
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text16
  6775  013886                     __ptext16:
  6776                           	opt stack 0
  6777  013886                     _remappings:
  6778                           	opt stack 25
  6779                           
  6780                           ;digipot.c: 40: EECON2 = 0x55;
  6781                           
  6782                           ;incstack = 0
  6783  013886  0E55               	movlw	85
  6784  013888  6EA7               	movwf	4007,c	;volatile
  6785                           
  6786                           ;digipot.c: 41: EECON2 = 0xaa;
  6787  01388A  0EAA               	movlw	170
  6788  01388C  6EA7               	movwf	4007,c	;volatile
  6789                           
  6790                           ;digipot.c: 42: IOLOCK = 0;
  6791  01388E  010E               	movlb	14	; () banked
  6792  013890  91BF               	bcf	191,0,b	;volatile
  6793                           
  6794                           ;digipot.c: 43: RPINR21 = 0x08;
  6795  013892  0E08               	movlw	8
  6796  013894  010E               	movlb	14	; () banked
  6797  013896  6FFC               	movwf	252,b	;volatile
  6798                           
  6799                           ;digipot.c: 44: RPOR2 = 0x0b;
  6800  013898  0E0B               	movlw	11
  6801  01389A  010E               	movlb	14	; () banked
  6802  01389C  6FC2               	movwf	194,b	;volatile
  6803                           
  6804                           ;digipot.c: 45: RPOR5 = 0x0a;
  6805  01389E  0E0A               	movlw	10
  6806  0138A0  010E               	movlb	14	; () banked
  6807  0138A2  6FC5               	movwf	197,b	;volatile
  6808                           
  6809                           ; BSR set to: 14
  6810  0138A4  0012               	return		;funcret
  6811  0138A6                     __end_of_remappings:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon	equ	0xFF2
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _initLoRa *****************
  6832 ;; Defined at:
  6833 ;;		line 28 in file "lora.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;		None               void
  6840 ;; Registers used:
  6841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    6
  6854 ;; This function calls:
  6855 ;;		_delay_ms
  6856 ;;		_sendUARTMessage
  6857 ;; This function is called by:
  6858 ;;		_main
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text17
  6863  01339C                     __ptext17:
  6864                           	opt stack 0
  6865  01339C                     _initLoRa:
  6866                           	opt stack 24
  6867                           
  6868                           ;lora.c: 30: sendUARTMessage(set_dev_eui);
  6869                           
  6870                           ; BSR set to: 14
  6871                           ;incstack = 0
  6872  01339C  0EF3               	movlw	low _set_dev_eui
  6873  01339E  0100               	movlb	0	; () banked
  6874  0133A0  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6875  0133A2  0EFE               	movlw	high _set_dev_eui
  6876  0133A4  0100               	movlb	0	; () banked
  6877  0133A6  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6878  0133A8  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  6879                           
  6880                           ;lora.c: 31: delay_ms(800);
  6881  0133AC  0E03               	movlw	3
  6882  0133AE  0100               	movlb	0	; () banked
  6883  0133B0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6884  0133B2  0E20               	movlw	32
  6885  0133B4  6F60               	movwf	delay_ms@ms& (0+255),b
  6886  0133B6  EC6D  F09B         	call	_delay_ms	;wreg free
  6887                           
  6888                           ;lora.c: 33: sendUARTMessage(set_app_eui);
  6889  0133BA  0ED1               	movlw	low _set_app_eui
  6890  0133BC  0100               	movlb	0	; () banked
  6891  0133BE  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6892  0133C0  0EFE               	movlw	high _set_app_eui
  6893  0133C2  0100               	movlb	0	; () banked
  6894  0133C4  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6895  0133C6  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  6896                           
  6897                           ;lora.c: 34: delay_ms(800);
  6898  0133CA  0E03               	movlw	3
  6899  0133CC  0100               	movlb	0	; () banked
  6900  0133CE  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6901  0133D0  0E20               	movlw	32
  6902  0133D2  6F60               	movwf	delay_ms@ms& (0+255),b
  6903  0133D4  EC6D  F09B         	call	_delay_ms	;wreg free
  6904                           
  6905                           ;lora.c: 36: sendUARTMessage(set_app_key);
  6906  0133D8  0E9F               	movlw	low _set_app_key
  6907  0133DA  0100               	movlb	0	; () banked
  6908  0133DC  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6909  0133DE  0EFE               	movlw	high _set_app_key
  6910  0133E0  0100               	movlb	0	; () banked
  6911  0133E2  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6912  0133E4  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  6913                           
  6914                           ;lora.c: 37: delay_ms(3000);
  6915  0133E8  0E0B               	movlw	11
  6916  0133EA  0100               	movlb	0	; () banked
  6917  0133EC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6918  0133EE  0EB8               	movlw	184
  6919  0133F0  6F60               	movwf	delay_ms@ms& (0+255),b
  6920  0133F2  EC6D  F09B         	call	_delay_ms	;wreg free
  6921                           
  6922                           ;lora.c: 39: sendUARTMessage(join_network);
  6923  0133F6  0E4E               	movlw	low _join_network
  6924  0133F8  0100               	movlb	0	; () banked
  6925  0133FA  6F65               	movwf	sendUARTMessage@newMessagePointer& (0+255),b
  6926  0133FC  0EFF               	movlw	high _join_network
  6927  0133FE  0100               	movlb	0	; () banked
  6928  013400  6F66               	movwf	(sendUARTMessage@newMessagePointer+1)& (0+255),b
  6929  013402  EC0B  F09A         	call	_sendUARTMessage	;wreg free
  6930                           
  6931                           ;lora.c: 40: delay_ms(3000);
  6932  013406  0E0B               	movlw	11
  6933  013408  0100               	movlb	0	; () banked
  6934  01340A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  6935  01340C  0EB8               	movlw	184
  6936  01340E  6F60               	movwf	delay_ms@ms& (0+255),b
  6937  013410  EC6D  F09B         	call	_delay_ms	;wreg free
  6938  013414  0012               	return		;funcret
  6939  013416                     __end_of_initLoRa:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           postinc0	equ	0xFEE
  6949                           wreg	equ	0xFE8
  6950                           postdec1	equ	0xFE5
  6951                           fsr1l	equ	0xFE1
  6952                           indf2	equ	0xFDF
  6953                           postinc2	equ	0xFDE
  6954                           postdec2	equ	0xFDD
  6955                           fsr2h	equ	0xFDA
  6956                           fsr2l	equ	0xFD9
  6957                           status	equ	0xFD8
  6958                           
  6959 ;; *************** function _sendUARTMessage *****************
  6960 ;; Defined at:
  6961 ;;		line 62 in file "uart.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  newMessagePo    2    5[BANK0 ] PTR unsigned char 
  6964 ;;		 -> lora_message(200), join_network(16), set_app_key(50), set_app_eui(34), 
  6965 ;;		 -> set_dev_eui(34), cap_step_message(200), cap_frequency_message(200), ind_frequency_message(200), 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;		None               void
  6970 ;; Registers used:
  6971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6981 ;;Total ram usage:        2 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    5
  6984 ;; This function calls:
  6985 ;;		_delay_ms
  6986 ;; This function is called by:
  6987 ;;		_main
  6988 ;;		_initLoRa
  6989 ;;		_sendSensorData
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text18
  6994  013416                     __ptext18:
  6995                           	opt stack 0
  6996  013416                     _sendUARTMessage:
  6997                           	opt stack 25
  6998                           
  6999                           ;uart.c: 65: currentMessagePointer = newMessagePointer;
  7000                           
  7001                           ;incstack = 0
  7002  013416  C065  F0FC         	movff	sendUARTMessage@newMessagePointer,_currentMessagePointer
  7003  01341A  C066  F0FD         	movff	sendUARTMessage@newMessagePointer+1,_currentMessagePointer+1
  7004                           
  7005                           ;uart.c: 70: last_received_message_index = uart_receive_buffer_index;
  7006  01341E  C0EE  F05D         	movff	_uart_receive_buffer_index,_last_received_message_index
  7007  013422  C0EF  F05E         	movff	_uart_receive_buffer_index+1,_last_received_message_index+1
  7008                           
  7009                           ;uart.c: 71: TXSTA1bits.TXEN = 1;
  7010  013426  8AAD               	bsf	4013,5,c	;volatile
  7011                           
  7012                           ;uart.c: 73: while(*currentMessagePointer != '\0'){
  7013  013428  D01E               	goto	l3828
  7014  01342A                     l168:
  7015                           
  7016                           ;uart.c: 74: if(PIR1bits.TXIF == 1){
  7017  01342A  A89E               	btfss	3998,4,c	;volatile
  7018  01342C  D01C               	goto	l3828
  7019                           
  7020                           ;uart.c: 76: TXREG1 = *currentMessagePointer;
  7021  01342E  C0FC  FFF6         	movff	_currentMessagePointer,tblptrl
  7022  013432  C0FD  FFF7         	movff	_currentMessagePointer+1,tblptrh
  7023  013436  0E00               	movlw	low (__mediumconst shr (0+16))
  7024  013438  6EF8               	movwf	tblptru,c
  7025  01343A  0E0E               	movlw	(high __ramtop+-1)
  7026  01343C  64F7               	cpfsgt	tblptrh,c
  7027  01343E  D003               	bra	u3507
  7028  013440  0008               	tblrd		*
  7029  013442  50F5               	movf	tablat,w,c
  7030  013444  D005               	bra	u3500
  7031  013446                     u3507:
  7032  013446  CFF6 FFE1          	movff	tblptrl,fsr1l
  7033  01344A  CFF7 FFE2          	movff	tblptrh,fsr1h
  7034  01344E  50E7               	movf	indf1,w,c
  7035  013450                     u3500:
  7036  013450  6EAE               	movwf	4014,c	;volatile
  7037                           
  7038                           ;uart.c: 78: currentMessagePointer += 1;
  7039  013452  0100               	movlb	0	; () banked
  7040  013454  4BFC               	infsnz	_currentMessagePointer& (0+255),f,b
  7041  013456  2BFD               	incf	(_currentMessagePointer+1)& (0+255),f,b
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;uart.c: 79: delay_ms(1);
  7045  013458  0E00               	movlw	0
  7046  01345A  0100               	movlb	0	; () banked
  7047  01345C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7048  01345E  0E01               	movlw	1
  7049  013460  6F60               	movwf	delay_ms@ms& (0+255),b
  7050  013462  EC6D  F09B         	call	_delay_ms	;wreg free
  7051  013466                     l3828:
  7052  013466  C0FC  FFF6         	movff	_currentMessagePointer,tblptrl
  7053  01346A  C0FD  FFF7         	movff	_currentMessagePointer+1,tblptrh
  7054  01346E  0E00               	movlw	low (__mediumconst shr (0+16))
  7055  013470  6EF8               	movwf	tblptru,c
  7056  013472  0E0E               	movlw	(high __ramtop+-1)
  7057  013474  64F7               	cpfsgt	tblptrh,c
  7058  013476  D003               	bra	u3517
  7059  013478  0008               	tblrd		*
  7060  01347A  50F5               	movf	tablat,w,c
  7061  01347C  D005               	bra	u3510
  7062  01347E                     u3517:
  7063  01347E  CFF6 FFE1          	movff	tblptrl,fsr1l
  7064  013482  CFF7 FFE2          	movff	tblptrh,fsr1h
  7065  013486  50E7               	movf	indf1,w,c
  7066  013488                     u3510:
  7067  013488  0900               	iorlw	0
  7068  01348A  B4D8               	btfsc	status,2,c
  7069  01348C  0012               	return	
  7070  01348E  D7CD               	goto	l168
  7071  013490                     __end_of_sendUARTMessage:
  7072                           	opt stack 0
  7073                           tblptru	equ	0xFF8
  7074                           tblptrh	equ	0xFF7
  7075                           tblptrl	equ	0xFF6
  7076                           tablat	equ	0xFF5
  7077                           prodh	equ	0xFF4
  7078                           prodl	equ	0xFF3
  7079                           intcon	equ	0xFF2
  7080                           postinc0	equ	0xFEE
  7081                           wreg	equ	0xFE8
  7082                           indf1	equ	0xFE7
  7083                           postdec1	equ	0xFE5
  7084                           fsr1h	equ	0xFE2
  7085                           fsr1l	equ	0xFE1
  7086                           indf2	equ	0xFDF
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _delay_ms *****************
  7094 ;; Defined at:
  7095 ;;		line 11 in file "delay.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  ms              2    0[BANK0 ] int 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  i               2    3[BANK0 ] int 
  7100 ;; Return value:  Size  Location     Type
  7101 ;;		None               void
  7102 ;; Registers used:
  7103 ;;		wreg, status,2, status,0
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7109 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7110 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7112 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7113 ;;Total ram usage:        5 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    4
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_main
  7120 ;;		_sendUARTMessage
  7121 ;;		_initLoRa
  7122 ;;		_sendSensorData
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text19
  7127  0136DA                     __ptext19:
  7128                           	opt stack 0
  7129  0136DA                     _delay_ms:
  7130                           	opt stack 25
  7131                           
  7132                           ;delay.c: 12: for(int i = 0; i<ms; i++){
  7133                           
  7134                           ;incstack = 0
  7135  0136DA  0E00               	movlw	0
  7136  0136DC  0100               	movlb	0	; () banked
  7137  0136DE  6F64               	movwf	(delay_ms@i+1)& (0+255),b
  7138  0136E0  0E00               	movlw	0
  7139  0136E2  6F63               	movwf	delay_ms@i& (0+255),b
  7140  0136E4  D00B               	goto	l311
  7141  0136E6                     l3518:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;delay.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  7145  0136E6  0E03               	movlw	3
  7146  0136E8  0100               	movlb	0	; () banked
  7147  0136EA  6F62               	movwf	??_delay_ms& (0+255),b
  7148  0136EC  0E98               	movlw	152
  7149  0136EE                     u4257:
  7150  0136EE  2EE8               	decfsz	wreg,f,c
  7151  0136F0  D7FE               	goto	u4257
  7152  0136F2  2F62               	decfsz	??_delay_ms& (0+255),f,b
  7153  0136F4  D7FC               	goto	u4257
  7154  0136F6  0100               	movlb	0	; () banked
  7155  0136F8  4B63               	infsnz	delay_ms@i& (0+255),f,b
  7156  0136FA  2B64               	incf	(delay_ms@i+1)& (0+255),f,b
  7157  0136FC                     l311:
  7158                           
  7159                           ; BSR set to: 0
  7160  0136FC  0100               	movlb	0	; () banked
  7161  0136FE  5160               	movf	delay_ms@ms& (0+255),w,b
  7162  013700  0100               	movlb	0	; () banked
  7163  013702  5D63               	subwf	delay_ms@i& (0+255),w,b
  7164  013704  0100               	movlb	0	; () banked
  7165  013706  5164               	movf	(delay_ms@i+1)& (0+255),w,b
  7166  013708  0A80               	xorlw	128
  7167  01370A  0100               	movlb	0	; () banked
  7168  01370C  6F62               	movwf	??_delay_ms& (0+255),b
  7169  01370E  0100               	movlb	0	; () banked
  7170  013710  5161               	movf	(delay_ms@ms+1)& (0+255),w,b
  7171  013712  0A80               	xorlw	128
  7172  013714  0100               	movlb	0	; () banked
  7173  013716  5962               	subwfb	??_delay_ms& (0+255),w,b
  7174  013718  B0D8               	btfsc	status,0,c
  7175  01371A  0012               	return	
  7176  01371C  D7E4               	goto	l3518
  7177  01371E                     __end_of_delay_ms:
  7178                           	opt stack 0
  7179                           tblptru	equ	0xFF8
  7180                           tblptrh	equ	0xFF7
  7181                           tblptrl	equ	0xFF6
  7182                           tablat	equ	0xFF5
  7183                           prodh	equ	0xFF4
  7184                           prodl	equ	0xFF3
  7185                           intcon	equ	0xFF2
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           postdec1	equ	0xFE5
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _initInterrupts *****************
  7200 ;; Defined at:
  7201 ;;		line 21 in file "main.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, status,2
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    4
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_main
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text20
  7230  0138FA                     __ptext20:
  7231                           	opt stack 0
  7232  0138FA                     _initInterrupts:
  7233                           	opt stack 26
  7234                           
  7235                           ;main.c: 22: INTCON = 0b11000000;
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;incstack = 0
  7239  0138FA  0EC0               	movlw	192
  7240  0138FC  6EF2               	movwf	intcon,c	;volatile
  7241                           
  7242                           ;main.c: 23: RCONbits.IPEN = 0;
  7243  0138FE  9ED0               	bcf	4048,7,c	;volatile
  7244  013900  0012               	return		;funcret
  7245  013902                     __end_of_initInterrupts:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           postinc0	equ	0xFEE
  7255                           wreg	equ	0xFE8
  7256                           indf1	equ	0xFE7
  7257                           postdec1	equ	0xFE5
  7258                           fsr1h	equ	0xFE2
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _initADC *****************
  7268 ;; Defined at:
  7269 ;;		line 24 in file "temperature.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;		None               void
  7276 ;; Registers used:
  7277 ;;		wreg, status,2
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7287 ;;Total ram usage:        0 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    4
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_main
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text21
  7298  013804                     __ptext21:
  7299                           	opt stack 0
  7300  013804                     _initADC:
  7301                           	opt stack 26
  7302                           
  7303                           ;temperature.c: 25: TRISAbits.TRISA0 = 1;
  7304                           
  7305                           ;incstack = 0
  7306  013804  8092               	bsf	3986,0,c	;volatile
  7307                           
  7308                           ;temperature.c: 26: TRISAbits.TRISA1 = 1;
  7309  013806  8292               	bsf	3986,1,c	;volatile
  7310                           
  7311                           ;temperature.c: 27: PORTAbits.RA0 = 0;
  7312  013808  9080               	bcf	3968,0,c	;volatile
  7313                           
  7314                           ;temperature.c: 28: PORTAbits.RA1 = 0;
  7315  01380A  9280               	bcf	3968,1,c	;volatile
  7316                           
  7317                           ;temperature.c: 30: PORTBbits.RB0 = 0;
  7318  01380C  9081               	bcf	3969,0,c	;volatile
  7319                           
  7320                           ;temperature.c: 31: TRISBbits.TRISB0 = 1;
  7321  01380E  8093               	bsf	3987,0,c	;volatile
  7322                           
  7323                           ;temperature.c: 32: PORTBbits.RB1 = 0;
  7324  013810  9281               	bcf	3969,1,c	;volatile
  7325                           
  7326                           ;temperature.c: 33: TRISBbits.TRISB1 = 1;
  7327  013812  8293               	bsf	3987,1,c	;volatile
  7328                           
  7329                           ;temperature.c: 36: ANCON0 = 0xFC;
  7330  013814  0EFC               	movlw	252
  7331  013816  010F               	movlb	15	; () banked
  7332  013818  6F48               	movwf	72,b	;volatile
  7333                           
  7334                           ;temperature.c: 37: ANCON1 = 0x1F;
  7335  01381A  0E1F               	movlw	31
  7336  01381C  010F               	movlb	15	; () banked
  7337  01381E  6F49               	movwf	73,b	;volatile
  7338                           
  7339                           ;temperature.c: 38: ADCON0 = 0x00;
  7340  013820  0E00               	movlw	0
  7341  013822  6EC2               	movwf	4034,c	;volatile
  7342                           
  7343                           ;temperature.c: 39: ADCON1 = 0b10111110;
  7344  013824  0EBE               	movlw	190
  7345  013826  6EC1               	movwf	4033,c	;volatile
  7346                           
  7347                           ; BSR set to: 15
  7348                           ;temperature.c: 40: ADCON0bits.ADON = 0x01;
  7349  013828  80C2               	bsf	4034,0,c	;volatile
  7350                           
  7351                           ; BSR set to: 15
  7352                           ;temperature.c: 42: PIR1bits.ADIF = 0;
  7353  01382A  9C9E               	bcf	3998,6,c	;volatile
  7354                           
  7355                           ; BSR set to: 15
  7356                           ;temperature.c: 43: PIE1bits.ADIE = 0;
  7357  01382C  9C9D               	bcf	3997,6,c	;volatile
  7358                           
  7359                           ; BSR set to: 15
  7360                           ;temperature.c: 46: ADCON0bits.GO_DONE = 1;
  7361  01382E  82C2               	bsf	4034,1,c	;volatile
  7362                           
  7363                           ; BSR set to: 15
  7364  013830  0012               	return		;funcret
  7365  013832                     __end_of_initADC:
  7366                           	opt stack 0
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           prodh	equ	0xFF4
  7372                           prodl	equ	0xFF3
  7373                           intcon	equ	0xFF2
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           indf1	equ	0xFE7
  7377                           postdec1	equ	0xFE5
  7378                           fsr1h	equ	0xFE2
  7379                           fsr1l	equ	0xFE1
  7380                           indf2	equ	0xFDF
  7381                           postinc2	equ	0xFDE
  7382                           postdec2	equ	0xFDD
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _digipot *****************
  7388 ;; Defined at:
  7389 ;;		line 55 in file "digipot.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  2   34[None  ] int 
  7396 ;; Registers used:
  7397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7407 ;;Total ram usage:        0 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:   10
  7410 ;; This function calls:
  7411 ;;		___ftge
  7412 ;;		___ftmul
  7413 ;;		___lltoft
  7414 ;;		_adjustDigipot
  7415 ;;		_unselect
  7416 ;; This function is called by:
  7417 ;;		_main
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text22
  7422  012A54                     __ptext22:
  7423                           	opt stack 0
  7424  012A54                     _digipot:
  7425                           	opt stack 20
  7426                           
  7427                           ;digipot.c: 56: frequency = (float) cap_value;
  7428                           
  7429                           ; BSR set to: 15
  7430                           ;incstack = 0
  7431  012A54  C055  F068         	movff	_cap_value,___lltoft@c
  7432  012A58  C056  F069         	movff	_cap_value+1,___lltoft@c+1
  7433  012A5C  C057  F06A         	movff	_cap_value+2,___lltoft@c+2
  7434  012A60  C058  F06B         	movff	_cap_value+3,___lltoft@c+3
  7435  012A64  EC90  F099         	call	___lltoft	;wreg free
  7436  012A68  C068  F0DC         	movff	?___lltoft,_frequency
  7437  012A6C  C069  F0DD         	movff	?___lltoft+1,_frequency+1
  7438  012A70  C06A  F0DE         	movff	?___lltoft+2,_frequency+2
  7439                           
  7440                           ;digipot.c: 58: if (frequency > 1.033*nominalfrequency ){
  7441  012A74  0E39               	movlw	57
  7442  012A76  0100               	movlb	0	; () banked
  7443  012A78  6F77               	movwf	___ftmul@f2& (0+255),b
  7444  012A7A  0E84               	movlw	132
  7445  012A7C  0100               	movlb	0	; () banked
  7446  012A7E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7447  012A80  0E3F               	movlw	63
  7448  012A82  0100               	movlb	0	; () banked
  7449  012A84  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7450  012A86  C0F9  F074         	movff	_nominalfrequency,___ftmul@f1
  7451  012A8A  C0FA  F075         	movff	_nominalfrequency+1,___ftmul@f1+1
  7452  012A8E  C0FB  F076         	movff	_nominalfrequency+2,___ftmul@f1+2
  7453  012A92  ECBF  F08E         	call	___ftmul	;wreg free
  7454  012A96  C074  F083         	movff	?___ftmul,___ftge@ff1
  7455  012A9A  C075  F084         	movff	?___ftmul+1,___ftge@ff1+1
  7456  012A9E  C076  F085         	movff	?___ftmul+2,___ftge@ff1+2
  7457  012AA2  C0DC  F086         	movff	_frequency,___ftge@ff2
  7458  012AA6  C0DD  F087         	movff	_frequency+1,___ftge@ff2+1
  7459  012AAA  C0DE  F088         	movff	_frequency+2,___ftge@ff2+2
  7460  012AAE  ECF8  F095         	call	___ftge	;wreg free
  7461  012AB2  0100               	movlb	0	; () banked
  7462  012AB4  B0D8               	btfsc	status,0,c
  7463  012AB6  D005               	goto	l4318
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;digipot.c: 59: bigorsmall = 0x01;
  7467  012AB8  0E01               	movlw	1
  7468  012ABA  0100               	movlb	0	; () banked
  7469  012ABC  6FF0               	movwf	_bigorsmall& (0+255),b
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;digipot.c: 60: adjustDigipot();
  7473  012ABE  EC16  F090         	call	_adjustDigipot	;wreg free
  7474  012AC2                     l4318:
  7475                           
  7476                           ;digipot.c: 61: }
  7477                           ;digipot.c: 62: if (frequency< 0.9692*nominalfrequency&&step>0){
  7478  012AC2  C0DC  F083         	movff	_frequency,___ftge@ff1
  7479  012AC6  C0DD  F084         	movff	_frequency+1,___ftge@ff1+1
  7480  012ACA  C0DE  F085         	movff	_frequency+2,___ftge@ff1+2
  7481  012ACE  0E1D               	movlw	29
  7482  012AD0  0100               	movlb	0	; () banked
  7483  012AD2  6F77               	movwf	___ftmul@f2& (0+255),b
  7484  012AD4  0E78               	movlw	120
  7485  012AD6  0100               	movlb	0	; () banked
  7486  012AD8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7487  012ADA  0E3F               	movlw	63
  7488  012ADC  0100               	movlb	0	; () banked
  7489  012ADE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7490  012AE0  C0F9  F074         	movff	_nominalfrequency,___ftmul@f1
  7491  012AE4  C0FA  F075         	movff	_nominalfrequency+1,___ftmul@f1+1
  7492  012AE8  C0FB  F076         	movff	_nominalfrequency+2,___ftmul@f1+2
  7493  012AEC  ECBF  F08E         	call	___ftmul	;wreg free
  7494  012AF0  C074  F086         	movff	?___ftmul,___ftge@ff2
  7495  012AF4  C075  F087         	movff	?___ftmul+1,___ftge@ff2+1
  7496  012AF8  C076  F088         	movff	?___ftmul+2,___ftge@ff2+2
  7497  012AFC  ECF8  F095         	call	___ftge	;wreg free
  7498  012B00  0100               	movlb	0	; () banked
  7499  012B02  B0D8               	btfsc	status,0,c
  7500  012B04  D00A               	goto	l482
  7501                           
  7502                           ; BSR set to: 0
  7503  012B06  0100               	movlb	0	; () banked
  7504  012B08  51F2               	movf	_step& (0+255),w,b
  7505  012B0A  B4D8               	btfsc	status,2,c
  7506  012B0C  D006               	goto	l482
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;digipot.c: 63: bigorsmall =0x02;
  7510  012B0E  0E02               	movlw	2
  7511  012B10  0100               	movlb	0	; () banked
  7512  012B12  6FF0               	movwf	_bigorsmall& (0+255),b
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;digipot.c: 64: adjustDigipot();
  7516  012B14  EC16  F090         	call	_adjustDigipot	;wreg free
  7517                           
  7518                           ;digipot.c: 65: }
  7519  012B18  0012               	return	
  7520  012B1A                     l482:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;digipot.c: 66: else{
  7524                           ;digipot.c: 67: if(PORTAbits.RA2==0){
  7525  012B1A  B480               	btfsc	3968,2,c	;volatile
  7526  012B1C  0012               	return	
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;digipot.c: 68: unselect();
  7530  012B1E  EC84  F09C         	call	_unselect	;wreg free
  7531  012B22  0012               	return	
  7532  012B24                     __end_of_digipot:
  7533                           	opt stack 0
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           intcon	equ	0xFF2
  7541                           postinc0	equ	0xFEE
  7542                           wreg	equ	0xFE8
  7543                           indf1	equ	0xFE7
  7544                           postdec1	equ	0xFE5
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           fsr2h	equ	0xFDA
  7551                           fsr2l	equ	0xFD9
  7552                           status	equ	0xFD8
  7553                           
  7554 ;; *************** function _unselect *****************
  7555 ;; Defined at:
  7556 ;;		line 93 in file "digipot.c"
  7557 ;; Parameters:    Size  Location     Type
  7558 ;;		None
  7559 ;; Auto vars:     Size  Location     Type
  7560 ;;		None
  7561 ;; Return value:  Size  Location     Type
  7562 ;;		None               void
  7563 ;; Registers used:
  7564 ;;		None
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7574 ;;Total ram usage:        0 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    4
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_digipot
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text23
  7585  013908                     __ptext23:
  7586                           	opt stack 0
  7587  013908                     _unselect:
  7588                           	opt stack 25
  7589                           
  7590                           ;digipot.c: 94: PORTAbits.RA2=1;
  7591                           
  7592                           ;incstack = 0
  7593  013908  8480               	bsf	3968,2,c	;volatile
  7594  01390A  0012               	return		;funcret
  7595  01390C                     __end_of_unselect:
  7596                           	opt stack 0
  7597                           tblptru	equ	0xFF8
  7598                           tblptrh	equ	0xFF7
  7599                           tblptrl	equ	0xFF6
  7600                           tablat	equ	0xFF5
  7601                           prodh	equ	0xFF4
  7602                           prodl	equ	0xFF3
  7603                           intcon	equ	0xFF2
  7604                           postinc0	equ	0xFEE
  7605                           wreg	equ	0xFE8
  7606                           indf1	equ	0xFE7
  7607                           postdec1	equ	0xFE5
  7608                           fsr1h	equ	0xFE2
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           
  7617 ;; *************** function _adjustDigipot *****************
  7618 ;; Defined at:
  7619 ;;		line 73 in file "digipot.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;		None               void
  7626 ;; Registers used:
  7627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7634 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7636 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7637 ;;Total ram usage:        9 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    9
  7640 ;; This function calls:
  7641 ;;		___awtoft
  7642 ;;		___ftadd
  7643 ;;		___ftdiv
  7644 ;;		___ftmul
  7645 ;;		___lbtoft
  7646 ;;		_pow
  7647 ;; This function is called by:
  7648 ;;		_digipot
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text24
  7653  01202C                     __ptext24:
  7654                           	opt stack 0
  7655  01202C                     _adjustDigipot:
  7656                           	opt stack 20
  7657                           
  7658                           ;digipot.c: 75: PORTAbits.RA2=0;
  7659                           
  7660                           ;incstack = 0
  7661  01202C  9480               	bcf	3968,2,c	;volatile
  7662                           
  7663                           ;digipot.c: 76: if(state==0x00){
  7664  01202E  0100               	movlb	0	; () banked
  7665  012030  51F1               	movf	_state& (0+255),w,b
  7666  012032  0100               	movlb	0	; () banked
  7667  012034  A4D8               	btfss	status,2,c
  7668  012036  D004               	goto	l4080
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;digipot.c: 77: SSPBUF = 0x00;
  7672  012038  0E00               	movlw	0
  7673  01203A  6EC9               	movwf	4041,c	;volatile
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;digipot.c: 78: state++;
  7677  01203C  0100               	movlb	0	; () banked
  7678  01203E  2BF1               	incf	_state& (0+255),f,b
  7679  012040                     l4080:
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;digipot.c: 79: }
  7683                           ;digipot.c: 80: if(SSP2STATbits.BF==1){
  7684  012040  A073               	btfss	3955,0,c	;volatile
  7685  012042  0012               	return	
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;digipot.c: 81: if(bigorsmall==0x01){
  7689  012044  0100               	movlb	0	; () banked
  7690  012046  05F0               	decf	_bigorsmall& (0+255),w,b
  7691  012048  A4D8               	btfss	status,2,c
  7692  01204A  D002               	goto	l4086
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;digipot.c: 82: step++;
  7696  01204C  0100               	movlb	0	; () banked
  7697  01204E  2BF2               	incf	_step& (0+255),f,b
  7698  012050                     l4086:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;digipot.c: 83: }
  7702                           ;digipot.c: 84: if(bigorsmall==0x02){
  7703  012050  0E02               	movlw	2
  7704  012052  0100               	movlb	0	; () banked
  7705  012054  19F0               	xorwf	_bigorsmall& (0+255),w,b
  7706  012056  A4D8               	btfss	status,2,c
  7707  012058  D002               	goto	l4090
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;digipot.c: 85: step--;
  7711  01205A  0100               	movlb	0	; () banked
  7712  01205C  07F2               	decf	_step& (0+255),f,b
  7713  01205E                     l4090:
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;digipot.c: 86: }
  7717                           ;digipot.c: 87: SSPBUF = step;
  7718  01205E  C0F2  FFC9         	movff	_step,4041	;volatile
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;digipot.c: 88: state=0x00;
  7722  012062  0E00               	movlw	0
  7723  012064  0100               	movlb	0	; () banked
  7724  012066  6FF1               	movwf	_state& (0+255),b
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7728  012068  0100               	movlb	0	; () banked
  7729  01206A  51F2               	movf	_step& (0+255),w,b
  7730  01206C  EC19  F09C         	call	___lbtoft
  7731  012070  C068  F0B8         	movff	?___lbtoft,pow@y
  7732  012074  C069  F0B9         	movff	?___lbtoft+1,pow@y+1
  7733  012078  C06A  F0BA         	movff	?___lbtoft+2,pow@y+2
  7734  01207C  0E3B               	movlw	59
  7735  01207E  0100               	movlb	0	; () banked
  7736  012080  6FB5               	movwf	pow@x& (0+255),b
  7737  012082  0E70               	movlw	112
  7738  012084  0100               	movlb	0	; () banked
  7739  012086  6FB6               	movwf	(pow@x+1)& (0+255),b
  7740  012088  0E3F               	movlw	63
  7741  01208A  0100               	movlb	0	; () banked
  7742  01208C  6FB7               	movwf	(pow@x+2)& (0+255),b
  7743  01208E  EC52  F08C         	call	_pow	;wreg free
  7744  012092  C0B5  F0C6         	movff	?_pow,_adjustDigipot$2664
  7745  012096  C0B6  F0C7         	movff	?_pow+1,_adjustDigipot$2664+1
  7746  01209A  C0B7  F0C8         	movff	?_pow+2,_adjustDigipot$2664+2
  7747                           
  7748                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7749  01209E  0E00               	movlw	0
  7750  0120A0  0100               	movlb	0	; () banked
  7751  0120A2  6F90               	movwf	___ftadd@f2& (0+255),b
  7752  0120A4  0E7A               	movlw	122
  7753  0120A6  0100               	movlb	0	; () banked
  7754  0120A8  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7755  0120AA  0E44               	movlw	68
  7756  0120AC  0100               	movlb	0	; () banked
  7757  0120AE  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7758  0120B0  0E51               	movlw	81
  7759  0120B2  0100               	movlb	0	; () banked
  7760  0120B4  6F77               	movwf	___ftmul@f2& (0+255),b
  7761  0120B6  0EC3               	movlw	195
  7762  0120B8  0100               	movlb	0	; () banked
  7763  0120BA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7764  0120BC  0E43               	movlw	67
  7765  0120BE  0100               	movlb	0	; () banked
  7766  0120C0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7767  0120C2  0100               	movlb	0	; () banked
  7768  0120C4  51F2               	movf	_step& (0+255),w,b
  7769  0120C6  0D02               	mullw	2
  7770  0120C8  CFF3 F068          	movff	prodl,___awtoft@c
  7771  0120CC  CFF4 F069          	movff	prodh,___awtoft@c+1
  7772  0120D0  EC8F  F09B         	call	___awtoft	;wreg free
  7773  0120D4  C068  F074         	movff	?___awtoft,___ftmul@f1
  7774  0120D8  C069  F075         	movff	?___awtoft+1,___ftmul@f1+1
  7775  0120DC  C06A  F076         	movff	?___awtoft+2,___ftmul@f1+2
  7776  0120E0  ECBF  F08E         	call	___ftmul	;wreg free
  7777  0120E4  C074  F08D         	movff	?___ftmul,___ftadd@f1
  7778  0120E8  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  7779  0120EC  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  7780  0120F0  EC01  F08A         	call	___ftadd	;wreg free
  7781  0120F4  C08D  F0C9         	movff	?___ftadd,_adjustDigipot$2665
  7782  0120F8  C08E  F0CA         	movff	?___ftadd+1,_adjustDigipot$2665+1
  7783  0120FC  C08F  F0CB         	movff	?___ftadd+2,_adjustDigipot$2665+2
  7784                           
  7785                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7786  012100  C0C6  F077         	movff	_adjustDigipot$2664,___ftmul@f2
  7787  012104  C0C7  F078         	movff	_adjustDigipot$2664+1,___ftmul@f2+1
  7788  012108  C0C8  F079         	movff	_adjustDigipot$2664+2,___ftmul@f2+2
  7789  01210C  C0C9  F074         	movff	_adjustDigipot$2665,___ftmul@f1
  7790  012110  C0CA  F075         	movff	_adjustDigipot$2665+1,___ftmul@f1+1
  7791  012114  C0CB  F076         	movff	_adjustDigipot$2665+2,___ftmul@f1+2
  7792  012118  ECBF  F08E         	call	___ftmul	;wreg free
  7793  01211C  C074  F0CC         	movff	?___ftmul,_adjustDigipot$2666
  7794  012120  C075  F0CD         	movff	?___ftmul+1,_adjustDigipot$2666+1
  7795  012124  C076  F0CE         	movff	?___ftmul+2,_adjustDigipot$2666+2
  7796                           
  7797                           ;digipot.c: 89: nominalfrequency = 1.44/((1000+2*step*390.63)*0.000288 * pow(0.9384, ste
      +                          p));
  7798  012128  0E52               	movlw	82
  7799  01212A  0100               	movlb	0	; () banked
  7800  01212C  6F99               	movwf	___ftdiv@f1& (0+255),b
  7801  01212E  0EB8               	movlw	184
  7802  012130  0100               	movlb	0	; () banked
  7803  012132  6F9A               	movwf	(___ftdiv@f1+1)& (0+255),b
  7804  012134  0E3F               	movlw	63
  7805  012136  0100               	movlb	0	; () banked
  7806  012138  6F9B               	movwf	(___ftdiv@f1+2)& (0+255),b
  7807  01213A  0EFF               	movlw	255
  7808  01213C  0100               	movlb	0	; () banked
  7809  01213E  6F77               	movwf	___ftmul@f2& (0+255),b
  7810  012140  0E96               	movlw	150
  7811  012142  0100               	movlb	0	; () banked
  7812  012144  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7813  012146  0E39               	movlw	57
  7814  012148  0100               	movlb	0	; () banked
  7815  01214A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7816  01214C  C0CC  F074         	movff	_adjustDigipot$2666,___ftmul@f1
  7817  012150  C0CD  F075         	movff	_adjustDigipot$2666+1,___ftmul@f1+1
  7818  012154  C0CE  F076         	movff	_adjustDigipot$2666+2,___ftmul@f1+2
  7819  012158  ECBF  F08E         	call	___ftmul	;wreg free
  7820  01215C  C074  F09C         	movff	?___ftmul,___ftdiv@f2
  7821  012160  C075  F09D         	movff	?___ftmul+1,___ftdiv@f2+1
  7822  012164  C076  F09E         	movff	?___ftmul+2,___ftdiv@f2+2
  7823  012168  ECBD  F090         	call	___ftdiv	;wreg free
  7824  01216C  C099  F0F9         	movff	?___ftdiv,_nominalfrequency
  7825  012170  C09A  F0FA         	movff	?___ftdiv+1,_nominalfrequency+1
  7826  012174  C09B  F0FB         	movff	?___ftdiv+2,_nominalfrequency+2
  7827  012178  0012               	return	
  7828  01217A                     __end_of_adjustDigipot:
  7829                           	opt stack 0
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           postinc0	equ	0xFEE
  7838                           wreg	equ	0xFE8
  7839                           indf1	equ	0xFE7
  7840                           postdec1	equ	0xFE5
  7841                           fsr1h	equ	0xFE2
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _pow *****************
  7851 ;; Defined at:
  7852 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\pow.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  x               3   85[BANK0 ] int 
  7855 ;;  y               3   88[BANK0 ] int 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  yi              4   98[BANK0 ] unsigned long 
  7858 ;;  sign            1   97[BANK0 ] unsigned char 
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  3   85[BANK0 ] unsigned char 
  7861 ;; Registers used:
  7862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7863 ;; Tracked objects:
  7864 ;;		On entry : 0/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7868 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7869 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7871 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7872 ;;Total ram usage:       17 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:    8
  7875 ;; This function calls:
  7876 ;;		___ftge
  7877 ;;		___ftmul
  7878 ;;		___ftneg
  7879 ;;		___fttol
  7880 ;;		___lltoft
  7881 ;;		_exp
  7882 ;;		_log
  7883 ;; This function is called by:
  7884 ;;		_initSPI
  7885 ;;		_adjustDigipot
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text25
  7890  0118A4                     __ptext25:
  7891                           	opt stack 0
  7892  0118A4                     _pow:
  7893                           	opt stack 21
  7894                           
  7895                           ;incstack = 0
  7896  0118A4  0E00               	movlw	0
  7897  0118A6  0100               	movlb	0	; () banked
  7898  0118A8  6FC1               	movwf	pow@sign& (0+255),b
  7899                           
  7900                           ; BSR set to: 0
  7901  0118AA  0100               	movlb	0	; () banked
  7902  0118AC  51B5               	movf	pow@x& (0+255),w,b
  7903  0118AE  0100               	movlb	0	; () banked
  7904  0118B0  11B6               	iorwf	(pow@x+1)& (0+255),w,b
  7905  0118B2  0100               	movlb	0	; () banked
  7906  0118B4  11B7               	iorwf	(pow@x+2)& (0+255),w,b
  7907  0118B6  A4D8               	btfss	status,2,c
  7908  0118B8  D023               	goto	l3532
  7909                           
  7910                           ; BSR set to: 0
  7911  0118BA  0E00               	movlw	0
  7912  0118BC  0100               	movlb	0	; () banked
  7913  0118BE  6F83               	movwf	___ftge@ff1& (0+255),b
  7914  0118C0  0E00               	movlw	0
  7915  0118C2  0100               	movlb	0	; () banked
  7916  0118C4  6F84               	movwf	(___ftge@ff1+1)& (0+255),b
  7917  0118C6  0E00               	movlw	0
  7918  0118C8  0100               	movlb	0	; () banked
  7919  0118CA  6F85               	movwf	(___ftge@ff1+2)& (0+255),b
  7920  0118CC  C0B8  F086         	movff	pow@y,___ftge@ff2
  7921  0118D0  C0B9  F087         	movff	pow@y+1,___ftge@ff2+1
  7922  0118D4  C0BA  F088         	movff	pow@y+2,___ftge@ff2+2
  7923  0118D8  ECF8  F095         	call	___ftge	;wreg free
  7924  0118DC  0100               	movlb	0	; () banked
  7925  0118DE  A0D8               	btfss	status,0,c
  7926  0118E0  D005               	goto	l1070
  7927                           
  7928                           ; BSR set to: 0
  7929  0118E2  0E00               	movlw	0
  7930  0118E4  0100               	movlb	0	; () banked
  7931  0118E6  6FE9               	movwf	(_errno+1)& (0+255),b
  7932  0118E8  0E21               	movlw	33
  7933  0118EA  6FE8               	movwf	_errno& (0+255),b
  7934  0118EC                     l1070:
  7935                           
  7936                           ; BSR set to: 0
  7937  0118EC  0E00               	movlw	0
  7938  0118EE  0100               	movlb	0	; () banked
  7939  0118F0  6FB5               	movwf	?_pow& (0+255),b
  7940  0118F2  0E00               	movlw	0
  7941  0118F4  0100               	movlb	0	; () banked
  7942  0118F6  6FB6               	movwf	(?_pow+1)& (0+255),b
  7943  0118F8  0E00               	movlw	0
  7944  0118FA  0100               	movlb	0	; () banked
  7945  0118FC  6FB7               	movwf	(?_pow+2)& (0+255),b
  7946                           
  7947                           ; BSR set to: 0
  7948  0118FE  0012               	return	
  7949  011900                     l3532:
  7950                           
  7951                           ; BSR set to: 0
  7952  011900  0100               	movlb	0	; () banked
  7953  011902  51B8               	movf	pow@y& (0+255),w,b
  7954  011904  0100               	movlb	0	; () banked
  7955  011906  11B9               	iorwf	(pow@y+1)& (0+255),w,b
  7956  011908  0100               	movlb	0	; () banked
  7957  01190A  11BA               	iorwf	(pow@y+2)& (0+255),w,b
  7958  01190C  A4D8               	btfss	status,2,c
  7959  01190E  D00A               	goto	l3538
  7960                           
  7961                           ; BSR set to: 0
  7962  011910  0E00               	movlw	0
  7963  011912  0100               	movlb	0	; () banked
  7964  011914  6FB5               	movwf	?_pow& (0+255),b
  7965  011916  0E80               	movlw	128
  7966  011918  0100               	movlb	0	; () banked
  7967  01191A  6FB6               	movwf	(?_pow+1)& (0+255),b
  7968  01191C  0E3F               	movlw	63
  7969  01191E  0100               	movlb	0	; () banked
  7970  011920  6FB7               	movwf	(?_pow+2)& (0+255),b
  7971                           
  7972                           ; BSR set to: 0
  7973  011922  0012               	return	
  7974  011924                     l3538:
  7975                           
  7976                           ; BSR set to: 0
  7977  011924  0100               	movlb	0	; () banked
  7978  011926  AFB7               	btfss	(pow@x+2)& (0+255),7,b
  7979  011928  D04C               	goto	l3550
  7980                           
  7981                           ; BSR set to: 0
  7982  01192A  C0B8  F08A         	movff	pow@y,___fttol@f1
  7983  01192E  C0B9  F08B         	movff	pow@y+1,___fttol@f1+1
  7984  011932  C0BA  F08C         	movff	pow@y+2,___fttol@f1+2
  7985  011936  EC63  F091         	call	___fttol	;wreg free
  7986  01193A  C08A  F0C2         	movff	?___fttol,pow@yi
  7987  01193E  C08B  F0C3         	movff	?___fttol+1,pow@yi+1
  7988  011942  C08C  F0C4         	movff	?___fttol+2,pow@yi+2
  7989  011946  C08D  F0C5         	movff	?___fttol+3,pow@yi+3
  7990  01194A  C0C2  F068         	movff	pow@yi,___lltoft@c
  7991  01194E  C0C3  F069         	movff	pow@yi+1,___lltoft@c+1
  7992  011952  C0C4  F06A         	movff	pow@yi+2,___lltoft@c+2
  7993  011956  C0C5  F06B         	movff	pow@yi+3,___lltoft@c+3
  7994  01195A  EC90  F099         	call	___lltoft	;wreg free
  7995  01195E  0100               	movlb	0	; () banked
  7996  011960  51B8               	movf	pow@y& (0+255),w,b
  7997  011962  0100               	movlb	0	; () banked
  7998  011964  1968               	xorwf	?___lltoft& (0+255),w,b
  7999  011966  E10B               	bnz	u3100
  8000  011968  0100               	movlb	0	; () banked
  8001  01196A  51B9               	movf	(pow@y+1)& (0+255),w,b
  8002  01196C  0100               	movlb	0	; () banked
  8003  01196E  1969               	xorwf	(?___lltoft+1)& (0+255),w,b
  8004  011970  E106               	bnz	u3100
  8005  011972  0100               	movlb	0	; () banked
  8006  011974  51BA               	movf	(pow@y+2)& (0+255),w,b
  8007  011976  0100               	movlb	0	; () banked
  8008  011978  196A               	xorwf	(?___lltoft+2)& (0+255),w,b
  8009  01197A  B4D8               	btfsc	status,2,c
  8010  01197C  D00F               	goto	l3546
  8011  01197E                     u3100:
  8012                           
  8013                           ; BSR set to: 0
  8014  01197E  0E00               	movlw	0
  8015  011980  0100               	movlb	0	; () banked
  8016  011982  6FE9               	movwf	(_errno+1)& (0+255),b
  8017  011984  0E21               	movlw	33
  8018  011986  6FE8               	movwf	_errno& (0+255),b
  8019  011988  0E00               	movlw	0
  8020  01198A  0100               	movlb	0	; () banked
  8021  01198C  6FB5               	movwf	?_pow& (0+255),b
  8022  01198E  0E00               	movlw	0
  8023  011990  0100               	movlb	0	; () banked
  8024  011992  6FB6               	movwf	(?_pow+1)& (0+255),b
  8025  011994  0E00               	movlw	0
  8026  011996  0100               	movlb	0	; () banked
  8027  011998  6FB7               	movwf	(?_pow+2)& (0+255),b
  8028                           
  8029                           ; BSR set to: 0
  8030  01199A  0012               	return	
  8031  01199C                     l3546:
  8032                           
  8033                           ; BSR set to: 0
  8034  01199C  0100               	movlb	0	; () banked
  8035  01199E  51C2               	movf	pow@yi& (0+255),w,b
  8036  0119A0  0B01               	andlw	1
  8037  0119A2  0100               	movlb	0	; () banked
  8038  0119A4  6FC1               	movwf	pow@sign& (0+255),b
  8039                           
  8040                           ; BSR set to: 0
  8041  0119A6  C0B5  F060         	movff	pow@x,___ftneg@f1
  8042  0119AA  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  8043  0119AE  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  8044  0119B2  ECEA  F09B         	call	___ftneg	;wreg free
  8045  0119B6  C060  F0B5         	movff	?___ftneg,pow@x
  8046  0119BA  C061  F0B6         	movff	?___ftneg+1,pow@x+1
  8047  0119BE  C062  F0B7         	movff	?___ftneg+2,pow@x+2
  8048  0119C2                     l3550:
  8049  0119C2  C0B5  F0A5         	movff	pow@x,log@x
  8050  0119C6  C0B6  F0A6         	movff	pow@x+1,log@x+1
  8051  0119CA  C0B7  F0A7         	movff	pow@x+2,log@x+2
  8052  0119CE  EC6E  F08F         	call	_log	;wreg free
  8053  0119D2  C0A5  F0BB         	movff	?_log,_pow$2671
  8054  0119D6  C0A6  F0BC         	movff	?_log+1,_pow$2671+1
  8055  0119DA  C0A7  F0BD         	movff	?_log+2,_pow$2671+2
  8056  0119DE  C0BB  F074         	movff	_pow$2671,___ftmul@f1
  8057  0119E2  C0BC  F075         	movff	_pow$2671+1,___ftmul@f1+1
  8058  0119E6  C0BD  F076         	movff	_pow$2671+2,___ftmul@f1+2
  8059  0119EA  C0B8  F077         	movff	pow@y,___ftmul@f2
  8060  0119EE  C0B9  F078         	movff	pow@y+1,___ftmul@f2+1
  8061  0119F2  C0BA  F079         	movff	pow@y+2,___ftmul@f2+2
  8062  0119F6  ECBF  F08E         	call	___ftmul	;wreg free
  8063  0119FA  C074  F0BE         	movff	?___ftmul,_pow$2672
  8064  0119FE  C075  F0BF         	movff	?___ftmul+1,_pow$2672+1
  8065  011A02  C076  F0C0         	movff	?___ftmul+2,_pow$2672+2
  8066  011A06  C0BE  F0AC         	movff	_pow$2672,exp@x
  8067  011A0A  C0BF  F0AD         	movff	_pow$2672+1,exp@x+1
  8068  011A0E  C0C0  F0AE         	movff	_pow$2672+2,exp@x+2
  8069  011A12  EC35  F08B         	call	_exp	;wreg free
  8070  011A16  C0AC  F0B5         	movff	?_exp,pow@x
  8071  011A1A  C0AD  F0B6         	movff	?_exp+1,pow@x+1
  8072  011A1E  C0AE  F0B7         	movff	?_exp+2,pow@x+2
  8073  011A22  0100               	movlb	0	; () banked
  8074  011A24  51C1               	movf	pow@sign& (0+255),w,b
  8075  011A26  0100               	movlb	0	; () banked
  8076  011A28  B4D8               	btfsc	status,2,c
  8077  011A2A  D00F               	goto	l1075
  8078                           
  8079                           ; BSR set to: 0
  8080  011A2C  C0B5  F060         	movff	pow@x,___ftneg@f1
  8081  011A30  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  8082  011A34  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  8083  011A38  ECEA  F09B         	call	___ftneg	;wreg free
  8084  011A3C  C060  F0B5         	movff	?___ftneg,?_pow
  8085  011A40  C061  F0B6         	movff	?___ftneg+1,?_pow+1
  8086  011A44  C062  F0B7         	movff	?___ftneg+2,?_pow+2
  8087  011A48  0012               	return	
  8088  011A4A                     l1075:
  8089                           
  8090                           ; BSR set to: 0
  8091  011A4A  C0B5  F0B5         	movff	pow@x,?_pow
  8092  011A4E  C0B6  F0B6         	movff	pow@x+1,?_pow+1
  8093  011A52  C0B7  F0B7         	movff	pow@x+2,?_pow+2
  8094  011A56  0012               	return		;funcret
  8095  011A58                     __end_of_pow:
  8096                           	opt stack 0
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           postinc0	equ	0xFEE
  8105                           wreg	equ	0xFE8
  8106                           indf1	equ	0xFE7
  8107                           postdec1	equ	0xFE5
  8108                           fsr1h	equ	0xFE2
  8109                           fsr1l	equ	0xFE1
  8110                           indf2	equ	0xFDF
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _log *****************
  8118 ;; Defined at:
  8119 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\log.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  x               3   69[BANK0 ] unsigned char 
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  exponent        2   72[BANK0 ] int 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  3   69[BANK0 ] int 
  8126 ;; Registers used:
  8127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8133 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8137 ;;Total ram usage:        5 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    7
  8140 ;; This function calls:
  8141 ;;		___awtoft
  8142 ;;		___ftadd
  8143 ;;		___ftmul
  8144 ;;		_eval_poly
  8145 ;;		_frexp
  8146 ;; This function is called by:
  8147 ;;		_pow
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text26
  8152  011EDC                     __ptext26:
  8153                           	opt stack 0
  8154  011EDC                     _log:
  8155                           	opt stack 21
  8156                           
  8157                           ;incstack = 0
  8158  011EDC  0100               	movlb	0	; () banked
  8159  011EDE  AFA7               	btfss	(log@x+2)& (0+255),7,b
  8160  011EE0  D00F               	goto	l3456
  8161                           
  8162                           ; BSR set to: 0
  8163  011EE2  0E00               	movlw	0
  8164  011EE4  0100               	movlb	0	; () banked
  8165  011EE6  6FE9               	movwf	(_errno+1)& (0+255),b
  8166  011EE8  0E21               	movlw	33
  8167  011EEA  6FE8               	movwf	_errno& (0+255),b
  8168  011EEC  0E00               	movlw	0
  8169  011EEE  0100               	movlb	0	; () banked
  8170  011EF0  6FA5               	movwf	?_log& (0+255),b
  8171  011EF2  0E00               	movlw	0
  8172  011EF4  0100               	movlb	0	; () banked
  8173  011EF6  6FA6               	movwf	(?_log+1)& (0+255),b
  8174  011EF8  0E00               	movlw	0
  8175  011EFA  0100               	movlb	0	; () banked
  8176  011EFC  6FA7               	movwf	(?_log+2)& (0+255),b
  8177                           
  8178                           ; BSR set to: 0
  8179  011EFE  0012               	return	
  8180  011F00                     l3456:
  8181                           
  8182                           ; BSR set to: 0
  8183  011F00  0100               	movlb	0	; () banked
  8184  011F02  51A5               	movf	log@x& (0+255),w,b
  8185  011F04  0100               	movlb	0	; () banked
  8186  011F06  11A6               	iorwf	(log@x+1)& (0+255),w,b
  8187  011F08  0100               	movlb	0	; () banked
  8188  011F0A  11A7               	iorwf	(log@x+2)& (0+255),w,b
  8189  011F0C  A4D8               	btfss	status,2,c
  8190  011F0E  D00F               	goto	l3462
  8191                           
  8192                           ; BSR set to: 0
  8193  011F10  0E00               	movlw	0
  8194  011F12  0100               	movlb	0	; () banked
  8195  011F14  6FE9               	movwf	(_errno+1)& (0+255),b
  8196  011F16  0E22               	movlw	34
  8197  011F18  6FE8               	movwf	_errno& (0+255),b
  8198  011F1A  0E00               	movlw	0
  8199  011F1C  0100               	movlb	0	; () banked
  8200  011F1E  6FA5               	movwf	?_log& (0+255),b
  8201  011F20  0E00               	movlw	0
  8202  011F22  0100               	movlb	0	; () banked
  8203  011F24  6FA6               	movwf	(?_log+1)& (0+255),b
  8204  011F26  0E00               	movlw	0
  8205  011F28  0100               	movlb	0	; () banked
  8206  011F2A  6FA7               	movwf	(?_log+2)& (0+255),b
  8207                           
  8208                           ; BSR set to: 0
  8209  011F2C  0012               	return	
  8210  011F2E                     l3462:
  8211                           
  8212                           ; BSR set to: 0
  8213  011F2E  0E00               	movlw	0
  8214  011F30  0100               	movlb	0	; () banked
  8215  011F32  6F77               	movwf	___ftmul@f2& (0+255),b
  8216  011F34  0E00               	movlw	0
  8217  011F36  0100               	movlb	0	; () banked
  8218  011F38  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8219  011F3A  0E40               	movlw	64
  8220  011F3C  0100               	movlb	0	; () banked
  8221  011F3E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8222  011F40  0EA8               	movlw	low log@exponent
  8223  011F42  0100               	movlb	0	; () banked
  8224  011F44  6F63               	movwf	frexp@eptr& (0+255),b
  8225  011F46  0E00               	movlw	high log@exponent
  8226  011F48  0100               	movlb	0	; () banked
  8227  011F4A  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  8228  011F4C  C0A5  F060         	movff	log@x,frexp@value
  8229  011F50  C0A6  F061         	movff	log@x+1,frexp@value+1
  8230  011F54  C0A7  F062         	movff	log@x+2,frexp@value+2
  8231  011F58  EC19  F097         	call	_frexp	;wreg free
  8232  011F5C  C060  F074         	movff	?_frexp,___ftmul@f1
  8233  011F60  C061  F075         	movff	?_frexp+1,___ftmul@f1+1
  8234  011F64  C062  F076         	movff	?_frexp+2,___ftmul@f1+2
  8235  011F68  ECBF  F08E         	call	___ftmul	;wreg free
  8236  011F6C  C074  F08D         	movff	?___ftmul,___ftadd@f1
  8237  011F70  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  8238  011F74  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  8239  011F78  0E00               	movlw	0
  8240  011F7A  0100               	movlb	0	; () banked
  8241  011F7C  6F90               	movwf	___ftadd@f2& (0+255),b
  8242  011F7E  0E80               	movlw	128
  8243  011F80  0100               	movlb	0	; () banked
  8244  011F82  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  8245  011F84  0EBF               	movlw	191
  8246  011F86  0100               	movlb	0	; () banked
  8247  011F88  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  8248  011F8A  EC01  F08A         	call	___ftadd	;wreg free
  8249  011F8E  C08D  F0A5         	movff	?___ftadd,log@x
  8250  011F92  C08E  F0A6         	movff	?___ftadd+1,log@x+1
  8251  011F96  C08F  F0A7         	movff	?___ftadd+2,log@x+2
  8252  011F9A  0100               	movlb	0	; () banked
  8253  011F9C  07A8               	decf	log@exponent& (0+255),f,b
  8254  011F9E  A0D8               	btfss	status,0,c
  8255  011FA0  07A9               	decf	(log@exponent+1)& (0+255),f,b
  8256                           
  8257                           ; BSR set to: 0
  8258  011FA2  C0A5  F099         	movff	log@x,eval_poly@x
  8259  011FA6  C0A6  F09A         	movff	log@x+1,eval_poly@x+1
  8260  011FAA  C0A7  F09B         	movff	log@x+2,eval_poly@x+2
  8261  011FAE  0E33               	movlw	low log@coeff
  8262  011FB0  0100               	movlb	0	; () banked
  8263  011FB2  6F9C               	movwf	eval_poly@d& (0+255),b
  8264  011FB4  0EFF               	movlw	high log@coeff
  8265  011FB6  0100               	movlb	0	; () banked
  8266  011FB8  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  8267  011FBA  0E00               	movlw	0
  8268  011FBC  0100               	movlb	0	; () banked
  8269  011FBE  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  8270  011FC0  0E08               	movlw	8
  8271  011FC2  6F9E               	movwf	eval_poly@n& (0+255),b
  8272  011FC4  ECB0  F094         	call	_eval_poly	;wreg free
  8273  011FC8  C099  F0A5         	movff	?_eval_poly,log@x
  8274  011FCC  C09A  F0A6         	movff	?_eval_poly+1,log@x+1
  8275  011FD0  C09B  F0A7         	movff	?_eval_poly+2,log@x+2
  8276  011FD4  0E72               	movlw	114
  8277  011FD6  0100               	movlb	0	; () banked
  8278  011FD8  6F77               	movwf	___ftmul@f2& (0+255),b
  8279  011FDA  0E31               	movlw	49
  8280  011FDC  0100               	movlb	0	; () banked
  8281  011FDE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8282  011FE0  0E3F               	movlw	63
  8283  011FE2  0100               	movlb	0	; () banked
  8284  011FE4  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8285  011FE6  C0A8  F068         	movff	log@exponent,___awtoft@c
  8286  011FEA  C0A9  F069         	movff	log@exponent+1,___awtoft@c+1
  8287  011FEE  EC8F  F09B         	call	___awtoft	;wreg free
  8288  011FF2  C068  F074         	movff	?___awtoft,___ftmul@f1
  8289  011FF6  C069  F075         	movff	?___awtoft+1,___ftmul@f1+1
  8290  011FFA  C06A  F076         	movff	?___awtoft+2,___ftmul@f1+2
  8291  011FFE  ECBF  F08E         	call	___ftmul	;wreg free
  8292  012002  C074  F08D         	movff	?___ftmul,___ftadd@f1
  8293  012006  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  8294  01200A  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  8295  01200E  C0A5  F090         	movff	log@x,___ftadd@f2
  8296  012012  C0A6  F091         	movff	log@x+1,___ftadd@f2+1
  8297  012016  C0A7  F092         	movff	log@x+2,___ftadd@f2+2
  8298  01201A  EC01  F08A         	call	___ftadd	;wreg free
  8299  01201E  C08D  F0A5         	movff	?___ftadd,?_log
  8300  012022  C08E  F0A6         	movff	?___ftadd+1,?_log+1
  8301  012026  C08F  F0A7         	movff	?___ftadd+2,?_log+2
  8302  01202A  0012               	return	
  8303  01202C                     __end_of_log:
  8304                           	opt stack 0
  8305                           tblptru	equ	0xFF8
  8306                           tblptrh	equ	0xFF7
  8307                           tblptrl	equ	0xFF6
  8308                           tablat	equ	0xFF5
  8309                           prodh	equ	0xFF4
  8310                           prodl	equ	0xFF3
  8311                           intcon	equ	0xFF2
  8312                           postinc0	equ	0xFEE
  8313                           wreg	equ	0xFE8
  8314                           indf1	equ	0xFE7
  8315                           postdec1	equ	0xFE5
  8316                           fsr1h	equ	0xFE2
  8317                           fsr1l	equ	0xFE1
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _exp *****************
  8326 ;; Defined at:
  8327 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\exp.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  x               3   76[BANK0 ] int 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  exponent        2   82[BANK0 ] int 
  8332 ;;  sign            1   84[BANK0 ] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  3   76[BANK0 ] unsigned char 
  8335 ;; Registers used:
  8336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8342 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8343 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8345 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8346 ;;Total ram usage:        9 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    7
  8349 ;; This function calls:
  8350 ;;		___awtoft
  8351 ;;		___ftdiv
  8352 ;;		___ftge
  8353 ;;		___ftmul
  8354 ;;		___ftneg
  8355 ;;		___ftsub
  8356 ;;		___fttol
  8357 ;;		_eval_poly
  8358 ;;		_floor
  8359 ;;		_ldexp
  8360 ;; This function is called by:
  8361 ;;		_pow
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text27
  8366  01166A                     __ptext27:
  8367                           	opt stack 0
  8368  01166A                     _exp:
  8369                           	opt stack 21
  8370                           
  8371                           ;incstack = 0
  8372  01166A  0100               	movlb	0	; () banked
  8373  01166C  51AC               	movf	exp@x& (0+255),w,b
  8374  01166E  0100               	movlb	0	; () banked
  8375  011670  11AD               	iorwf	(exp@x+1)& (0+255),w,b
  8376  011672  0100               	movlb	0	; () banked
  8377  011674  11AE               	iorwf	(exp@x+2)& (0+255),w,b
  8378  011676  A4D8               	btfss	status,2,c
  8379  011678  D00A               	goto	l3478
  8380                           
  8381                           ; BSR set to: 0
  8382  01167A  0E00               	movlw	0
  8383  01167C  0100               	movlb	0	; () banked
  8384  01167E  6FAC               	movwf	?_exp& (0+255),b
  8385  011680  0E80               	movlw	128
  8386  011682  0100               	movlb	0	; () banked
  8387  011684  6FAD               	movwf	(?_exp+1)& (0+255),b
  8388  011686  0E3F               	movlw	63
  8389  011688  0100               	movlb	0	; () banked
  8390  01168A  6FAE               	movwf	(?_exp+2)& (0+255),b
  8391                           
  8392                           ; BSR set to: 0
  8393  01168C  0012               	return	
  8394  01168E                     l3478:
  8395                           
  8396                           ; BSR set to: 0
  8397  01168E  0E72               	movlw	114
  8398  011690  0100               	movlb	0	; () banked
  8399  011692  6F83               	movwf	___ftge@ff1& (0+255),b
  8400  011694  0E31               	movlw	49
  8401  011696  0100               	movlb	0	; () banked
  8402  011698  6F84               	movwf	(___ftge@ff1+1)& (0+255),b
  8403  01169A  0E44               	movlw	68
  8404  01169C  0100               	movlb	0	; () banked
  8405  01169E  6F85               	movwf	(___ftge@ff1+2)& (0+255),b
  8406  0116A0  C0AC  F086         	movff	exp@x,___ftge@ff2
  8407  0116A4  C0AD  F087         	movff	exp@x+1,___ftge@ff2+1
  8408  0116A8  C0AE  F088         	movff	exp@x+2,___ftge@ff2+2
  8409  0116AC  ECF8  F095         	call	___ftge	;wreg free
  8410  0116B0  0100               	movlb	0	; () banked
  8411  0116B2  B0D8               	btfsc	status,0,c
  8412  0116B4  D00F               	goto	l3484
  8413                           
  8414                           ; BSR set to: 0
  8415  0116B6  0E00               	movlw	0
  8416  0116B8  0100               	movlb	0	; () banked
  8417  0116BA  6FE9               	movwf	(_errno+1)& (0+255),b
  8418  0116BC  0E22               	movlw	34
  8419  0116BE  6FE8               	movwf	_errno& (0+255),b
  8420  0116C0  0EFF               	movlw	255
  8421  0116C2  0100               	movlb	0	; () banked
  8422  0116C4  6FAC               	movwf	?_exp& (0+255),b
  8423  0116C6  0E7F               	movlw	127
  8424  0116C8  0100               	movlb	0	; () banked
  8425  0116CA  6FAD               	movwf	(?_exp+1)& (0+255),b
  8426  0116CC  0E7F               	movlw	127
  8427  0116CE  0100               	movlb	0	; () banked
  8428  0116D0  6FAE               	movwf	(?_exp+2)& (0+255),b
  8429                           
  8430                           ; BSR set to: 0
  8431  0116D2  0012               	return	
  8432  0116D4                     l3484:
  8433                           
  8434                           ; BSR set to: 0
  8435  0116D4  C0AC  F083         	movff	exp@x,___ftge@ff1
  8436  0116D8  C0AD  F084         	movff	exp@x+1,___ftge@ff1+1
  8437  0116DC  C0AE  F085         	movff	exp@x+2,___ftge@ff1+2
  8438  0116E0  0E49               	movlw	73
  8439  0116E2  0100               	movlb	0	; () banked
  8440  0116E4  6F86               	movwf	___ftge@ff2& (0+255),b
  8441  0116E6  0E3A               	movlw	58
  8442  0116E8  0100               	movlb	0	; () banked
  8443  0116EA  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  8444  0116EC  0EC4               	movlw	196
  8445  0116EE  0100               	movlb	0	; () banked
  8446  0116F0  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  8447  0116F2  ECF8  F095         	call	___ftge	;wreg free
  8448  0116F6  0100               	movlb	0	; () banked
  8449  0116F8  B0D8               	btfsc	status,0,c
  8450  0116FA  D00F               	goto	l3490
  8451                           
  8452                           ; BSR set to: 0
  8453  0116FC  0E00               	movlw	0
  8454  0116FE  0100               	movlb	0	; () banked
  8455  011700  6FE9               	movwf	(_errno+1)& (0+255),b
  8456  011702  0E22               	movlw	34
  8457  011704  6FE8               	movwf	_errno& (0+255),b
  8458  011706  0E00               	movlw	0
  8459  011708  0100               	movlb	0	; () banked
  8460  01170A  6FAC               	movwf	?_exp& (0+255),b
  8461  01170C  0E00               	movlw	0
  8462  01170E  0100               	movlb	0	; () banked
  8463  011710  6FAD               	movwf	(?_exp+1)& (0+255),b
  8464  011712  0E00               	movlw	0
  8465  011714  0100               	movlb	0	; () banked
  8466  011716  6FAE               	movwf	(?_exp+2)& (0+255),b
  8467                           
  8468                           ; BSR set to: 0
  8469  011718  0012               	return	
  8470  01171A                     l3490:
  8471                           
  8472                           ; BSR set to: 0
  8473  01171A  0100               	movlb	0	; () banked
  8474  01171C  AFAE               	btfss	(exp@x+2)& (0+255),7,b
  8475  01171E  D002               	goto	u3000
  8476  011720  0E01               	movlw	1
  8477  011722  D001               	goto	u3010
  8478  011724                     u3000:
  8479  011724  0E00               	movlw	0
  8480  011726                     u3010:
  8481  011726  0100               	movlb	0	; () banked
  8482  011728  6FB4               	movwf	exp@sign& (0+255),b
  8483                           
  8484                           ; BSR set to: 0
  8485  01172A  0100               	movlb	0	; () banked
  8486  01172C  51B4               	movf	exp@sign& (0+255),w,b
  8487  01172E  0100               	movlb	0	; () banked
  8488  011730  B4D8               	btfsc	status,2,c
  8489  011732  D00E               	goto	l1237
  8490                           
  8491                           ; BSR set to: 0
  8492  011734  C0AC  F060         	movff	exp@x,___ftneg@f1
  8493  011738  C0AD  F061         	movff	exp@x+1,___ftneg@f1+1
  8494  01173C  C0AE  F062         	movff	exp@x+2,___ftneg@f1+2
  8495  011740  ECEA  F09B         	call	___ftneg	;wreg free
  8496  011744  C060  F0AC         	movff	?___ftneg,exp@x
  8497  011748  C061  F0AD         	movff	?___ftneg+1,exp@x+1
  8498  01174C  C062  F0AE         	movff	?___ftneg+2,exp@x+2
  8499  011750                     l1237:
  8500  011750  C0AC  F074         	movff	exp@x,___ftmul@f1
  8501  011754  C0AD  F075         	movff	exp@x+1,___ftmul@f1+1
  8502  011758  C0AE  F076         	movff	exp@x+2,___ftmul@f1+2
  8503  01175C  0EAA               	movlw	170
  8504  01175E  0100               	movlb	0	; () banked
  8505  011760  6F77               	movwf	___ftmul@f2& (0+255),b
  8506  011762  0EB8               	movlw	184
  8507  011764  0100               	movlb	0	; () banked
  8508  011766  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  8509  011768  0E3F               	movlw	63
  8510  01176A  0100               	movlb	0	; () banked
  8511  01176C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  8512  01176E  ECBF  F08E         	call	___ftmul	;wreg free
  8513  011772  C074  F0AC         	movff	?___ftmul,exp@x
  8514  011776  C075  F0AD         	movff	?___ftmul+1,exp@x+1
  8515  01177A  C076  F0AE         	movff	?___ftmul+2,exp@x+2
  8516  01177E  C0AC  F0A3         	movff	exp@x,floor@x
  8517  011782  C0AD  F0A4         	movff	exp@x+1,floor@x+1
  8518  011786  C0AE  F0A5         	movff	exp@x+2,floor@x+2
  8519  01178A  EC31  F094         	call	_floor	;wreg free
  8520  01178E  C0A3  F0AF         	movff	?_floor,_exp$2673
  8521  011792  C0A4  F0B0         	movff	?_floor+1,_exp$2673+1
  8522  011796  C0A5  F0B1         	movff	?_floor+2,_exp$2673+2
  8523  01179A  C0AF  F08A         	movff	_exp$2673,___fttol@f1
  8524  01179E  C0B0  F08B         	movff	_exp$2673+1,___fttol@f1+1
  8525  0117A2  C0B1  F08C         	movff	_exp$2673+2,___fttol@f1+2
  8526  0117A6  EC63  F091         	call	___fttol	;wreg free
  8527  0117AA  C08A  F0B2         	movff	?___fttol,exp@exponent
  8528  0117AE  C08B  F0B3         	movff	?___fttol+1,exp@exponent+1
  8529  0117B2  C0AC  F099         	movff	exp@x,___ftsub@f1
  8530  0117B6  C0AD  F09A         	movff	exp@x+1,___ftsub@f1+1
  8531  0117BA  C0AE  F09B         	movff	exp@x+2,___ftsub@f1+2
  8532  0117BE  C0B2  F068         	movff	exp@exponent,___awtoft@c
  8533  0117C2  C0B3  F069         	movff	exp@exponent+1,___awtoft@c+1
  8534  0117C6  EC8F  F09B         	call	___awtoft	;wreg free
  8535  0117CA  C068  F09C         	movff	?___awtoft,___ftsub@f2
  8536  0117CE  C069  F09D         	movff	?___awtoft+1,___ftsub@f2+1
  8537  0117D2  C06A  F09E         	movff	?___awtoft+2,___ftsub@f2+2
  8538  0117D6  EC47  F09B         	call	___ftsub	;wreg free
  8539  0117DA  C099  F0AC         	movff	?___ftsub,exp@x
  8540  0117DE  C09A  F0AD         	movff	?___ftsub+1,exp@x+1
  8541  0117E2  C09B  F0AE         	movff	?___ftsub+2,exp@x+2
  8542  0117E6  C0AC  F099         	movff	exp@x,eval_poly@x
  8543  0117EA  C0AD  F09A         	movff	exp@x+1,eval_poly@x+1
  8544  0117EE  C0AE  F09B         	movff	exp@x+2,eval_poly@x+2
  8545  0117F2  0E15               	movlw	low exp@coeff
  8546  0117F4  0100               	movlb	0	; () banked
  8547  0117F6  6F9C               	movwf	eval_poly@d& (0+255),b
  8548  0117F8  0EFF               	movlw	high exp@coeff
  8549  0117FA  0100               	movlb	0	; () banked
  8550  0117FC  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  8551  0117FE  0E00               	movlw	0
  8552  011800  0100               	movlb	0	; () banked
  8553  011802  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  8554  011804  0E09               	movlw	9
  8555  011806  6F9E               	movwf	eval_poly@n& (0+255),b
  8556  011808  ECB0  F094         	call	_eval_poly	;wreg free
  8557  01180C  C099  F0A5         	movff	?_eval_poly,ldexp@value
  8558  011810  C09A  F0A6         	movff	?_eval_poly+1,ldexp@value+1
  8559  011814  C09B  F0A7         	movff	?_eval_poly+2,ldexp@value+2
  8560  011818  C0B2  F0A8         	movff	exp@exponent,ldexp@newexp
  8561  01181C  C0B3  F0A9         	movff	exp@exponent+1,ldexp@newexp+1
  8562  011820  EC98  F092         	call	_ldexp	;wreg free
  8563  011824  C0A5  F0AC         	movff	?_ldexp,exp@x
  8564  011828  C0A6  F0AD         	movff	?_ldexp+1,exp@x+1
  8565  01182C  C0A7  F0AE         	movff	?_ldexp+2,exp@x+2
  8566  011830  0100               	movlb	0	; () banked
  8567  011832  51B4               	movf	exp@sign& (0+255),w,b
  8568  011834  0100               	movlb	0	; () banked
  8569  011836  B4D8               	btfsc	status,2,c
  8570  011838  D02E               	goto	l1238
  8571                           
  8572                           ; BSR set to: 0
  8573  01183A  0100               	movlb	0	; () banked
  8574  01183C  29AC               	incf	exp@x& (0+255),w,b
  8575  01183E  E113               	bnz	l3512
  8576  011840  0E7F               	movlw	127
  8577  011842  0100               	movlb	0	; () banked
  8578  011844  19AD               	xorwf	(exp@x+1)& (0+255),w,b
  8579  011846  E10F               	bnz	l3512
  8580  011848  0E7F               	movlw	127
  8581  01184A  0100               	movlb	0	; () banked
  8582  01184C  19AE               	xorwf	(exp@x+2)& (0+255),w,b
  8583  01184E  A4D8               	btfss	status,2,c
  8584  011850  D00A               	goto	l3512
  8585                           
  8586                           ; BSR set to: 0
  8587  011852  0E00               	movlw	0
  8588  011854  0100               	movlb	0	; () banked
  8589  011856  6FAC               	movwf	?_exp& (0+255),b
  8590  011858  0E00               	movlw	0
  8591  01185A  0100               	movlb	0	; () banked
  8592  01185C  6FAD               	movwf	(?_exp+1)& (0+255),b
  8593  01185E  0E00               	movlw	0
  8594  011860  0100               	movlb	0	; () banked
  8595  011862  6FAE               	movwf	(?_exp+2)& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598  011864  0012               	return	
  8599  011866                     l3512:
  8600                           
  8601                           ; BSR set to: 0
  8602  011866  0E00               	movlw	0
  8603  011868  0100               	movlb	0	; () banked
  8604  01186A  6F99               	movwf	___ftdiv@f1& (0+255),b
  8605  01186C  0E80               	movlw	128
  8606  01186E  0100               	movlb	0	; () banked
  8607  011870  6F9A               	movwf	(___ftdiv@f1+1)& (0+255),b
  8608  011872  0E3F               	movlw	63
  8609  011874  0100               	movlb	0	; () banked
  8610  011876  6F9B               	movwf	(___ftdiv@f1+2)& (0+255),b
  8611  011878  C0AC  F09C         	movff	exp@x,___ftdiv@f2
  8612  01187C  C0AD  F09D         	movff	exp@x+1,___ftdiv@f2+1
  8613  011880  C0AE  F09E         	movff	exp@x+2,___ftdiv@f2+2
  8614  011884  ECBD  F090         	call	___ftdiv	;wreg free
  8615  011888  C099  F0AC         	movff	?___ftdiv,?_exp
  8616  01188C  C09A  F0AD         	movff	?___ftdiv+1,?_exp+1
  8617  011890  C09B  F0AE         	movff	?___ftdiv+2,?_exp+2
  8618  011894  0012               	return	
  8619  011896                     l1238:
  8620                           
  8621                           ; BSR set to: 0
  8622  011896  C0AC  F0AC         	movff	exp@x,?_exp
  8623  01189A  C0AD  F0AD         	movff	exp@x+1,?_exp+1
  8624  01189E  C0AE  F0AE         	movff	exp@x+2,?_exp+2
  8625  0118A2  0012               	return		;funcret
  8626  0118A4                     __end_of_exp:
  8627                           	opt stack 0
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           intcon	equ	0xFF2
  8635                           postinc0	equ	0xFEE
  8636                           wreg	equ	0xFE8
  8637                           indf1	equ	0xFE7
  8638                           postdec1	equ	0xFE5
  8639                           fsr1h	equ	0xFE2
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           postdec2	equ	0xFDD
  8644                           fsr2h	equ	0xFDA
  8645                           fsr2l	equ	0xFD9
  8646                           status	equ	0xFD8
  8647                           
  8648 ;; *************** function _ldexp *****************
  8649 ;; Defined at:
  8650 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  value           3   69[BANK0 ] unsigned char 
  8653 ;;  newexp          2   72[BANK0 ] int 
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;		None
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  3   69[BANK0 ] int 
  8658 ;; Registers used:
  8659 ;;		wreg, status,2, status,0
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8665 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8667 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8668 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8669 ;;Total ram usage:        7 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    4
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_exp
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text28
  8680  012530                     __ptext28:
  8681                           	opt stack 0
  8682  012530                     _ldexp:
  8683                           	opt stack 23
  8684                           
  8685                           ;incstack = 0
  8686  012530  0100               	movlb	0	; () banked
  8687  012532  51A5               	movf	ldexp@value& (0+255),w,b
  8688  012534  0100               	movlb	0	; () banked
  8689  012536  11A6               	iorwf	(ldexp@value+1)& (0+255),w,b
  8690  012538  0100               	movlb	0	; () banked
  8691  01253A  11A7               	iorwf	(ldexp@value+2)& (0+255),w,b
  8692  01253C  A4D8               	btfss	status,2,c
  8693  01253E  D00A               	goto	l3330
  8694                           
  8695                           ; BSR set to: 0
  8696  012540  0E00               	movlw	0
  8697  012542  0100               	movlb	0	; () banked
  8698  012544  6FA5               	movwf	?_ldexp& (0+255),b
  8699  012546  0E00               	movlw	0
  8700  012548  0100               	movlb	0	; () banked
  8701  01254A  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8702  01254C  0E00               	movlw	0
  8703  01254E  0100               	movlb	0	; () banked
  8704  012550  6FA7               	movwf	(?_ldexp+2)& (0+255),b
  8705                           
  8706                           ; BSR set to: 0
  8707  012552  0012               	return	
  8708  012554                     l3330:
  8709                           
  8710                           ; BSR set to: 0
  8711  012554  0100               	movlb	0	; () banked
  8712  012556  51A7               	movf	(ldexp@value+2)& (0+255),w,b
  8713  012558  0B7F               	andlw	127
  8714  01255A  0100               	movlb	0	; () banked
  8715  01255C  6FAA               	movwf	??_ldexp& (0+255),b
  8716  01255E  6BAB               	clrf	(??_ldexp+1)& (0+255),b
  8717  012560  90D8               	bcf	status,0,c
  8718  012562  0100               	movlb	0	; () banked
  8719  012564  37AA               	rlcf	??_ldexp& (0+255),f,b
  8720  012566  37AB               	rlcf	(??_ldexp+1)& (0+255),f,b
  8721  012568  0100               	movlb	0	; () banked
  8722  01256A  51AA               	movf	??_ldexp& (0+255),w,b
  8723  01256C  0100               	movlb	0	; () banked
  8724  01256E  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8725  012570  0100               	movlb	0	; () banked
  8726  012572  51AB               	movf	(??_ldexp+1)& (0+255),w,b
  8727  012574  0100               	movlb	0	; () banked
  8728  012576  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8729  012578  0100               	movlb	0	; () banked
  8730  01257A  AFA6               	btfss	(ldexp@value+1)& (0+255),7,b
  8731  01257C  D004               	goto	u2780
  8732  01257E  0100               	movlb	0	; () banked
  8733  012580  6BAA               	clrf	??_ldexp& (0+255),b
  8734  012582  2BAA               	incf	??_ldexp& (0+255),f,b
  8735  012584  D002               	goto	u2788
  8736  012586                     u2780:
  8737  012586  0100               	movlb	0	; () banked
  8738  012588  6BAA               	clrf	??_ldexp& (0+255),b
  8739  01258A                     u2788:
  8740  01258A  0100               	movlb	0	; () banked
  8741  01258C  51AA               	movf	??_ldexp& (0+255),w,b
  8742  01258E  0100               	movlb	0	; () banked
  8743  012590  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8744  012592  0E00               	movlw	0
  8745  012594  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8746  012596  0100               	movlb	0	; () banked
  8747  012598  AFA9               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8748  01259A  D00F               	goto	l3338
  8749                           
  8750                           ; BSR set to: 0
  8751  01259C  0E00               	movlw	0
  8752  01259E  0100               	movlb	0	; () banked
  8753  0125A0  6FE9               	movwf	(_errno+1)& (0+255),b
  8754  0125A2  0E22               	movlw	34
  8755  0125A4  6FE8               	movwf	_errno& (0+255),b
  8756  0125A6  0E00               	movlw	0
  8757  0125A8  0100               	movlb	0	; () banked
  8758  0125AA  6FA5               	movwf	?_ldexp& (0+255),b
  8759  0125AC  0E00               	movlw	0
  8760  0125AE  0100               	movlb	0	; () banked
  8761  0125B0  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8762  0125B2  0E00               	movlw	0
  8763  0125B4                     L7:
  8764  0125B4  0100               	movlb	0	; () banked
  8765  0125B6  6FA7               	movwf	(?_ldexp+2)& (0+255),b
  8766                           
  8767                           ; BSR set to: 0
  8768  0125B8  0012               	return	
  8769  0125BA                     l3338:
  8770                           
  8771                           ; BSR set to: 0
  8772  0125BA  0100               	movlb	0	; () banked
  8773  0125BC  BFA9               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  8774  0125BE  D01C               	goto	l3354
  8775  0125C0  0100               	movlb	0	; () banked
  8776  0125C2  05A9               	decf	(ldexp@newexp+1)& (0+255),w,b
  8777  0125C4  A0D8               	btfss	status,0,c
  8778  0125C6  D018               	goto	l3354
  8779                           
  8780                           ; BSR set to: 0
  8781  0125C8  0E00               	movlw	0
  8782  0125CA  0100               	movlb	0	; () banked
  8783  0125CC  6FE9               	movwf	(_errno+1)& (0+255),b
  8784  0125CE  0E22               	movlw	34
  8785  0125D0  6FE8               	movwf	_errno& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788  0125D2  0100               	movlb	0	; () banked
  8789  0125D4  AFA7               	btfss	(ldexp@value+2)& (0+255),7,b
  8790  0125D6  D008               	goto	l3350
  8791                           
  8792                           ; BSR set to: 0
  8793  0125D8  0EFF               	movlw	255
  8794  0125DA  0100               	movlb	0	; () banked
  8795  0125DC  6FA5               	movwf	?_ldexp& (0+255),b
  8796  0125DE  0E7F               	movlw	127
  8797  0125E0  0100               	movlb	0	; () banked
  8798  0125E2  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8799  0125E4  0EFF               	movlw	255
  8800  0125E6  D7E6               	goto	L7
  8801  0125E8                     l3350:
  8802                           
  8803                           ; BSR set to: 0
  8804  0125E8  0EFF               	movlw	255
  8805  0125EA  0100               	movlb	0	; () banked
  8806  0125EC  6FA5               	movwf	?_ldexp& (0+255),b
  8807  0125EE  0E7F               	movlw	127
  8808  0125F0  0100               	movlb	0	; () banked
  8809  0125F2  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8810  0125F4  0E7F               	movlw	127
  8811  0125F6  D7DE               	goto	L7
  8812  0125F8                     l3354:
  8813                           
  8814                           ; BSR set to: 0
  8815  0125F8  0100               	movlb	0	; () banked
  8816  0125FA  35A9               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  8817  0125FC  31A9               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  8818  0125FE  0100               	movlb	0	; () banked
  8819  012600  6FAB               	movwf	(??_ldexp+1)& (0+255),b
  8820  012602  0100               	movlb	0	; () banked
  8821  012604  31A8               	rrcf	ldexp@newexp& (0+255),w,b
  8822  012606  0100               	movlb	0	; () banked
  8823  012608  6FAA               	movwf	??_ldexp& (0+255),b
  8824  01260A  0100               	movlb	0	; () banked
  8825  01260C  51A7               	movf	(ldexp@value+2)& (0+255),w,b
  8826  01260E  0100               	movlb	0	; () banked
  8827  012610  19AA               	xorwf	??_ldexp& (0+255),w,b
  8828  012612  0B80               	andlw	-128
  8829  012614  19AA               	xorwf	??_ldexp& (0+255),w,b
  8830  012616  0100               	movlb	0	; () banked
  8831  012618  6FA7               	movwf	(ldexp@value+2)& (0+255),b
  8832  01261A  C0A8  F0AA         	movff	ldexp@newexp,??_ldexp
  8833  01261E  0E01               	movlw	1
  8834  012620  0100               	movlb	0	; () banked
  8835  012622  17AA               	andwf	??_ldexp& (0+255),f,b
  8836  012624  0100               	movlb	0	; () banked
  8837  012626  33AA               	rrcf	??_ldexp& (0+255),f,b
  8838  012628  33AA               	rrcf	??_ldexp& (0+255),f,b
  8839  01262A  0100               	movlb	0	; () banked
  8840  01262C  51A6               	movf	(ldexp@value+1)& (0+255),w,b
  8841  01262E  0100               	movlb	0	; () banked
  8842  012630  19AA               	xorwf	??_ldexp& (0+255),w,b
  8843  012632  0B7F               	andlw	-129
  8844  012634  19AA               	xorwf	??_ldexp& (0+255),w,b
  8845  012636  0100               	movlb	0	; () banked
  8846  012638  6FA6               	movwf	(ldexp@value+1)& (0+255),b
  8847                           
  8848                           ; BSR set to: 0
  8849                           
  8850                           ; BSR set to: 0
  8851                           
  8852                           ; BSR set to: 0
  8853  01263A  C0A5  F0A5         	movff	ldexp@value,?_ldexp
  8854  01263E  C0A6  F0A6         	movff	ldexp@value+1,?_ldexp+1
  8855  012642  C0A7  F0A7         	movff	ldexp@value+2,?_ldexp+2
  8856  012646  0012               	return	
  8857  012648                     __end_of_ldexp:
  8858                           	opt stack 0
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodh	equ	0xFF4
  8864                           prodl	equ	0xFF3
  8865                           intcon	equ	0xFF2
  8866                           postinc0	equ	0xFEE
  8867                           wreg	equ	0xFE8
  8868                           indf1	equ	0xFE7
  8869                           postdec1	equ	0xFE5
  8870                           fsr1h	equ	0xFE2
  8871                           fsr1l	equ	0xFE1
  8872                           indf2	equ	0xFDF
  8873                           postinc2	equ	0xFDE
  8874                           postdec2	equ	0xFDD
  8875                           fsr2h	equ	0xFDA
  8876                           fsr2l	equ	0xFD9
  8877                           status	equ	0xFD8
  8878                           
  8879 ;; *************** function _floor *****************
  8880 ;; Defined at:
  8881 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\floor.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  x               3   67[BANK0 ] int 
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  i               3   70[BANK0 ] int 
  8886 ;;  expon           2   73[BANK0 ] int 
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  3   67[BANK0 ] int 
  8889 ;; Registers used:
  8890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8896 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8897 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8899 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8900 ;;Total ram usage:        8 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    6
  8903 ;; This function calls:
  8904 ;;		___altoft
  8905 ;;		___ftadd
  8906 ;;		___ftge
  8907 ;;		___fttol
  8908 ;;		_frexp
  8909 ;; This function is called by:
  8910 ;;		_exp
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text29
  8915  012862                     __ptext29:
  8916                           	opt stack 0
  8917  012862                     _floor:
  8918                           	opt stack 21
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;incstack = 0
  8922  012862  C0A3  F060         	movff	floor@x,frexp@value
  8923  012866  C0A4  F061         	movff	floor@x+1,frexp@value+1
  8924  01286A  C0A5  F062         	movff	floor@x+2,frexp@value+2
  8925  01286E  0EA9               	movlw	low floor@expon
  8926  012870  0100               	movlb	0	; () banked
  8927  012872  6F63               	movwf	frexp@eptr& (0+255),b
  8928  012874  0E00               	movlw	high floor@expon
  8929  012876  0100               	movlb	0	; () banked
  8930  012878  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  8931  01287A  EC19  F097         	call	_frexp	;wreg free
  8932  01287E  0100               	movlb	0	; () banked
  8933  012880  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
  8934  012882  D017               	goto	l3308
  8935                           
  8936                           ; BSR set to: 0
  8937  012884  0100               	movlb	0	; () banked
  8938  012886  AFA5               	btfss	(floor@x+2)& (0+255),7,b
  8939  012888  D00A               	goto	l3304
  8940                           
  8941                           ; BSR set to: 0
  8942  01288A  0E00               	movlw	0
  8943  01288C  0100               	movlb	0	; () banked
  8944  01288E  6FA3               	movwf	?_floor& (0+255),b
  8945  012890  0E80               	movlw	128
  8946  012892  0100               	movlb	0	; () banked
  8947  012894  6FA4               	movwf	(?_floor+1)& (0+255),b
  8948  012896  0EBF               	movlw	191
  8949  012898  0100               	movlb	0	; () banked
  8950  01289A  6FA5               	movwf	(?_floor+2)& (0+255),b
  8951                           
  8952                           ; BSR set to: 0
  8953  01289C  0012               	return	
  8954  01289E                     l3304:
  8955                           
  8956                           ; BSR set to: 0
  8957  01289E  0E00               	movlw	0
  8958  0128A0  0100               	movlb	0	; () banked
  8959  0128A2  6FA3               	movwf	?_floor& (0+255),b
  8960  0128A4  0E00               	movlw	0
  8961  0128A6  0100               	movlb	0	; () banked
  8962  0128A8  6FA4               	movwf	(?_floor+1)& (0+255),b
  8963  0128AA  0E00               	movlw	0
  8964  0128AC  0100               	movlb	0	; () banked
  8965  0128AE  6FA5               	movwf	(?_floor+2)& (0+255),b
  8966                           
  8967                           ; BSR set to: 0
  8968  0128B0  0012               	return	
  8969  0128B2                     l3308:
  8970                           
  8971                           ; BSR set to: 0
  8972  0128B2  0100               	movlb	0	; () banked
  8973  0128B4  51AA               	movf	(floor@expon+1)& (0+255),w,b
  8974  0128B6  E105               	bnz	u2740
  8975  0128B8  0E15               	movlw	21
  8976  0128BA  0100               	movlb	0	; () banked
  8977  0128BC  5DA9               	subwf	floor@expon& (0+255),w,b
  8978  0128BE  A0D8               	btfss	status,0,c
  8979  0128C0  D007               	goto	l3312
  8980  0128C2                     u2740:
  8981                           
  8982                           ; BSR set to: 0
  8983  0128C2  C0A3  F0A3         	movff	floor@x,?_floor
  8984  0128C6  C0A4  F0A4         	movff	floor@x+1,?_floor+1
  8985  0128CA  C0A5  F0A5         	movff	floor@x+2,?_floor+2
  8986  0128CE  0012               	return	
  8987  0128D0                     l3312:
  8988                           
  8989                           ; BSR set to: 0
  8990  0128D0  C0A3  F08A         	movff	floor@x,___fttol@f1
  8991  0128D4  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
  8992  0128D8  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
  8993  0128DC  EC63  F091         	call	___fttol	;wreg free
  8994  0128E0  C08A  F099         	movff	?___fttol,___altoft@c
  8995  0128E4  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
  8996  0128E8  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
  8997  0128EC  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
  8998  0128F0  EC67  F098         	call	___altoft	;wreg free
  8999  0128F4  C099  F0A6         	movff	?___altoft,floor@i
  9000  0128F8  C09A  F0A7         	movff	?___altoft+1,floor@i+1
  9001  0128FC  C09B  F0A8         	movff	?___altoft+2,floor@i+2
  9002  012900  C0A3  F083         	movff	floor@x,___ftge@ff1
  9003  012904  C0A4  F084         	movff	floor@x+1,___ftge@ff1+1
  9004  012908  C0A5  F085         	movff	floor@x+2,___ftge@ff1+2
  9005  01290C  C0A6  F086         	movff	floor@i,___ftge@ff2
  9006  012910  C0A7  F087         	movff	floor@i+1,___ftge@ff2+1
  9007  012914  C0A8  F088         	movff	floor@i+2,___ftge@ff2+2
  9008  012918  ECF8  F095         	call	___ftge	;wreg free
  9009  01291C  0100               	movlb	0	; () banked
  9010  01291E  B0D8               	btfsc	status,0,c
  9011  012920  D018               	goto	l1248
  9012                           
  9013                           ; BSR set to: 0
  9014  012922  C0A6  F08D         	movff	floor@i,___ftadd@f1
  9015  012926  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
  9016  01292A  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
  9017  01292E  0E00               	movlw	0
  9018  012930  0100               	movlb	0	; () banked
  9019  012932  6F90               	movwf	___ftadd@f2& (0+255),b
  9020  012934  0E80               	movlw	128
  9021  012936  0100               	movlb	0	; () banked
  9022  012938  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  9023  01293A  0EBF               	movlw	191
  9024  01293C  0100               	movlb	0	; () banked
  9025  01293E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  9026  012940  EC01  F08A         	call	___ftadd	;wreg free
  9027  012944  C08D  F0A3         	movff	?___ftadd,?_floor
  9028  012948  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
  9029  01294C  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
  9030  012950  0012               	return	
  9031  012952                     l1248:
  9032                           
  9033                           ; BSR set to: 0
  9034  012952  C0A6  F0A3         	movff	floor@i,?_floor
  9035  012956  C0A7  F0A4         	movff	floor@i+1,?_floor+1
  9036  01295A  C0A8  F0A5         	movff	floor@i+2,?_floor+2
  9037  01295E  0012               	return		;funcret
  9038  012960                     __end_of_floor:
  9039                           	opt stack 0
  9040                           tblptru	equ	0xFF8
  9041                           tblptrh	equ	0xFF7
  9042                           tblptrl	equ	0xFF6
  9043                           tablat	equ	0xFF5
  9044                           prodh	equ	0xFF4
  9045                           prodl	equ	0xFF3
  9046                           intcon	equ	0xFF2
  9047                           postinc0	equ	0xFEE
  9048                           wreg	equ	0xFE8
  9049                           indf1	equ	0xFE7
  9050                           postdec1	equ	0xFE5
  9051                           fsr1h	equ	0xFE2
  9052                           fsr1l	equ	0xFE1
  9053                           indf2	equ	0xFDF
  9054                           postinc2	equ	0xFDE
  9055                           postdec2	equ	0xFDD
  9056                           fsr2h	equ	0xFDA
  9057                           fsr2l	equ	0xFD9
  9058                           status	equ	0xFD8
  9059                           
  9060 ;; *************** function _frexp *****************
  9061 ;; Defined at:
  9062 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  value           3    0[BANK0 ] int 
  9065 ;;  eptr            2    3[BANK0 ] PTR int 
  9066 ;;		 -> log@exponent(2), floor@expon(2), 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  3    0[BANK0 ] PTR int 
  9071 ;; Registers used:
  9072 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9078 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9081 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9082 ;;Total ram usage:        7 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    4
  9085 ;; This function calls:
  9086 ;;		Nothing
  9087 ;; This function is called by:
  9088 ;;		_floor
  9089 ;;		_log
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text30
  9094  012E32                     __ptext30:
  9095                           	opt stack 0
  9096  012E32                     _frexp:
  9097                           	opt stack 23
  9098                           
  9099                           ;incstack = 0
  9100  012E32  0100               	movlb	0	; () banked
  9101  012E34  5160               	movf	frexp@value& (0+255),w,b
  9102  012E36  0100               	movlb	0	; () banked
  9103  012E38  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  9104  012E3A  0100               	movlb	0	; () banked
  9105  012E3C  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  9106  012E3E  A4D8               	btfss	status,2,c
  9107  012E40  D012               	goto	l3212
  9108                           
  9109                           ; BSR set to: 0
  9110  012E42  C063  FFD9         	movff	frexp@eptr,fsr2l
  9111  012E46  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  9112  012E4A  0E00               	movlw	0
  9113  012E4C  6EDE               	movwf	postinc2,c
  9114  012E4E  0E00               	movlw	0
  9115  012E50  6EDD               	movwf	postdec2,c
  9116                           
  9117                           ; BSR set to: 0
  9118  012E52  0E00               	movlw	0
  9119  012E54  0100               	movlb	0	; () banked
  9120  012E56  6F60               	movwf	?_frexp& (0+255),b
  9121  012E58  0E00               	movlw	0
  9122  012E5A  0100               	movlb	0	; () banked
  9123  012E5C  6F61               	movwf	(?_frexp+1)& (0+255),b
  9124  012E5E  0E00               	movlw	0
  9125  012E60  0100               	movlb	0	; () banked
  9126  012E62  6F62               	movwf	(?_frexp+2)& (0+255),b
  9127                           
  9128                           ; BSR set to: 0
  9129  012E64  0012               	return	
  9130  012E66                     l3212:
  9131                           
  9132                           ; BSR set to: 0
  9133  012E66  0100               	movlb	0	; () banked
  9134  012E68  5162               	movf	(frexp@value+2)& (0+255),w,b
  9135  012E6A  0B7F               	andlw	127
  9136  012E6C  0100               	movlb	0	; () banked
  9137  012E6E  6F65               	movwf	??_frexp& (0+255),b
  9138  012E70  6B66               	clrf	(??_frexp+1)& (0+255),b
  9139  012E72  90D8               	bcf	status,0,c
  9140  012E74  0100               	movlb	0	; () banked
  9141  012E76  3765               	rlcf	??_frexp& (0+255),f,b
  9142  012E78  3766               	rlcf	(??_frexp+1)& (0+255),f,b
  9143  012E7A  C063  FFD9         	movff	frexp@eptr,fsr2l
  9144  012E7E  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  9145  012E82  C065  FFDE         	movff	??_frexp,postinc2
  9146  012E86  C066  FFDD         	movff	??_frexp+1,postdec2
  9147  012E8A  0100               	movlb	0	; () banked
  9148  012E8C  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  9149  012E8E  D004               	goto	u2630
  9150  012E90  0100               	movlb	0	; () banked
  9151  012E92  6B65               	clrf	??_frexp& (0+255),b
  9152  012E94  2B65               	incf	??_frexp& (0+255),f,b
  9153  012E96  D002               	goto	u2638
  9154  012E98                     u2630:
  9155  012E98  0100               	movlb	0	; () banked
  9156  012E9A  6B65               	clrf	??_frexp& (0+255),b
  9157  012E9C                     u2638:
  9158  012E9C  0100               	movlb	0	; () banked
  9159  012E9E  5165               	movf	??_frexp& (0+255),w,b
  9160  012EA0  C063  FFD9         	movff	frexp@eptr,fsr2l
  9161  012EA4  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  9162  012EA8  12DE               	iorwf	postinc2,f,c
  9163  012EAA  0E00               	movlw	0
  9164  012EAC  12DD               	iorwf	postdec2,f,c
  9165                           
  9166                           ; BSR set to: 0
  9167  012EAE  C063  FFD9         	movff	frexp@eptr,fsr2l
  9168  012EB2  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  9169  012EB6  0E82               	movlw	130
  9170  012EB8  26DE               	addwf	postinc2,f,c
  9171  012EBA  0EFF               	movlw	255
  9172  012EBC  22DD               	addwfc	postdec2,f,c
  9173                           
  9174                           ; BSR set to: 0
  9175  012EBE  0100               	movlb	0	; () banked
  9176  012EC0  8162               	bsf	(frexp@value+2)& (0+255),0,b
  9177  012EC2  8362               	bsf	(frexp@value+2)& (0+255),1,b
  9178  012EC4  8562               	bsf	(frexp@value+2)& (0+255),2,b
  9179  012EC6  8762               	bsf	(frexp@value+2)& (0+255),3,b
  9180  012EC8  8962               	bsf	(frexp@value+2)& (0+255),4,b
  9181  012ECA  8B62               	bsf	(frexp@value+2)& (0+255),5,b
  9182  012ECC  9D62               	bcf	(frexp@value+2)& (0+255),6,b
  9183                           
  9184                           ; BSR set to: 0
  9185  012ECE  0100               	movlb	0	; () banked
  9186  012ED0  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  9187                           
  9188                           ; BSR set to: 0
  9189  012ED2  C060  F060         	movff	frexp@value,?_frexp
  9190  012ED6  C061  F061         	movff	frexp@value+1,?_frexp+1
  9191  012EDA  C062  F062         	movff	frexp@value+2,?_frexp+2
  9192  012EDE  0012               	return	
  9193  012EE0                     __end_of_frexp:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           postinc0	equ	0xFEE
  9203                           wreg	equ	0xFE8
  9204                           indf1	equ	0xFE7
  9205                           postdec1	equ	0xFE5
  9206                           fsr1h	equ	0xFE2
  9207                           fsr1l	equ	0xFE1
  9208                           indf2	equ	0xFDF
  9209                           postinc2	equ	0xFDE
  9210                           postdec2	equ	0xFDD
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function ___fttol *****************
  9216 ;; Defined at:
  9217 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;  f1              3   42[BANK0 ] float 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  lval            4   52[BANK0 ] unsigned long 
  9222 ;;  exp1            1   56[BANK0 ] unsigned char 
  9223 ;;  sign1           1   51[BANK0 ] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  4   42[BANK0 ] long 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9233 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9234 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9235 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9236 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9237 ;;Total ram usage:       15 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    4
  9240 ;; This function calls:
  9241 ;;		Nothing
  9242 ;; This function is called by:
  9243 ;;		_sprintf
  9244 ;;		_pow
  9245 ;;		_exp
  9246 ;;		_floor
  9247 ;;		_calculateTemp
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text31
  9252  0122C6                     __ptext31:
  9253                           	opt stack 0
  9254  0122C6                     ___fttol:
  9255                           	opt stack 24
  9256                           
  9257                           ; BSR set to: 0
  9258                           ;incstack = 0
  9259  0122C6  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  9260  0122CA  0100               	movlb	0	; () banked
  9261  0122CC  6B8F               	clrf	(??___fttol+1)& (0+255),b
  9262  0122CE  6B90               	clrf	(??___fttol+2)& (0+255),b
  9263  0122D0  0100               	movlb	0	; () banked
  9264  0122D2  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9265  0122D4  0100               	movlb	0	; () banked
  9266  0122D6  378E               	rlcf	??___fttol& (0+255),f,b
  9267  0122D8  E301               	bnc	u2541
  9268  0122DA  818F               	bsf	(??___fttol+1)& (0+255),0,b
  9269  0122DC                     u2541:
  9270  0122DC  0100               	movlb	0	; () banked
  9271  0122DE  518E               	movf	??___fttol& (0+255),w,b
  9272  0122E0  0100               	movlb	0	; () banked
  9273  0122E2  6F98               	movwf	___fttol@exp1& (0+255),b
  9274  0122E4  0100               	movlb	0	; () banked
  9275  0122E6  5198               	movf	___fttol@exp1& (0+255),w,b
  9276  0122E8  A4D8               	btfss	status,2,c
  9277  0122EA  D00A               	goto	l3164
  9278                           
  9279                           ; BSR set to: 0
  9280  0122EC  0E00               	movlw	0
  9281  0122EE  0100               	movlb	0	; () banked
  9282  0122F0  6F8A               	movwf	?___fttol& (0+255),b
  9283  0122F2  0E00               	movlw	0
  9284  0122F4  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9285  0122F6  0E00               	movlw	0
  9286  0122F8  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9287  0122FA  0E00               	movlw	0
  9288  0122FC  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9289                           
  9290                           ; BSR set to: 0
  9291  0122FE  0012               	return	
  9292  012300                     l3164:
  9293                           
  9294                           ; BSR set to: 0
  9295  012300  0E17               	movlw	23
  9296  012302  0100               	movlb	0	; () banked
  9297  012304  6F8E               	movwf	??___fttol& (0+255),b
  9298  012306  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  9299  01230A  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  9300  01230E  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  9301  012312  0100               	movlb	0	; () banked
  9302  012314  298E               	incf	??___fttol& (0+255),w,b
  9303  012316  0100               	movlb	0	; () banked
  9304  012318  6F92               	movwf	(??___fttol+4)& (0+255),b
  9305  01231A  D005               	goto	u2560
  9306  01231C                     u2565:
  9307  01231C  0100               	movlb	0	; () banked
  9308  01231E  90D8               	bcf	status,0,c
  9309  012320  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  9310  012322  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  9311  012324  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  9312  012326                     u2560:
  9313  012326  0100               	movlb	0	; () banked
  9314  012328  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  9315  01232A  D7F8               	goto	u2565
  9316  01232C  0100               	movlb	0	; () banked
  9317  01232E  518F               	movf	(??___fttol+1)& (0+255),w,b
  9318  012330  0100               	movlb	0	; () banked
  9319  012332  6F93               	movwf	___fttol@sign1& (0+255),b
  9320                           
  9321                           ; BSR set to: 0
  9322  012334  0100               	movlb	0	; () banked
  9323  012336  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  9324                           
  9325                           ; BSR set to: 0
  9326  012338  0EFF               	movlw	255
  9327  01233A  0100               	movlb	0	; () banked
  9328  01233C  178A               	andwf	___fttol@f1& (0+255),f,b
  9329  01233E  0EFF               	movlw	255
  9330  012340  0100               	movlb	0	; () banked
  9331  012342  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  9332  012344  0E00               	movlw	0
  9333  012346  0100               	movlb	0	; () banked
  9334  012348  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  9335                           
  9336                           ; BSR set to: 0
  9337  01234A  0100               	movlb	0	; () banked
  9338  01234C  518A               	movf	___fttol@f1& (0+255),w,b
  9339  01234E  0100               	movlb	0	; () banked
  9340  012350  6F94               	movwf	___fttol@lval& (0+255),b
  9341  012352  0100               	movlb	0	; () banked
  9342  012354  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  9343  012356  0100               	movlb	0	; () banked
  9344  012358  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  9345  01235A  0100               	movlb	0	; () banked
  9346  01235C  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  9347  01235E  0100               	movlb	0	; () banked
  9348  012360  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  9349  012362  0100               	movlb	0	; () banked
  9350  012364  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353  012366  0E8E               	movlw	142
  9354  012368  0100               	movlb	0	; () banked
  9355  01236A  5F98               	subwf	___fttol@exp1& (0+255),f,b
  9356                           
  9357                           ; BSR set to: 0
  9358  01236C  0100               	movlb	0	; () banked
  9359  01236E  AF98               	btfss	___fttol@exp1& (0+255),7,b
  9360  012370  D01A               	goto	l3186
  9361                           
  9362                           ; BSR set to: 0
  9363  012372  0100               	movlb	0	; () banked
  9364  012374  5198               	movf	___fttol@exp1& (0+255),w,b
  9365  012376  0A80               	xorlw	128
  9366  012378  0F8F               	addlw	143
  9367  01237A  B0D8               	btfsc	status,0,c
  9368  01237C  D00A               	goto	l3182
  9369                           
  9370                           ; BSR set to: 0
  9371  01237E  0E00               	movlw	0
  9372  012380  0100               	movlb	0	; () banked
  9373  012382  6F8A               	movwf	?___fttol& (0+255),b
  9374  012384  0E00               	movlw	0
  9375  012386  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9376  012388  0E00               	movlw	0
  9377  01238A  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9378  01238C  0E00               	movlw	0
  9379  01238E  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9380                           
  9381                           ; BSR set to: 0
  9382  012390  0012               	return	
  9383  012392                     l3182:
  9384                           
  9385                           ; BSR set to: 0
  9386  012392  0100               	movlb	0	; () banked
  9387  012394  90D8               	bcf	status,0,c
  9388  012396  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9389  012398  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9390  01239A  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9391  01239C  3394               	rrcf	___fttol@lval& (0+255),f,b
  9392                           
  9393                           ; BSR set to: 0
  9394  01239E  0100               	movlb	0	; () banked
  9395  0123A0  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  9396  0123A2  D7F7               	goto	l3182
  9397                           
  9398                           ; BSR set to: 0
  9399  0123A4  D01B               	goto	l3196
  9400  0123A6                     l3186:
  9401                           
  9402                           ; BSR set to: 0
  9403  0123A6  0E17               	movlw	23
  9404  0123A8  0100               	movlb	0	; () banked
  9405  0123AA  6598               	cpfsgt	___fttol@exp1& (0+255),b
  9406  0123AC  D012               	goto	l3194
  9407                           
  9408                           ; BSR set to: 0
  9409  0123AE  0E00               	movlw	0
  9410  0123B0  0100               	movlb	0	; () banked
  9411  0123B2  6F8A               	movwf	?___fttol& (0+255),b
  9412  0123B4  0E00               	movlw	0
  9413  0123B6  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9414  0123B8  0E00               	movlw	0
  9415  0123BA  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9416  0123BC  0E00               	movlw	0
  9417  0123BE  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9418                           
  9419                           ; BSR set to: 0
  9420  0123C0  0012               	return	
  9421  0123C2                     l3192:
  9422                           
  9423                           ; BSR set to: 0
  9424  0123C2  0100               	movlb	0	; () banked
  9425  0123C4  90D8               	bcf	status,0,c
  9426  0123C6  3794               	rlcf	___fttol@lval& (0+255),f,b
  9427  0123C8  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9428  0123CA  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9429  0123CC  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9430  0123CE  0100               	movlb	0	; () banked
  9431  0123D0  0798               	decf	___fttol@exp1& (0+255),f,b
  9432  0123D2                     l3194:
  9433                           
  9434                           ; BSR set to: 0
  9435  0123D2  0100               	movlb	0	; () banked
  9436  0123D4  5198               	movf	___fttol@exp1& (0+255),w,b
  9437  0123D6  0100               	movlb	0	; () banked
  9438  0123D8  A4D8               	btfss	status,2,c
  9439  0123DA  D7F3               	goto	l3192
  9440  0123DC                     l3196:
  9441                           
  9442                           ; BSR set to: 0
  9443  0123DC  0100               	movlb	0	; () banked
  9444  0123DE  5193               	movf	___fttol@sign1& (0+255),w,b
  9445  0123E0  0100               	movlb	0	; () banked
  9446  0123E2  B4D8               	btfsc	status,2,c
  9447  0123E4  D009               	goto	l3200
  9448                           
  9449                           ; BSR set to: 0
  9450  0123E6  0100               	movlb	0	; () banked
  9451  0123E8  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  9452  0123EA  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  9453  0123EC  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  9454  0123EE  6D94               	negf	___fttol@lval& (0+255),b
  9455  0123F0  0E00               	movlw	0
  9456  0123F2  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9457  0123F4  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9458  0123F6  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9459  0123F8                     l3200:
  9460                           
  9461                           ; BSR set to: 0
  9462  0123F8  C094  F08A         	movff	___fttol@lval,?___fttol
  9463  0123FC  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  9464  012400  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  9465  012404  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  9466  012408  0012               	return	
  9467  01240A                     __end_of___fttol:
  9468                           	opt stack 0
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           postinc0	equ	0xFEE
  9477                           wreg	equ	0xFE8
  9478                           indf1	equ	0xFE7
  9479                           postdec1	equ	0xFE5
  9480                           fsr1h	equ	0xFE2
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           fsr2h	equ	0xFDA
  9486                           fsr2l	equ	0xFD9
  9487                           status	equ	0xFD8
  9488                           
  9489 ;; *************** function ___ftge *****************
  9490 ;; Defined at:
  9491 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;  ff1             3   35[BANK0 ] float 
  9494 ;;  ff2             3   38[BANK0 ] float 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;		None
  9497 ;; Return value:  Size  Location     Type
  9498 ;;		None               void
  9499 ;; Registers used:
  9500 ;;		wreg, status,2, status,0
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9506 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9508 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9509 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9510 ;;Total ram usage:        9 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    4
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_digipot
  9517 ;;		_sprintf
  9518 ;;		_pow
  9519 ;;		_exp
  9520 ;;		_floor
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           	psect	text32
  9525  012BF0                     __ptext32:
  9526                           	opt stack 0
  9527  012BF0                     ___ftge:
  9528                           	opt stack 24
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;incstack = 0
  9532  012BF0  0100               	movlb	0	; () banked
  9533  012BF2  AF85               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9534  012BF4  D01D               	goto	l3144
  9535                           
  9536                           ; BSR set to: 0
  9537  012BF6  C083  F089         	movff	___ftge@ff1,??___ftge
  9538  012BFA  C084  F08A         	movff	___ftge@ff1+1,??___ftge+1
  9539  012BFE  C085  F08B         	movff	___ftge@ff1+2,??___ftge+2
  9540  012C02  0100               	movlb	0	; () banked
  9541  012C04  1F89               	comf	??___ftge& (0+255),f,b
  9542  012C06  1F8A               	comf	(??___ftge+1)& (0+255),f,b
  9543  012C08  1F8B               	comf	(??___ftge+2)& (0+255),f,b
  9544  012C0A  2B89               	incf	??___ftge& (0+255),f,b
  9545  012C0C  0E00               	movlw	0
  9546  012C0E  238A               	addwfc	(??___ftge+1)& (0+255),f,b
  9547  012C10  238B               	addwfc	(??___ftge+2)& (0+255),f,b
  9548  012C12  0E00               	movlw	0
  9549  012C14  0100               	movlb	0	; () banked
  9550  012C16  2589               	addwf	??___ftge& (0+255),w,b
  9551  012C18  0100               	movlb	0	; () banked
  9552  012C1A  6F83               	movwf	___ftge@ff1& (0+255),b
  9553  012C1C  0E00               	movlw	0
  9554  012C1E  0100               	movlb	0	; () banked
  9555  012C20  218A               	addwfc	(??___ftge+1)& (0+255),w,b
  9556  012C22  0100               	movlb	0	; () banked
  9557  012C24  6F84               	movwf	(___ftge@ff1+1)& (0+255),b
  9558  012C26  0E80               	movlw	128
  9559  012C28  0100               	movlb	0	; () banked
  9560  012C2A  218B               	addwfc	(??___ftge+2)& (0+255),w,b
  9561  012C2C  0100               	movlb	0	; () banked
  9562  012C2E  6F85               	movwf	(___ftge@ff1+2)& (0+255),b
  9563  012C30                     l3144:
  9564                           
  9565                           ; BSR set to: 0
  9566  012C30  0100               	movlb	0	; () banked
  9567  012C32  AF88               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9568  012C34  D01D               	goto	l3148
  9569                           
  9570                           ; BSR set to: 0
  9571  012C36  C086  F089         	movff	___ftge@ff2,??___ftge
  9572  012C3A  C087  F08A         	movff	___ftge@ff2+1,??___ftge+1
  9573  012C3E  C088  F08B         	movff	___ftge@ff2+2,??___ftge+2
  9574  012C42  0100               	movlb	0	; () banked
  9575  012C44  1F89               	comf	??___ftge& (0+255),f,b
  9576  012C46  1F8A               	comf	(??___ftge+1)& (0+255),f,b
  9577  012C48  1F8B               	comf	(??___ftge+2)& (0+255),f,b
  9578  012C4A  2B89               	incf	??___ftge& (0+255),f,b
  9579  012C4C  0E00               	movlw	0
  9580  012C4E  238A               	addwfc	(??___ftge+1)& (0+255),f,b
  9581  012C50  238B               	addwfc	(??___ftge+2)& (0+255),f,b
  9582  012C52  0E00               	movlw	0
  9583  012C54  0100               	movlb	0	; () banked
  9584  012C56  2589               	addwf	??___ftge& (0+255),w,b
  9585  012C58  0100               	movlb	0	; () banked
  9586  012C5A  6F86               	movwf	___ftge@ff2& (0+255),b
  9587  012C5C  0E00               	movlw	0
  9588  012C5E  0100               	movlb	0	; () banked
  9589  012C60  218A               	addwfc	(??___ftge+1)& (0+255),w,b
  9590  012C62  0100               	movlb	0	; () banked
  9591  012C64  6F87               	movwf	(___ftge@ff2+1)& (0+255),b
  9592  012C66  0E80               	movlw	128
  9593  012C68  0100               	movlb	0	; () banked
  9594  012C6A  218B               	addwfc	(??___ftge+2)& (0+255),w,b
  9595  012C6C  0100               	movlb	0	; () banked
  9596  012C6E  6F88               	movwf	(___ftge@ff2+2)& (0+255),b
  9597  012C70                     l3148:
  9598                           
  9599                           ; BSR set to: 0
  9600  012C70  0E00               	movlw	0
  9601  012C72  0100               	movlb	0	; () banked
  9602  012C74  1B83               	xorwf	___ftge@ff1& (0+255),f,b
  9603  012C76  0E00               	movlw	0
  9604  012C78  0100               	movlb	0	; () banked
  9605  012C7A  1B84               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9606  012C7C  0E80               	movlw	128
  9607  012C7E  0100               	movlb	0	; () banked
  9608  012C80  1B85               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9609                           
  9610                           ; BSR set to: 0
  9611  012C82  0E00               	movlw	0
  9612  012C84  0100               	movlb	0	; () banked
  9613  012C86  1B86               	xorwf	___ftge@ff2& (0+255),f,b
  9614  012C88  0E00               	movlw	0
  9615  012C8A  0100               	movlb	0	; () banked
  9616  012C8C  1B87               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9617  012C8E  0E80               	movlw	128
  9618  012C90  0100               	movlb	0	; () banked
  9619  012C92  1B88               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9620  012C94  0100               	movlb	0	; () banked
  9621  012C96  5186               	movf	___ftge@ff2& (0+255),w,b
  9622  012C98  0100               	movlb	0	; () banked
  9623  012C9A  5D83               	subwf	___ftge@ff1& (0+255),w,b
  9624  012C9C  0100               	movlb	0	; () banked
  9625  012C9E  5187               	movf	(___ftge@ff2+1)& (0+255),w,b
  9626  012CA0  0100               	movlb	0	; () banked
  9627  012CA2  5984               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9628  012CA4  0100               	movlb	0	; () banked
  9629  012CA6  5188               	movf	(___ftge@ff2+2)& (0+255),w,b
  9630  012CA8  0100               	movlb	0	; () banked
  9631  012CAA  5985               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9632  012CAC  B0D8               	btfsc	status,0,c
  9633  012CAE  D002               	goto	l3154
  9634                           
  9635                           ; BSR set to: 0
  9636  012CB0  90D8               	bcf	status,0,c
  9637  012CB2  0012               	return	
  9638  012CB4                     l3154:
  9639                           
  9640                           ; BSR set to: 0
  9641  012CB4  80D8               	bsf	status,0,c
  9642                           
  9643                           ; BSR set to: 0
  9644  012CB6  0012               	return	
  9645  012CB8                     __end_of___ftge:
  9646                           	opt stack 0
  9647                           tblptru	equ	0xFF8
  9648                           tblptrh	equ	0xFF7
  9649                           tblptrl	equ	0xFF6
  9650                           tablat	equ	0xFF5
  9651                           prodh	equ	0xFF4
  9652                           prodl	equ	0xFF3
  9653                           intcon	equ	0xFF2
  9654                           postinc0	equ	0xFEE
  9655                           wreg	equ	0xFE8
  9656                           indf1	equ	0xFE7
  9657                           postdec1	equ	0xFE5
  9658                           fsr1h	equ	0xFE2
  9659                           fsr1l	equ	0xFE1
  9660                           indf2	equ	0xFDF
  9661                           postinc2	equ	0xFDE
  9662                           postdec2	equ	0xFDD
  9663                           fsr2h	equ	0xFDA
  9664                           fsr2l	equ	0xFD9
  9665                           status	equ	0xFD8
  9666                           
  9667 ;; *************** function ___altoft *****************
  9668 ;; Defined at:
  9669 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  9670 ;; Parameters:    Size  Location     Type
  9671 ;;  c               4   57[BANK0 ] long 
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;  sign            1   66[BANK0 ] unsigned char 
  9674 ;;  exp             1   65[BANK0 ] unsigned char 
  9675 ;; Return value:  Size  Location     Type
  9676 ;;                  3   57[BANK0 ] float 
  9677 ;; Registers used:
  9678 ;;		wreg, status,2, status,0, cstack
  9679 ;; Tracked objects:
  9680 ;;		On entry : 0/0
  9681 ;;		On exit  : 0/0
  9682 ;;		Unchanged: 0/0
  9683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9684 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9686 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9687 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9688 ;;Total ram usage:       10 bytes
  9689 ;; Hardware stack levels used:    1
  9690 ;; Hardware stack levels required when called:    5
  9691 ;; This function calls:
  9692 ;;		___ftpack
  9693 ;; This function is called by:
  9694 ;;		_floor
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text33
  9699  0130CE                     __ptext33:
  9700                           	opt stack 0
  9701  0130CE                     ___altoft:
  9702                           	opt stack 21
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;incstack = 0
  9706  0130CE  0E00               	movlw	0
  9707  0130D0  0100               	movlb	0	; () banked
  9708  0130D2  6FA2               	movwf	___altoft@sign& (0+255),b
  9709  0130D4  0E8E               	movlw	142
  9710  0130D6  0100               	movlb	0	; () banked
  9711  0130D8  6FA1               	movwf	___altoft@exp& (0+255),b
  9712                           
  9713                           ; BSR set to: 0
  9714  0130DA  0100               	movlb	0	; () banked
  9715  0130DC  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
  9716  0130DE  D015               	goto	l3016
  9717                           
  9718                           ; BSR set to: 0
  9719  0130E0  0100               	movlb	0	; () banked
  9720  0130E2  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
  9721  0130E4  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
  9722  0130E6  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
  9723  0130E8  6D99               	negf	___altoft@c& (0+255),b
  9724  0130EA  0E00               	movlw	0
  9725  0130EC  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
  9726  0130EE  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
  9727  0130F0  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
  9728                           
  9729                           ; BSR set to: 0
  9730  0130F2  0E01               	movlw	1
  9731  0130F4  0100               	movlb	0	; () banked
  9732  0130F6  6FA2               	movwf	___altoft@sign& (0+255),b
  9733                           
  9734                           ; BSR set to: 0
  9735  0130F8  D008               	goto	l3016
  9736  0130FA                     l3014:
  9737                           
  9738                           ; BSR set to: 0
  9739  0130FA  0100               	movlb	0	; () banked
  9740  0130FC  90D8               	bcf	status,0,c
  9741  0130FE  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
  9742  013100  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
  9743  013102  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
  9744  013104  3399               	rrcf	___altoft@c& (0+255),f,b
  9745  013106  0100               	movlb	0	; () banked
  9746  013108  2BA1               	incf	___altoft@exp& (0+255),f,b
  9747  01310A                     l3016:
  9748                           
  9749                           ; BSR set to: 0
  9750  01310A  0E00               	movlw	0
  9751  01310C  0100               	movlb	0	; () banked
  9752  01310E  1599               	andwf	___altoft@c& (0+255),w,b
  9753  013110  0100               	movlb	0	; () banked
  9754  013112  6F9D               	movwf	??___altoft& (0+255),b
  9755  013114  0E00               	movlw	0
  9756  013116  0100               	movlb	0	; () banked
  9757  013118  159A               	andwf	(___altoft@c+1)& (0+255),w,b
  9758  01311A  0100               	movlb	0	; () banked
  9759  01311C  6F9E               	movwf	(??___altoft+1)& (0+255),b
  9760  01311E  0E00               	movlw	0
  9761  013120  0100               	movlb	0	; () banked
  9762  013122  159B               	andwf	(___altoft@c+2)& (0+255),w,b
  9763  013124  0100               	movlb	0	; () banked
  9764  013126  6F9F               	movwf	(??___altoft+2)& (0+255),b
  9765  013128  0EFF               	movlw	255
  9766  01312A  0100               	movlb	0	; () banked
  9767  01312C  159C               	andwf	(___altoft@c+3)& (0+255),w,b
  9768  01312E  0100               	movlb	0	; () banked
  9769  013130  6FA0               	movwf	(??___altoft+3)& (0+255),b
  9770  013132  0100               	movlb	0	; () banked
  9771  013134  519D               	movf	??___altoft& (0+255),w,b
  9772  013136  0100               	movlb	0	; () banked
  9773  013138  119E               	iorwf	(??___altoft+1)& (0+255),w,b
  9774  01313A  0100               	movlb	0	; () banked
  9775  01313C  119F               	iorwf	(??___altoft+2)& (0+255),w,b
  9776  01313E  0100               	movlb	0	; () banked
  9777  013140  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
  9778  013142  A4D8               	btfss	status,2,c
  9779  013144  D7DA               	goto	l3014
  9780                           
  9781                           ; BSR set to: 0
  9782                           
  9783                           ; BSR set to: 0
  9784  013146  C099  F060         	movff	___altoft@c,___ftpack@arg
  9785  01314A  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
  9786  01314E  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
  9787  013152  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
  9788  013156  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
  9789  01315A  ECAB  F093         	call	___ftpack	;wreg free
  9790  01315E  C060  F099         	movff	?___ftpack,?___altoft
  9791  013162  C061  F09A         	movff	?___ftpack+1,?___altoft+1
  9792  013166  C062  F09B         	movff	?___ftpack+2,?___altoft+2
  9793  01316A  0012               	return	
  9794  01316C                     __end_of___altoft:
  9795                           	opt stack 0
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           indf1	equ	0xFE7
  9806                           postdec1	equ	0xFE5
  9807                           fsr1h	equ	0xFE2
  9808                           fsr1l	equ	0xFE1
  9809                           indf2	equ	0xFDF
  9810                           postinc2	equ	0xFDE
  9811                           postdec2	equ	0xFDD
  9812                           fsr2h	equ	0xFDA
  9813                           fsr2l	equ	0xFD9
  9814                           status	equ	0xFD8
  9815                           
  9816 ;; *************** function _eval_poly *****************
  9817 ;; Defined at:
  9818 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\evalpoly.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;  x               3   57[BANK0 ] float 
  9821 ;;  d               2   60[BANK0 ] PTR const 
  9822 ;;		 -> log@coeff(27), exp@coeff(30), 
  9823 ;;  n               2   62[BANK0 ] int 
  9824 ;; Auto vars:     Size  Location     Type
  9825 ;;  res             3   66[BANK0 ] int 
  9826 ;; Return value:  Size  Location     Type
  9827 ;;                  3   57[BANK0 ] int 
  9828 ;; Registers used:
  9829 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9830 ;; Tracked objects:
  9831 ;;		On entry : 0/0
  9832 ;;		On exit  : 0/0
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9835 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9836 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9838 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9839 ;;Total ram usage:       12 bytes
  9840 ;; Hardware stack levels used:    1
  9841 ;; Hardware stack levels required when called:    6
  9842 ;; This function calls:
  9843 ;;		___ftadd
  9844 ;;		___ftmul
  9845 ;;		___wmul
  9846 ;; This function is called by:
  9847 ;;		_exp
  9848 ;;		_log
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           	psect	text34
  9853  012960                     __ptext34:
  9854                           	opt stack 0
  9855  012960                     _eval_poly:
  9856                           	opt stack 21
  9857                           
  9858                           ;incstack = 0
  9859  012960  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  9860  012964  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  9861  012968  0E00               	movlw	0
  9862  01296A  0100               	movlb	0	; () banked
  9863  01296C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9864  01296E  0E03               	movlw	3
  9865  012970  6F70               	movwf	___wmul@multiplicand& (0+255),b
  9866  012972  ECCF  F09B         	call	___wmul	;wreg free
  9867  012976  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  9868  01297A  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  9869  01297E  0100               	movlb	0	; () banked
  9870  012980  516E               	movf	?___wmul& (0+255),w,b
  9871  012982  0100               	movlb	0	; () banked
  9872  012984  27A0               	addwf	??_eval_poly& (0+255),f,b
  9873  012986  0100               	movlb	0	; () banked
  9874  012988  516F               	movf	(?___wmul+1)& (0+255),w,b
  9875  01298A  0100               	movlb	0	; () banked
  9876  01298C  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9877  01298E  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  9878  012992  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  9879  012996                     	if	0	;tblptru may be non-zero
  9880  012996                     	endif
  9881  012996                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9882  012996  0E00               	movlw	low (__mediumconst shr (0+16))
  9883  012998  6EF8               	movwf	tblptru,c
  9884  01299A                     	endif
  9885  01299A  0009               	tblrd		*+
  9886  01299C  CFF5 F0A2          	movff	tablat,eval_poly@res
  9887  0129A0  0009               	tblrd		*+
  9888  0129A2  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  9889  0129A6  000A               	tblrd		*-
  9890  0129A8  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  9891  0129AC  D046               	goto	l3322
  9892  0129AE                     l3320:
  9893                           
  9894                           ; BSR set to: 0
  9895  0129AE  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
  9896  0129B2  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
  9897  0129B6  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
  9898  0129BA  C099  F074         	movff	eval_poly@x,___ftmul@f1
  9899  0129BE  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
  9900  0129C2  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
  9901  0129C6  ECBF  F08E         	call	___ftmul	;wreg free
  9902  0129CA  C074  F08D         	movff	?___ftmul,___ftadd@f1
  9903  0129CE  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  9904  0129D2  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  9905  0129D6  0E00               	movlw	0
  9906  0129D8  0100               	movlb	0	; () banked
  9907  0129DA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9908  0129DC  0E03               	movlw	3
  9909  0129DE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  9910  0129E0  0100               	movlb	0	; () banked
  9911  0129E2  079E               	decf	eval_poly@n& (0+255),f,b
  9912  0129E4  A0D8               	btfss	status,0,c
  9913  0129E6  079F               	decf	(eval_poly@n+1)& (0+255),f,b
  9914  0129E8  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  9915  0129EC  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  9916  0129F0  ECCF  F09B         	call	___wmul	;wreg free
  9917  0129F4  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  9918  0129F8  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  9919  0129FC  0100               	movlb	0	; () banked
  9920  0129FE  516E               	movf	?___wmul& (0+255),w,b
  9921  012A00  0100               	movlb	0	; () banked
  9922  012A02  27A0               	addwf	??_eval_poly& (0+255),f,b
  9923  012A04  0100               	movlb	0	; () banked
  9924  012A06  516F               	movf	(?___wmul+1)& (0+255),w,b
  9925  012A08  0100               	movlb	0	; () banked
  9926  012A0A  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9927  012A0C  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  9928  012A10  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  9929  012A14                     	if	0	;tblptru may be non-zero
  9930  012A14                     	endif
  9931  012A14                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  9932  012A14  0E00               	movlw	low (__mediumconst shr (0+16))
  9933  012A16  6EF8               	movwf	tblptru,c
  9934  012A18                     	endif
  9935  012A18  0009               	tblrd		*+
  9936  012A1A  CFF5 F090          	movff	tablat,___ftadd@f2
  9937  012A1E  0009               	tblrd		*+
  9938  012A20  CFF5 F091          	movff	tablat,___ftadd@f2+1
  9939  012A24  000A               	tblrd		*-
  9940  012A26  CFF5 F092          	movff	tablat,___ftadd@f2+2
  9941  012A2A  EC01  F08A         	call	___ftadd	;wreg free
  9942  012A2E  C08D  F0A2         	movff	?___ftadd,eval_poly@res
  9943  012A32  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  9944  012A36  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  9945  012A3A                     l3322:
  9946  012A3A  0100               	movlb	0	; () banked
  9947  012A3C  519E               	movf	eval_poly@n& (0+255),w,b
  9948  012A3E  0100               	movlb	0	; () banked
  9949  012A40  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
  9950  012A42  A4D8               	btfss	status,2,c
  9951  012A44  D7B4               	goto	l3320
  9952                           
  9953                           ; BSR set to: 0
  9954  012A46  C0A2  F099         	movff	eval_poly@res,?_eval_poly
  9955  012A4A  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
  9956  012A4E  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
  9957                           
  9958                           ; BSR set to: 0
  9959  012A52  0012               	return		;funcret
  9960  012A54                     __end_of_eval_poly:
  9961                           	opt stack 0
  9962                           tblptru	equ	0xFF8
  9963                           tblptrh	equ	0xFF7
  9964                           tblptrl	equ	0xFF6
  9965                           tablat	equ	0xFF5
  9966                           prodh	equ	0xFF4
  9967                           prodl	equ	0xFF3
  9968                           intcon	equ	0xFF2
  9969                           postinc0	equ	0xFEE
  9970                           wreg	equ	0xFE8
  9971                           indf1	equ	0xFE7
  9972                           postdec1	equ	0xFE5
  9973                           fsr1h	equ	0xFE2
  9974                           fsr1l	equ	0xFE1
  9975                           indf2	equ	0xFDF
  9976                           postinc2	equ	0xFDE
  9977                           postdec2	equ	0xFDD
  9978                           fsr2h	equ	0xFDA
  9979                           fsr2l	equ	0xFD9
  9980                           status	equ	0xFD8
  9981                           
  9982 ;; *************** function ___wmul *****************
  9983 ;; Defined at:
  9984 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;  multiplier      2   14[BANK0 ] unsigned int 
  9987 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;  product         2   18[BANK0 ] unsigned int 
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  2   14[BANK0 ] unsigned int 
  9992 ;; Registers used:
  9993 ;;		wreg, status,2, status,0, prodl, prodh
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9999 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10000 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10002 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10003 ;;Total ram usage:        6 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    4
 10006 ;; This function calls:
 10007 ;;		Nothing
 10008 ;; This function is called by:
 10009 ;;		_fround
 10010 ;;		_scale
 10011 ;;		_sprintf
 10012 ;;		_eval_poly
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	text35
 10017  01379E                     __ptext35:
 10018                           	opt stack 0
 10019  01379E                     ___wmul:
 10020                           	opt stack 23
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;incstack = 0
 10024  01379E  0100               	movlb	0	; () banked
 10025  0137A0  516E               	movf	___wmul@multiplier& (0+255),w,b
 10026  0137A2  0100               	movlb	0	; () banked
 10027  0137A4  0370               	mulwf	___wmul@multiplicand& (0+255),b
 10028  0137A6  CFF3 F072          	movff	prodl,___wmul@product
 10029  0137AA  CFF4 F073          	movff	prodh,___wmul@product+1
 10030  0137AE  0100               	movlb	0	; () banked
 10031  0137B0  516E               	movf	___wmul@multiplier& (0+255),w,b
 10032  0137B2  0100               	movlb	0	; () banked
 10033  0137B4  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10034  0137B6  50F3               	movf	prodl,w,c
 10035  0137B8  0100               	movlb	0	; () banked
 10036  0137BA  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 10037  0137BC  0100               	movlb	0	; () banked
 10038  0137BE  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10039  0137C0  0100               	movlb	0	; () banked
 10040  0137C2  0370               	mulwf	___wmul@multiplicand& (0+255),b
 10041  0137C4  50F3               	movf	prodl,w,c
 10042  0137C6  0100               	movlb	0	; () banked
 10043  0137C8  2773               	addwf	(___wmul@product+1)& (0+255),f,b
 10044                           
 10045                           ; BSR set to: 0
 10046  0137CA  C072  F06E         	movff	___wmul@product,?___wmul
 10047  0137CE  C073  F06F         	movff	___wmul@product+1,?___wmul+1
 10048  0137D2  0012               	return	
 10049  0137D4                     __end_of___wmul:
 10050                           	opt stack 0
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           postinc0	equ	0xFEE
 10059                           wreg	equ	0xFE8
 10060                           indf1	equ	0xFE7
 10061                           postdec1	equ	0xFE5
 10062                           fsr1h	equ	0xFE2
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           fsr2h	equ	0xFDA
 10068                           fsr2l	equ	0xFD9
 10069                           status	equ	0xFD8
 10070                           
 10071 ;; *************** function ___ftmul *****************
 10072 ;; Defined at:
 10073 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;  f1              3   20[BANK0 ] float 
 10076 ;;  f2              3   23[BANK0 ] float 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
 10079 ;;  sign            1   34[BANK0 ] unsigned char 
 10080 ;;  cntr            1   33[BANK0 ] unsigned char 
 10081 ;;  exp             1   29[BANK0 ] unsigned char 
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  3   20[BANK0 ] float 
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10091 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10092 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10093 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10094 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10095 ;;Total ram usage:       15 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    5
 10098 ;; This function calls:
 10099 ;;		___ftpack
 10100 ;; This function is called by:
 10101 ;;		_initSPI
 10102 ;;		_digipot
 10103 ;;		_adjustDigipot
 10104 ;;		_fround
 10105 ;;		_scale
 10106 ;;		_sprintf
 10107 ;;		_pow
 10108 ;;		_exp
 10109 ;;		_log
 10110 ;;		_eval_poly
 10111 ;;		_calculateTemp
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           	psect	text36
 10116  011D7E                     __ptext36:
 10117                           	opt stack 0
 10118  011D7E                     ___ftmul:
 10119                           	opt stack 22
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;incstack = 0
 10123  011D7E  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
 10124  011D82  0100               	movlb	0	; () banked
 10125  011D84  6B7B               	clrf	(??___ftmul+1)& (0+255),b
 10126  011D86  6B7C               	clrf	(??___ftmul+2)& (0+255),b
 10127  011D88  0100               	movlb	0	; () banked
 10128  011D8A  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10129  011D8C  0100               	movlb	0	; () banked
 10130  011D8E  377A               	rlcf	??___ftmul& (0+255),f,b
 10131  011D90  E301               	bnc	u2451
 10132  011D92  817B               	bsf	(??___ftmul+1)& (0+255),0,b
 10133  011D94                     u2451:
 10134  011D94  0100               	movlb	0	; () banked
 10135  011D96  517A               	movf	??___ftmul& (0+255),w,b
 10136  011D98  0100               	movlb	0	; () banked
 10137  011D9A  6F7D               	movwf	___ftmul@exp& (0+255),b
 10138  011D9C  0100               	movlb	0	; () banked
 10139  011D9E  517D               	movf	___ftmul@exp& (0+255),w,b
 10140  011DA0  A4D8               	btfss	status,2,c
 10141  011DA2  D00A               	goto	l3098
 10142                           
 10143                           ; BSR set to: 0
 10144  011DA4  0E00               	movlw	0
 10145  011DA6  0100               	movlb	0	; () banked
 10146  011DA8  6F74               	movwf	?___ftmul& (0+255),b
 10147  011DAA  0E00               	movlw	0
 10148  011DAC  0100               	movlb	0	; () banked
 10149  011DAE  6F75               	movwf	(?___ftmul+1)& (0+255),b
 10150  011DB0  0E00               	movlw	0
 10151  011DB2  0100               	movlb	0	; () banked
 10152  011DB4  6F76               	movwf	(?___ftmul+2)& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155  011DB6  0012               	return	
 10156  011DB8                     l3098:
 10157                           
 10158                           ; BSR set to: 0
 10159  011DB8  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
 10160  011DBC  0100               	movlb	0	; () banked
 10161  011DBE  6B7B               	clrf	(??___ftmul+1)& (0+255),b
 10162  011DC0  6B7C               	clrf	(??___ftmul+2)& (0+255),b
 10163  011DC2  0100               	movlb	0	; () banked
 10164  011DC4  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10165  011DC6  0100               	movlb	0	; () banked
 10166  011DC8  377A               	rlcf	??___ftmul& (0+255),f,b
 10167  011DCA  E301               	bnc	u2471
 10168  011DCC  817B               	bsf	(??___ftmul+1)& (0+255),0,b
 10169  011DCE                     u2471:
 10170  011DCE  0100               	movlb	0	; () banked
 10171  011DD0  517A               	movf	??___ftmul& (0+255),w,b
 10172  011DD2  0100               	movlb	0	; () banked
 10173  011DD4  6F82               	movwf	___ftmul@sign& (0+255),b
 10174  011DD6  0100               	movlb	0	; () banked
 10175  011DD8  5182               	movf	___ftmul@sign& (0+255),w,b
 10176  011DDA  A4D8               	btfss	status,2,c
 10177  011DDC  D00A               	goto	l3104
 10178                           
 10179                           ; BSR set to: 0
 10180  011DDE  0E00               	movlw	0
 10181  011DE0  0100               	movlb	0	; () banked
 10182  011DE2  6F74               	movwf	?___ftmul& (0+255),b
 10183  011DE4  0E00               	movlw	0
 10184  011DE6  0100               	movlb	0	; () banked
 10185  011DE8  6F75               	movwf	(?___ftmul+1)& (0+255),b
 10186  011DEA  0E00               	movlw	0
 10187  011DEC  0100               	movlb	0	; () banked
 10188  011DEE  6F76               	movwf	(?___ftmul+2)& (0+255),b
 10189                           
 10190                           ; BSR set to: 0
 10191  011DF0  0012               	return	
 10192  011DF2                     l3104:
 10193                           
 10194                           ; BSR set to: 0
 10195  011DF2  0100               	movlb	0	; () banked
 10196  011DF4  5182               	movf	___ftmul@sign& (0+255),w,b
 10197  011DF6  0F7B               	addlw	123
 10198  011DF8  0100               	movlb	0	; () banked
 10199  011DFA  277D               	addwf	___ftmul@exp& (0+255),f,b
 10200                           
 10201                           ; BSR set to: 0
 10202  011DFC  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
 10203  011E00  0100               	movlb	0	; () banked
 10204  011E02  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 10205  011E04  0100               	movlb	0	; () banked
 10206  011E06  1B82               	xorwf	___ftmul@sign& (0+255),f,b
 10207  011E08  0E80               	movlw	128
 10208  011E0A  0100               	movlb	0	; () banked
 10209  011E0C  1782               	andwf	___ftmul@sign& (0+255),f,b
 10210                           
 10211                           ; BSR set to: 0
 10212  011E0E  0100               	movlb	0	; () banked
 10213  011E10  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10214                           
 10215                           ; BSR set to: 0
 10216  011E12  0100               	movlb	0	; () banked
 10217  011E14  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10218                           
 10219                           ; BSR set to: 0
 10220  011E16  0EFF               	movlw	255
 10221  011E18  0100               	movlb	0	; () banked
 10222  011E1A  1777               	andwf	___ftmul@f2& (0+255),f,b
 10223  011E1C  0EFF               	movlw	255
 10224  011E1E  0100               	movlb	0	; () banked
 10225  011E20  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10226  011E22  0E00               	movlw	0
 10227  011E24  0100               	movlb	0	; () banked
 10228  011E26  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231  011E28  0E00               	movlw	0
 10232  011E2A  0100               	movlb	0	; () banked
 10233  011E2C  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
 10234  011E2E  0E00               	movlw	0
 10235  011E30  0100               	movlb	0	; () banked
 10236  011E32  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10237  011E34  0E00               	movlw	0
 10238  011E36  0100               	movlb	0	; () banked
 10239  011E38  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10240                           
 10241                           ; BSR set to: 0
 10242  011E3A  0E07               	movlw	7
 10243  011E3C  0100               	movlb	0	; () banked
 10244  011E3E  6F81               	movwf	___ftmul@cntr& (0+255),b
 10245  011E40                     l3118:
 10246                           
 10247                           ; BSR set to: 0
 10248  011E40  0100               	movlb	0	; () banked
 10249  011E42  A174               	btfss	___ftmul@f1& (0+255),0,b
 10250  011E44  D00C               	goto	l3122
 10251                           
 10252                           ; BSR set to: 0
 10253  011E46  0100               	movlb	0	; () banked
 10254  011E48  5177               	movf	___ftmul@f2& (0+255),w,b
 10255  011E4A  0100               	movlb	0	; () banked
 10256  011E4C  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10257  011E4E  0100               	movlb	0	; () banked
 10258  011E50  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 10259  011E52  0100               	movlb	0	; () banked
 10260  011E54  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10261  011E56  0100               	movlb	0	; () banked
 10262  011E58  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 10263  011E5A  0100               	movlb	0	; () banked
 10264  011E5C  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10265  011E5E                     l3122:
 10266                           
 10267                           ; BSR set to: 0
 10268  011E5E  0100               	movlb	0	; () banked
 10269  011E60  90D8               	bcf	status,0,c
 10270  011E62  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10271  011E64  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10272  011E66  3374               	rrcf	___ftmul@f1& (0+255),f,b
 10273  011E68  0100               	movlb	0	; () banked
 10274  011E6A  90D8               	bcf	status,0,c
 10275  011E6C  3777               	rlcf	___ftmul@f2& (0+255),f,b
 10276  011E6E  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10277  011E70  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10278                           
 10279                           ; BSR set to: 0
 10280  011E72  0100               	movlb	0	; () banked
 10281  011E74  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 10282  011E76  D7E4               	goto	l3118
 10283                           
 10284                           ; BSR set to: 0
 10285                           
 10286                           ; BSR set to: 0
 10287  011E78  0E09               	movlw	9
 10288  011E7A  0100               	movlb	0	; () banked
 10289  011E7C  6F81               	movwf	___ftmul@cntr& (0+255),b
 10290  011E7E                     l3128:
 10291                           
 10292                           ; BSR set to: 0
 10293  011E7E  0100               	movlb	0	; () banked
 10294  011E80  A174               	btfss	___ftmul@f1& (0+255),0,b
 10295  011E82  D00C               	goto	l3132
 10296                           
 10297                           ; BSR set to: 0
 10298  011E84  0100               	movlb	0	; () banked
 10299  011E86  5177               	movf	___ftmul@f2& (0+255),w,b
 10300  011E88  0100               	movlb	0	; () banked
 10301  011E8A  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10302  011E8C  0100               	movlb	0	; () banked
 10303  011E8E  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 10304  011E90  0100               	movlb	0	; () banked
 10305  011E92  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10306  011E94  0100               	movlb	0	; () banked
 10307  011E96  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 10308  011E98  0100               	movlb	0	; () banked
 10309  011E9A  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10310  011E9C                     l3132:
 10311                           
 10312                           ; BSR set to: 0
 10313  011E9C  0100               	movlb	0	; () banked
 10314  011E9E  90D8               	bcf	status,0,c
 10315  011EA0  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10316  011EA2  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10317  011EA4  3374               	rrcf	___ftmul@f1& (0+255),f,b
 10318  011EA6  0100               	movlb	0	; () banked
 10319  011EA8  90D8               	bcf	status,0,c
 10320  011EAA  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10321  011EAC  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10322  011EAE  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10323                           
 10324                           ; BSR set to: 0
 10325  011EB0  0100               	movlb	0	; () banked
 10326  011EB2  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
 10327  011EB4  D7E4               	goto	l3128
 10328                           
 10329                           ; BSR set to: 0
 10330                           
 10331                           ; BSR set to: 0
 10332  011EB6  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 10333  011EBA  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10334  011EBE  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10335  011EC2  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
 10336  011EC6  C082  F064         	movff	___ftmul@sign,___ftpack@sign
 10337  011ECA  ECAB  F093         	call	___ftpack	;wreg free
 10338  011ECE  C060  F074         	movff	?___ftpack,?___ftmul
 10339  011ED2  C061  F075         	movff	?___ftpack+1,?___ftmul+1
 10340  011ED6  C062  F076         	movff	?___ftpack+2,?___ftmul+2
 10341  011EDA  0012               	return	
 10342  011EDC                     __end_of___ftmul:
 10343                           	opt stack 0
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           intcon	equ	0xFF2
 10351                           postinc0	equ	0xFEE
 10352                           wreg	equ	0xFE8
 10353                           indf1	equ	0xFE7
 10354                           postdec1	equ	0xFE5
 10355                           fsr1h	equ	0xFE2
 10356                           fsr1l	equ	0xFE1
 10357                           indf2	equ	0xFDF
 10358                           postinc2	equ	0xFDE
 10359                           postdec2	equ	0xFDD
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364 ;; *************** function ___ftsub *****************
 10365 ;; Defined at:
 10366 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  f1              3   57[BANK0 ] float 
 10369 ;;  f2              3   60[BANK0 ] float 
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;		None
 10372 ;; Return value:  Size  Location     Type
 10373 ;;                  3   57[BANK0 ] float 
 10374 ;; Registers used:
 10375 ;;		wreg, status,2, status,0, cstack
 10376 ;; Tracked objects:
 10377 ;;		On entry : 0/0
 10378 ;;		On exit  : 0/0
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10381 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10384 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10385 ;;Total ram usage:        6 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; Hardware stack levels required when called:    6
 10388 ;; This function calls:
 10389 ;;		___ftadd
 10390 ;; This function is called by:
 10391 ;;		_sprintf
 10392 ;;		_exp
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text37
 10397  01368E                     __ptext37:
 10398                           	opt stack 0
 10399  01368E                     ___ftsub:
 10400                           	opt stack 22
 10401                           
 10402                           ;incstack = 0
 10403  01368E  0100               	movlb	0	; () banked
 10404  013690  519C               	movf	___ftsub@f2& (0+255),w,b
 10405  013692  0100               	movlb	0	; () banked
 10406  013694  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10407  013696  0100               	movlb	0	; () banked
 10408  013698  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10409  01369A  B4D8               	btfsc	status,2,c
 10410  01369C  D009               	goto	l3274
 10411                           
 10412                           ; BSR set to: 0
 10413  01369E  0E00               	movlw	0
 10414  0136A0  0100               	movlb	0	; () banked
 10415  0136A2  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 10416  0136A4  0E00               	movlw	0
 10417  0136A6  0100               	movlb	0	; () banked
 10418  0136A8  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10419  0136AA  0E80               	movlw	128
 10420  0136AC  0100               	movlb	0	; () banked
 10421  0136AE  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10422  0136B0                     l3274:
 10423                           
 10424                           ; BSR set to: 0
 10425  0136B0  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 10426  0136B4  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 10427  0136B8  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 10428  0136BC  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 10429  0136C0  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 10430  0136C4  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 10431  0136C8  EC01  F08A         	call	___ftadd	;wreg free
 10432  0136CC  C08D  F099         	movff	?___ftadd,?___ftsub
 10433  0136D0  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 10434  0136D4  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 10435  0136D8  0012               	return	
 10436  0136DA                     __end_of___ftsub:
 10437                           	opt stack 0
 10438                           tblptru	equ	0xFF8
 10439                           tblptrh	equ	0xFF7
 10440                           tblptrl	equ	0xFF6
 10441                           tablat	equ	0xFF5
 10442                           prodh	equ	0xFF4
 10443                           prodl	equ	0xFF3
 10444                           intcon	equ	0xFF2
 10445                           postinc0	equ	0xFEE
 10446                           wreg	equ	0xFE8
 10447                           indf1	equ	0xFE7
 10448                           postdec1	equ	0xFE5
 10449                           fsr1h	equ	0xFE2
 10450                           fsr1l	equ	0xFE1
 10451                           indf2	equ	0xFDF
 10452                           postinc2	equ	0xFDE
 10453                           postdec2	equ	0xFDD
 10454                           fsr2h	equ	0xFDA
 10455                           fsr2l	equ	0xFD9
 10456                           status	equ	0xFD8
 10457                           
 10458 ;; *************** function ___ftadd *****************
 10459 ;; Defined at:
 10460 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  f1              3   45[BANK0 ] float 
 10463 ;;  f2              3   48[BANK0 ] float 
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;  exp1            1   56[BANK0 ] unsigned char 
 10466 ;;  exp2            1   55[BANK0 ] unsigned char 
 10467 ;;  sign            1   54[BANK0 ] unsigned char 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  3   45[BANK0 ] float 
 10470 ;; Registers used:
 10471 ;;		wreg, status,2, status,0, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10477 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10478 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10479 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10480 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10481 ;;Total ram usage:       12 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    5
 10484 ;; This function calls:
 10485 ;;		___ftpack
 10486 ;; This function is called by:
 10487 ;;		_initSPI
 10488 ;;		_adjustDigipot
 10489 ;;		_sprintf
 10490 ;;		___ftsub
 10491 ;;		_floor
 10492 ;;		_log
 10493 ;;		_eval_poly
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           	psect	text38
 10498  011402                     __ptext38:
 10499                           	opt stack 0
 10500  011402                     ___ftadd:
 10501                           	opt stack 22
 10502                           
 10503                           ;incstack = 0
 10504  011402  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 10505  011406  0100               	movlb	0	; () banked
 10506  011408  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10507  01140A  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10508  01140C  0100               	movlb	0	; () banked
 10509  01140E  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10510  011410  0100               	movlb	0	; () banked
 10511  011412  3793               	rlcf	??___ftadd& (0+255),f,b
 10512  011414  E301               	bnc	u2241
 10513  011416  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10514  011418                     u2241:
 10515  011418  0100               	movlb	0	; () banked
 10516  01141A  5193               	movf	??___ftadd& (0+255),w,b
 10517  01141C  0100               	movlb	0	; () banked
 10518  01141E  6F98               	movwf	___ftadd@exp1& (0+255),b
 10519  011420  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 10520  011424  0100               	movlb	0	; () banked
 10521  011426  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10522  011428  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10523  01142A  0100               	movlb	0	; () banked
 10524  01142C  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10525  01142E  0100               	movlb	0	; () banked
 10526  011430  3793               	rlcf	??___ftadd& (0+255),f,b
 10527  011432  E301               	bnc	u2251
 10528  011434  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10529  011436                     u2251:
 10530  011436  0100               	movlb	0	; () banked
 10531  011438  5193               	movf	??___ftadd& (0+255),w,b
 10532  01143A  0100               	movlb	0	; () banked
 10533  01143C  6F97               	movwf	___ftadd@exp2& (0+255),b
 10534                           
 10535                           ; BSR set to: 0
 10536  01143E  0100               	movlb	0	; () banked
 10537  011440  5198               	movf	___ftadd@exp1& (0+255),w,b
 10538  011442  0100               	movlb	0	; () banked
 10539  011444  B4D8               	btfsc	status,2,c
 10540  011446  D011               	goto	l866
 10541                           
 10542                           ; BSR set to: 0
 10543  011448  0100               	movlb	0	; () banked
 10544  01144A  5197               	movf	___ftadd@exp2& (0+255),w,b
 10545  01144C  0100               	movlb	0	; () banked
 10546  01144E  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10547  011450  B0D8               	btfsc	status,0,c
 10548  011452  D012               	goto	l3030
 10549                           
 10550                           ; BSR set to: 0
 10551  011454  0100               	movlb	0	; () banked
 10552  011456  5198               	movf	___ftadd@exp1& (0+255),w,b
 10553  011458  0800               	sublw	0
 10554  01145A  0100               	movlb	0	; () banked
 10555  01145C  2597               	addwf	___ftadd@exp2& (0+255),w,b
 10556  01145E  0100               	movlb	0	; () banked
 10557  011460  6F93               	movwf	??___ftadd& (0+255),b
 10558  011462  0E18               	movlw	24
 10559  011464  0100               	movlb	0	; () banked
 10560  011466  6593               	cpfsgt	??___ftadd& (0+255),b
 10561  011468  D007               	goto	l3030
 10562  01146A                     l866:
 10563                           
 10564                           ; BSR set to: 0
 10565  01146A  C090  F08D         	movff	___ftadd@f2,?___ftadd
 10566  01146E  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 10567  011472  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 10568  011476  0012               	return	
 10569  011478                     l3030:
 10570                           
 10571                           ; BSR set to: 0
 10572  011478  0100               	movlb	0	; () banked
 10573  01147A  5197               	movf	___ftadd@exp2& (0+255),w,b
 10574  01147C  0100               	movlb	0	; () banked
 10575  01147E  B4D8               	btfsc	status,2,c
 10576  011480  D011               	goto	l870
 10577                           
 10578                           ; BSR set to: 0
 10579  011482  0100               	movlb	0	; () banked
 10580  011484  5198               	movf	___ftadd@exp1& (0+255),w,b
 10581  011486  0100               	movlb	0	; () banked
 10582  011488  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10583  01148A  B0D8               	btfsc	status,0,c
 10584  01148C  D012               	goto	l3036
 10585                           
 10586                           ; BSR set to: 0
 10587  01148E  0100               	movlb	0	; () banked
 10588  011490  5197               	movf	___ftadd@exp2& (0+255),w,b
 10589  011492  0800               	sublw	0
 10590  011494  0100               	movlb	0	; () banked
 10591  011496  2598               	addwf	___ftadd@exp1& (0+255),w,b
 10592  011498  0100               	movlb	0	; () banked
 10593  01149A  6F93               	movwf	??___ftadd& (0+255),b
 10594  01149C  0E18               	movlw	24
 10595  01149E  0100               	movlb	0	; () banked
 10596  0114A0  6593               	cpfsgt	??___ftadd& (0+255),b
 10597  0114A2  D007               	goto	l3036
 10598  0114A4                     l870:
 10599                           
 10600                           ; BSR set to: 0
 10601  0114A4  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 10602  0114A8  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 10603  0114AC  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 10604  0114B0  0012               	return	
 10605  0114B2                     l3036:
 10606                           
 10607                           ; BSR set to: 0
 10608  0114B2  0E06               	movlw	6
 10609  0114B4  0100               	movlb	0	; () banked
 10610  0114B6  6F96               	movwf	___ftadd@sign& (0+255),b
 10611                           
 10612                           ; BSR set to: 0
 10613  0114B8  0100               	movlb	0	; () banked
 10614  0114BA  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10615  0114BC  D002               	goto	l3042
 10616                           
 10617                           ; BSR set to: 0
 10618  0114BE  0100               	movlb	0	; () banked
 10619  0114C0  8F96               	bsf	___ftadd@sign& (0+255),7,b
 10620  0114C2                     l3042:
 10621                           
 10622                           ; BSR set to: 0
 10623  0114C2  0100               	movlb	0	; () banked
 10624  0114C4  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10625  0114C6  D002               	goto	l872
 10626                           
 10627                           ; BSR set to: 0
 10628  0114C8  0100               	movlb	0	; () banked
 10629  0114CA  8D96               	bsf	___ftadd@sign& (0+255),6,b
 10630  0114CC                     l872:
 10631                           
 10632                           ; BSR set to: 0
 10633  0114CC  0100               	movlb	0	; () banked
 10634  0114CE  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10635                           
 10636                           ; BSR set to: 0
 10637  0114D0  0EFF               	movlw	255
 10638  0114D2  0100               	movlb	0	; () banked
 10639  0114D4  178D               	andwf	___ftadd@f1& (0+255),f,b
 10640  0114D6  0EFF               	movlw	255
 10641  0114D8  0100               	movlb	0	; () banked
 10642  0114DA  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10643  0114DC  0E00               	movlw	0
 10644  0114DE  0100               	movlb	0	; () banked
 10645  0114E0  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10646  0114E2  0100               	movlb	0	; () banked
 10647  0114E4  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10648                           
 10649                           ; BSR set to: 0
 10650  0114E6  0EFF               	movlw	255
 10651  0114E8  0100               	movlb	0	; () banked
 10652  0114EA  1790               	andwf	___ftadd@f2& (0+255),f,b
 10653  0114EC  0EFF               	movlw	255
 10654  0114EE  0100               	movlb	0	; () banked
 10655  0114F0  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10656  0114F2  0E00               	movlw	0
 10657  0114F4  0100               	movlb	0	; () banked
 10658  0114F6  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10659                           
 10660                           ; BSR set to: 0
 10661  0114F8  0100               	movlb	0	; () banked
 10662  0114FA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10663  0114FC  0100               	movlb	0	; () banked
 10664  0114FE  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10665  011500  B0D8               	btfsc	status,0,c
 10666  011502  D025               	goto	l3062
 10667  011504                     l3052:
 10668                           
 10669                           ; BSR set to: 0
 10670  011504  0100               	movlb	0	; () banked
 10671  011506  90D8               	bcf	status,0,c
 10672  011508  3790               	rlcf	___ftadd@f2& (0+255),f,b
 10673  01150A  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10674  01150C  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10675  01150E  0100               	movlb	0	; () banked
 10676  011510  0797               	decf	___ftadd@exp2& (0+255),f,b
 10677                           
 10678                           ; BSR set to: 0
 10679  011512  0100               	movlb	0	; () banked
 10680  011514  5198               	movf	___ftadd@exp1& (0+255),w,b
 10681  011516  0100               	movlb	0	; () banked
 10682  011518  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 10683  01151A  B4D8               	btfsc	status,2,c
 10684  01151C  D011               	goto	l3060
 10685                           
 10686                           ; BSR set to: 0
 10687  01151E  0100               	movlb	0	; () banked
 10688  011520  0796               	decf	___ftadd@sign& (0+255),f,b
 10689  011522  C096  F093         	movff	___ftadd@sign,??___ftadd
 10690  011526  0E07               	movlw	7
 10691  011528  0100               	movlb	0	; () banked
 10692  01152A  1793               	andwf	??___ftadd& (0+255),f,b
 10693  01152C  B4D8               	btfsc	status,2,c
 10694  01152E  D008               	goto	l3060
 10695  011530  D7E9               	goto	l3052
 10696  011532                     l3058:
 10697                           
 10698                           ; BSR set to: 0
 10699  011532  0100               	movlb	0	; () banked
 10700  011534  90D8               	bcf	status,0,c
 10701  011536  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10702  011538  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10703  01153A  338D               	rrcf	___ftadd@f1& (0+255),f,b
 10704  01153C  0100               	movlb	0	; () banked
 10705  01153E  2B98               	incf	___ftadd@exp1& (0+255),f,b
 10706  011540                     l3060:
 10707                           
 10708                           ; BSR set to: 0
 10709  011540  0100               	movlb	0	; () banked
 10710  011542  5197               	movf	___ftadd@exp2& (0+255),w,b
 10711  011544  0100               	movlb	0	; () banked
 10712  011546  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10713  011548  B4D8               	btfsc	status,2,c
 10714  01154A  D02B               	goto	l881
 10715  01154C  D7F2               	goto	l3058
 10716  01154E                     l3062:
 10717                           
 10718                           ; BSR set to: 0
 10719  01154E  0100               	movlb	0	; () banked
 10720  011550  5198               	movf	___ftadd@exp1& (0+255),w,b
 10721  011552  0100               	movlb	0	; () banked
 10722  011554  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10723  011556  B0D8               	btfsc	status,0,c
 10724  011558  D024               	goto	l881
 10725  01155A                     l3064:
 10726                           
 10727                           ; BSR set to: 0
 10728  01155A  0100               	movlb	0	; () banked
 10729  01155C  90D8               	bcf	status,0,c
 10730  01155E  378D               	rlcf	___ftadd@f1& (0+255),f,b
 10731  011560  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10732  011562  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10733  011564  0100               	movlb	0	; () banked
 10734  011566  0798               	decf	___ftadd@exp1& (0+255),f,b
 10735                           
 10736                           ; BSR set to: 0
 10737  011568  0100               	movlb	0	; () banked
 10738  01156A  5198               	movf	___ftadd@exp1& (0+255),w,b
 10739  01156C  0100               	movlb	0	; () banked
 10740  01156E  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 10741  011570  B4D8               	btfsc	status,2,c
 10742  011572  D011               	goto	l3072
 10743                           
 10744                           ; BSR set to: 0
 10745  011574  0100               	movlb	0	; () banked
 10746  011576  0796               	decf	___ftadd@sign& (0+255),f,b
 10747  011578  C096  F093         	movff	___ftadd@sign,??___ftadd
 10748  01157C  0E07               	movlw	7
 10749  01157E  0100               	movlb	0	; () banked
 10750  011580  1793               	andwf	??___ftadd& (0+255),f,b
 10751  011582  B4D8               	btfsc	status,2,c
 10752  011584  D008               	goto	l3072
 10753  011586  D7E9               	goto	l3064
 10754  011588                     l3070:
 10755                           
 10756                           ; BSR set to: 0
 10757  011588  0100               	movlb	0	; () banked
 10758  01158A  90D8               	bcf	status,0,c
 10759  01158C  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10760  01158E  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10761  011590  3390               	rrcf	___ftadd@f2& (0+255),f,b
 10762  011592  0100               	movlb	0	; () banked
 10763  011594  2B97               	incf	___ftadd@exp2& (0+255),f,b
 10764  011596                     l3072:
 10765                           
 10766                           ; BSR set to: 0
 10767  011596  0100               	movlb	0	; () banked
 10768  011598  5197               	movf	___ftadd@exp2& (0+255),w,b
 10769  01159A  0100               	movlb	0	; () banked
 10770  01159C  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10771  01159E  A4D8               	btfss	status,2,c
 10772  0115A0  D7F3               	goto	l3070
 10773  0115A2                     l881:
 10774                           
 10775                           ; BSR set to: 0
 10776  0115A2  0100               	movlb	0	; () banked
 10777  0115A4  AF96               	btfss	___ftadd@sign& (0+255),7,b
 10778  0115A6  D012               	goto	l890
 10779                           
 10780                           ; BSR set to: 0
 10781  0115A8  0EFF               	movlw	255
 10782  0115AA  0100               	movlb	0	; () banked
 10783  0115AC  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 10784  0115AE  0EFF               	movlw	255
 10785  0115B0  0100               	movlb	0	; () banked
 10786  0115B2  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10787  0115B4  0EFF               	movlw	255
 10788  0115B6  0100               	movlb	0	; () banked
 10789  0115B8  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10790  0115BA  0E01               	movlw	1
 10791  0115BC  0100               	movlb	0	; () banked
 10792  0115BE  278D               	addwf	___ftadd@f1& (0+255),f,b
 10793  0115C0  0E00               	movlw	0
 10794  0115C2  0100               	movlb	0	; () banked
 10795  0115C4  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10796  0115C6  0E00               	movlw	0
 10797  0115C8  0100               	movlb	0	; () banked
 10798  0115CA  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10799  0115CC                     l890:
 10800                           
 10801                           ; BSR set to: 0
 10802  0115CC  0100               	movlb	0	; () banked
 10803  0115CE  AD96               	btfss	___ftadd@sign& (0+255),6,b
 10804  0115D0  D012               	goto	l3078
 10805                           
 10806                           ; BSR set to: 0
 10807  0115D2  0EFF               	movlw	255
 10808  0115D4  0100               	movlb	0	; () banked
 10809  0115D6  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10810  0115D8  0EFF               	movlw	255
 10811  0115DA  0100               	movlb	0	; () banked
 10812  0115DC  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10813  0115DE  0EFF               	movlw	255
 10814  0115E0  0100               	movlb	0	; () banked
 10815  0115E2  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10816  0115E4  0E01               	movlw	1
 10817  0115E6  0100               	movlb	0	; () banked
 10818  0115E8  2790               	addwf	___ftadd@f2& (0+255),f,b
 10819  0115EA  0E00               	movlw	0
 10820  0115EC  0100               	movlb	0	; () banked
 10821  0115EE  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10822  0115F0  0E00               	movlw	0
 10823  0115F2  0100               	movlb	0	; () banked
 10824  0115F4  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10825  0115F6                     l3078:
 10826                           
 10827                           ; BSR set to: 0
 10828  0115F6  0E00               	movlw	0
 10829  0115F8  0100               	movlb	0	; () banked
 10830  0115FA  6F96               	movwf	___ftadd@sign& (0+255),b
 10831                           
 10832                           ; BSR set to: 0
 10833  0115FC  0100               	movlb	0	; () banked
 10834  0115FE  518D               	movf	___ftadd@f1& (0+255),w,b
 10835  011600  0100               	movlb	0	; () banked
 10836  011602  2790               	addwf	___ftadd@f2& (0+255),f,b
 10837  011604  0100               	movlb	0	; () banked
 10838  011606  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 10839  011608  0100               	movlb	0	; () banked
 10840  01160A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10841  01160C  0100               	movlb	0	; () banked
 10842  01160E  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 10843  011610  0100               	movlb	0	; () banked
 10844  011612  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10845                           
 10846                           ; BSR set to: 0
 10847  011614  0100               	movlb	0	; () banked
 10848  011616  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10849  011618  D015               	goto	l3088
 10850                           
 10851                           ; BSR set to: 0
 10852  01161A  0EFF               	movlw	255
 10853  01161C  0100               	movlb	0	; () banked
 10854  01161E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10855  011620  0EFF               	movlw	255
 10856  011622  0100               	movlb	0	; () banked
 10857  011624  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10858  011626  0EFF               	movlw	255
 10859  011628  0100               	movlb	0	; () banked
 10860  01162A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10861  01162C  0E01               	movlw	1
 10862  01162E  0100               	movlb	0	; () banked
 10863  011630  2790               	addwf	___ftadd@f2& (0+255),f,b
 10864  011632  0E00               	movlw	0
 10865  011634  0100               	movlb	0	; () banked
 10866  011636  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10867  011638  0E00               	movlw	0
 10868  01163A  0100               	movlb	0	; () banked
 10869  01163C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10870                           
 10871                           ; BSR set to: 0
 10872  01163E  0E01               	movlw	1
 10873  011640  0100               	movlb	0	; () banked
 10874  011642  6F96               	movwf	___ftadd@sign& (0+255),b
 10875  011644                     l3088:
 10876                           
 10877                           ; BSR set to: 0
 10878  011644  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 10879  011648  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10880  01164C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10881  011650  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 10882  011654  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 10883  011658  ECAB  F093         	call	___ftpack	;wreg free
 10884  01165C  C060  F08D         	movff	?___ftpack,?___ftadd
 10885  011660  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 10886  011664  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 10887  011668  0012               	return	
 10888  01166A                     __end_of___ftadd:
 10889                           	opt stack 0
 10890                           tblptru	equ	0xFF8
 10891                           tblptrh	equ	0xFF7
 10892                           tblptrl	equ	0xFF6
 10893                           tablat	equ	0xFF5
 10894                           prodh	equ	0xFF4
 10895                           prodl	equ	0xFF3
 10896                           intcon	equ	0xFF2
 10897                           postinc0	equ	0xFEE
 10898                           wreg	equ	0xFE8
 10899                           indf1	equ	0xFE7
 10900                           postdec1	equ	0xFE5
 10901                           fsr1h	equ	0xFE2
 10902                           fsr1l	equ	0xFE1
 10903                           indf2	equ	0xFDF
 10904                           postinc2	equ	0xFDE
 10905                           postdec2	equ	0xFDD
 10906                           fsr2h	equ	0xFDA
 10907                           fsr2l	equ	0xFD9
 10908                           status	equ	0xFD8
 10909                           
 10910 ;; *************** function ___ftneg *****************
 10911 ;; Defined at:
 10912 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
 10913 ;; Parameters:    Size  Location     Type
 10914 ;;  f1              3    0[BANK0 ] float 
 10915 ;; Auto vars:     Size  Location     Type
 10916 ;;		None
 10917 ;; Return value:  Size  Location     Type
 10918 ;;                  3    0[BANK0 ] float 
 10919 ;; Registers used:
 10920 ;;		wreg, status,2, status,0
 10921 ;; Tracked objects:
 10922 ;;		On entry : 0/0
 10923 ;;		On exit  : 0/0
 10924 ;;		Unchanged: 0/0
 10925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10926 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10929 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10930 ;;Total ram usage:        3 bytes
 10931 ;; Hardware stack levels used:    1
 10932 ;; Hardware stack levels required when called:    4
 10933 ;; This function calls:
 10934 ;;		Nothing
 10935 ;; This function is called by:
 10936 ;;		_sprintf
 10937 ;;		_pow
 10938 ;;		_exp
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text39
 10943  0137D4                     __ptext39:
 10944                           	opt stack 0
 10945  0137D4                     ___ftneg:
 10946                           	opt stack 24
 10947                           
 10948                           ;incstack = 0
 10949  0137D4  0100               	movlb	0	; () banked
 10950  0137D6  5160               	movf	___ftneg@f1& (0+255),w,b
 10951  0137D8  0100               	movlb	0	; () banked
 10952  0137DA  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10953  0137DC  0100               	movlb	0	; () banked
 10954  0137DE  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10955  0137E0  B4D8               	btfsc	status,2,c
 10956  0137E2  D009               	goto	l940
 10957                           
 10958                           ; BSR set to: 0
 10959  0137E4  0E00               	movlw	0
 10960  0137E6  0100               	movlb	0	; () banked
 10961  0137E8  1B60               	xorwf	___ftneg@f1& (0+255),f,b
 10962  0137EA  0E00               	movlw	0
 10963  0137EC  0100               	movlb	0	; () banked
 10964  0137EE  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10965  0137F0  0E80               	movlw	128
 10966  0137F2  0100               	movlb	0	; () banked
 10967  0137F4  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10968  0137F6                     l940:
 10969                           
 10970                           ; BSR set to: 0
 10971  0137F6  C060  F060         	movff	___ftneg@f1,?___ftneg
 10972  0137FA  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 10973  0137FE  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 10974                           
 10975                           ; BSR set to: 0
 10976  013802  0012               	return		;funcret
 10977  013804                     __end_of___ftneg:
 10978                           	opt stack 0
 10979                           tblptru	equ	0xFF8
 10980                           tblptrh	equ	0xFF7
 10981                           tblptrl	equ	0xFF6
 10982                           tablat	equ	0xFF5
 10983                           prodh	equ	0xFF4
 10984                           prodl	equ	0xFF3
 10985                           intcon	equ	0xFF2
 10986                           postinc0	equ	0xFEE
 10987                           wreg	equ	0xFE8
 10988                           indf1	equ	0xFE7
 10989                           postdec1	equ	0xFE5
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           fsr2h	equ	0xFDA
 10996                           fsr2l	equ	0xFD9
 10997                           status	equ	0xFD8
 10998                           
 10999 ;; *************** function ___ftdiv *****************
 11000 ;; Defined at:
 11001 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 11002 ;; Parameters:    Size  Location     Type
 11003 ;;  f1              3   57[BANK0 ] float 
 11004 ;;  f2              3   60[BANK0 ] float 
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  f3              3   67[BANK0 ] float 
 11007 ;;  sign            1   71[BANK0 ] unsigned char 
 11008 ;;  exp             1   70[BANK0 ] unsigned char 
 11009 ;;  cntr            1   66[BANK0 ] unsigned char 
 11010 ;; Return value:  Size  Location     Type
 11011 ;;                  3   57[BANK0 ] float 
 11012 ;; Registers used:
 11013 ;;		wreg, status,2, status,0, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11019 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11020 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11021 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11022 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11023 ;;Total ram usage:       15 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:    5
 11026 ;; This function calls:
 11027 ;;		___ftpack
 11028 ;; This function is called by:
 11029 ;;		_initSPI
 11030 ;;		_adjustDigipot
 11031 ;;		_exp
 11032 ;;		_calculateTemp
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           	psect	text40
 11037  01217A                     __ptext40:
 11038                           	opt stack 0
 11039  01217A                     ___ftdiv:
 11040                           	opt stack 22
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;incstack = 0
 11044  01217A  C09B  F09F         	movff	___ftdiv@f1+2,??___ftdiv
 11045  01217E  0100               	movlb	0	; () banked
 11046  012180  6BA0               	clrf	(??___ftdiv+1)& (0+255),b
 11047  012182  6BA1               	clrf	(??___ftdiv+2)& (0+255),b
 11048  012184  0100               	movlb	0	; () banked
 11049  012186  359A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 11050  012188  0100               	movlb	0	; () banked
 11051  01218A  379F               	rlcf	??___ftdiv& (0+255),f,b
 11052  01218C  E301               	bnc	u2641
 11053  01218E  81A0               	bsf	(??___ftdiv+1)& (0+255),0,b
 11054  012190                     u2641:
 11055  012190  0100               	movlb	0	; () banked
 11056  012192  519F               	movf	??___ftdiv& (0+255),w,b
 11057  012194  0100               	movlb	0	; () banked
 11058  012196  6FA6               	movwf	___ftdiv@exp& (0+255),b
 11059  012198  0100               	movlb	0	; () banked
 11060  01219A  51A6               	movf	___ftdiv@exp& (0+255),w,b
 11061  01219C  A4D8               	btfss	status,2,c
 11062  01219E  D00A               	goto	l3230
 11063                           
 11064                           ; BSR set to: 0
 11065  0121A0  0E00               	movlw	0
 11066  0121A2  0100               	movlb	0	; () banked
 11067  0121A4  6F99               	movwf	?___ftdiv& (0+255),b
 11068  0121A6  0E00               	movlw	0
 11069  0121A8  0100               	movlb	0	; () banked
 11070  0121AA  6F9A               	movwf	(?___ftdiv+1)& (0+255),b
 11071  0121AC  0E00               	movlw	0
 11072  0121AE  0100               	movlb	0	; () banked
 11073  0121B0  6F9B               	movwf	(?___ftdiv+2)& (0+255),b
 11074                           
 11075                           ; BSR set to: 0
 11076  0121B2  0012               	return	
 11077  0121B4                     l3230:
 11078                           
 11079                           ; BSR set to: 0
 11080  0121B4  C09E  F09F         	movff	___ftdiv@f2+2,??___ftdiv
 11081  0121B8  0100               	movlb	0	; () banked
 11082  0121BA  6BA0               	clrf	(??___ftdiv+1)& (0+255),b
 11083  0121BC  6BA1               	clrf	(??___ftdiv+2)& (0+255),b
 11084  0121BE  0100               	movlb	0	; () banked
 11085  0121C0  359D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 11086  0121C2  0100               	movlb	0	; () banked
 11087  0121C4  379F               	rlcf	??___ftdiv& (0+255),f,b
 11088  0121C6  E301               	bnc	u2661
 11089  0121C8  81A0               	bsf	(??___ftdiv+1)& (0+255),0,b
 11090  0121CA                     u2661:
 11091  0121CA  0100               	movlb	0	; () banked
 11092  0121CC  519F               	movf	??___ftdiv& (0+255),w,b
 11093  0121CE  0100               	movlb	0	; () banked
 11094  0121D0  6FA7               	movwf	___ftdiv@sign& (0+255),b
 11095  0121D2  0100               	movlb	0	; () banked
 11096  0121D4  51A7               	movf	___ftdiv@sign& (0+255),w,b
 11097  0121D6  A4D8               	btfss	status,2,c
 11098  0121D8  D00A               	goto	l3236
 11099                           
 11100                           ; BSR set to: 0
 11101  0121DA  0E00               	movlw	0
 11102  0121DC  0100               	movlb	0	; () banked
 11103  0121DE  6F99               	movwf	?___ftdiv& (0+255),b
 11104  0121E0  0E00               	movlw	0
 11105  0121E2  0100               	movlb	0	; () banked
 11106  0121E4  6F9A               	movwf	(?___ftdiv+1)& (0+255),b
 11107  0121E6  0E00               	movlw	0
 11108  0121E8  0100               	movlb	0	; () banked
 11109  0121EA  6F9B               	movwf	(?___ftdiv+2)& (0+255),b
 11110                           
 11111                           ; BSR set to: 0
 11112  0121EC  0012               	return	
 11113  0121EE                     l3236:
 11114                           
 11115                           ; BSR set to: 0
 11116  0121EE  0E00               	movlw	0
 11117  0121F0  0100               	movlb	0	; () banked
 11118  0121F2  6FA3               	movwf	___ftdiv@f3& (0+255),b
 11119  0121F4  0E00               	movlw	0
 11120  0121F6  0100               	movlb	0	; () banked
 11121  0121F8  6FA4               	movwf	(___ftdiv@f3+1)& (0+255),b
 11122  0121FA  0E00               	movlw	0
 11123  0121FC  0100               	movlb	0	; () banked
 11124  0121FE  6FA5               	movwf	(___ftdiv@f3+2)& (0+255),b
 11125                           
 11126                           ; BSR set to: 0
 11127  012200  0100               	movlb	0	; () banked
 11128  012202  51A7               	movf	___ftdiv@sign& (0+255),w,b
 11129  012204  0F89               	addlw	137
 11130  012206  0100               	movlb	0	; () banked
 11131  012208  5FA6               	subwf	___ftdiv@exp& (0+255),f,b
 11132                           
 11133                           ; BSR set to: 0
 11134  01220A  C09B  F0A7         	movff	___ftdiv@f1+2,___ftdiv@sign
 11135                           
 11136                           ; BSR set to: 0
 11137  01220E  0100               	movlb	0	; () banked
 11138  012210  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11139  012212  0100               	movlb	0	; () banked
 11140  012214  1BA7               	xorwf	___ftdiv@sign& (0+255),f,b
 11141                           
 11142                           ; BSR set to: 0
 11143  012216  0E80               	movlw	128
 11144  012218  0100               	movlb	0	; () banked
 11145  01221A  17A7               	andwf	___ftdiv@sign& (0+255),f,b
 11146                           
 11147                           ; BSR set to: 0
 11148  01221C  0100               	movlb	0	; () banked
 11149  01221E  8F9A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11150                           
 11151                           ; BSR set to: 0
 11152  012220  0EFF               	movlw	255
 11153  012222  0100               	movlb	0	; () banked
 11154  012224  1799               	andwf	___ftdiv@f1& (0+255),f,b
 11155  012226  0EFF               	movlw	255
 11156  012228  0100               	movlb	0	; () banked
 11157  01222A  179A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11158  01222C  0E00               	movlw	0
 11159  01222E  0100               	movlb	0	; () banked
 11160  012230  179B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11161                           
 11162                           ; BSR set to: 0
 11163  012232  0100               	movlb	0	; () banked
 11164  012234  8F9D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11165                           
 11166                           ; BSR set to: 0
 11167  012236  0EFF               	movlw	255
 11168  012238  0100               	movlb	0	; () banked
 11169  01223A  179C               	andwf	___ftdiv@f2& (0+255),f,b
 11170  01223C  0EFF               	movlw	255
 11171  01223E  0100               	movlb	0	; () banked
 11172  012240  179D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11173  012242  0E00               	movlw	0
 11174  012244  0100               	movlb	0	; () banked
 11175  012246  179E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11176                           
 11177                           ; BSR set to: 0
 11178  012248  0E18               	movlw	24
 11179  01224A  0100               	movlb	0	; () banked
 11180  01224C  6FA2               	movwf	___ftdiv@cntr& (0+255),b
 11181  01224E                     l3256:
 11182                           
 11183                           ; BSR set to: 0
 11184  01224E  0100               	movlb	0	; () banked
 11185  012250  90D8               	bcf	status,0,c
 11186  012252  37A3               	rlcf	___ftdiv@f3& (0+255),f,b
 11187  012254  37A4               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11188  012256  37A5               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11189                           
 11190                           ; BSR set to: 0
 11191  012258  0100               	movlb	0	; () banked
 11192  01225A  519C               	movf	___ftdiv@f2& (0+255),w,b
 11193  01225C  0100               	movlb	0	; () banked
 11194  01225E  5D99               	subwf	___ftdiv@f1& (0+255),w,b
 11195  012260  0100               	movlb	0	; () banked
 11196  012262  519D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11197  012264  0100               	movlb	0	; () banked
 11198  012266  599A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11199  012268  0100               	movlb	0	; () banked
 11200  01226A  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11201  01226C  0100               	movlb	0	; () banked
 11202  01226E  599B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11203  012270  A0D8               	btfss	status,0,c
 11204  012272  D00E               	goto	l901
 11205                           
 11206                           ; BSR set to: 0
 11207  012274  0100               	movlb	0	; () banked
 11208  012276  519C               	movf	___ftdiv@f2& (0+255),w,b
 11209  012278  0100               	movlb	0	; () banked
 11210  01227A  5F99               	subwf	___ftdiv@f1& (0+255),f,b
 11211  01227C  0100               	movlb	0	; () banked
 11212  01227E  519D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11213  012280  0100               	movlb	0	; () banked
 11214  012282  5B9A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11215  012284  0100               	movlb	0	; () banked
 11216  012286  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11217  012288  0100               	movlb	0	; () banked
 11218  01228A  5B9B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11219                           
 11220                           ; BSR set to: 0
 11221  01228C  0100               	movlb	0	; () banked
 11222  01228E  81A3               	bsf	___ftdiv@f3& (0+255),0,b
 11223  012290                     l901:
 11224                           
 11225                           ; BSR set to: 0
 11226  012290  0100               	movlb	0	; () banked
 11227  012292  90D8               	bcf	status,0,c
 11228  012294  3799               	rlcf	___ftdiv@f1& (0+255),f,b
 11229  012296  379A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11230  012298  379B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11231                           
 11232                           ; BSR set to: 0
 11233  01229A  0100               	movlb	0	; () banked
 11234  01229C  2FA2               	decfsz	___ftdiv@cntr& (0+255),f,b
 11235  01229E  D7D7               	goto	l3256
 11236                           
 11237                           ; BSR set to: 0
 11238                           
 11239                           ; BSR set to: 0
 11240  0122A0  C0A3  F060         	movff	___ftdiv@f3,___ftpack@arg
 11241  0122A4  C0A4  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11242  0122A8  C0A5  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11243  0122AC  C0A6  F063         	movff	___ftdiv@exp,___ftpack@exp
 11244  0122B0  C0A7  F064         	movff	___ftdiv@sign,___ftpack@sign
 11245  0122B4  ECAB  F093         	call	___ftpack	;wreg free
 11246  0122B8  C060  F099         	movff	?___ftpack,?___ftdiv
 11247  0122BC  C061  F09A         	movff	?___ftpack+1,?___ftdiv+1
 11248  0122C0  C062  F09B         	movff	?___ftpack+2,?___ftdiv+2
 11249  0122C4  0012               	return	
 11250  0122C6                     __end_of___ftdiv:
 11251                           	opt stack 0
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           postinc0	equ	0xFEE
 11260                           wreg	equ	0xFE8
 11261                           indf1	equ	0xFE7
 11262                           postdec1	equ	0xFE5
 11263                           fsr1h	equ	0xFE2
 11264                           fsr1l	equ	0xFE1
 11265                           indf2	equ	0xFDF
 11266                           postinc2	equ	0xFDE
 11267                           postdec2	equ	0xFDD
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function ___awtoft *****************
 11273 ;; Defined at:
 11274 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  c               2    8[BANK0 ] int 
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;  sign            1   11[BANK0 ] unsigned char 
 11279 ;; Return value:  Size  Location     Type
 11280 ;;                  3    8[BANK0 ] float 
 11281 ;; Registers used:
 11282 ;;		wreg, status,2, status,0, cstack
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11288 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11291 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11292 ;;Total ram usage:        4 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    5
 11295 ;; This function calls:
 11296 ;;		___ftpack
 11297 ;; This function is called by:
 11298 ;;		_initSPI
 11299 ;;		_adjustDigipot
 11300 ;;		_exp
 11301 ;;		_log
 11302 ;;		_calculateTemp
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text41
 11307  01371E                     __ptext41:
 11308                           	opt stack 0
 11309  01371E                     ___awtoft:
 11310                           	opt stack 22
 11311                           
 11312                           ;incstack = 0
 11313  01371E  0E00               	movlw	0
 11314  013720  0100               	movlb	0	; () banked
 11315  013722  6F6B               	movwf	___awtoft@sign& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318  013724  0100               	movlb	0	; () banked
 11319  013726  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
 11320  013728  D008               	goto	l3286
 11321                           
 11322                           ; BSR set to: 0
 11323  01372A  0100               	movlb	0	; () banked
 11324  01372C  6D68               	negf	___awtoft@c& (0+255),b
 11325  01372E  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
 11326  013730  B0D8               	btfsc	status,0,c
 11327  013732  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
 11328                           
 11329                           ; BSR set to: 0
 11330  013734  0E01               	movlw	1
 11331  013736  0100               	movlb	0	; () banked
 11332  013738  6F6B               	movwf	___awtoft@sign& (0+255),b
 11333  01373A                     l3286:
 11334                           
 11335                           ; BSR set to: 0
 11336  01373A  C068  F060         	movff	___awtoft@c,___ftpack@arg
 11337  01373E  C069  F061         	movff	___awtoft@c+1,___ftpack@arg+1
 11338  013742  0100               	movlb	0	; () banked
 11339  013744  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 11340  013746  0E8E               	movlw	142
 11341  013748  0100               	movlb	0	; () banked
 11342  01374A  6F63               	movwf	___ftpack@exp& (0+255),b
 11343  01374C  C06B  F064         	movff	___awtoft@sign,___ftpack@sign
 11344  013750  ECAB  F093         	call	___ftpack	;wreg free
 11345  013754  C060  F068         	movff	?___ftpack,?___awtoft
 11346  013758  C061  F069         	movff	?___ftpack+1,?___awtoft+1
 11347  01375C  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
 11348  013760  0012               	return	
 11349  013762                     __end_of___awtoft:
 11350                           	opt stack 0
 11351                           tblptru	equ	0xFF8
 11352                           tblptrh	equ	0xFF7
 11353                           tblptrl	equ	0xFF6
 11354                           tablat	equ	0xFF5
 11355                           prodh	equ	0xFF4
 11356                           prodl	equ	0xFF3
 11357                           intcon	equ	0xFF2
 11358                           postinc0	equ	0xFEE
 11359                           wreg	equ	0xFE8
 11360                           indf1	equ	0xFE7
 11361                           postdec1	equ	0xFE5
 11362                           fsr1h	equ	0xFE2
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           fsr2h	equ	0xFDA
 11368                           fsr2l	equ	0xFD9
 11369                           status	equ	0xFD8
 11370                           
 11371 ;; *************** function ___lltoft *****************
 11372 ;; Defined at:
 11373 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
 11374 ;; Parameters:    Size  Location     Type
 11375 ;;  c               4    8[BANK0 ] unsigned long 
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;  exp             1   16[BANK0 ] unsigned char 
 11378 ;; Return value:  Size  Location     Type
 11379 ;;                  3    8[BANK0 ] float 
 11380 ;; Registers used:
 11381 ;;		wreg, status,2, status,0, cstack
 11382 ;; Tracked objects:
 11383 ;;		On entry : 0/0
 11384 ;;		On exit  : 0/0
 11385 ;;		Unchanged: 0/0
 11386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11387 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11389 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11390 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11391 ;;Total ram usage:        9 bytes
 11392 ;; Hardware stack levels used:    1
 11393 ;; Hardware stack levels required when called:    5
 11394 ;; This function calls:
 11395 ;;		___ftpack
 11396 ;; This function is called by:
 11397 ;;		_digipot
 11398 ;;		_sprintf
 11399 ;;		_pow
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           	psect	text42
 11404  013320                     __ptext42:
 11405                           	opt stack 0
 11406  013320                     ___lltoft:
 11407                           	opt stack 23
 11408                           
 11409                           ;incstack = 0
 11410  013320  0E8E               	movlw	142
 11411  013322  0100               	movlb	0	; () banked
 11412  013324  6F70               	movwf	___lltoft@exp& (0+255),b
 11413  013326  D008               	goto	l3444
 11414  013328                     l3442:
 11415                           
 11416                           ; BSR set to: 0
 11417  013328  0100               	movlb	0	; () banked
 11418  01332A  90D8               	bcf	status,0,c
 11419  01332C  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11420  01332E  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11421  013330  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11422  013332  3368               	rrcf	___lltoft@c& (0+255),f,b
 11423  013334  0100               	movlb	0	; () banked
 11424  013336  2B70               	incf	___lltoft@exp& (0+255),f,b
 11425  013338                     l3444:
 11426                           
 11427                           ; BSR set to: 0
 11428  013338  0E00               	movlw	0
 11429  01333A  0100               	movlb	0	; () banked
 11430  01333C  1568               	andwf	___lltoft@c& (0+255),w,b
 11431  01333E  0100               	movlb	0	; () banked
 11432  013340  6F6C               	movwf	??___lltoft& (0+255),b
 11433  013342  0E00               	movlw	0
 11434  013344  0100               	movlb	0	; () banked
 11435  013346  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
 11436  013348  0100               	movlb	0	; () banked
 11437  01334A  6F6D               	movwf	(??___lltoft+1)& (0+255),b
 11438  01334C  0E00               	movlw	0
 11439  01334E  0100               	movlb	0	; () banked
 11440  013350  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
 11441  013352  0100               	movlb	0	; () banked
 11442  013354  6F6E               	movwf	(??___lltoft+2)& (0+255),b
 11443  013356  0EFF               	movlw	255
 11444  013358  0100               	movlb	0	; () banked
 11445  01335A  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
 11446  01335C  0100               	movlb	0	; () banked
 11447  01335E  6F6F               	movwf	(??___lltoft+3)& (0+255),b
 11448  013360  0100               	movlb	0	; () banked
 11449  013362  516C               	movf	??___lltoft& (0+255),w,b
 11450  013364  0100               	movlb	0	; () banked
 11451  013366  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11452  013368  0100               	movlb	0	; () banked
 11453  01336A  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11454  01336C  0100               	movlb	0	; () banked
 11455  01336E  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11456  013370  A4D8               	btfss	status,2,c
 11457  013372  D7DA               	goto	l3442
 11458                           
 11459                           ; BSR set to: 0
 11460                           
 11461                           ; BSR set to: 0
 11462  013374  C068  F060         	movff	___lltoft@c,___ftpack@arg
 11463  013378  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
 11464  01337C  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
 11465  013380  C070  F063         	movff	___lltoft@exp,___ftpack@exp
 11466  013384  0E00               	movlw	0
 11467  013386  0100               	movlb	0	; () banked
 11468  013388  6F64               	movwf	___ftpack@sign& (0+255),b
 11469  01338A  ECAB  F093         	call	___ftpack	;wreg free
 11470  01338E  C060  F068         	movff	?___ftpack,?___lltoft
 11471  013392  C061  F069         	movff	?___ftpack+1,?___lltoft+1
 11472  013396  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
 11473  01339A  0012               	return	
 11474  01339C                     __end_of___lltoft:
 11475                           	opt stack 0
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           postinc0	equ	0xFEE
 11484                           wreg	equ	0xFE8
 11485                           indf1	equ	0xFE7
 11486                           postdec1	equ	0xFE5
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function ___lbtoft *****************
 11497 ;; Defined at:
 11498 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lbtoft.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  c               1    wreg     unsigned char 
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;  c               1   11[BANK0 ] unsigned char 
 11503 ;; Return value:  Size  Location     Type
 11504 ;;                  3    8[BANK0 ] float 
 11505 ;; Registers used:
 11506 ;;		wreg, status,2, status,0, cstack
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11512 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11515 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11516 ;;Total ram usage:        4 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:    5
 11519 ;; This function calls:
 11520 ;;		___ftpack
 11521 ;; This function is called by:
 11522 ;;		_initSPI
 11523 ;;		_adjustDigipot
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	text43
 11528  013832                     __ptext43:
 11529                           	opt stack 0
 11530  013832                     ___lbtoft:
 11531                           	opt stack 24
 11532                           
 11533                           ;incstack = 0
 11534                           ;___lbtoft@c stored from wreg
 11535  013832  0100               	movlb	0	; () banked
 11536  013834  6F6B               	movwf	___lbtoft@c& (0+255),b
 11537  013836  0100               	movlb	0	; () banked
 11538  013838  516B               	movf	___lbtoft@c& (0+255),w,b
 11539  01383A  0100               	movlb	0	; () banked
 11540  01383C  6F60               	movwf	___ftpack@arg& (0+255),b
 11541  01383E  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
 11542  013840  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 11543  013842  0E8E               	movlw	142
 11544  013844  0100               	movlb	0	; () banked
 11545  013846  6F63               	movwf	___ftpack@exp& (0+255),b
 11546  013848  0E00               	movlw	0
 11547  01384A  0100               	movlb	0	; () banked
 11548  01384C  6F64               	movwf	___ftpack@sign& (0+255),b
 11549  01384E  ECAB  F093         	call	___ftpack	;wreg free
 11550  013852  C060  F068         	movff	?___ftpack,?___lbtoft
 11551  013856  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
 11552  01385A  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
 11553  01385E  0012               	return	
 11554  013860                     __end_of___lbtoft:
 11555                           	opt stack 0
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           intcon	equ	0xFF2
 11563                           postinc0	equ	0xFEE
 11564                           wreg	equ	0xFE8
 11565                           indf1	equ	0xFE7
 11566                           postdec1	equ	0xFE5
 11567                           fsr1h	equ	0xFE2
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           fsr2h	equ	0xFDA
 11573                           fsr2l	equ	0xFD9
 11574                           status	equ	0xFD8
 11575                           
 11576 ;; *************** function ___ftpack *****************
 11577 ;; Defined at:
 11578 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;  arg             3    0[BANK0 ] unsigned um
 11581 ;;  exp             1    3[BANK0 ] unsigned char 
 11582 ;;  sign            1    4[BANK0 ] unsigned char 
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  3    0[BANK0 ] float 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11594 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11596 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11597 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11598 ;;Total ram usage:        8 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    4
 11601 ;; This function calls:
 11602 ;;		Nothing
 11603 ;; This function is called by:
 11604 ;;		___altoft
 11605 ;;		___awtoft
 11606 ;;		___ftadd
 11607 ;;		___ftdiv
 11608 ;;		___ftmul
 11609 ;;		___lbtoft
 11610 ;;		___lltoft
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           	psect	text44
 11615  012756                     __ptext44:
 11616                           	opt stack 0
 11617  012756                     ___ftpack:
 11618                           	opt stack 22
 11619                           
 11620                           ;incstack = 0
 11621  012756  0100               	movlb	0	; () banked
 11622  012758  5163               	movf	___ftpack@exp& (0+255),w,b
 11623  01275A  0100               	movlb	0	; () banked
 11624  01275C  B4D8               	btfsc	status,2,c
 11625  01275E  D008               	goto	l2968
 11626                           
 11627                           ; BSR set to: 0
 11628  012760  0100               	movlb	0	; () banked
 11629  012762  5160               	movf	___ftpack@arg& (0+255),w,b
 11630  012764  0100               	movlb	0	; () banked
 11631  012766  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11632  012768  0100               	movlb	0	; () banked
 11633  01276A  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11634  01276C  A4D8               	btfss	status,2,c
 11635  01276E  D011               	goto	l2974
 11636  012770                     l2968:
 11637                           
 11638                           ; BSR set to: 0
 11639  012770  0E00               	movlw	0
 11640  012772  0100               	movlb	0	; () banked
 11641  012774  6F60               	movwf	?___ftpack& (0+255),b
 11642  012776  0E00               	movlw	0
 11643  012778  0100               	movlb	0	; () banked
 11644  01277A  6F61               	movwf	(?___ftpack+1)& (0+255),b
 11645  01277C  0E00               	movlw	0
 11646  01277E  0100               	movlb	0	; () banked
 11647  012780  6F62               	movwf	(?___ftpack+2)& (0+255),b
 11648                           
 11649                           ; BSR set to: 0
 11650  012782  0012               	return	
 11651  012784                     l2972:
 11652                           
 11653                           ; BSR set to: 0
 11654  012784  0100               	movlb	0	; () banked
 11655  012786  2B63               	incf	___ftpack@exp& (0+255),f,b
 11656  012788  0100               	movlb	0	; () banked
 11657  01278A  90D8               	bcf	status,0,c
 11658  01278C  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11659  01278E  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11660  012790  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11661  012792                     l2974:
 11662                           
 11663                           ; BSR set to: 0
 11664  012792  0E00               	movlw	0
 11665  012794  0100               	movlb	0	; () banked
 11666  012796  1560               	andwf	___ftpack@arg& (0+255),w,b
 11667  012798  0100               	movlb	0	; () banked
 11668  01279A  6F65               	movwf	??___ftpack& (0+255),b
 11669  01279C  0E00               	movlw	0
 11670  01279E  0100               	movlb	0	; () banked
 11671  0127A0  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11672  0127A2  0100               	movlb	0	; () banked
 11673  0127A4  6F66               	movwf	(??___ftpack+1)& (0+255),b
 11674  0127A6  0EFE               	movlw	254
 11675  0127A8  0100               	movlb	0	; () banked
 11676  0127AA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11677  0127AC  0100               	movlb	0	; () banked
 11678  0127AE  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11679  0127B0  0100               	movlb	0	; () banked
 11680  0127B2  5165               	movf	??___ftpack& (0+255),w,b
 11681  0127B4  0100               	movlb	0	; () banked
 11682  0127B6  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11683  0127B8  0100               	movlb	0	; () banked
 11684  0127BA  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11685  0127BC  B4D8               	btfsc	status,2,c
 11686  0127BE  D011               	goto	l2980
 11687  0127C0  D7E1               	goto	l2972
 11688  0127C2                     l2976:
 11689                           
 11690                           ; BSR set to: 0
 11691  0127C2  0100               	movlb	0	; () banked
 11692  0127C4  2B63               	incf	___ftpack@exp& (0+255),f,b
 11693                           
 11694                           ; BSR set to: 0
 11695  0127C6  0E01               	movlw	1
 11696  0127C8  0100               	movlb	0	; () banked
 11697  0127CA  2760               	addwf	___ftpack@arg& (0+255),f,b
 11698  0127CC  0E00               	movlw	0
 11699  0127CE  0100               	movlb	0	; () banked
 11700  0127D0  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11701  0127D2  0E00               	movlw	0
 11702  0127D4  0100               	movlb	0	; () banked
 11703  0127D6  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11704  0127D8  0100               	movlb	0	; () banked
 11705  0127DA  90D8               	bcf	status,0,c
 11706  0127DC  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11707  0127DE  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11708  0127E0  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11709  0127E2                     l2980:
 11710                           
 11711                           ; BSR set to: 0
 11712  0127E2  0E00               	movlw	0
 11713  0127E4  0100               	movlb	0	; () banked
 11714  0127E6  1560               	andwf	___ftpack@arg& (0+255),w,b
 11715  0127E8  0100               	movlb	0	; () banked
 11716  0127EA  6F65               	movwf	??___ftpack& (0+255),b
 11717  0127EC  0E00               	movlw	0
 11718  0127EE  0100               	movlb	0	; () banked
 11719  0127F0  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 11720  0127F2  0100               	movlb	0	; () banked
 11721  0127F4  6F66               	movwf	(??___ftpack+1)& (0+255),b
 11722  0127F6  0EFF               	movlw	255
 11723  0127F8  0100               	movlb	0	; () banked
 11724  0127FA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11725  0127FC  0100               	movlb	0	; () banked
 11726  0127FE  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11727  012800  0100               	movlb	0	; () banked
 11728  012802  5165               	movf	??___ftpack& (0+255),w,b
 11729  012804  0100               	movlb	0	; () banked
 11730  012806  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11731  012808  0100               	movlb	0	; () banked
 11732  01280A  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11733  01280C  B4D8               	btfsc	status,2,c
 11734  01280E  D008               	goto	l2984
 11735  012810  D7D8               	goto	l2976
 11736  012812                     l2982:
 11737                           
 11738                           ; BSR set to: 0
 11739  012812  0100               	movlb	0	; () banked
 11740  012814  0763               	decf	___ftpack@exp& (0+255),f,b
 11741  012816  0100               	movlb	0	; () banked
 11742  012818  90D8               	bcf	status,0,c
 11743  01281A  3760               	rlcf	___ftpack@arg& (0+255),f,b
 11744  01281C  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11745  01281E  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11746  012820                     l2984:
 11747                           
 11748                           ; BSR set to: 0
 11749  012820  0100               	movlb	0	; () banked
 11750  012822  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11751  012824  D004               	goto	l843
 11752                           
 11753                           ; BSR set to: 0
 11754  012826  0E02               	movlw	2
 11755  012828  0100               	movlb	0	; () banked
 11756  01282A  6163               	cpfslt	___ftpack@exp& (0+255),b
 11757  01282C  D7F2               	goto	l2982
 11758  01282E                     l843:
 11759                           
 11760                           ; BSR set to: 0
 11761  01282E  0100               	movlb	0	; () banked
 11762  012830  B163               	btfsc	___ftpack@exp& (0+255),0,b
 11763  012832  D002               	goto	l2990
 11764                           
 11765                           ; BSR set to: 0
 11766  012834  0100               	movlb	0	; () banked
 11767  012836  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11768  012838                     l2990:
 11769                           
 11770                           ; BSR set to: 0
 11771  012838  0100               	movlb	0	; () banked
 11772  01283A  90D8               	bcf	status,0,c
 11773  01283C  3363               	rrcf	___ftpack@exp& (0+255),f,b
 11774  01283E  0100               	movlb	0	; () banked
 11775  012840  5163               	movf	___ftpack@exp& (0+255),w,b
 11776  012842  0100               	movlb	0	; () banked
 11777  012844  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11778                           
 11779                           ; BSR set to: 0
 11780  012846  0100               	movlb	0	; () banked
 11781  012848  5164               	movf	___ftpack@sign& (0+255),w,b
 11782  01284A  0100               	movlb	0	; () banked
 11783  01284C  B4D8               	btfsc	status,2,c
 11784  01284E  D002               	goto	l2996
 11785                           
 11786                           ; BSR set to: 0
 11787  012850  0100               	movlb	0	; () banked
 11788  012852  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11789  012854                     l2996:
 11790                           
 11791                           ; BSR set to: 0
 11792  012854  C060  F060         	movff	___ftpack@arg,?___ftpack
 11793  012858  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 11794  01285C  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 11795  012860  0012               	return	
 11796  012862                     __end_of___ftpack:
 11797                           	opt stack 0
 11798                           tblptru	equ	0xFF8
 11799                           tblptrh	equ	0xFF7
 11800                           tblptrl	equ	0xFF6
 11801                           tablat	equ	0xFF5
 11802                           prodh	equ	0xFF4
 11803                           prodl	equ	0xFF3
 11804                           intcon	equ	0xFF2
 11805                           postinc0	equ	0xFEE
 11806                           wreg	equ	0xFE8
 11807                           indf1	equ	0xFE7
 11808                           postdec1	equ	0xFE5
 11809                           fsr1h	equ	0xFE2
 11810                           fsr1l	equ	0xFE1
 11811                           indf2	equ	0xFDF
 11812                           postinc2	equ	0xFDE
 11813                           postdec2	equ	0xFDD
 11814                           fsr2h	equ	0xFDA
 11815                           fsr2l	equ	0xFD9
 11816                           status	equ	0xFD8
 11817                           
 11818 ;; *************** function _UARTReceive *****************
 11819 ;; Defined at:
 11820 ;;		line 54 in file "uart.c"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;  on_or_off       1    wreg     unsigned char 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  on_or_off       1    0[BANK0 ] unsigned char 
 11825 ;; Return value:  Size  Location     Type
 11826 ;;		None               void
 11827 ;; Registers used:
 11828 ;;		wreg, status,2, status,0
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11838 ;;Total ram usage:        1 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:    4
 11841 ;; This function calls:
 11842 ;;		Nothing
 11843 ;; This function is called by:
 11844 ;;		_main
 11845 ;; This function uses a non-reentrant model
 11846 ;;
 11847                           
 11848                           	psect	text45
 11849  0138D6                     __ptext45:
 11850                           	opt stack 0
 11851  0138D6                     _UARTReceive:
 11852                           	opt stack 26
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;incstack = 0
 11856                           ;UARTReceive@on_or_off stored from wreg
 11857  0138D6  0100               	movlb	0	; () banked
 11858  0138D8  6F60               	movwf	UARTReceive@on_or_off& (0+255),b
 11859                           
 11860                           ;uart.c: 55: if(on_or_off == 1){
 11861  0138DA  0100               	movlb	0	; () banked
 11862  0138DC  0560               	decf	UARTReceive@on_or_off& (0+255),w,b
 11863  0138DE  A4D8               	btfss	status,2,c
 11864  0138E0  D002               	goto	l162
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;uart.c: 56: RCSTA1bits.CREN = 1;
 11868  0138E2  88AC               	bsf	4012,4,c	;volatile
 11869                           
 11870                           ;uart.c: 57: }
 11871  0138E4  0012               	return	
 11872  0138E6                     l162:
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;uart.c: 58: else{
 11876                           ;uart.c: 59: RCSTA1bits.CREN = 0;
 11877  0138E6  98AC               	bcf	4012,4,c	;volatile
 11878  0138E8  0012               	return	
 11879  0138EA                     __end_of_UARTReceive:
 11880                           	opt stack 0
 11881                           tblptru	equ	0xFF8
 11882                           tblptrh	equ	0xFF7
 11883                           tblptrl	equ	0xFF6
 11884                           tablat	equ	0xFF5
 11885                           prodh	equ	0xFF4
 11886                           prodl	equ	0xFF3
 11887                           intcon	equ	0xFF2
 11888                           postinc0	equ	0xFEE
 11889                           wreg	equ	0xFE8
 11890                           indf1	equ	0xFE7
 11891                           postdec1	equ	0xFE5
 11892                           fsr1h	equ	0xFE2
 11893                           fsr1l	equ	0xFE1
 11894                           indf2	equ	0xFDF
 11895                           postinc2	equ	0xFDE
 11896                           postdec2	equ	0xFDD
 11897                           fsr2h	equ	0xFDA
 11898                           fsr2l	equ	0xFD9
 11899                           status	equ	0xFD8
 11900                           
 11901 ;; *************** function _high_ISR *****************
 11902 ;; Defined at:
 11903 ;;		line 69 in file "main.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;		None
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;		None
 11908 ;; Return value:  Size  Location     Type
 11909 ;;		None               void
 11910 ;; Registers used:
 11911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11919 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11920 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11921 ;;Total ram usage:       14 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    3
 11924 ;; This function calls:
 11925 ;;		_frequency_interrupt
 11926 ;;		_temperature_interrupt
 11927 ;;		_timer1_interrupt
 11928 ;;		_uart_interrupt
 11929 ;; This function is called by:
 11930 ;;		Interrupt level 2
 11931 ;; This function uses a non-reentrant model
 11932 ;;
 11933                           
 11934                           	psect	intcode
 11935  000008                     __pintcode:
 11936                           	opt stack 0
 11937  000008                     _high_ISR:
 11938                           	opt stack 20
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;incstack = 0
 11942  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11943  00000A  CFFA F027          	movff	pclath,??_high_ISR
 11944  00000E  CFFB F028          	movff	pclatu,??_high_ISR+1
 11945  000012  CFE9 F029          	movff	fsr0l,??_high_ISR+2
 11946  000016  CFEA F02A          	movff	fsr0h,??_high_ISR+3
 11947  00001A  CFE1 F02B          	movff	fsr1l,??_high_ISR+4
 11948  00001E  CFE2 F02C          	movff	fsr1h,??_high_ISR+5
 11949  000022  CFD9 F02D          	movff	fsr2l,??_high_ISR+6
 11950  000026  CFDA F02E          	movff	fsr2h,??_high_ISR+7
 11951  00002A  CFF3 F02F          	movff	prodl,??_high_ISR+8
 11952  00002E  CFF4 F030          	movff	prodh,??_high_ISR+9
 11953  000032  CFF6 F031          	movff	tblptrl,??_high_ISR+10
 11954  000036  CFF7 F032          	movff	tblptrh,??_high_ISR+11
 11955  00003A  CFF8 F033          	movff	tblptru,??_high_ISR+12
 11956  00003E  CFF5 F034          	movff	tablat,??_high_ISR+13
 11957                           
 11958                           ;main.c: 70: temperature_interrupt();
 11959  000042  EC03  F099         	call	_temperature_interrupt	;wreg free
 11960                           
 11961                           ;main.c: 71: uart_interrupt();
 11962  000046  ECB1  F09B         	call	_uart_interrupt	;wreg free
 11963                           
 11964                           ;main.c: 72: frequency_interrupt();
 11965  00004A  ECC2  F088         	call	_frequency_interrupt	;wreg free
 11966                           
 11967                           ;main.c: 73: timer1_interrupt();
 11968  00004E  EC75  F09C         	call	_timer1_interrupt	;wreg free
 11969  000052  C034  FFF5         	movff	??_high_ISR+13,tablat
 11970  000056  C033  FFF8         	movff	??_high_ISR+12,tblptru
 11971  00005A  C032  FFF7         	movff	??_high_ISR+11,tblptrh
 11972  00005E  C031  FFF6         	movff	??_high_ISR+10,tblptrl
 11973  000062  C030  FFF4         	movff	??_high_ISR+9,prodh
 11974  000066  C02F  FFF3         	movff	??_high_ISR+8,prodl
 11975  00006A  C02E  FFDA         	movff	??_high_ISR+7,fsr2h
 11976  00006E  C02D  FFD9         	movff	??_high_ISR+6,fsr2l
 11977  000072  C02C  FFE2         	movff	??_high_ISR+5,fsr1h
 11978  000076  C02B  FFE1         	movff	??_high_ISR+4,fsr1l
 11979  00007A  C02A  FFEA         	movff	??_high_ISR+3,fsr0h
 11980  00007E  C029  FFE9         	movff	??_high_ISR+2,fsr0l
 11981  000082  C028  FFFB         	movff	??_high_ISR+1,pclatu
 11982  000086  C027  FFFA         	movff	??_high_ISR,pclath
 11983  00008A  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11984  00008C  0011               	retfie		f
 11985  00008E                     __end_of_high_ISR:
 11986                           	opt stack 0
 11987                           pclatu	equ	0xFFB
 11988                           pclath	equ	0xFFA
 11989                           tblptru	equ	0xFF8
 11990                           tblptrh	equ	0xFF7
 11991                           tblptrl	equ	0xFF6
 11992                           tablat	equ	0xFF5
 11993                           prodh	equ	0xFF4
 11994                           prodl	equ	0xFF3
 11995                           intcon	equ	0xFF2
 11996                           postinc0	equ	0xFEE
 11997                           fsr0h	equ	0xFEA
 11998                           fsr0l	equ	0xFE9
 11999                           wreg	equ	0xFE8
 12000                           indf1	equ	0xFE7
 12001                           postdec1	equ	0xFE5
 12002                           fsr1h	equ	0xFE2
 12003                           fsr1l	equ	0xFE1
 12004                           indf2	equ	0xFDF
 12005                           postinc2	equ	0xFDE
 12006                           postdec2	equ	0xFDD
 12007                           fsr2h	equ	0xFDA
 12008                           fsr2l	equ	0xFD9
 12009                           status	equ	0xFD8
 12010                           
 12011 ;; *************** function _uart_interrupt *****************
 12012 ;; Defined at:
 12013 ;;		line 103 in file "uart.c"
 12014 ;; Parameters:    Size  Location     Type
 12015 ;;		None
 12016 ;; Auto vars:     Size  Location     Type
 12017 ;;		None
 12018 ;; Return value:  Size  Location     Type
 12019 ;;		None               void
 12020 ;; Registers used:
 12021 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12022 ;; Tracked objects:
 12023 ;;		On entry : 0/0
 12024 ;;		On exit  : 0/0
 12025 ;;		Unchanged: 0/0
 12026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12031 ;;Total ram usage:        0 bytes
 12032 ;; Hardware stack levels used:    1
 12033 ;; This function calls:
 12034 ;;		Nothing
 12035 ;; This function is called by:
 12036 ;;		_high_ISR
 12037 ;; This function uses a non-reentrant model
 12038 ;;
 12039                           
 12040                           	psect	text47
 12041  013762                     __ptext47:
 12042                           	opt stack 0
 12043  013762                     _uart_interrupt:
 12044                           	opt stack 22
 12045                           
 12046                           ;uart.c: 105: if(PIR1bits.RC1IF == 1){
 12047                           
 12048                           ;incstack = 0
 12049  013762  AA9E               	btfss	3998,5,c	;volatile
 12050  013764  0012               	return	
 12051                           
 12052                           ;uart.c: 106: PIR1bits.RC1IF = 0;
 12053  013766  9A9E               	bcf	3998,5,c	;volatile
 12054                           
 12055                           ;uart.c: 108: uart_receive_buffer[uart_receive_buffer_index] = RCREG1;
 12056  013768  0E00               	movlw	low _uart_receive_buffer
 12057  01376A  0100               	movlb	0	; () banked
 12058  01376C  25EE               	addwf	_uart_receive_buffer_index& (0+255),w,b
 12059  01376E  6ED9               	movwf	fsr2l,c
 12060  013770  0E01               	movlw	high _uart_receive_buffer
 12061  013772  0100               	movlb	0	; () banked
 12062  013774  21EF               	addwfc	(_uart_receive_buffer_index+1)& (0+255),w,b
 12063  013776  6EDA               	movwf	fsr2h,c
 12064  013778  CFAF FFDF          	movff	4015,indf2	;volatile
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;uart.c: 109: uart_receive_buffer_index += 1;
 12068  01377C  0100               	movlb	0	; () banked
 12069  01377E  4BEE               	infsnz	_uart_receive_buffer_index& (0+255),f,b
 12070  013780  2BEF               	incf	(_uart_receive_buffer_index+1)& (0+255),f,b
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;uart.c: 113: if(uart_receive_buffer_index > 100){
 12074  013782  0100               	movlb	0	; () banked
 12075  013784  51EF               	movf	(_uart_receive_buffer_index+1)& (0+255),w,b
 12076  013786  E105               	bnz	i2u409_40
 12077  013788  0E65               	movlw	101
 12078  01378A  0100               	movlb	0	; () banked
 12079  01378C  5DEE               	subwf	_uart_receive_buffer_index& (0+255),w,b
 12080  01378E  A0D8               	btfss	status,0,c
 12081  013790  0012               	return	
 12082  013792                     i2u409_40:
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;uart.c: 114: uart_receive_buffer_index = 0;
 12086  013792  0E00               	movlw	0
 12087  013794  0100               	movlb	0	; () banked
 12088  013796  6FEF               	movwf	(_uart_receive_buffer_index+1)& (0+255),b
 12089  013798  0E00               	movlw	0
 12090  01379A  6FEE               	movwf	_uart_receive_buffer_index& (0+255),b
 12091                           
 12092                           ; BSR set to: 0
 12093  01379C  0012               	return	
 12094  01379E                     __end_of_uart_interrupt:
 12095                           	opt stack 0
 12096                           pclatu	equ	0xFFB
 12097                           pclath	equ	0xFFA
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           postinc0	equ	0xFEE
 12106                           fsr0h	equ	0xFEA
 12107                           fsr0l	equ	0xFE9
 12108                           wreg	equ	0xFE8
 12109                           indf1	equ	0xFE7
 12110                           postdec1	equ	0xFE5
 12111                           fsr1h	equ	0xFE2
 12112                           fsr1l	equ	0xFE1
 12113                           indf2	equ	0xFDF
 12114                           postinc2	equ	0xFDE
 12115                           postdec2	equ	0xFDD
 12116                           fsr2h	equ	0xFDA
 12117                           fsr2l	equ	0xFD9
 12118                           status	equ	0xFD8
 12119                           
 12120 ;; *************** function _timer1_interrupt *****************
 12121 ;; Defined at:
 12122 ;;		line 89 in file "frequency.c"
 12123 ;; Parameters:    Size  Location     Type
 12124 ;;		None
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;		None
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  2   42[None  ] int 
 12129 ;; Registers used:
 12130 ;;		status,2, status,0
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12140 ;;Total ram usage:        0 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; This function calls:
 12143 ;;		Nothing
 12144 ;; This function is called by:
 12145 ;;		_high_ISR
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           	psect	text48
 12150  0138EA                     __ptext48:
 12151                           	opt stack 0
 12152  0138EA                     _timer1_interrupt:
 12153                           	opt stack 22
 12154                           
 12155                           ;frequency.c: 91: if(PIR1bits.TMR1IF == 1)
 12156                           
 12157                           ;incstack = 0
 12158  0138EA  A09E               	btfss	3998,0,c	;volatile
 12159  0138EC  0012               	return	
 12160                           
 12161                           ;frequency.c: 92: {
 12162                           ;frequency.c: 93: interrupt_count_ind++;
 12163  0138EE  4A41               	infsnz	_interrupt_count_ind,f,c
 12164  0138F0  2A42               	incf	_interrupt_count_ind+1,f,c
 12165                           
 12166                           ;frequency.c: 94: interrupt_count_cap++;
 12167  0138F2  4A3F               	infsnz	_interrupt_count_cap,f,c
 12168  0138F4  2A40               	incf	_interrupt_count_cap+1,f,c
 12169                           
 12170                           ;frequency.c: 95: PIR1bits.TMR1IF = 0;
 12171  0138F6  909E               	bcf	3998,0,c	;volatile
 12172  0138F8  0012               	return	
 12173  0138FA                     __end_of_timer1_interrupt:
 12174                           	opt stack 0
 12175                           pclatu	equ	0xFFB
 12176                           pclath	equ	0xFFA
 12177                           tblptru	equ	0xFF8
 12178                           tblptrh	equ	0xFF7
 12179                           tblptrl	equ	0xFF6
 12180                           tablat	equ	0xFF5
 12181                           prodh	equ	0xFF4
 12182                           prodl	equ	0xFF3
 12183                           intcon	equ	0xFF2
 12184                           postinc0	equ	0xFEE
 12185                           fsr0h	equ	0xFEA
 12186                           fsr0l	equ	0xFE9
 12187                           wreg	equ	0xFE8
 12188                           indf1	equ	0xFE7
 12189                           postdec1	equ	0xFE5
 12190                           fsr1h	equ	0xFE2
 12191                           fsr1l	equ	0xFE1
 12192                           indf2	equ	0xFDF
 12193                           postinc2	equ	0xFDE
 12194                           postdec2	equ	0xFDD
 12195                           fsr2h	equ	0xFDA
 12196                           fsr2l	equ	0xFD9
 12197                           status	equ	0xFD8
 12198                           
 12199 ;; *************** function _temperature_interrupt *****************
 12200 ;; Defined at:
 12201 ;;		line 113 in file "temperature.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;		None
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;		None
 12206 ;; Return value:  Size  Location     Type
 12207 ;;		None               void
 12208 ;; Registers used:
 12209 ;;		wreg, status,2, status,0
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12217 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12219 ;;Total ram usage:        2 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; This function calls:
 12222 ;;		Nothing
 12223 ;; This function is called by:
 12224 ;;		_high_ISR
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           	psect	text49
 12229  013206                     __ptext49:
 12230                           	opt stack 0
 12231  013206                     _temperature_interrupt:
 12232                           	opt stack 22
 12233                           
 12234                           ;temperature.c: 115: if(PIR1bits.ADIF == 1)
 12235                           
 12236                           ;incstack = 0
 12237  013206  AC9E               	btfss	3998,6,c	;volatile
 12238  013208  0012               	return	
 12239                           
 12240                           ;temperature.c: 116: {
 12241                           ;temperature.c: 117: PIR1bits.ADIF = 0;
 12242  01320A  9C9E               	bcf	3998,6,c	;volatile
 12243                           
 12244                           ;temperature.c: 118: switch(currentChannel){
 12245  01320C  D031               	goto	i2l2726
 12246  01320E                     i2l263:
 12247                           
 12248                           ;temperature.c: 120: plus_pipe = ADRES;
 12249  01320E  CFC3 F049          	movff	4035,_plus_pipe	;volatile
 12250  013212  CFC4 F04A          	movff	4036,_plus_pipe+1	;volatile
 12251                           
 12252                           ;temperature.c: 121: ADCON0bits.CHS = 0b1000;
 12253  013216  50C2               	movf	4034,w,c	;volatile
 12254  013218  0BC3               	andlw	-61
 12255  01321A  0920               	iorlw	32
 12256  01321C  6EC2               	movwf	4034,c	;volatile
 12257                           
 12258                           ;temperature.c: 122: currentChannel = 1;
 12259  01321E  0E00               	movlw	0
 12260  013220  6E3A               	movwf	_currentChannel+1,c
 12261  013222  0E01               	movlw	1
 12262  013224  D023               	goto	L10
 12263  013226                     i2l265:
 12264                           
 12265                           ;temperature.c: 125: minus_pipe = ADRES;
 12266  013226  CFC3 F045          	movff	4035,_minus_pipe	;volatile
 12267  01322A  CFC4 F046          	movff	4036,_minus_pipe+1	;volatile
 12268                           
 12269                           ;temperature.c: 126: ADCON0bits.CHS = 0b0001;
 12270  01322E  50C2               	movf	4034,w,c	;volatile
 12271  013230  0BC3               	andlw	-61
 12272  013232  0904               	iorlw	4
 12273  013234  6EC2               	movwf	4034,c	;volatile
 12274                           
 12275                           ;temperature.c: 127: currentChannel = 2;
 12276  013236  0E00               	movlw	0
 12277  013238  6E3A               	movwf	_currentChannel+1,c
 12278  01323A  0E02               	movlw	2
 12279  01323C  D017               	goto	L10
 12280  01323E                     i2l266:
 12281                           
 12282                           ;temperature.c: 130: plus_ambient = ADRES;
 12283  01323E  CFC3 F047          	movff	4035,_plus_ambient	;volatile
 12284  013242  CFC4 F048          	movff	4036,_plus_ambient+1	;volatile
 12285                           
 12286                           ;temperature.c: 131: ADCON0bits.CHS = 0b0000;
 12287  013246  94C2               	bcf	4034,2,c	;volatile
 12288  013248  96C2               	bcf	4034,3,c	;volatile
 12289  01324A  98C2               	bcf	4034,4,c	;volatile
 12290  01324C  9AC2               	bcf	4034,5,c	;volatile
 12291                           
 12292                           ;temperature.c: 132: currentChannel = 3;
 12293  01324E  0E00               	movlw	0
 12294  013250  6E3A               	movwf	_currentChannel+1,c
 12295  013252  0E03               	movlw	3
 12296  013254  D00B               	goto	L10
 12297  013256                     i2l267:
 12298                           
 12299                           ;temperature.c: 135: minus_ambient = ADRES;
 12300  013256  CFC3 F043          	movff	4035,_minus_ambient	;volatile
 12301  01325A  CFC4 F044          	movff	4036,_minus_ambient+1	;volatile
 12302                           
 12303                           ;temperature.c: 136: ADCON0bits.CHS = 0b1001;
 12304  01325E  50C2               	movf	4034,w,c	;volatile
 12305  013260  0BC3               	andlw	-61
 12306  013262  0924               	iorlw	36
 12307  013264  6EC2               	movwf	4034,c	;volatile
 12308                           
 12309                           ;temperature.c: 137: currentChannel = 0;
 12310  013266  0E00               	movlw	0
 12311  013268  6E3A               	movwf	_currentChannel+1,c
 12312  01326A  0E00               	movlw	0
 12313  01326C                     L10:
 12314  01326C  6E39               	movwf	_currentChannel,c
 12315                           
 12316                           ;temperature.c: 139: }
 12317                           
 12318                           ;temperature.c: 138: break;
 12319  01326E  D015               	goto	i2l264
 12320  013270                     i2l2726:
 12321  013270  C039  F001         	movff	_currentChannel,??_temperature_interrupt
 12322  013274  C03A  F002         	movff	_currentChannel+1,??_temperature_interrupt+1
 12323                           
 12324                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12325                           ; Switch size 1, requested type "space"
 12326                           ; Number of cases is 1, Range of values is 0 to 0
 12327                           ; switch strategies available:
 12328                           ; Name         Instructions Cycles
 12329                           ; simple_byte            4     3 (average)
 12330                           ;	Chosen strategy is simple_byte
 12331  013278  5002               	movf	??_temperature_interrupt+1,w,c
 12332  01327A  0A00               	xorlw	0	; case 0
 12333  01327C  A4D8               	btfss	status,2,c
 12334  01327E  D00D               	goto	i2l264
 12335                           
 12336                           ; Switch size 1, requested type "space"
 12337                           ; Number of cases is 4, Range of values is 0 to 3
 12338                           ; switch strategies available:
 12339                           ; Name         Instructions Cycles
 12340                           ; simple_byte           13     7 (average)
 12341                           ;	Chosen strategy is simple_byte
 12342  013280  5001               	movf	??_temperature_interrupt,w,c
 12343  013282  0A00               	xorlw	0	; case 0
 12344  013284  B4D8               	btfsc	status,2,c
 12345  013286  D7C3               	goto	i2l263
 12346  013288  0A01               	xorlw	1	; case 1
 12347  01328A  B4D8               	btfsc	status,2,c
 12348  01328C  D7CC               	goto	i2l265
 12349  01328E  0A03               	xorlw	3	; case 2
 12350  013290  B4D8               	btfsc	status,2,c
 12351  013292  D7D5               	goto	i2l266
 12352  013294  0A01               	xorlw	1	; case 3
 12353  013296  B4D8               	btfsc	status,2,c
 12354  013298  D7DE               	goto	i2l267
 12355  01329A                     i2l264:
 12356                           
 12357                           ;temperature.c: 140: ADCON0bits.GO_DONE = 1;
 12358  01329A  82C2               	bsf	4034,1,c	;volatile
 12359  01329C  0012               	return	
 12360  01329E                     __end_of_temperature_interrupt:
 12361                           	opt stack 0
 12362                           pclatu	equ	0xFFB
 12363                           pclath	equ	0xFFA
 12364                           tblptru	equ	0xFF8
 12365                           tblptrh	equ	0xFF7
 12366                           tblptrl	equ	0xFF6
 12367                           tablat	equ	0xFF5
 12368                           prodh	equ	0xFF4
 12369                           prodl	equ	0xFF3
 12370                           intcon	equ	0xFF2
 12371                           postinc0	equ	0xFEE
 12372                           fsr0h	equ	0xFEA
 12373                           fsr0l	equ	0xFE9
 12374                           wreg	equ	0xFE8
 12375                           indf1	equ	0xFE7
 12376                           postdec1	equ	0xFE5
 12377                           fsr1h	equ	0xFE2
 12378                           fsr1l	equ	0xFE1
 12379                           indf2	equ	0xFDF
 12380                           postinc2	equ	0xFDE
 12381                           postdec2	equ	0xFDD
 12382                           fsr2h	equ	0xFDA
 12383                           fsr2l	equ	0xFD9
 12384                           status	equ	0xFD8
 12385                           
 12386 ;; *************** function _frequency_interrupt *****************
 12387 ;; Defined at:
 12388 ;;		line 51 in file "frequency.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;		None
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;		None
 12393 ;; Return value:  Size  Location     Type
 12394 ;;		None               void
 12395 ;; Registers used:
 12396 ;;		wreg, status,2, status,0, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12403 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12404 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12405 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12406 ;;Total ram usage:       12 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    2
 12409 ;; This function calls:
 12410 ;;		___aldiv
 12411 ;;		___lmul
 12412 ;;		i2___lldiv
 12413 ;;		i2___lltoft
 12414 ;; This function is called by:
 12415 ;;		_high_ISR
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           	psect	text50
 12420  011184                     __ptext50:
 12421                           	opt stack 0
 12422  011184                     _frequency_interrupt:
 12423                           	opt stack 20
 12424                           
 12425                           ;frequency.c: 53: if(PIR4bits.CCP8IF == 1)
 12426                           
 12427                           ;incstack = 0
 12428  011184  AA8F               	btfss	3983,5,c	;volatile
 12429  011186  D0BB               	goto	i2l4358
 12430                           
 12431                           ;frequency.c: 54: {
 12432                           ;frequency.c: 56: ind_measurement_old = ind_measurement_new;
 12433  011188  C03B  F03D         	movff	_ind_measurement_new,_ind_measurement_old
 12434  01118C  C03C  F03E         	movff	_ind_measurement_new+1,_ind_measurement_old+1
 12435                           
 12436                           ;frequency.c: 57: ind_measurement_new = CCPR8L + 256*CCPR8H;
 12437  011190  010F               	movlb	15	; () banked
 12438  011192  5108               	movf	8,w,b	;volatile
 12439  011194  6E1C               	movwf	(??_frequency_interrupt+1)& (0+255),c
 12440  011196  6A1B               	clrf	??_frequency_interrupt& (0+255),c
 12441  011198  010F               	movlb	15	; () banked
 12442  01119A  5107               	movf	7,w,b	;volatile
 12443  01119C  241B               	addwf	??_frequency_interrupt,w,c
 12444  01119E  6E3B               	movwf	_ind_measurement_new,c
 12445  0111A0  0E00               	movlw	0
 12446  0111A2  201C               	addwfc	??_frequency_interrupt+1,w,c
 12447  0111A4  6E3C               	movwf	_ind_measurement_new+1,c
 12448                           
 12449                           ; BSR set to: 15
 12450                           ;frequency.c: 58: ind_value = (ind_measurement_new + (interrupt_count_ind * 65535) - ind
      +                          _measurement_old)/16;
 12451  0111A6  503D               	movf	_ind_measurement_old,w,c
 12452  0111A8  6E1B               	movwf	??_frequency_interrupt& (0+255),c
 12453  0111AA  503E               	movf	_ind_measurement_old+1,w,c
 12454  0111AC  6E1C               	movwf	(??_frequency_interrupt+1)& (0+255),c
 12455  0111AE  6A1D               	clrf	(??_frequency_interrupt+2)& (0+255),c
 12456  0111B0  6A1E               	clrf	(??_frequency_interrupt+3)& (0+255),c
 12457  0111B2  1E1B               	comf	??_frequency_interrupt,f,c
 12458  0111B4  1E1C               	comf	??_frequency_interrupt+1,f,c
 12459  0111B6  1E1D               	comf	??_frequency_interrupt+2,f,c
 12460  0111B8  1E1E               	comf	??_frequency_interrupt+3,f,c
 12461  0111BA  2A1B               	incf	??_frequency_interrupt,f,c
 12462  0111BC  0E00               	movlw	0
 12463  0111BE  221C               	addwfc	??_frequency_interrupt+1,f,c
 12464  0111C0  221D               	addwfc	??_frequency_interrupt+2,f,c
 12465  0111C2  221E               	addwfc	??_frequency_interrupt+3,f,c
 12466  0111C4  C041  F001         	movff	_interrupt_count_ind,___lmul@multiplier
 12467  0111C8  C042  F002         	movff	_interrupt_count_ind+1,___lmul@multiplier+1
 12468  0111CC  6A03               	clrf	___lmul@multiplier+2,c
 12469  0111CE  6A04               	clrf	___lmul@multiplier+3,c
 12470  0111D0  0EFF               	movlw	255
 12471  0111D2  6E05               	movwf	___lmul@multiplicand,c
 12472  0111D4  0EFF               	movlw	255
 12473  0111D6  6E06               	movwf	___lmul@multiplicand+1,c
 12474  0111D8  0E00               	movlw	0
 12475  0111DA  6E07               	movwf	___lmul@multiplicand+2,c
 12476  0111DC  0E00               	movlw	0
 12477  0111DE  6E08               	movwf	___lmul@multiplicand+3,c
 12478  0111E0  EC1C  F09B         	call	___lmul	;wreg free
 12479  0111E4  503B               	movf	_ind_measurement_new,w,c
 12480  0111E6  2401               	addwf	?___lmul,w,c
 12481  0111E8  6E1F               	movwf	(??_frequency_interrupt+4)& (0+255),c
 12482  0111EA  503C               	movf	_ind_measurement_new+1,w,c
 12483  0111EC  2002               	addwfc	?___lmul+1,w,c
 12484  0111EE  6E20               	movwf	(??_frequency_interrupt+5)& (0+255),c
 12485  0111F0  0E00               	movlw	0
 12486  0111F2  2003               	addwfc	?___lmul+2,w,c
 12487  0111F4  6E21               	movwf	(??_frequency_interrupt+6)& (0+255),c
 12488  0111F6  0E00               	movlw	0
 12489  0111F8  2004               	addwfc	?___lmul+3,w,c
 12490  0111FA  6E22               	movwf	(??_frequency_interrupt+7)& (0+255),c
 12491  0111FC  501B               	movf	??_frequency_interrupt,w,c
 12492  0111FE  241F               	addwf	??_frequency_interrupt+4,w,c
 12493  011200  6E0D               	movwf	___aldiv@dividend,c
 12494  011202  501C               	movf	??_frequency_interrupt+1,w,c
 12495  011204  2020               	addwfc	??_frequency_interrupt+5,w,c
 12496  011206  6E0E               	movwf	___aldiv@dividend+1,c
 12497  011208  501D               	movf	??_frequency_interrupt+2,w,c
 12498  01120A  2021               	addwfc	??_frequency_interrupt+6,w,c
 12499  01120C  6E0F               	movwf	___aldiv@dividend+2,c
 12500  01120E  501E               	movf	??_frequency_interrupt+3,w,c
 12501  011210  2022               	addwfc	??_frequency_interrupt+7,w,c
 12502  011212  6E10               	movwf	___aldiv@dividend+3,c
 12503  011214  0E10               	movlw	16
 12504  011216  6E11               	movwf	___aldiv@divisor,c
 12505  011218  0E00               	movlw	0
 12506  01121A  6E12               	movwf	___aldiv@divisor+1,c
 12507  01121C  0E00               	movlw	0
 12508  01121E  6E13               	movwf	___aldiv@divisor+2,c
 12509  011220  0E00               	movlw	0
 12510  011222  6E14               	movwf	___aldiv@divisor+3,c
 12511  011224  EC92  F095         	call	___aldiv	;wreg free
 12512  011228  C00D  F059         	movff	?___aldiv,_ind_value
 12513  01122C  C00E  F05A         	movff	?___aldiv+1,_ind_value+1
 12514  011230  C00F  F05B         	movff	?___aldiv+2,_ind_value+2
 12515  011234  C010  F05C         	movff	?___aldiv+3,_ind_value+3
 12516                           
 12517                           ;frequency.c: 60: ind_freq2 = ind_value*40*ind_value;
 12518  011238  C059  F001         	movff	_ind_value,___lmul@multiplier
 12519  01123C  C05A  F002         	movff	_ind_value+1,___lmul@multiplier+1
 12520  011240  C05B  F003         	movff	_ind_value+2,___lmul@multiplier+2
 12521  011244  C05C  F004         	movff	_ind_value+3,___lmul@multiplier+3
 12522  011248  C059  F005         	movff	_ind_value,___lmul@multiplicand
 12523  01124C  C05A  F006         	movff	_ind_value+1,___lmul@multiplicand+1
 12524  011250  C05B  F007         	movff	_ind_value+2,___lmul@multiplicand+2
 12525  011254  C05C  F008         	movff	_ind_value+3,___lmul@multiplicand+3
 12526  011258  EC1C  F09B         	call	___lmul	;wreg free
 12527  01125C  C001  F023         	movff	?___lmul,_frequency_interrupt$2660
 12528  011260  C002  F024         	movff	?___lmul+1,_frequency_interrupt$2660+1
 12529  011264  C003  F025         	movff	?___lmul+2,_frequency_interrupt$2660+2
 12530  011268  C004  F026         	movff	?___lmul+3,_frequency_interrupt$2660+3
 12531                           
 12532                           ;frequency.c: 60: ind_freq2 = ind_value*40*ind_value;
 12533  01126C  C023  F001         	movff	_frequency_interrupt$2660,___lmul@multiplier
 12534  011270  C024  F002         	movff	_frequency_interrupt$2660+1,___lmul@multiplier+1
 12535  011274  C025  F003         	movff	_frequency_interrupt$2660+2,___lmul@multiplier+2
 12536  011278  C026  F004         	movff	_frequency_interrupt$2660+3,___lmul@multiplier+3
 12537  01127C  0E28               	movlw	40
 12538  01127E  6E05               	movwf	___lmul@multiplicand,c
 12539  011280  0E00               	movlw	0
 12540  011282  6E06               	movwf	___lmul@multiplicand+1,c
 12541  011284  0E00               	movlw	0
 12542  011286  6E07               	movwf	___lmul@multiplicand+2,c
 12543  011288  0E00               	movlw	0
 12544  01128A  6E08               	movwf	___lmul@multiplicand+3,c
 12545  01128C  EC1C  F09B         	call	___lmul	;wreg free
 12546  011290  C001  F00E         	movff	?___lmul,i2___lltoft@c
 12547  011294  C002  F00F         	movff	?___lmul+1,i2___lltoft@c+1
 12548  011298  C003  F010         	movff	?___lmul+2,i2___lltoft@c+2
 12549  01129C  C004  F011         	movff	?___lmul+3,i2___lltoft@c+3
 12550  0112A0  ECEE  F09A         	call	i2___lltoft	;wreg free
 12551  0112A4  C00E  F0E2         	movff	?i2___lltoft,_ind_freq2
 12552  0112A8  C00F  F0E3         	movff	?i2___lltoft+1,_ind_freq2+1
 12553  0112AC  C010  F0E4         	movff	?i2___lltoft+2,_ind_freq2+2
 12554                           
 12555                           ;frequency.c: 61: ind_freq = 2000000/ind_value;
 12556  0112B0  C059  F005         	movff	_ind_value,i2___lldiv@divisor
 12557  0112B4  C05A  F006         	movff	_ind_value+1,i2___lldiv@divisor+1
 12558  0112B8  C05B  F007         	movff	_ind_value+2,i2___lldiv@divisor+2
 12559  0112BC  C05C  F008         	movff	_ind_value+3,i2___lldiv@divisor+3
 12560  0112C0  0E80               	movlw	128
 12561  0112C2  6E01               	movwf	i2___lldiv@dividend,c
 12562  0112C4  0E84               	movlw	132
 12563  0112C6  6E02               	movwf	i2___lldiv@dividend+1,c
 12564  0112C8  0E1E               	movlw	30
 12565  0112CA  6E03               	movwf	i2___lldiv@dividend+2,c
 12566  0112CC  0E00               	movlw	0
 12567  0112CE  6E04               	movwf	i2___lldiv@dividend+3,c
 12568  0112D0  EC4F  F099         	call	i2___lldiv	;wreg free
 12569  0112D4  C001  F00E         	movff	?i2___lldiv,i2___lltoft@c
 12570  0112D8  C002  F00F         	movff	?i2___lldiv+1,i2___lltoft@c+1
 12571  0112DC  C003  F010         	movff	?i2___lldiv+2,i2___lltoft@c+2
 12572  0112E0  C004  F011         	movff	?i2___lldiv+3,i2___lltoft@c+3
 12573  0112E4  ECEE  F09A         	call	i2___lltoft	;wreg free
 12574  0112E8  C00E  F0DF         	movff	?i2___lltoft,_ind_freq
 12575  0112EC  C00F  F0E0         	movff	?i2___lltoft+1,_ind_freq+1
 12576  0112F0  C010  F0E1         	movff	?i2___lltoft+2,_ind_freq+2
 12577                           
 12578                           ;frequency.c: 63: interrupt_count_ind = 0;
 12579  0112F4  0E00               	movlw	0
 12580  0112F6  6E42               	movwf	_interrupt_count_ind+1,c
 12581  0112F8  0E00               	movlw	0
 12582  0112FA  6E41               	movwf	_interrupt_count_ind,c
 12583                           
 12584                           ;frequency.c: 68: PIR4bits.CCP8IF=0;
 12585  0112FC  9A8F               	bcf	3983,5,c	;volatile
 12586  0112FE                     i2l4358:
 12587                           
 12588                           ;frequency.c: 69: }
 12589                           ;frequency.c: 70: if(PIR4bits.CCP4IF == 1)
 12590  0112FE  A28F               	btfss	3983,1,c	;volatile
 12591  011300  0012               	return	
 12592                           
 12593                           ;frequency.c: 71: {
 12594                           ;frequency.c: 73: cap_measurement_old = cap_measurement_new;
 12595  011302  C035  F037         	movff	_cap_measurement_new,_cap_measurement_old
 12596  011306  C036  F038         	movff	_cap_measurement_new+1,_cap_measurement_old+1
 12597                           
 12598                           ;frequency.c: 74: cap_measurement_new = (CCPR4L + 256*CCPR4H);
 12599  01130A  010F               	movlb	15	; () banked
 12600  01130C  5114               	movf	20,w,b	;volatile
 12601  01130E  6E1C               	movwf	(??_frequency_interrupt+1)& (0+255),c
 12602  011310  6A1B               	clrf	??_frequency_interrupt& (0+255),c
 12603  011312  010F               	movlb	15	; () banked
 12604  011314  5113               	movf	19,w,b	;volatile
 12605  011316  241B               	addwf	??_frequency_interrupt,w,c
 12606  011318  6E35               	movwf	_cap_measurement_new,c
 12607  01131A  0E00               	movlw	0
 12608  01131C  201C               	addwfc	??_frequency_interrupt+1,w,c
 12609  01131E  6E36               	movwf	_cap_measurement_new+1,c
 12610                           
 12611                           ; BSR set to: 15
 12612                           ;frequency.c: 75: cap_value = (cap_measurement_new + (interrupt_count_cap * 65535) - cap
      +                          _measurement_old)/16;
 12613  011320  5037               	movf	_cap_measurement_old,w,c
 12614  011322  6E1B               	movwf	??_frequency_interrupt& (0+255),c
 12615  011324  5038               	movf	_cap_measurement_old+1,w,c
 12616  011326  6E1C               	movwf	(??_frequency_interrupt+1)& (0+255),c
 12617  011328  6A1D               	clrf	(??_frequency_interrupt+2)& (0+255),c
 12618  01132A  6A1E               	clrf	(??_frequency_interrupt+3)& (0+255),c
 12619  01132C  1E1B               	comf	??_frequency_interrupt,f,c
 12620  01132E  1E1C               	comf	??_frequency_interrupt+1,f,c
 12621  011330  1E1D               	comf	??_frequency_interrupt+2,f,c
 12622  011332  1E1E               	comf	??_frequency_interrupt+3,f,c
 12623  011334  2A1B               	incf	??_frequency_interrupt,f,c
 12624  011336  0E00               	movlw	0
 12625  011338  221C               	addwfc	??_frequency_interrupt+1,f,c
 12626  01133A  221D               	addwfc	??_frequency_interrupt+2,f,c
 12627  01133C  221E               	addwfc	??_frequency_interrupt+3,f,c
 12628  01133E  C03F  F001         	movff	_interrupt_count_cap,___lmul@multiplier
 12629  011342  C040  F002         	movff	_interrupt_count_cap+1,___lmul@multiplier+1
 12630  011346  6A03               	clrf	___lmul@multiplier+2,c
 12631  011348  6A04               	clrf	___lmul@multiplier+3,c
 12632  01134A  0EFF               	movlw	255
 12633  01134C  6E05               	movwf	___lmul@multiplicand,c
 12634  01134E  0EFF               	movlw	255
 12635  011350  6E06               	movwf	___lmul@multiplicand+1,c
 12636  011352  0E00               	movlw	0
 12637  011354  6E07               	movwf	___lmul@multiplicand+2,c
 12638  011356  0E00               	movlw	0
 12639  011358  6E08               	movwf	___lmul@multiplicand+3,c
 12640  01135A  EC1C  F09B         	call	___lmul	;wreg free
 12641  01135E  5035               	movf	_cap_measurement_new,w,c
 12642  011360  2401               	addwf	?___lmul,w,c
 12643  011362  6E1F               	movwf	(??_frequency_interrupt+4)& (0+255),c
 12644  011364  5036               	movf	_cap_measurement_new+1,w,c
 12645  011366  2002               	addwfc	?___lmul+1,w,c
 12646  011368  6E20               	movwf	(??_frequency_interrupt+5)& (0+255),c
 12647  01136A  0E00               	movlw	0
 12648  01136C  2003               	addwfc	?___lmul+2,w,c
 12649  01136E  6E21               	movwf	(??_frequency_interrupt+6)& (0+255),c
 12650  011370  0E00               	movlw	0
 12651  011372  2004               	addwfc	?___lmul+3,w,c
 12652  011374  6E22               	movwf	(??_frequency_interrupt+7)& (0+255),c
 12653  011376  501B               	movf	??_frequency_interrupt,w,c
 12654  011378  241F               	addwf	??_frequency_interrupt+4,w,c
 12655  01137A  6E0D               	movwf	___aldiv@dividend,c
 12656  01137C  501C               	movf	??_frequency_interrupt+1,w,c
 12657  01137E  2020               	addwfc	??_frequency_interrupt+5,w,c
 12658  011380  6E0E               	movwf	___aldiv@dividend+1,c
 12659  011382  501D               	movf	??_frequency_interrupt+2,w,c
 12660  011384  2021               	addwfc	??_frequency_interrupt+6,w,c
 12661  011386  6E0F               	movwf	___aldiv@dividend+2,c
 12662  011388  501E               	movf	??_frequency_interrupt+3,w,c
 12663  01138A  2022               	addwfc	??_frequency_interrupt+7,w,c
 12664  01138C  6E10               	movwf	___aldiv@dividend+3,c
 12665  01138E  0E10               	movlw	16
 12666  011390  6E11               	movwf	___aldiv@divisor,c
 12667  011392  0E00               	movlw	0
 12668  011394  6E12               	movwf	___aldiv@divisor+1,c
 12669  011396  0E00               	movlw	0
 12670  011398  6E13               	movwf	___aldiv@divisor+2,c
 12671  01139A  0E00               	movlw	0
 12672  01139C  6E14               	movwf	___aldiv@divisor+3,c
 12673  01139E  EC92  F095         	call	___aldiv	;wreg free
 12674  0113A2  C00D  F055         	movff	?___aldiv,_cap_value
 12675  0113A6  C00E  F056         	movff	?___aldiv+1,_cap_value+1
 12676  0113AA  C00F  F057         	movff	?___aldiv+2,_cap_value+2
 12677  0113AE  C010  F058         	movff	?___aldiv+3,_cap_value+3
 12678                           
 12679                           ;frequency.c: 76: cap_freq = 2000000/cap_value;
 12680  0113B2  C055  F005         	movff	_cap_value,i2___lldiv@divisor
 12681  0113B6  C056  F006         	movff	_cap_value+1,i2___lldiv@divisor+1
 12682  0113BA  C057  F007         	movff	_cap_value+2,i2___lldiv@divisor+2
 12683  0113BE  C058  F008         	movff	_cap_value+3,i2___lldiv@divisor+3
 12684  0113C2  0E80               	movlw	128
 12685  0113C4  6E01               	movwf	i2___lldiv@dividend,c
 12686  0113C6  0E84               	movlw	132
 12687  0113C8  6E02               	movwf	i2___lldiv@dividend+1,c
 12688  0113CA  0E1E               	movlw	30
 12689  0113CC  6E03               	movwf	i2___lldiv@dividend+2,c
 12690  0113CE  0E00               	movlw	0
 12691  0113D0  6E04               	movwf	i2___lldiv@dividend+3,c
 12692  0113D2  EC4F  F099         	call	i2___lldiv	;wreg free
 12693  0113D6  C001  F00E         	movff	?i2___lldiv,i2___lltoft@c
 12694  0113DA  C002  F00F         	movff	?i2___lldiv+1,i2___lltoft@c+1
 12695  0113DE  C003  F010         	movff	?i2___lldiv+2,i2___lltoft@c+2
 12696  0113E2  C004  F011         	movff	?i2___lldiv+3,i2___lltoft@c+3
 12697  0113E6  ECEE  F09A         	call	i2___lltoft	;wreg free
 12698  0113EA  C00E  F0D9         	movff	?i2___lltoft,_cap_freq
 12699  0113EE  C00F  F0DA         	movff	?i2___lltoft+1,_cap_freq+1
 12700  0113F2  C010  F0DB         	movff	?i2___lltoft+2,_cap_freq+2
 12701                           
 12702                           ;frequency.c: 78: interrupt_count_cap = 0;
 12703  0113F6  0E00               	movlw	0
 12704  0113F8  6E40               	movwf	_interrupt_count_cap+1,c
 12705  0113FA  0E00               	movlw	0
 12706  0113FC  6E3F               	movwf	_interrupt_count_cap,c
 12707                           
 12708                           ;frequency.c: 84: PIR4bits.CCP4IF=0;
 12709  0113FE  928F               	bcf	3983,1,c	;volatile
 12710  011400  0012               	return	
 12711  011402                     __end_of_frequency_interrupt:
 12712                           	opt stack 0
 12713                           pclatu	equ	0xFFB
 12714                           pclath	equ	0xFFA
 12715                           tblptru	equ	0xFF8
 12716                           tblptrh	equ	0xFF7
 12717                           tblptrl	equ	0xFF6
 12718                           tablat	equ	0xFF5
 12719                           prodh	equ	0xFF4
 12720                           prodl	equ	0xFF3
 12721                           intcon	equ	0xFF2
 12722                           postinc0	equ	0xFEE
 12723                           fsr0h	equ	0xFEA
 12724                           fsr0l	equ	0xFE9
 12725                           wreg	equ	0xFE8
 12726                           indf1	equ	0xFE7
 12727                           postdec1	equ	0xFE5
 12728                           fsr1h	equ	0xFE2
 12729                           fsr1l	equ	0xFE1
 12730                           indf2	equ	0xFDF
 12731                           postinc2	equ	0xFDE
 12732                           postdec2	equ	0xFDD
 12733                           fsr2h	equ	0xFDA
 12734                           fsr2l	equ	0xFD9
 12735                           status	equ	0xFD8
 12736                           
 12737 ;; *************** function i2___lltoft *****************
 12738 ;; Defined at:
 12739 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;  c               4   13[COMRAM] unsigned long 
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;  __lltoft        1   21[COMRAM] unsigned char 
 12744 ;; Return value:  Size  Location     Type
 12745 ;;                  3   13[COMRAM] float 
 12746 ;; Registers used:
 12747 ;;		wreg, status,2, status,0, cstack
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12755 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12756 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12757 ;;Total ram usage:        9 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    1
 12760 ;; This function calls:
 12761 ;;		i2___ftpack
 12762 ;; This function is called by:
 12763 ;;		_frequency_interrupt
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           	psect	text51
 12768  0135DC                     __ptext51:
 12769                           	opt stack 0
 12770  0135DC                     i2___lltoft:
 12771                           	opt stack 20
 12772                           
 12773                           ;incstack = 0
 12774  0135DC  0E8E               	movlw	142
 12775  0135DE  6E16               	movwf	i2___lltoft@exp,c
 12776  0135E0  D006               	goto	i2l4184
 12777  0135E2                     i2l4182:
 12778  0135E2  90D8               	bcf	status,0,c
 12779  0135E4  3211               	rrcf	i2___lltoft@c+3,f,c
 12780  0135E6  3210               	rrcf	i2___lltoft@c+2,f,c
 12781  0135E8  320F               	rrcf	i2___lltoft@c+1,f,c
 12782  0135EA  320E               	rrcf	i2___lltoft@c,f,c
 12783  0135EC  2A16               	incf	i2___lltoft@exp,f,c
 12784  0135EE                     i2l4184:
 12785  0135EE  0E00               	movlw	0
 12786  0135F0  140E               	andwf	i2___lltoft@c,w,c
 12787  0135F2  6E12               	movwf	??i2___lltoft& (0+255),c
 12788  0135F4  0E00               	movlw	0
 12789  0135F6  140F               	andwf	i2___lltoft@c+1,w,c
 12790  0135F8  6E13               	movwf	(??i2___lltoft+1)& (0+255),c
 12791  0135FA  0E00               	movlw	0
 12792  0135FC  1410               	andwf	i2___lltoft@c+2,w,c
 12793  0135FE  6E14               	movwf	(??i2___lltoft+2)& (0+255),c
 12794  013600  0EFF               	movlw	255
 12795  013602  1411               	andwf	i2___lltoft@c+3,w,c
 12796  013604  6E15               	movwf	(??i2___lltoft+3)& (0+255),c
 12797  013606  5012               	movf	??i2___lltoft,w,c
 12798  013608  1013               	iorwf	??i2___lltoft+1,w,c
 12799  01360A  1014               	iorwf	??i2___lltoft+2,w,c
 12800  01360C  1015               	iorwf	??i2___lltoft+3,w,c
 12801  01360E  A4D8               	btfss	status,2,c
 12802  013610  D7E8               	goto	i2l4182
 12803  013612  C00E  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 12804  013616  C00F  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 12805  01361A  C010  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 12806  01361E  C016  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 12807  013622  0E00               	movlw	0
 12808  013624  6E05               	movwf	i2___ftpack@sign,c
 12809  013626  EC70  F097         	call	i2___ftpack	;wreg free
 12810  01362A  C001  F00E         	movff	?i2___ftpack,?i2___lltoft
 12811  01362E  C002  F00F         	movff	?i2___ftpack+1,?i2___lltoft+1
 12812  013632  C003  F010         	movff	?i2___ftpack+2,?i2___lltoft+2
 12813  013636  0012               	return	
 12814  013638                     __end_ofi2___lltoft:
 12815                           	opt stack 0
 12816                           pclatu	equ	0xFFB
 12817                           pclath	equ	0xFFA
 12818                           tblptru	equ	0xFF8
 12819                           tblptrh	equ	0xFF7
 12820                           tblptrl	equ	0xFF6
 12821                           tablat	equ	0xFF5
 12822                           prodh	equ	0xFF4
 12823                           prodl	equ	0xFF3
 12824                           intcon	equ	0xFF2
 12825                           postinc0	equ	0xFEE
 12826                           fsr0h	equ	0xFEA
 12827                           fsr0l	equ	0xFE9
 12828                           wreg	equ	0xFE8
 12829                           indf1	equ	0xFE7
 12830                           postdec1	equ	0xFE5
 12831                           fsr1h	equ	0xFE2
 12832                           fsr1l	equ	0xFE1
 12833                           indf2	equ	0xFDF
 12834                           postinc2	equ	0xFDE
 12835                           postdec2	equ	0xFDD
 12836                           fsr2h	equ	0xFDA
 12837                           fsr2l	equ	0xFD9
 12838                           status	equ	0xFD8
 12839                           
 12840 ;; *************** function i2___ftpack *****************
 12841 ;; Defined at:
 12842 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;  arg             3    0[COMRAM] unsigned um
 12845 ;;  exp             1    3[COMRAM] unsigned char 
 12846 ;;  sign            1    4[COMRAM] unsigned char 
 12847 ;; Auto vars:     Size  Location     Type
 12848 ;;		None
 12849 ;; Return value:  Size  Location     Type
 12850 ;;                  3    0[COMRAM] float 
 12851 ;; Registers used:
 12852 ;;		wreg, status,2, status,0
 12853 ;; Tracked objects:
 12854 ;;		On entry : 0/0
 12855 ;;		On exit  : 0/0
 12856 ;;		Unchanged: 0/0
 12857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12858 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12860 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12861 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12862 ;;Total ram usage:        8 bytes
 12863 ;; Hardware stack levels used:    1
 12864 ;; This function calls:
 12865 ;;		Nothing
 12866 ;; This function is called by:
 12867 ;;		i2___lltoft
 12868 ;; This function uses a non-reentrant model
 12869 ;;
 12870                           
 12871                           	psect	text52
 12872  012EE0                     __ptext52:
 12873                           	opt stack 0
 12874  012EE0                     i2___ftpack:
 12875                           	opt stack 20
 12876                           
 12877                           ;incstack = 0
 12878  012EE0  5004               	movf	i2___ftpack@exp,w,c
 12879  012EE2  B4D8               	btfsc	status,2,c
 12880  012EE4  D005               	goto	i2l3784
 12881  012EE6  5001               	movf	i2___ftpack@arg,w,c
 12882  012EE8  1002               	iorwf	i2___ftpack@arg+1,w,c
 12883  012EEA  1003               	iorwf	i2___ftpack@arg+2,w,c
 12884  012EEC  A4D8               	btfss	status,2,c
 12885  012EEE  D00C               	goto	i2l3790
 12886  012EF0                     i2l3784:
 12887  012EF0  0E00               	movlw	0
 12888  012EF2  6E01               	movwf	?i2___ftpack,c
 12889  012EF4  0E00               	movlw	0
 12890  012EF6  6E02               	movwf	?i2___ftpack+1,c
 12891  012EF8  0E00               	movlw	0
 12892  012EFA  6E03               	movwf	?i2___ftpack+2,c
 12893  012EFC  0012               	return	
 12894  012EFE                     i2l3788:
 12895  012EFE  2A04               	incf	i2___ftpack@exp,f,c
 12896  012F00  90D8               	bcf	status,0,c
 12897  012F02  3203               	rrcf	i2___ftpack@arg+2,f,c
 12898  012F04  3202               	rrcf	i2___ftpack@arg+1,f,c
 12899  012F06  3201               	rrcf	i2___ftpack@arg,f,c
 12900  012F08                     i2l3790:
 12901  012F08  0E00               	movlw	0
 12902  012F0A  1401               	andwf	i2___ftpack@arg,w,c
 12903  012F0C  6E06               	movwf	??i2___ftpack& (0+255),c
 12904  012F0E  0E00               	movlw	0
 12905  012F10  1402               	andwf	i2___ftpack@arg+1,w,c
 12906  012F12  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12907  012F14  0EFE               	movlw	254
 12908  012F16  1403               	andwf	i2___ftpack@arg+2,w,c
 12909  012F18  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12910  012F1A  5006               	movf	??i2___ftpack,w,c
 12911  012F1C  1007               	iorwf	??i2___ftpack+1,w,c
 12912  012F1E  1008               	iorwf	??i2___ftpack+2,w,c
 12913  012F20  B4D8               	btfsc	status,2,c
 12914  012F22  D00C               	goto	i2l3796
 12915  012F24  D7EC               	goto	i2l3788
 12916  012F26                     i2l3792:
 12917  012F26  2A04               	incf	i2___ftpack@exp,f,c
 12918  012F28  0E01               	movlw	1
 12919  012F2A  2601               	addwf	i2___ftpack@arg,f,c
 12920  012F2C  0E00               	movlw	0
 12921  012F2E  2202               	addwfc	i2___ftpack@arg+1,f,c
 12922  012F30  0E00               	movlw	0
 12923  012F32  2203               	addwfc	i2___ftpack@arg+2,f,c
 12924  012F34  90D8               	bcf	status,0,c
 12925  012F36  3203               	rrcf	i2___ftpack@arg+2,f,c
 12926  012F38  3202               	rrcf	i2___ftpack@arg+1,f,c
 12927  012F3A  3201               	rrcf	i2___ftpack@arg,f,c
 12928  012F3C                     i2l3796:
 12929  012F3C  0E00               	movlw	0
 12930  012F3E  1401               	andwf	i2___ftpack@arg,w,c
 12931  012F40  6E06               	movwf	??i2___ftpack& (0+255),c
 12932  012F42  0E00               	movlw	0
 12933  012F44  1402               	andwf	i2___ftpack@arg+1,w,c
 12934  012F46  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12935  012F48  0EFF               	movlw	255
 12936  012F4A  1403               	andwf	i2___ftpack@arg+2,w,c
 12937  012F4C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12938  012F4E  5006               	movf	??i2___ftpack,w,c
 12939  012F50  1007               	iorwf	??i2___ftpack+1,w,c
 12940  012F52  1008               	iorwf	??i2___ftpack+2,w,c
 12941  012F54  B4D8               	btfsc	status,2,c
 12942  012F56  D006               	goto	i2l3800
 12943  012F58  D7E6               	goto	i2l3792
 12944  012F5A                     i2l3798:
 12945  012F5A  0604               	decf	i2___ftpack@exp,f,c
 12946  012F5C  90D8               	bcf	status,0,c
 12947  012F5E  3601               	rlcf	i2___ftpack@arg,f,c
 12948  012F60  3602               	rlcf	i2___ftpack@arg+1,f,c
 12949  012F62  3603               	rlcf	i2___ftpack@arg+2,f,c
 12950  012F64                     i2l3800:
 12951  012F64  BE02               	btfsc	i2___ftpack@arg+1,7,c
 12952  012F66  D003               	goto	i2l843
 12953  012F68  0E02               	movlw	2
 12954  012F6A  6004               	cpfslt	i2___ftpack@exp,c
 12955  012F6C  D7F6               	goto	i2l3798
 12956  012F6E                     i2l843:
 12957  012F6E  A004               	btfss	i2___ftpack@exp,0,c
 12958  012F70  9E02               	bcf	i2___ftpack@arg+1,7,c
 12959  012F72  90D8               	bcf	status,0,c
 12960  012F74  3204               	rrcf	i2___ftpack@exp,f,c
 12961  012F76  5004               	movf	i2___ftpack@exp,w,c
 12962  012F78  1203               	iorwf	i2___ftpack@arg+2,f,c
 12963  012F7A  5005               	movf	i2___ftpack@sign,w,c
 12964  012F7C  A4D8               	btfss	status,2,c
 12965  012F7E  8E03               	bsf	i2___ftpack@arg+2,7,c
 12966  012F80  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 12967  012F84  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12968  012F88  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12969  012F8C  0012               	return	
 12970  012F8E                     __end_ofi2___ftpack:
 12971                           	opt stack 0
 12972                           pclatu	equ	0xFFB
 12973                           pclath	equ	0xFFA
 12974                           tblptru	equ	0xFF8
 12975                           tblptrh	equ	0xFF7
 12976                           tblptrl	equ	0xFF6
 12977                           tablat	equ	0xFF5
 12978                           prodh	equ	0xFF4
 12979                           prodl	equ	0xFF3
 12980                           intcon	equ	0xFF2
 12981                           postinc0	equ	0xFEE
 12982                           fsr0h	equ	0xFEA
 12983                           fsr0l	equ	0xFE9
 12984                           wreg	equ	0xFE8
 12985                           indf1	equ	0xFE7
 12986                           postdec1	equ	0xFE5
 12987                           fsr1h	equ	0xFE2
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function i2___lldiv *****************
 12997 ;; Defined at:
 12998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  dividend        4    0[COMRAM] unsigned long 
 13001 ;;  divisor         4    4[COMRAM] unsigned long 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  __lldiv         4    8[COMRAM] unsigned long 
 13004 ;;  __lldiv         1   12[COMRAM] unsigned char 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  4    0[COMRAM] unsigned long 
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13014 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13015 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13017 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13018 ;;Total ram usage:       13 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; This function calls:
 13021 ;;		Nothing
 13022 ;; This function is called by:
 13023 ;;		_frequency_interrupt
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           	psect	text53
 13028  01329E                     __ptext53:
 13029                           	opt stack 0
 13030  01329E                     i2___lldiv:
 13031                           	opt stack 21
 13032                           
 13033                           ;incstack = 0
 13034  01329E  0E00               	movlw	0
 13035  0132A0  6E09               	movwf	i2___lldiv@quotient,c
 13036  0132A2  0E00               	movlw	0
 13037  0132A4  6E0A               	movwf	i2___lldiv@quotient+1,c
 13038  0132A6  0E00               	movlw	0
 13039  0132A8  6E0B               	movwf	i2___lldiv@quotient+2,c
 13040  0132AA  0E00               	movlw	0
 13041  0132AC  6E0C               	movwf	i2___lldiv@quotient+3,c
 13042  0132AE  5005               	movf	i2___lldiv@divisor,w,c
 13043  0132B0  1006               	iorwf	i2___lldiv@divisor+1,w,c
 13044  0132B2  1007               	iorwf	i2___lldiv@divisor+2,w,c
 13045  0132B4  1008               	iorwf	i2___lldiv@divisor+3,w,c
 13046  0132B6  B4D8               	btfsc	status,2,c
 13047  0132B8  D02A               	goto	i2l985
 13048  0132BA  0E01               	movlw	1
 13049  0132BC  6E0D               	movwf	i2___lldiv@counter,c
 13050  0132BE  D006               	goto	i2l4166
 13051  0132C0                     i2l4164:
 13052  0132C0  90D8               	bcf	status,0,c
 13053  0132C2  3605               	rlcf	i2___lldiv@divisor,f,c
 13054  0132C4  3606               	rlcf	i2___lldiv@divisor+1,f,c
 13055  0132C6  3607               	rlcf	i2___lldiv@divisor+2,f,c
 13056  0132C8  3608               	rlcf	i2___lldiv@divisor+3,f,c
 13057  0132CA  2A0D               	incf	i2___lldiv@counter,f,c
 13058  0132CC                     i2l4166:
 13059  0132CC  AE08               	btfss	i2___lldiv@divisor+3,7,c
 13060  0132CE  D7F8               	goto	i2l4164
 13061  0132D0                     i2l4168:
 13062  0132D0  90D8               	bcf	status,0,c
 13063  0132D2  3609               	rlcf	i2___lldiv@quotient,f,c
 13064  0132D4  360A               	rlcf	i2___lldiv@quotient+1,f,c
 13065  0132D6  360B               	rlcf	i2___lldiv@quotient+2,f,c
 13066  0132D8  360C               	rlcf	i2___lldiv@quotient+3,f,c
 13067  0132DA  5005               	movf	i2___lldiv@divisor,w,c
 13068  0132DC  5C01               	subwf	i2___lldiv@dividend,w,c
 13069  0132DE  5006               	movf	i2___lldiv@divisor+1,w,c
 13070  0132E0  5802               	subwfb	i2___lldiv@dividend+1,w,c
 13071  0132E2  5007               	movf	i2___lldiv@divisor+2,w,c
 13072  0132E4  5803               	subwfb	i2___lldiv@dividend+2,w,c
 13073  0132E6  5008               	movf	i2___lldiv@divisor+3,w,c
 13074  0132E8  5804               	subwfb	i2___lldiv@dividend+3,w,c
 13075  0132EA  A0D8               	btfss	status,0,c
 13076  0132EC  D009               	goto	i2l4176
 13077  0132EE  5005               	movf	i2___lldiv@divisor,w,c
 13078  0132F0  5E01               	subwf	i2___lldiv@dividend,f,c
 13079  0132F2  5006               	movf	i2___lldiv@divisor+1,w,c
 13080  0132F4  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 13081  0132F6  5007               	movf	i2___lldiv@divisor+2,w,c
 13082  0132F8  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 13083  0132FA  5008               	movf	i2___lldiv@divisor+3,w,c
 13084  0132FC  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 13085  0132FE  8009               	bsf	i2___lldiv@quotient,0,c
 13086  013300                     i2l4176:
 13087  013300  90D8               	bcf	status,0,c
 13088  013302  3208               	rrcf	i2___lldiv@divisor+3,f,c
 13089  013304  3207               	rrcf	i2___lldiv@divisor+2,f,c
 13090  013306  3206               	rrcf	i2___lldiv@divisor+1,f,c
 13091  013308  3205               	rrcf	i2___lldiv@divisor,f,c
 13092  01330A  2E0D               	decfsz	i2___lldiv@counter,f,c
 13093  01330C  D7E1               	goto	i2l4168
 13094  01330E                     i2l985:
 13095  01330E  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 13096  013312  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 13097  013316  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 13098  01331A  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 13099  01331E  0012               	return		;funcret
 13100  013320                     __end_ofi2___lldiv:
 13101                           	opt stack 0
 13102                           pclatu	equ	0xFFB
 13103                           pclath	equ	0xFFA
 13104                           tblptru	equ	0xFF8
 13105                           tblptrh	equ	0xFF7
 13106                           tblptrl	equ	0xFF6
 13107                           tablat	equ	0xFF5
 13108                           prodh	equ	0xFF4
 13109                           prodl	equ	0xFF3
 13110                           intcon	equ	0xFF2
 13111                           postinc0	equ	0xFEE
 13112                           fsr0h	equ	0xFEA
 13113                           fsr0l	equ	0xFE9
 13114                           wreg	equ	0xFE8
 13115                           indf1	equ	0xFE7
 13116                           postdec1	equ	0xFE5
 13117                           fsr1h	equ	0xFE2
 13118                           fsr1l	equ	0xFE1
 13119                           indf2	equ	0xFDF
 13120                           postinc2	equ	0xFDE
 13121                           postdec2	equ	0xFDD
 13122                           fsr2h	equ	0xFDA
 13123                           fsr2l	equ	0xFD9
 13124                           status	equ	0xFD8
 13125                           
 13126 ;; *************** function ___lmul *****************
 13127 ;; Defined at:
 13128 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;  multiplier      4    0[COMRAM] unsigned long 
 13131 ;;  multiplicand    4    4[COMRAM] unsigned long 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  product         4    8[COMRAM] unsigned long 
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  4    0[COMRAM] unsigned long 
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, status,0
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13143 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13144 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13146 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13147 ;;Total ram usage:       12 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; This function calls:
 13150 ;;		Nothing
 13151 ;; This function is called by:
 13152 ;;		_frequency_interrupt
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           	psect	text54
 13157  013638                     __ptext54:
 13158                           	opt stack 0
 13159  013638                     ___lmul:
 13160                           	opt stack 21
 13161                           
 13162                           ;incstack = 0
 13163  013638  0E00               	movlw	0
 13164  01363A  6E09               	movwf	___lmul@product,c
 13165  01363C  0E00               	movlw	0
 13166  01363E  6E0A               	movwf	___lmul@product+1,c
 13167  013640  0E00               	movlw	0
 13168  013642  6E0B               	movwf	___lmul@product+2,c
 13169  013644  0E00               	movlw	0
 13170  013646  6E0C               	movwf	___lmul@product+3,c
 13171  013648                     i2l4106:
 13172  013648  A001               	btfss	___lmul@multiplier,0,c
 13173  01364A  D008               	goto	i2l4110
 13174  01364C  5005               	movf	___lmul@multiplicand,w,c
 13175  01364E  2609               	addwf	___lmul@product,f,c
 13176  013650  5006               	movf	___lmul@multiplicand+1,w,c
 13177  013652  220A               	addwfc	___lmul@product+1,f,c
 13178  013654  5007               	movf	___lmul@multiplicand+2,w,c
 13179  013656  220B               	addwfc	___lmul@product+2,f,c
 13180  013658  5008               	movf	___lmul@multiplicand+3,w,c
 13181  01365A  220C               	addwfc	___lmul@product+3,f,c
 13182  01365C                     i2l4110:
 13183  01365C  90D8               	bcf	status,0,c
 13184  01365E  3605               	rlcf	___lmul@multiplicand,f,c
 13185  013660  3606               	rlcf	___lmul@multiplicand+1,f,c
 13186  013662  3607               	rlcf	___lmul@multiplicand+2,f,c
 13187  013664  3608               	rlcf	___lmul@multiplicand+3,f,c
 13188  013666  90D8               	bcf	status,0,c
 13189  013668  3204               	rrcf	___lmul@multiplier+3,f,c
 13190  01366A  3203               	rrcf	___lmul@multiplier+2,f,c
 13191  01366C  3202               	rrcf	___lmul@multiplier+1,f,c
 13192  01366E  3201               	rrcf	___lmul@multiplier,f,c
 13193  013670  5001               	movf	___lmul@multiplier,w,c
 13194  013672  1002               	iorwf	___lmul@multiplier+1,w,c
 13195  013674  1003               	iorwf	___lmul@multiplier+2,w,c
 13196  013676  1004               	iorwf	___lmul@multiplier+3,w,c
 13197  013678  A4D8               	btfss	status,2,c
 13198  01367A  D7E6               	goto	i2l4106
 13199  01367C  C009  F001         	movff	___lmul@product,?___lmul
 13200  013680  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 13201  013684  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 13202  013688  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 13203  01368C  0012               	return		;funcret
 13204  01368E                     __end_of___lmul:
 13205                           	opt stack 0
 13206                           pclatu	equ	0xFFB
 13207                           pclath	equ	0xFFA
 13208                           tblptru	equ	0xFF8
 13209                           tblptrh	equ	0xFF7
 13210                           tblptrl	equ	0xFF6
 13211                           tablat	equ	0xFF5
 13212                           prodh	equ	0xFF4
 13213                           prodl	equ	0xFF3
 13214                           intcon	equ	0xFF2
 13215                           postinc0	equ	0xFEE
 13216                           fsr0h	equ	0xFEA
 13217                           fsr0l	equ	0xFE9
 13218                           wreg	equ	0xFE8
 13219                           indf1	equ	0xFE7
 13220                           postdec1	equ	0xFE5
 13221                           fsr1h	equ	0xFE2
 13222                           fsr1l	equ	0xFE1
 13223                           indf2	equ	0xFDF
 13224                           postinc2	equ	0xFDE
 13225                           postdec2	equ	0xFDD
 13226                           fsr2h	equ	0xFDA
 13227                           fsr2l	equ	0xFD9
 13228                           status	equ	0xFD8
 13229                           
 13230 ;; *************** function ___aldiv *****************
 13231 ;; Defined at:
 13232 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\aldiv.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;  dividend        4   12[COMRAM] long 
 13235 ;;  divisor         4   16[COMRAM] long 
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;  quotient        4   22[COMRAM] long 
 13238 ;;  sign            1   21[COMRAM] unsigned char 
 13239 ;;  counter         1   20[COMRAM] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  4   12[COMRAM] long 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2, status,0
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13249 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13250 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13252 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13253 ;;Total ram usage:       14 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; This function calls:
 13256 ;;		Nothing
 13257 ;; This function is called by:
 13258 ;;		_frequency_interrupt
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           	psect	text55
 13263  012B24                     __ptext55:
 13264                           	opt stack 0
 13265  012B24                     ___aldiv:
 13266                           	opt stack 21
 13267                           
 13268                           ;incstack = 0
 13269  012B24  0E00               	movlw	0
 13270  012B26  6E16               	movwf	___aldiv@sign,c
 13271  012B28  AE14               	btfss	___aldiv@divisor+3,7,c
 13272  012B2A  D00A               	goto	i2l4122
 13273  012B2C  1E14               	comf	___aldiv@divisor+3,f,c
 13274  012B2E  1E13               	comf	___aldiv@divisor+2,f,c
 13275  012B30  1E12               	comf	___aldiv@divisor+1,f,c
 13276  012B32  6C11               	negf	___aldiv@divisor,c
 13277  012B34  0E00               	movlw	0
 13278  012B36  2212               	addwfc	___aldiv@divisor+1,f,c
 13279  012B38  2213               	addwfc	___aldiv@divisor+2,f,c
 13280  012B3A  2214               	addwfc	___aldiv@divisor+3,f,c
 13281  012B3C  0E01               	movlw	1
 13282  012B3E  6E16               	movwf	___aldiv@sign,c
 13283  012B40                     i2l4122:
 13284  012B40  AE10               	btfss	___aldiv@dividend+3,7,c
 13285  012B42  D00A               	goto	i2l4128
 13286  012B44  1E10               	comf	___aldiv@dividend+3,f,c
 13287  012B46  1E0F               	comf	___aldiv@dividend+2,f,c
 13288  012B48  1E0E               	comf	___aldiv@dividend+1,f,c
 13289  012B4A  6C0D               	negf	___aldiv@dividend,c
 13290  012B4C  0E00               	movlw	0
 13291  012B4E  220E               	addwfc	___aldiv@dividend+1,f,c
 13292  012B50  220F               	addwfc	___aldiv@dividend+2,f,c
 13293  012B52  2210               	addwfc	___aldiv@dividend+3,f,c
 13294  012B54  0E01               	movlw	1
 13295  012B56  1A16               	xorwf	___aldiv@sign,f,c
 13296  012B58                     i2l4128:
 13297  012B58  0E00               	movlw	0
 13298  012B5A  6E17               	movwf	___aldiv@quotient,c
 13299  012B5C  0E00               	movlw	0
 13300  012B5E  6E18               	movwf	___aldiv@quotient+1,c
 13301  012B60  0E00               	movlw	0
 13302  012B62  6E19               	movwf	___aldiv@quotient+2,c
 13303  012B64  0E00               	movlw	0
 13304  012B66  6E1A               	movwf	___aldiv@quotient+3,c
 13305  012B68  5011               	movf	___aldiv@divisor,w,c
 13306  012B6A  1012               	iorwf	___aldiv@divisor+1,w,c
 13307  012B6C  1013               	iorwf	___aldiv@divisor+2,w,c
 13308  012B6E  1014               	iorwf	___aldiv@divisor+3,w,c
 13309  012B70  B4D8               	btfsc	status,2,c
 13310  012B72  D02A               	goto	i2l4150
 13311  012B74  0E01               	movlw	1
 13312  012B76  6E15               	movwf	___aldiv@counter,c
 13313  012B78  D006               	goto	i2l4136
 13314  012B7A                     i2l4134:
 13315  012B7A  90D8               	bcf	status,0,c
 13316  012B7C  3611               	rlcf	___aldiv@divisor,f,c
 13317  012B7E  3612               	rlcf	___aldiv@divisor+1,f,c
 13318  012B80  3613               	rlcf	___aldiv@divisor+2,f,c
 13319  012B82  3614               	rlcf	___aldiv@divisor+3,f,c
 13320  012B84  2A15               	incf	___aldiv@counter,f,c
 13321  012B86                     i2l4136:
 13322  012B86  AE14               	btfss	___aldiv@divisor+3,7,c
 13323  012B88  D7F8               	goto	i2l4134
 13324  012B8A                     i2l4138:
 13325  012B8A  90D8               	bcf	status,0,c
 13326  012B8C  3617               	rlcf	___aldiv@quotient,f,c
 13327  012B8E  3618               	rlcf	___aldiv@quotient+1,f,c
 13328  012B90  3619               	rlcf	___aldiv@quotient+2,f,c
 13329  012B92  361A               	rlcf	___aldiv@quotient+3,f,c
 13330  012B94  5011               	movf	___aldiv@divisor,w,c
 13331  012B96  5C0D               	subwf	___aldiv@dividend,w,c
 13332  012B98  5012               	movf	___aldiv@divisor+1,w,c
 13333  012B9A  580E               	subwfb	___aldiv@dividend+1,w,c
 13334  012B9C  5013               	movf	___aldiv@divisor+2,w,c
 13335  012B9E  580F               	subwfb	___aldiv@dividend+2,w,c
 13336  012BA0  5014               	movf	___aldiv@divisor+3,w,c
 13337  012BA2  5810               	subwfb	___aldiv@dividend+3,w,c
 13338  012BA4  A0D8               	btfss	status,0,c
 13339  012BA6  D009               	goto	i2l4146
 13340  012BA8  5011               	movf	___aldiv@divisor,w,c
 13341  012BAA  5E0D               	subwf	___aldiv@dividend,f,c
 13342  012BAC  5012               	movf	___aldiv@divisor+1,w,c
 13343  012BAE  5A0E               	subwfb	___aldiv@dividend+1,f,c
 13344  012BB0  5013               	movf	___aldiv@divisor+2,w,c
 13345  012BB2  5A0F               	subwfb	___aldiv@dividend+2,f,c
 13346  012BB4  5014               	movf	___aldiv@divisor+3,w,c
 13347  012BB6  5A10               	subwfb	___aldiv@dividend+3,f,c
 13348  012BB8  8017               	bsf	___aldiv@quotient,0,c
 13349  012BBA                     i2l4146:
 13350  012BBA  90D8               	bcf	status,0,c
 13351  012BBC  3214               	rrcf	___aldiv@divisor+3,f,c
 13352  012BBE  3213               	rrcf	___aldiv@divisor+2,f,c
 13353  012BC0  3212               	rrcf	___aldiv@divisor+1,f,c
 13354  012BC2  3211               	rrcf	___aldiv@divisor,f,c
 13355  012BC4  2E15               	decfsz	___aldiv@counter,f,c
 13356  012BC6  D7E1               	goto	i2l4138
 13357  012BC8                     i2l4150:
 13358  012BC8  5016               	movf	___aldiv@sign,w,c
 13359  012BCA  B4D8               	btfsc	status,2,c
 13360  012BCC  D008               	goto	i2l4154
 13361  012BCE  1E1A               	comf	___aldiv@quotient+3,f,c
 13362  012BD0  1E19               	comf	___aldiv@quotient+2,f,c
 13363  012BD2  1E18               	comf	___aldiv@quotient+1,f,c
 13364  012BD4  6C17               	negf	___aldiv@quotient,c
 13365  012BD6  0E00               	movlw	0
 13366  012BD8  2218               	addwfc	___aldiv@quotient+1,f,c
 13367  012BDA  2219               	addwfc	___aldiv@quotient+2,f,c
 13368  012BDC  221A               	addwfc	___aldiv@quotient+3,f,c
 13369  012BDE                     i2l4154:
 13370  012BDE  C017  F00D         	movff	___aldiv@quotient,?___aldiv
 13371  012BE2  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
 13372  012BE6  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
 13373  012BEA  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
 13374  012BEE  0012               	return	
 13375  012BF0                     __end_of___aldiv:
 13376                           	opt stack 0
 13377                           pclatu	equ	0xFFB
 13378                           pclath	equ	0xFFA
 13379                           tblptru	equ	0xFF8
 13380                           tblptrh	equ	0xFF7
 13381                           tblptrl	equ	0xFF6
 13382                           tablat	equ	0xFF5
 13383                           prodh	equ	0xFF4
 13384                           prodl	equ	0xFF3
 13385                           intcon	equ	0xFF2
 13386                           postinc0	equ	0xFEE
 13387                           fsr0h	equ	0xFEA
 13388                           fsr0l	equ	0xFE9
 13389                           wreg	equ	0xFE8
 13390                           indf1	equ	0xFE7
 13391                           postdec1	equ	0xFE5
 13392                           fsr1h	equ	0xFE2
 13393                           fsr1l	equ	0xFE1
 13394                           indf2	equ	0xFDF
 13395                           postinc2	equ	0xFDE
 13396                           postdec2	equ	0xFDD
 13397                           fsr2h	equ	0xFDA
 13398                           fsr2l	equ	0xFD9
 13399                           status	equ	0xFD8
 13400                           pclatu	equ	0xFFB
 13401                           pclath	equ	0xFFA
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           postinc0	equ	0xFEE
 13410                           fsr0h	equ	0xFEA
 13411                           fsr0l	equ	0xFE9
 13412                           wreg	equ	0xFE8
 13413                           indf1	equ	0xFE7
 13414                           postdec1	equ	0xFE5
 13415                           fsr1h	equ	0xFE2
 13416                           fsr1l	equ	0xFE1
 13417                           indf2	equ	0xFDF
 13418                           postinc2	equ	0xFDE
 13419                           postdec2	equ	0xFDD
 13420                           fsr2h	equ	0xFDA
 13421                           fsr2l	equ	0xFD9
 13422                           status	equ	0xFD8
 13423                           
 13424                           	psect	rparam
 13425  0000                     pclatu	equ	0xFFB
 13426                           pclath	equ	0xFFA
 13427                           tblptru	equ	0xFF8
 13428                           tblptrh	equ	0xFF7
 13429                           tblptrl	equ	0xFF6
 13430                           tablat	equ	0xFF5
 13431                           prodh	equ	0xFF4
 13432                           prodl	equ	0xFF3
 13433                           intcon	equ	0xFF2
 13434                           postinc0	equ	0xFEE
 13435                           fsr0h	equ	0xFEA
 13436                           fsr0l	equ	0xFE9
 13437                           wreg	equ	0xFE8
 13438                           indf1	equ	0xFE7
 13439                           postdec1	equ	0xFE5
 13440                           fsr1h	equ	0xFE2
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           fsr2h	equ	0xFDA
 13446                           fsr2l	equ	0xFD9
 13447                           status	equ	0xFD8
 13448                           
 13449                           	psect	temp
 13450  00005F                     btemp:
 13451                           	opt stack 0
 13452  00005F                     	ds	1
 13453  0000                     int$flags	set	btemp
 13454                           pclatu	equ	0xFFB
 13455                           pclath	equ	0xFFA
 13456                           tblptru	equ	0xFF8
 13457                           tblptrh	equ	0xFF7
 13458                           tblptrl	equ	0xFF6
 13459                           tablat	equ	0xFF5
 13460                           prodh	equ	0xFF4
 13461                           prodl	equ	0xFF3
 13462                           intcon	equ	0xFF2
 13463                           postinc0	equ	0xFEE
 13464                           fsr0h	equ	0xFEA
 13465                           fsr0l	equ	0xFE9
 13466                           wreg	equ	0xFE8
 13467                           indf1	equ	0xFE7
 13468                           postdec1	equ	0xFE5
 13469                           fsr1h	equ	0xFE2
 13470                           fsr1l	equ	0xFE1
 13471                           indf2	equ	0xFDF
 13472                           postinc2	equ	0xFDE
 13473                           postdec2	equ	0xFDD
 13474                           fsr2h	equ	0xFDA
 13475                           fsr2l	equ	0xFD9
 13476                           status	equ	0xFD8


Data Sizes:
    Strings     161
    Constant    383
    Data        26
    BSS         996
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      94
    BANK0           160    121     158
    BANK1           256      0     150
    BANK2           256      0     200
    BANK3           256      0     200
    BANK4           256      0     200
    BANK5           256      0     200
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_7(CODE[27]), STR_6(CODE[34]), STR_5(CODE[43]), STR_4(CODE[24]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 200
		 -> lora_message(BANK4[200]), cap_step_message(BANK5[200]), cap_frequency_message(BANK3[200]), ind_frequency_message(BANK2[200]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sendUARTMessage@newMessagePointer	PTR unsigned char  size(2) Largest target is 200
		 -> lora_message(BANK4[200]), join_network(CODE[16]), set_app_key(CODE[50]), set_app_eui(CODE[34]), 
		 -> set_dev_eui(CODE[34]), cap_step_message(BANK5[200]), cap_frequency_message(BANK3[200]), ind_frequency_message(BANK2[200]), 

    currentMessagePointer	PTR unsigned char  size(2) Largest target is 200
		 -> NULL(NULL[0]), lora_message(BANK4[200]), join_network(CODE[16]), set_app_key(CODE[50]), 
		 -> set_app_eui(CODE[34]), set_dev_eui(CODE[34]), cap_step_message(BANK5[200]), cap_frequency_message(BANK3[200]), 
		 -> ind_frequency_message(BANK2[200]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_ISR in COMRAM

    _high_ISR->_frequency_interrupt
    _frequency_interrupt->___aldiv
    i2___lltoft->i2___lldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    _main->_sendSensorData
    _sendSensorData->_sprintf
    _make_step_message->_sprintf
    _make_frequency_message->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___llmod->___lldiv
    _initSPI->_pow
    _initLoRa->_sendUARTMessage
    _sendUARTMessage->_delay_ms
    _digipot->_adjustDigipot
    _adjustDigipot->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _high_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  381428
                        _UARTReceive
                           _delay_ms
                            _digipot
                            _initADC
                     _initInterrupts
                           _initLoRa
                            _initSPI
                          _initUART1
                     _init_frequency
             _make_frequency_message
                  _make_step_message
                     _sendSensorData
                    _sendUARTMessage
 ---------------------------------------------------------------------------------
 (1) _sendSensorData                                      12     0     12   57183
                                            109 BANK0     12     0     12
                           _delay_ms
                    _sendUARTMessage
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _make_step_message                                    0     0      0   54677
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _make_frequency_message                               0     0      0   54677
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             54    38     16   54677
                                             63 BANK0     46    30     16
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12793
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12595
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1704
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1836
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     826
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_frequency                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUART1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSPI                                              9     9      0  100197
                                            102 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                                _pow
                         _remappings
 ---------------------------------------------------------------------------------
 (2) _remappings                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLoRa                                             0     0      0    2162
                           _delay_ms
                    _sendUARTMessage
 ---------------------------------------------------------------------------------
 (1) _sendUARTMessage                                      2     0      2    1348
                                              5 BANK0      2     0      2
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     814
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _digipot                                              0     0      0  110348
                             ___ftge
                            ___ftmul
                           ___lltoft
                      _adjustDigipot
                           _unselect
 ---------------------------------------------------------------------------------
 (2) _unselect                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adjustDigipot                                        9     9      0  100197
                                            102 BANK0      9     9      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   81658
                                             85 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   27291
                                             69 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   42600
                                             76 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     376
                                             69 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    9325
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     480
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     700
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1288
                                             35 BANK0      9     3      6
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2389
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   13479
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2463
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6301
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4578
                                             57 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4153
                                             45 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     301
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3209
                                             57 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2598
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2562
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2209
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2187
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _UARTReceive                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_ISR                                            14    14      0    2007
                                             38 COMRAM    14    14      0
                _frequency_interrupt
              _temperature_interrupt
                   _timer1_interrupt
                     _uart_interrupt
 ---------------------------------------------------------------------------------
 (9) _uart_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _timer1_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _temperature_interrupt                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _frequency_interrupt                                 12    12      0    2007
                                             26 COMRAM    12    12      0
                            ___aldiv
                             ___lmul
                          i2___lldiv
                         i2___lltoft
 ---------------------------------------------------------------------------------
 (10) i2___lltoft                                          9     5      4     456
                                             13 COMRAM     9     5      4
                             ___lmul (ARG)
                         i2___ftpack
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     266
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (10) ___lmul                                             12     4      8     706
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (10) ___aldiv                                            14     6      8     556
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTReceive
   _delay_ms
   _digipot
     ___ftge
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___lltoft
       ___ftpack
     _adjustDigipot
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lbtoft
         ___ftpack
       _pow
         ___ftge
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _unselect
   _initADC
   _initInterrupts
   _initLoRa
     _delay_ms
     _sendUARTMessage
       _delay_ms
   _initSPI
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___lbtoft
       ___ftpack
     _pow
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _exp (ARG)
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftge
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _remappings
   _initUART1
   _init_frequency
   _make_frequency_message
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _make_step_message
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sendSensorData
     _delay_ms
     _sendUARTMessage
       _delay_ms
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _sendUARTMessage
     _delay_ms

 _high_ISR (ROOT)
   _frequency_interrupt
     ___aldiv
       ___lmul (ARG)
     ___lmul
     i2___lldiv
     i2___lltoft
       ___lmul (ARG)
       i2___ftpack (ARG)
       i2___lldiv (ARG)
   _temperature_interrupt
   _timer1_interrupt
   _uart_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      C8      16       78.1%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      C8      12       78.1%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      C8      10       78.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      96       8       58.6%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      5E       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B2       6        0.0%
DATA                 0      0     4B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Apr 20 15:42:25 2017

                    ___altoft@exp 00A1                     ___altoft@sign 00A2  
                    ___awdiv@sign 006B               ___wmul@multiplicand 0070  
                      i2___ftpack 2EE0                      ___ftadd@exp1 0098  
                    ___ftadd@exp2 0097                        i2___lltoft 35DC  
        _frequency_interrupt$2660 0023                      ___ftadd@sign 0096  
                             l311 36FC                               l162 38E6  
                             l168 342A                               l543 0704  
                             l482 2B1A                               l811 1D6C  
                             l571 0554                               l901 2290  
                             l843 282E                               l915 1BE4  
                             l940 37F6                               l908 1B20  
                             l909 1B64                               l870 14A4  
                             l872 14CC                               l881 15A2  
                             l890 15CC                               l866 146A  
                             l985 2E20                               l995 31F4  
          ?_temperature_interrupt 0001                               _exp 166A  
                             _log 1EDC                               _pow 18A4  
                    ___awmod@sign 0065                               wreg 000FE8  
                      _TXSTA1bits 000FAD                  _cap_step_message 0500  
           ??_frequency_interrupt 001B                      ___ftdiv@cntr 00A2  
                    ___ftdiv@sign 00A7                              l1070 18EC  
                            l1075 1A4A                              l1237 1750  
                            l3030 1478                              l3014 30FA  
                            l1238 1896                              l3104 1DF2  
                            l3016 310A                              l3200 23F8  
                            l1248 2952                              l3042 14C2  
                            l3122 1E5E                              l4002 0726  
                            l3060 1540                              l3052 1504  
                            l3036 14B2                              l3132 1E9C  
                            l3212 2E66                              l4020 07A2  
                            l3230 21B4                              l3070 1588  
                            l3062 154E                              l3118 1E40  
                            l4022 07A8                              l4006 0750  
                            l3072 1596                              l3064 155A  
                            l3128 1E7E                              l3320 29AE  
                            l3144 2C30                              l3312 28D0  
                            l3304 289E                              l3400 2D6C  
                            l4008 0756                              l3058 1532  
                            l3322 2A3A                              l3154 2CB4  
                            l3330 2554                              l3236 21EE  
                            l3148 2C70                              l3164 2300  
                            l3308 28B2                              l3420 2FCE  
                            l3412 2FAA                              l4060 0978  
                            l4044 0838                              l4036 07F4  
                            l3078 15F6                              l3182 2392  
                            l3350 25E8                              l3422 2FDA  
                            l4046 0848                              l4054 0954  
                            l4038 0806                              l4062 098E  
                            l3256 224E                              l3088 1644  
                            l3192 23C2                              l3512 1866  
                            l4080 2040                              l3424 2FE0  
                            l3432 3012                              l3416 2FBA  
                            l3600 0C14                              l4048 08D2  
                            l4056 0966                              l4064 09B0  
                            l3442 3328                              l3274 36B0  
                            l3098 1DB8                              l3194 23D2  
                            l3186 23A6                              l3354 25F8  
                            l3338 25BA                              l4090 205E  
                            l3444 3338                              l3196 23DC  
                            l3532 1900                              l3380 2D08  
                            l3436 3026                              l3428 3004  
                            l3612 0DB6                              l3604 0C40  
                            l3286 373A                              l3462 1F2E  
                            l3550 19C2                              l4086 2050  
                            l4318 2AC2                              l3518 36E6  
                            l3382 2D14                              l3374 2CEA  
                            l3456 1F00                              l3712 1CEA  
                            l3704 1C96                              l3392 2D4A  
                            l3384 2D1A                              l3368 2CD4  
                            l3490 171A                              l3546 199C  
                            l3538 1924                              l3634 1ACC  
                            l3618 0E88                              l4450 266C  
                            l3484 16D4                              l3724 1D22  
                            l3628 1A92                              l3396 2D58  
                            l3580 1136                              l3572 1046  
                            l3900 029C                              l3478 168E  
                            l3750 2DB4                              l3734 1D52  
                            l3910 0314                              l3760 2E0E  
                            l3752 2DBA                              l3736 1D62  
                            l3728 1D36                              l3664 1B9A  
                            l3920 0372                              l3840 003C  
                            l3832 0010                              l3770 3198  
                            l3690 1C42                              l3674 1BCA  
                            l3594 0B42                              l3906 02E6  
                            l3842 0042                              l3850 0056  
                            l2980 27E2                              l2972 2784  
                            l3828 3466                              l3748 2DA4  
                            l3772 319E                              l3684 1C1C  
                            l3676 1BDA                              l3668 1BAE  
                            l3924 03D8                              l3844 0048  
                            l3852 0096                              l2990 2838  
                            l2982 2812                              l2974 2792  
                            l3942 0456                              l3926 03DE  
                            l3846 004E                              l3838 0030  
                            l2984 2820                              l2976 27C2  
                            l2968 2770                              l3776 31E2  
                            l3768 3188                              l3960 0522  
                            l3944 045E                              l3952 04FA  
                            l3962 0536                              l3954 0508  
                            l3938 042A                              l3890 0212  
                            l3882 01A2                              l3866 00F0  
                            l2996 2854                              ?_exp 00AC  
                            ?_log 00A5                              l3990 06DC  
                            l3974 0588                              l3966 0558  
                            l3894 0240                              l3896 0256  
                            l3978 05DA                              l3898 0286  
                            l3996 06F6                              l3988 06CE  
                            ?_pow 00B5                              STR_1 FFEF  
                            STR_2 FFC2                              STR_3 FFFD  
                            STR_4 FFC6                              STR_5 FF5E  
                            STR_6 FF89                              STR_7 FFAB  
                            STR_8 FFDE                              u3000 1724  
                            u3010 1726                              u3100 197E  
                            u2241 1418                              u2251 1436  
                            u3211 1AA8                              u2451 1D94  
                            u3500 3450                              u2541 22DC  
                            u2630 2E98                              u3510 3488  
                            u2471 1DCE                              u3191 1A6E  
                            u2560 2326                              u2641 2190  
                            u3507 3446                              u2740 28C2  
                            u2661 21CA                              u2565 231C  
                            u3517 347E                              u2638 2E9C  
                            u4257 36EE                              u3730 054C  
                            u3570 0136                              u2780 2586  
                            u3575 012A                              u2788 258A  
           __end_of_adjustDigipot 217A           ?_make_frequency_message 0001  
                            _main 2648                      ___ftpack@arg 0060  
                    ___ftpack@exp 0063                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _step 00F2  
                            btemp 005F                              exp@x 00AC  
                            log@x 00A5                              pclat 000FFA  
                            pow@x 00B5                              pow@y 00B8  
                            prodh 000FF4                              prodl 000FF3  
                            start 008E                  ??_uart_interrupt 0001  
                    _sprintf$2670 00B5                      ___ftmul@cntr 0081  
                    ___param_bank 000010                      ___ftmul@sign 0082  
                    ___fttol@exp1 0098                      i2___lltoft@c 000E  
                           ??_exp 00AF                             ??_log 00A8  
                    ___fttol@lval 0094                  ?_sendUARTMessage 0065  
                           ??_pow 00BB                      _BAUDCON1bits 000F7E  
                 __end_of___aldiv 2BF0                             ?_main 0001  
                 __end_of___awdiv 2D76                             _ADRES 000FC3  
                 __end_of___ftadd 166A             __end_of_ambient_ascii FE97  
                 __end_of___awmod 3030                   __end_of___ftdiv 22C6  
                 __end_of___ftneg 3804                   __end_of___lldiv 2E32  
                 __end_of___ftmul 1EDC                   ___awdiv@divisor 0068  
                 __end_of___llmod 3206                   __end_of___ftsub 36DA  
                 __end_of___fttol 240A                             i2l263 320E  
                           i2l264 329A                             i2l265 3226  
                           i2l266 323E                             i2l267 3256  
                           i2l843 2F6E                   ___awdiv@counter 006A  
                           i2l985 330E                             _TMR1H 000FCF  
                           _TMR1L 000FCE                             _RPOR2 000EC2  
                           _RPOR5 000EC5        sendSensorData@ambient_temp 00D0  
             ___lmul@multiplicand 0005                      ___lltoft@exp 0070  
                 __end_of_digipot 2B24                   __end_of_initADC 3832  
                   ___awtoft@sign 006B                   __end_of_initSPI 2530  
                 __end_of_dpowers FE07                             _floor 2862  
                           _ldexp 2530                             _frexp 2E32  
                           _errno 00E8                             _scale 09BE  
  __end_of_make_frequency_message 3570                     ___ftpack@sign 0064  
                           _value 004F                             _timer 00EC  
        __end_of_send_data_part_1 FE9F                             _state 00F1  
                           tablat 000FF5                             pow@yi 00C2  
                           status 000FD8                   __end_of_sprintf 09BE  
                     exp@exponent 00B2                __size_ofi2___lldiv 0082  
                     ldexp@newexp 00A8                   __initialization 3030  
           __end_of_send_data_EOL FE9E                       log@exponent 00A8  
               i2___lldiv@divisor 0005                      __end_of_main 2756  
               i2___lldiv@counter 000D                       ?i2___ftpack 0001  
                     ?i2___lltoft 000E                            ??_main 00D9  
                   ___fttol@sign1 0093                    _sendSensorData 3570  
                   __activetblptr 000003              __size_of__tdiv_to_l_ 019E  
               _last_uart_message 0164          sendSensorData@inductance 00D6  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          ?_floor 00A3                            ?_ldexp 00A5  
                          ?_frexp 0060                  __end_of___altoft 316C  
               _make_step_message 3860                  ___llmod@dividend 006D  
                          ?_scale 0083                            _CCPR4H 000F14  
                          _CCPR4L 000F13                            _CCPR8H 000F08  
                          _EECON2 000FA7                            _CCPR8L 000F07  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 0066                  __end_of___awtoft 3762  
                __end_of___ftpack 2862                  __end_of___lbtoft 3860  
                __end_of___lltoft 339C                            i2l4110 365C  
                          i2l4122 2B40                            i2l4106 3648  
                          _IOLOCK 0075F8                            i2l4134 2B7A  
                          i2l4150 2BC8                    __CFG_WDTEN$OFF 000000  
                          i2l4136 2B86                            i2l4128 2B58  
                          i2l4154 2BDE                            i2l4146 2BBA  
                          i2l4138 2B8A                            i2l4164 32C0  
                          i2l4166 32CC                            i2l4182 35E2  
                          i2l2726 3270                            i2l4176 3300  
                          i2l4168 32D0                            i2l3800 2F64  
                          i2l4184 35EE                            i2l4358 12FE  
                          i2l3790 2F08                            i2l3792 2F26  
                          i2l3784 2EF0                            _INTCON 000FF2  
                          i2l3796 2F3C                            i2l3788 2EFE  
                          i2l3798 2F5A                ?_make_step_message 0001  
                          _RCREG1 000FAF                            _SPBRG1 000FB0  
                          _SSPBUF 000FC9                            _TXREG1 000FAE  
                    ?_UARTReceive 0001                  __end_of_delay_ms 371E  
             ??_make_step_message 00CD                    __CFG_XINST$OFF 000000  
                __end_of_high_ISR 008E              _temp_display_message 0182  
                _timer1_interrupt 38EA                  __end_of__powers_ FE55  
                    _CCPTMRS1bits 000F51                      _CCPTMRS2bits 000F50  
                          ___ftge 2BF0                            ___lmul 3638  
                       ??___aldiv 0015                            ___wmul 379E  
                       ??___awdiv 006A                         ??___ftadd 0093  
                       ??___awmod 0064                         ??___ftdiv 009F  
                       ??___ftneg 0063                         ??___lldiv 0068  
                       ??___ftmul 007A                         ??___llmod 0075  
                       ??___ftsub 009F                         ??___fttol 008E  
                __end_of_initLoRa 3416            __end_of_sendSensorData 35DC  
                          _fround 0EB4                            clear_0 3036  
                          clear_1 3042                            clear_2 304E  
                          clear_3 305A                            clear_4 3066  
                          clear_5 3072                            clear_6 307E  
                ___awdiv@quotient 006C                   ___awmod@divisor 0062  
                          _valueH 0051                            _valueL 0053  
                       ??_digipot 00CF                   ___awmod@counter 0064  
                          floor@i 00A6                            floor@x 00A3  
                       ??_initADC 0060             ___ftmul@f3_as_product 007E  
           __end_of_set_data_rate FE84                         ??_initSPI 00C6  
               __end_ofi2___lldiv 3320                      __mediumconst FDDE  
       __end_of_make_step_message 3886                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 00AF                  __end_of_unselect 390C  
                __end_ofexp@coeff FF33                  __end_oflog@coeff FF4E  
                      __accesstop 0060           __end_of__initialization 30C4  
                      ___altoft@c 0099             _cap_frequency_message 0300  
                      ___ftadd@f1 008D                        ___ftadd@f2 0090  
             __size_ofi2___ftpack 00AE                        ___ftge@ff1 0083  
                      ___ftge@ff2 0086               __size_ofi2___lltoft 005C  
                    eval_poly@res 00A2                     ___rparam_used 000001  
                      ___ftdiv@f1 0099                        ___ftdiv@f2 009C  
                      ___ftdiv@f3 00A3                        ___ftneg@f1 0060  
                      ___awtoft@c 0068                    i2___ftpack@arg 0001  
                  i2___ftpack@exp 0004                        ___lbtoft@c 006B  
                      ___ftmul@f1 0074                        ___ftmul@f2 0077  
                      ___ftsub@f1 0099                        ___ftsub@f2 009C  
                      ___fttol@f1 008A                    __pcstackCOMRAM 0001  
              i2___lldiv@dividend 0001                      __pidataBANK0 3902  
                    __pidataBANK1 38C2                        ___lltoft@c 0068  
         __size_of_initInterrupts 0008                     __end_of_floor 2960  
                   __end_of_ldexp 2648                     __end_of_frexp 2EE0  
                   __end_of_scale 0EB4           ??_temperature_interrupt 0001  
                 ?_sendSensorData 00CD                        __div_to_l_ 1BF6  
                 __div_to_l_@exp1 006B                           ??_floor 00A6  
                         ??_ldexp 00AA                   __div_to_l_@cntr 006A  
                         ??_frexp 0065                           ??_scale 0086  
                  i2___lltoft@exp 0016                   __div_to_l_@quot 0066  
              i2___lldiv@quotient 0009                        __pbssBANK0 00D9  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                      __pbssBANK3 0300                        __pbssBANK4 0400  
                      __pbssBANK5 0500                __size_of_initUART1 001C  
              __size_of_eval_poly 00F4                        __pnvCOMRAM 005D  
                   __div_to_l_@f1 0060                     __div_to_l_@f2 0063  
           __end_of_getVerCommand FE92                        _bigorsmall 00F0  
                         ?___ftge 0083                           ?___lmul 0001  
                         ?___wmul 006E                           _CCP4CON 000F12  
                         _CCP8CON 000F06                         ?___altoft 0099  
                         ?_fround 0083                    ___lmul@product 0009  
                       ?___awtoft 0068                         ?___ftpack 0060  
                       ?___lbtoft 0068                         ?___lltoft 0068  
     __end_of_frequency_interrupt 1402                __CFG_OSC$INTOSCPLL 000000  
      __size_of_make_step_message 0026                         ?_delay_ms 0060  
                         _SPBRGH1 000F7F                           _RPINR21 000EFC  
                       ?_high_ISR 0001                  __CFG_CFGPLLEN$ON 000000  
                       ?_initLoRa 0001              UARTReceive@on_or_off 0060  
               __end_of_delimiter FE9D                 __end_of__npowers_ FE2E  
                         __Hparam 0000                        _scale$2669 0086  
                         __Lparam 0000              __size_of_UARTReceive 0014  
                         ___aldiv 2B24                   __size_of___ftge 00C8  
                         ___awdiv 2CB8                   __size_of___lmul 0056  
                         ___ftadd 1402                           ___awmod 2F8E  
                         ___ftdiv 217A                           ___ftneg 37D4  
                         ___lldiv 2D76                   __size_of___wmul 0036  
                         ___ftmul 1D7E                           ___llmod 316C  
                         ___ftsub 368E                           ___fttol 22C6  
                      ??___altoft 009D                         ?_unselect 0001  
                         __pcinit 3030                      ??i2___ftpack 0006  
                      ??___awtoft 006B                        ??___ftpack 0065  
                      ??___lbtoft 006B                 __end_of_initUART1 38C2  
               __end_of_eval_poly 2A54                   __size_of_fround 02D0  
                         __ramtop 0F00                      ??i2___lltoft 0012  
                         _digipot 2A54                        ??___lltoft 006C  
                         __ptext0 2648                           __ptext1 3570  
                         __ptext2 3860                           __ptext3 3502  
                         __ptext4 0000                           __ptext5 09BE  
                         __ptext6 0EB4                           __ptext7 2F8E  
                         __ptext8 2CB8                           __ptext9 1A58  
          __size_of_adjustDigipot 014E           __size_of_init_frequency 0072  
                         _initADC 3804                 __end_of_hexpowers FE75  
                       _T1CONbits 000FCD                       ?__div_to_l_ 0060  
                         _initSPI 240A                           _dpowers FDDF  
                    __size_of_exp 023A                      __size_of_log 0150  
                    __size_of_pow 01B4                  ___awmod@dividend 0060  
                         _percent 00E5                  ___aldiv@dividend 000D  
        __size_of_sendUARTMessage 007A                        ??_delay_ms 0062  
        __end_of_timer1_interrupt 38FA                        ??_high_ISR 0027  
                         _sprintf 0000                        delay_ms@ms 0060  
            end_of_initialization 30C4                           exp@sign 00B4  
                      _minus_pipe 0045                        _pipe_ascii FE97  
                      ??_initLoRa 0067                        _remappings 3886  
            __end_of_join_network FF5E                __end_ofi2___ftpack 2F8E  
              __end_ofi2___lltoft 3638                   ___lldiv@divisor 0064  
                         pow@sign 00C1                   ___lldiv@counter 006C  
                ___aldiv@quotient 0017                           postdec1 000FE5  
                         postdec2 000FDD                    _initInterrupts 38FA  
                         postinc0 000FEE                           postinc2 000FDE  
                  __tdiv_to_l_@f1 0060                    __tdiv_to_l_@f2 0063  
                      ??_unselect 0060                     ??__tdiv_to_l_ 0066  
       _uart_receive_buffer_index 00EE           __size_of_uart_interrupt 003C  
                       _PORTAbits 000F80                         _PORTBbits 000F81  
                __CFG_CPUDIV$OSC1 000000                         _TRISAbits 000F92  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
                       i2___lldiv 329E                     _adjustDigipot 202C  
                     ___ftdiv@exp 00A6                   i2___ftpack@sign 0005  
             __size_of__div_to_l_ 0188            __end_of_initInterrupts 3902  
                ??_sendSensorData 00D9                       ___ftmul@exp 007D  
                  __end_of___ftge 2CB8                    __end_of___lmul 368E  
                  __end_of___wmul 37D4                      _initSPI$2661 00C6  
                    _initSPI$2662 00C9                      _initSPI$2663 00CC  
  __size_of_temperature_interrupt 0098     __end_of_temperature_interrupt 329E  
                  __end_of_fround 1184                     _minus_ambient 0043  
                      floor@expon 00A9                _adjustDigipot$2664 00C6  
              _adjustDigipot$2665 00C9                _adjustDigipot$2666 00CC  
                   _ambient_ascii FE92          ??_make_frequency_message 00CD  
             start_initialization 3030                        eval_poly@d 009C  
                      eval_poly@n 009E                        eval_poly@x 0099  
                      ldexp@value 00A5               __end_of__tdiv_to_l_ 1BF6  
                     __end_of_exp 18A4                       __end_of_log 202C  
                     __end_of_pow 1A58                        ?i2___lldiv 0001  
sendUARTMessage@newMessagePointer 0065                 ??_sendUARTMessage 0067  
                  ?_adjustDigipot 0001                       ?_remappings 0001  
                      frexp@value 0060                   ___llmod@divisor 0071  
                 ___llmod@counter 0075                    _currentChannel 0039  
                 ?_initInterrupts 0001                          ??___ftge 0089  
                        ??___lmul 0009                     _send_data_EOL FE9D  
                        ??___wmul 0072           sendSensorData@pipe_temp 00D3  
                     __pdataBANK0 00F3                       __pdataBANK1 0182  
                        ??_fround 0086                  _nominalfrequency 00F9  
                  _init_frequency 3490                     sprintf@tmpval 00C5  
               __size_of___altoft 009E                        fround@prec 008C  
               __size_of___awtoft 0044                 __size_of___ftpack 010C  
               __size_of___lbtoft 002E                 __size_of___lltoft 007C  
                     __pbssCOMRAM 0035                     __pcstackBANK0 0060  
               __size_of_delay_ms 0044                 __size_of_high_ISR 0086  
                     sprintf@flag 00BB                       sprintf@fval 00C9  
                     sprintf@prec 00BD                         _cap_value 0055  
                       __pnvBANK0 00F9                 __size_of_initLoRa 007A  
                       _delimiter FE9C                         __pintcode 0008  
                       _asciiTemp 00F3                     __pmediumconst FDDE  
                        ?___aldiv 000D                          ?___awdiv 0066  
                        ?___ftadd 008D                          ?___awmod 0060  
                        ?___ftdiv 0099                          ?___ftneg 0060  
                        ?___lldiv 0060                          ?___ftmul 0074  
                        ?___llmod 006D                          ?___ftsub 0099  
                       __npowers_ FE07                          ?___fttol 008A  
          __end_of_init_frequency 3502                    _uart_interrupt 3762  
                        ?_digipot 0001                       __tdiv_to_l_ 1A58  
                    _join_network FF4E               __size_of_remappings 0020  
                        ?_initADC 0001                      ??__div_to_l_ 0066  
               __size_of_unselect 0004                          ?_initSPI 0001  
                       _ind_freq2 00E2                     _set_data_rate FE75  
                       _initUART1 38A6                         _eval_poly 2960  
 __size_of_make_frequency_message 006E                         _ind_value 0059  
                       _frequency 00DC                         _hexpowers FE55  
               ?_timer1_interrupt 0001                         _inductive 00EA  
    __size_of_frequency_interrupt 027E                          ?_sprintf 009F  
                  __size_of_floor 00FE                   ??_adjustDigipot 00C6  
                  __size_of_ldexp 0118                    __size_of_frexp 00AE  
                     ??i2___lldiv 0009                    __size_of_scale 04F6  
              ??_timer1_interrupt 0001                   ___aldiv@divisor 0011  
                 ___aldiv@counter 0015                    ___wmul@product 0072  
                   ??_UARTReceive 0060                         delay_ms@i 0063  
       sendSensorData@capacitance 00CD                          _PIE1bits 000F9D  
                        _PIE4bits 000F8E             _currentMessagePointer 00FC  
                        i2u409_40 3792                          _PIR1bits 000F9E  
              __end_of__div_to_l_ 1D7E                          _PIR4bits 000F8F  
                        _RCONbits 000FD0                         _temp_pipe 004D  
                        _SSP2CON1 000F72            __end_of_uart_interrupt 379E  
                        _SSP2STAT 000F73                   ?_init_frequency 0001  
                       _plus_pipe 0049                        _ADCON0bits 000FC2  
               ___wmul@multiplier 006E                        ?_initUART1 0001  
                      ?_eval_poly 0099               _uart_receive_buffer 0100  
                    _lora_message 0400                 ___lmul@multiplier 0001  
                       copy_data0 3098                         copy_data1 30B8  
             _interrupt_count_cap 003F               _interrupt_count_ind 0041  
                       frexp@eptr 0063            _make_frequency_message 3502  
                        __Hrparam 0000                          __Lrparam 0000  
                   _getVerCommand FE84               __end_of_UARTReceive 38EA  
                 ?_uart_interrupt 0001               __end_of_set_dev_eui FF15  
             __end_of_set_app_eui FEF3                  __size_of___aldiv 00CC  
             __end_of_set_app_key FED1                  __size_of___awdiv 00BE  
                __size_of___ftadd 0268                  __size_of___awmod 00A2  
                __size_of___ftdiv 014C                  __size_of___ftneg 0030  
                __size_of___lldiv 00BC                          ___altoft 30CE  
                __size_of___ftmul 015E                  __size_of___llmod 009A  
                __size_of___ftsub 004C                  __size_of___fttol 0144  
     _last_received_message_index 005D                          ___awtoft 371E  
                        ___ftpack 2756                          ___lbtoft 3832  
                     _fround$2667 0089                       _fround$2668 0086  
                        ___lltoft 3320                  __size_of_digipot 00D0  
                 _sendUARTMessage 3416               _cap_measurement_old 0037  
             _cap_measurement_new 0035                          _exp$2673 00AF  
                      sprintf@idx 00B8                          _cap_freq 00D9  
                      sprintf@exp 00C3                        sprintf@val 00BF  
                __size_of_initADC 002E                  __size_of_initSPI 0126  
                        _delay_ms 36DA                          __ptext10 1BF6  
                        __ptext11 316C                          __ptext20 38FA  
                        __ptext12 2D76                          __ptext21 3804  
                        __ptext13 3490                          __ptext30 2E32  
                        __ptext22 2A54                          __ptext14 38A6  
                        __ptext31 22C6                          __ptext23 3908  
                        __ptext15 240A                          __ptext40 217A  
                        __ptext32 2BF0                          __ptext24 202C  
                        __ptext16 3886                          __ptext41 371E  
                        __ptext33 30CE                          __ptext25 18A4  
                        __ptext17 339C                          __ptext50 1184  
                        __ptext42 3320                          __ptext34 2960  
                        __ptext26 1EDC                          __ptext18 3416  
                        __ptext51 35DC                          __ptext43 3832  
                        __ptext35 379E                          __ptext27 166A  
                        __ptext19 36DA                          __ptext52 2EE0  
                        __ptext44 2756                          __ptext36 1D7E  
                        __ptext28 2530                          __ptext53 329E  
                        __ptext45 38D6                          __ptext37 368E  
                        __ptext29 2862                          __ptext54 3638  
                        __ptext38 1402                          __ptext55 2B24  
                        __ptext47 3762                          __ptext39 37D4  
                        __ptext48 38EA                          __ptext49 3206  
                        _high_ISR 0008                          __powers_ FE2E  
                        _pow$2671 00BB                          _pow$2672 00BE  
                __size_of_sprintf 09BE                     _isCommandSent 00F8  
                        _ind_freq 00DF                      ??_remappings 0060  
                ??_initInterrupts 0060                          _initLoRa 339C  
                   __size_of_main 010E                          int$flags 005F  
                _send_data_part_1 FE9E                      _temp_ambient 004B  
                        _unselect 3908                      _SSP2STATbits 000F73  
                        exp@coeff FF15                          log@coeff FF33  
              __end_of_pipe_ascii FE9C                __end_of_remappings 38A6  
                      _INTCONbits 000FF2                       ??_initUART1 0060  
                     ??_eval_poly 00A0             _temperature_interrupt 3206  
                        scale@scl 0089                          intlevel2 0000  
                       sprintf@ap 00B9                  __tdiv_to_l_@exp1 006E  
                       sprintf@sp 009F                  __tdiv_to_l_@cntr 006D  
                __tdiv_to_l_@quot 0069                  ___lldiv@dividend 0060  
                     _UARTReceive 38D6             _ind_frequency_message 0200  
                      _RCSTA1bits 000FAC                       _set_dev_eui FEF3  
                     _set_app_eui FED1                       _set_app_key FE9F  
                      _OSCCONbits 000FD3               _frequency_interrupt 1184  
         __end_of_sendUARTMessage 3490                      _plus_ambient 0047  
                    ?__tdiv_to_l_ 0060                          sprintf@c 00CC  
                        sprintf@f 00A1           __size_of_sendSensorData 006C  
                ___lldiv@quotient 0068                      ___aldiv@sign 0016  
            ?_frequency_interrupt 0001               _ind_measurement_old 003D  
             _ind_measurement_new 003B                  ??_init_frequency 0060  
       __size_of_timer1_interrupt 0010  
